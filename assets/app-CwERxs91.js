const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index.html-NQ1eqPJJ.js","assets/plugin-vue_export-helper-DlAUqK2U.js","assets/home.html-CLuheNeG.js","assets/intro.html-BubuvfY1.js","assets/书签.html-C4cjeq3e.js","assets/BEM.html-u_mSRmbL.js","assets/index.html-9Mp9e-H7.js","assets/index.html-Bjk3essF.js","assets/混合开发.html-BFjwwoCV.js","assets/index.html-B2DBsesj.js","assets/index.html-zevKZMqf.js","assets/git_head.html-BJIOvBDD.js","assets/git命令.html-Bi-8eboB.js","assets/git基础.html-DUnecYzt.js","assets/git对象.html-CN93F-2S.js","assets/git忽略提交.html-B0awCdzG.js","assets/git技巧.html--sVLMnBc.js","assets/git相关问题.html-_Ktpoazn.js","assets/index.html-DbiWdZjH.js","assets/加密.html-BjSHnKzP.js","assets/index.html-CUTqn1rY.js","assets/VSCode插件.html-pN_94HkM.js","assets/whistle.html-DyLFhud0.js","assets/index.html-CQwC1zMs.js","assets/index.html-BjxVvwwc.js","assets/移动端基本概念.html-m6QQmb34.js","assets/移动端常见问题.html-B6uY3DME.js","assets/移动端适配.html-CL7vlciH.js","assets/index.html-IpJoW6YF.js","assets/index.html-BuFFKYRd.js","assets/基础知识.html-CtIA21zh.js","assets/index.html-yb-k-k-L.js","assets/TypeScriptTips.html-K0EPpm1M.js","assets/TypeScript其他类型.html-NYPyj_zF.js","assets/TypeScript基础类型.html-1-WZKy19.js","assets/TypeScript声明文件.html-D2aAU_Xj.js","assets/TypeScript实现Promise.html-CjWdW1dG.js","assets/TypeScript实现Vuex.html-BZJy55zV.js","assets/TypeScript控制反转和依赖注入.html-DMojjpB_.js","assets/TypeScript装饰器.html-eT_djUi-.js","assets/demo.html-unKNXRTE.js","assets/tsconfig配置.html-DrPwrRIr.js","assets/01.编程语言通识.html-u_9tR3ZP.js","assets/02.JavaScript词法和类型.html-BWlDmHe7.js","assets/03.表达式和类型转换.html-BztLZp21.js","assets/04.语句和对象.html-CmsWcNdv.js","assets/H5直播点赞动画.html-SYGq2288.js","assets/index.html-COWgCKMB.js","assets/index.html-D25ipRSI.js","assets/index.html-xyYpov0T.js","assets/index.html-BOTuxgDF.js","assets/Q_A.html-DTYLywYL.js","assets/index.html-D2BJHliY.js","assets/index.html-BWSkIni8.js","assets/编程规范.html-CSI_zKQu.js","assets/脚手架.html-aFMNuQZw.js","assets/基础知识.html-CgeDtXaV.js","assets/index.html-MjP9BbPw.js","assets/SQL基础.html-9YY8EnCy.js","assets/index.html-C_yJ_Qqq.js","assets/基础知识.html-7sJDoEmf.js","assets/index.html-DhYXO6vs.js","assets/index.html-Ct1Fl-cT.js","assets/index.html-DGuAF6kE.js","assets/基础模块实现.html-BuV_sE8y.js","assets/index.html-Bb8kXMks.js","assets/index.html-BhA0DqeS.js","assets/BFC.html-CKvCEUyf.js","assets/CSS动画.html-Bw6gLB6K.js","assets/CSS选择器与权重.html-DqIOf1Hm.js","assets/background.html-K0Ls5K-y.js","assets/css-shapes.html-DcEcFyi9.js","assets/float.html-C6oVGd4m.js","assets/font.html-UQ1pM3Mc.js","assets/line-height-and-vertical-align.html-CrSJpTHy.js","assets/position.html-DRv_34xv.js","assets/scroll-bar.html-1gIvfUCg.js","assets/stacking.html-Cz1oUEsd.js","assets/text.html-CtVVXjot.js","assets/元素的显隐.html-Dsyihcbu.js","assets/媒体查询与容器查询.html-DP9I97IG.js","assets/流与元素.html-DE6-Unz8.js","assets/盒模型.html-CwcXufgN.js","assets/Flex布局.html-BXtkBuxY.js","assets/Grid布局.html-DPsCrP-o.js","assets/StickyFooter.html-BoA55UOi.js","assets/全屏布局.html-DfZJJzBm.js","assets/多列布局.html-BN7j_pzN.js","assets/栅格布局.html-B93NshfV.js","assets/水平垂直居中.html-BJUevNNL.js","assets/自适应布局.html-BHhhJzc2.js","assets/页面等比适配.html-DYrRHd_s.js","assets/CSS实现长宽比.html-BFPnzRiT.js","assets/CSS常用封装.html-CrTxwIJG.js","assets/URL.html-D7Y3cfFY.js","assets/file.html-DVhqMK6X.js","assets/navigator.html-oFCdPVvv.js","assets/storage.html-BOWotW8j.js","assets/window.html-De-68bzN.js","assets/canvas优化.html-DqlMdYHP.js","assets/canvas使用图像.html-C6gOJJbk.js","assets/canvas像素操作.html-CCU_-8Eh.js","assets/canvas变形.html-BTYazZdF.js","assets/canvas合成与裁剪.html-8SkKD9Ju.js","assets/canvas基本动画.html-CEPXGamw.js","assets/canvas基础.html--AzkTYIm.js","assets/canvas添加样式.html-CcPX-tno.js","assets/canvas绘制形状.html-DZkDvfBI.js","assets/canvas绘制文本.html-CYTQAwRc.js","assets/MutationObserver.html-2ZmgWAXt.js","assets/WebComponents.html-BFHr_seI.js","assets/css.html-DNaqGSRy.js","assets/document.html-Di9nCSXX.js","assets/element.html-BQqXWhyA.js","assets/event.html-DMlSFkyz.js","assets/node.html-DTe_Vdad.js","assets/other.html-DxaXlJsW.js","assets/svgSMIL动画.html-1reKwPIQ.js","assets/svg动画.html-CfjKS-pS.js","assets/svg基础.html-B3E5p_oI.js","assets/基于anime.js的svg动画.html-Q0Mllg31.js","assets/API.html-DtLpyD_a.js","assets/ArrayBuffer.html-D0YZ1Z6e.js","assets/Class.html-DR61xmns.js","assets/EventLoop.html-NHXrDqIR.js","assets/Generator.html-iw7g_fGQ.js","assets/JSON.html-Cc9bT5Cv.js","assets/Math和Date.html-CMWkS-nC.js","assets/Promise.html-n-gOkxGj.js","assets/Reflect.html-Dt77tAnx.js","assets/RegExp.html-DB-KNXCB.js","assets/Set和Map.html-CGZjXBER.js","assets/async.html-BLYyhHH5.js","assets/作用域与闭包.html-BNjVdJnJ.js","assets/函数.html-Cwp7DmyT.js","assets/原型与继承.html-CiEYoTPw.js","assets/基础类型.html-DV6BMsM_.js","assets/对象.html-CrkAVF4Z.js","assets/异步.html-DenvprgP.js","assets/数组.html-DB_uz-DR.js","assets/类型概述.html-DMSl10OM.js","assets/网络请求.html-CbK7ygGZ.js","assets/工具函数.html-BVJZ1Ipl.js","assets/手写代码.html-DuSqBD01.js","assets/网页截屏.html-qtZkeC9m.js","assets/index.html-BfWg7tMP.js","assets/SOLID.html-Df2vICSF.js","assets/创建型设计模式.html-BjESa62p.js","assets/结构型设计模式.html-DNSRxqPF.js","assets/行为型设计模式.html-CrJT2fNj.js","assets/基础知识.html-zakP0o3P.js","assets/其他优化.html-DnrEOWye.js","assets/处理海量数据.html-UFwoEF-u.js","assets/渲染控制.html-CsOpa-uq.js","assets/渲染调优.html-DOzNTCBH.js","assets/Context.html-Hsnug2u0.js","assets/Fiber.html-D5R-QQpm.js","assets/Hooks.html-0cuRxacs.js","assets/React位运算.html-CYd5h5Yu.js","assets/Reconciler.html-1tCZmXDS.js","assets/Scheduler.html-uzoMN8kv.js","assets/事件系统.html-CtTBkDhr.js","assets/Context.html-CKxRUvPi.js","assets/JSX.html-B8LgvPFH.js","assets/LifeCycle.html-DUxnerJz.js","assets/Props.html-t7Uq9ncp.js","assets/React组件.html-C81wRRzv.js","assets/Ref.html-B0rdtjC3.js","assets/State.html-8OAjWhn3.js","assets/Transition.html-Cy1cTLb8.js","assets/useSyncExternalStore.html-BzGcndrW.js","assets/基础知识.html-CcnnrjfZ.js","assets/模块化CSS.html-DBYiYc5G.js","assets/自定义Hooks.html-Bmwe7RmU.js","assets/高阶组件.html-B2MPSyXw.js","assets/react-redux.html-CKHYuCQZ.js","assets/react-router.html-DVwXp0nc.js","assets/Vue2基础.html-DSwl1IZe.js","assets/Vue2实现原理.html-BCdtpTgc.js","assets/vue_updateChildren-DM1Hn2k6.js","assets/Vue2实用技巧.html-iej9C3Bn.js","assets/Vue2相关组件实现.html-CqK3c1jo.js","assets/Vue2组件通信方式.html-AeqEeisD.js","assets/vuex-BKGUIWBI.js","assets/VueRouter.html-z-ZMwlHl.js","assets/Vuex.html-ConmXZ4C.js","assets/vue-router.html-CbEK0jXQ.js","assets/vue-vuex.html-D_nLBUjK.js","assets/响应式.html-DoOh2LJe.js","assets/数据驱动.html-CT7o8lRz.js","assets/组件化.html-BUzBgiE7.js","assets/编译.html-oh9yc1B-.js","assets/Vue3CompositionAPI.html-BjNrgiSF.js","assets/响应式API.html-8hjoReG1.js","assets/Webpack优化.html-Dg8jjVC5.js","assets/Webpack原理.html-CpEh5FOJ.js","assets/CSS模块化.html--Gb5UMFt.js","assets/JS模块化.html-CIk9MOzp.js","assets/babel.html-BKMXU1Pe.js","assets/devServer.html-BqATRkyL.js","assets/loaders.html-BnfsUQUv.js","assets/plugins.html-B176EO_w.js","assets/多页面配置.html-BC010HQo.js","assets/核心概念.html-CObl80qq.js","assets/编写loader.html-BEIun2r_.js","assets/编写plugin.html--un9DtuY.js","assets/EMP.html-BFAP3LCU.js","assets/Garfish.html-CW69Vu5S.js","assets/MicroApp.html-CrYP4aEK.js","assets/qiankun.html-wwCp3Tu6.js","assets/single-spa.html-t2NE6tI2.js","assets/event.html-XKd_-Ala.js","assets/keep-alive.html-BjELSzy_.js","assets/slot.html-DewQAF6V.js","assets/transition.html-BgOgRUDZ.js","assets/v-model.html-CwhEfPMZ.js","assets/404.html-CMj8Np2y.js","assets/index.html-BoIzkSHY.js","assets/index.html-eJssOyYZ.js","assets/index.html-DvmMxyv7.js","assets/index.html-C6NBbRVi.js","assets/index.html-B3q6l8TA.js","assets/index.html-CTJWshz2.js","assets/index.html-CSFK9p9J.js","assets/index.html-DpA6v5wx.js","assets/index.html-DS-IqyO0.js","assets/index.html-Ch_xruj9.js","assets/index.html-DDbSy0z6.js","assets/index.html-B5SA-88L.js","assets/index.html-C_svHmlI.js","assets/index.html-DFuJ0_ne.js","assets/index.html-B4O9eUOe.js","assets/index.html-DO2IpFxg.js","assets/index.html-C8cRoyc_.js","assets/index.html-CB-2fyyj.js","assets/index.html-g8juHi0c.js","assets/index.html-5rU878bl.js","assets/index.html-ByJQA2eO.js","assets/index.html-DRwPPAMT.js","assets/index.html-BM2PwHVX.js","assets/index.html-28asP6e1.js","assets/index.html-CYQyW7lT.js","assets/index.html-vZgv2SqR.js","assets/index.html-CgprNCUR.js","assets/index.html-D2JzdnAg.js","assets/index.html-Xy2om61z.js","assets/index.html-Bug49Gkb.js","assets/index.html-DBA2X0cu.js","assets/index.html-BJ-BU5dr.js","assets/index.html-CXFaSAQ5.js","assets/index.html-D6j1iQdU.js","assets/index.html-BqCzRb7A.js","assets/index.html-F5jnvKLt.js","assets/index.html-BM5U_FCl.js","assets/index.html-BgoLIOt7.js","assets/index.html-C2EKPCib.js","assets/index.html-DfPqWlb9.js","assets/index.html-BQT-qKGm.js","assets/index.html-Dw_V5fzM.js","assets/index.html-Db0AWRW2.js","assets/index.html-C_DPkMyf.js","assets/index.html-_0vysNCD.js","assets/index.html-_iXTTDLs.js","assets/index.html-C05D0bgk.js","assets/index.html-Gbz6QlpR.js","assets/index.html-DfvrODur.js","assets/index.html-DbCrp8HA.js","assets/index.html-DakgtBWE.js","assets/index.html-C2YzHygn.js","assets/vue-repl-Cn0nh1uY.js","assets/utils-BJf_b1Uq-C3qxFlwU.js","assets/codemirror-editor-DYWzM_4b.js"])))=>i.map(i=>d[i]);
var Bc=Object.defineProperty;var yc=(i,s,a)=>s in i?Bc(i,s,{enumerable:!0,configurable:!0,writable:!0,value:a}):i[s]=a;var ph=(i,s,a)=>yc(i,typeof s!="symbol"?s+"":s,a);/**
* @vue/shared v3.5.17
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**//*! #__NO_SIDE_EFFECTS__ */function rl(i){const s=Object.create(null);for(const a of i.split(","))s[a]=1;return a=>a in s}const Ai={},za=[],Is=()=>{},uc=()=>!1,Mn=i=>i.charCodeAt(0)===111&&i.charCodeAt(1)===110&&(i.charCodeAt(2)>122||i.charCodeAt(2)<97),dl=i=>i.startsWith("onUpdate:"),Oi=Object.assign,cl=(i,s)=>{const a=i.indexOf(s);a>-1&&i.splice(a,1)},vc=Object.prototype.hasOwnProperty,yi=(i,s)=>vc.call(i,s),si=Array.isArray,Ja=i=>Te(i)==="[object Map]",Vk=i=>Te(i)==="[object Set]",ei=i=>typeof i=="function",Ri=i=>typeof i=="string",Xs=i=>typeof i=="symbol",Di=i=>i!==null&&typeof i=="object",jk=i=>(Di(i)||ei(i))&&ei(i.then)&&ei(i.catch),Nk=Object.prototype.toString,Te=i=>Nk.call(i),Ec=i=>Te(i).slice(8,-1),$k=i=>Te(i)==="[object Object]",ol=i=>Ri(i)&&i!=="NaN"&&i[0]!=="-"&&""+parseInt(i,10)===i,Ga=rl(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Re=i=>{const s=Object.create(null);return a=>s[a]||(s[a]=i(a))},mc=/-(\w)/g,is=Re(i=>i.replace(mc,(s,a)=>a?a.toUpperCase():"")),Fc=/\B([A-Z])/g,Qs=Re(i=>i.replace(Fc,"-$1").toLowerCase()),Vn=Re(i=>i.charAt(0).toUpperCase()+i.slice(1)),st=Re(i=>i?`on${Vn(i)}`:""),as=(i,s)=>!Object.is(i,s),oe=(i,...s)=>{for(let a=0;a<i.length;a++)i[a](...s)},Tt=(i,s,a,n=!1)=>{Object.defineProperty(i,s,{configurable:!0,enumerable:!1,writable:n,value:a})},Rt=i=>{const s=parseFloat(i);return isNaN(s)?i:s},fc=i=>{const s=Ri(i)?Number(i):NaN;return isNaN(s)?i:s};let rh;const Le=()=>rh||(rh=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function Al(i){if(si(i)){const s={};for(let a=0;a<i.length;a++){const n=i[a],e=Ri(n)?_c(n):Al(n);if(e)for(const t in e)s[t]=e[t]}return s}else if(Ri(i)||Di(i))return i}const Cc=/;(?![^(]*\))/g,bc=/:([^]+)/,Dc=/\/\*[^]*?\*\//g;function _c(i){const s={};return i.replace(Dc,"").split(Cc).forEach(a=>{if(a){const n=a.split(bc);n.length>1&&(s[n[0].trim()]=n[1].trim())}}),s}function gl(i){let s="";if(Ri(i))s=i;else if(si(i))for(let a=0;a<i.length;a++){const n=gl(i[a]);n&&(s+=n+" ")}else if(Di(i))for(const a in i)i[a]&&(s+=a+" ");return s.trim()}const Sc="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",xc=rl(Sc);function Hk(i){return!!i||i===""}const Wk=i=>!!(i&&i.__v_isRef===!0),wc=i=>Ri(i)?i:i==null?"":si(i)||Di(i)&&(i.toString===Nk||!ei(i.toString))?Wk(i)?wc(i.value):JSON.stringify(i,Uk,2):String(i),Uk=(i,s)=>Wk(s)?Uk(i,s.value):Ja(s)?{[`Map(${s.size})`]:[...s.entries()].reduce((a,[n,e],t)=>(a[at(n,t)+" =>"]=e,a),{})}:Vk(s)?{[`Set(${s.size})`]:[...s.values()].map(a=>at(a))}:Xs(s)?at(s):Di(s)&&!si(s)&&!$k(s)?String(s):s,at=(i,s="")=>{var a;return Xs(i)?`Symbol(${(a=i.description)!=null?a:s})`:i};/**
* @vue/reactivity v3.5.17
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let Ji;class Tc{constructor(s=!1){this.detached=s,this._active=!0,this._on=0,this.effects=[],this.cleanups=[],this._isPaused=!1,this.parent=Ji,!s&&Ji&&(this.index=(Ji.scopes||(Ji.scopes=[])).push(this)-1)}get active(){return this._active}pause(){if(this._active){this._isPaused=!0;let s,a;if(this.scopes)for(s=0,a=this.scopes.length;s<a;s++)this.scopes[s].pause();for(s=0,a=this.effects.length;s<a;s++)this.effects[s].pause()}}resume(){if(this._active&&this._isPaused){this._isPaused=!1;let s,a;if(this.scopes)for(s=0,a=this.scopes.length;s<a;s++)this.scopes[s].resume();for(s=0,a=this.effects.length;s<a;s++)this.effects[s].resume()}}run(s){if(this._active){const a=Ji;try{return Ji=this,s()}finally{Ji=a}}}on(){++this._on===1&&(this.prevScope=Ji,Ji=this)}off(){this._on>0&&--this._on===0&&(Ji=this.prevScope,this.prevScope=void 0)}stop(s){if(this._active){this._active=!1;let a,n;for(a=0,n=this.effects.length;a<n;a++)this.effects[a].stop();for(this.effects.length=0,a=0,n=this.cleanups.length;a<n;a++)this.cleanups[a]();if(this.cleanups.length=0,this.scopes){for(a=0,n=this.scopes.length;a<n;a++)this.scopes[a].stop(!0);this.scopes.length=0}if(!this.detached&&this.parent&&!s){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.parent=void 0}}}function zk(){return Ji}function Rc(i,s=!1){Ji&&Ji.cleanups.push(i)}let fi;const nt=new WeakSet;class Jk{constructor(s){this.fn=s,this.deps=void 0,this.depsTail=void 0,this.flags=5,this.next=void 0,this.cleanup=void 0,this.scheduler=void 0,Ji&&Ji.active&&Ji.effects.push(this)}pause(){this.flags|=64}resume(){this.flags&64&&(this.flags&=-65,nt.has(this)&&(nt.delete(this),this.trigger()))}notify(){this.flags&2&&!(this.flags&32)||this.flags&8||qk(this)}run(){if(!(this.flags&1))return this.fn();this.flags|=2,dh(this),Kk(this);const s=fi,a=Cs;fi=this,Cs=!0;try{return this.fn()}finally{Xk(this),fi=s,Cs=a,this.flags&=-3}}stop(){if(this.flags&1){for(let s=this.deps;s;s=s.nextDep)ul(s);this.deps=this.depsTail=void 0,dh(this),this.onStop&&this.onStop(),this.flags&=-2}}trigger(){this.flags&64?nt.add(this):this.scheduler?this.scheduler():this.runIfDirty()}runIfDirty(){Lt(this)&&this.run()}get dirty(){return Lt(this)}}let Gk=0,un,vn;function qk(i,s=!1){if(i.flags|=8,s){i.next=vn,vn=i;return}i.next=un,un=i}function Bl(){Gk++}function yl(){if(--Gk>0)return;if(vn){let s=vn;for(vn=void 0;s;){const a=s.next;s.next=void 0,s.flags&=-9,s=a}}let i;for(;un;){let s=un;for(un=void 0;s;){const a=s.next;if(s.next=void 0,s.flags&=-9,s.flags&1)try{s.trigger()}catch(n){i||(i=n)}s=a}}if(i)throw i}function Kk(i){for(let s=i.deps;s;s=s.nextDep)s.version=-1,s.prevActiveLink=s.dep.activeLink,s.dep.activeLink=s}function Xk(i){let s,a=i.depsTail,n=a;for(;n;){const e=n.prevDep;n.version===-1?(n===a&&(a=e),ul(n),Lc(n)):s=n,n.dep.activeLink=n.prevActiveLink,n.prevActiveLink=void 0,n=e}i.deps=s,i.depsTail=a}function Lt(i){for(let s=i.deps;s;s=s.nextDep)if(s.dep.version!==s.version||s.dep.computed&&(Qk(s.dep.computed)||s.dep.version!==s.version))return!0;return!!i._dirty}function Qk(i){if(i.flags&4&&!(i.flags&16)||(i.flags&=-17,i.globalVersion===_n)||(i.globalVersion=_n,!i.isSSR&&i.flags&128&&(!i.deps&&!i._dirty||!Lt(i))))return;i.flags|=2;const s=i.dep,a=fi,n=Cs;fi=i,Cs=!0;try{Kk(i);const e=i.fn(i._value);(s.version===0||as(e,i._value))&&(i.flags|=128,i._value=e,s.version++)}catch(e){throw s.version++,e}finally{fi=a,Cs=n,Xk(i),i.flags&=-3}}function ul(i,s=!1){const{dep:a,prevSub:n,nextSub:e}=i;if(n&&(n.nextSub=e,i.prevSub=void 0),e&&(e.prevSub=n,i.nextSub=void 0),a.subs===i&&(a.subs=n,!n&&a.computed)){a.computed.flags&=-5;for(let t=a.computed.deps;t;t=t.nextDep)ul(t,!0)}!s&&!--a.sc&&a.map&&a.map.delete(a.key)}function Lc(i){const{prevDep:s,nextDep:a}=i;s&&(s.nextDep=a,i.prevDep=void 0),a&&(a.prevDep=s,i.nextDep=void 0)}let Cs=!0;const Yk=[];function qs(){Yk.push(Cs),Cs=!1}function Ks(){const i=Yk.pop();Cs=i===void 0?!0:i}function dh(i){const{cleanup:s}=i;if(i.cleanup=void 0,s){const a=fi;fi=void 0;try{s()}finally{fi=a}}}let _n=0;class Oc{constructor(s,a){this.sub=s,this.dep=a,this.version=a.version,this.nextDep=this.prevDep=this.nextSub=this.prevSub=this.prevActiveLink=void 0}}class Oe{constructor(s){this.computed=s,this.version=0,this.activeLink=void 0,this.subs=void 0,this.map=void 0,this.key=void 0,this.sc=0,this.__v_skip=!0}track(s){if(!fi||!Cs||fi===this.computed)return;let a=this.activeLink;if(a===void 0||a.sub!==fi)a=this.activeLink=new Oc(fi,this),fi.deps?(a.prevDep=fi.depsTail,fi.depsTail.nextDep=a,fi.depsTail=a):fi.deps=fi.depsTail=a,Zk(a);else if(a.version===-1&&(a.version=this.version,a.nextDep)){const n=a.nextDep;n.prevDep=a.prevDep,a.prevDep&&(a.prevDep.nextDep=n),a.prevDep=fi.depsTail,a.nextDep=void 0,fi.depsTail.nextDep=a,fi.depsTail=a,fi.deps===a&&(fi.deps=n)}return a}trigger(s){this.version++,_n++,this.notify(s)}notify(s){Bl();try{for(let a=this.subs;a;a=a.prevSub)a.sub.notify()&&a.sub.dep.notify()}finally{yl()}}}function Zk(i){if(i.dep.sc++,i.sub.flags&4){const s=i.dep.computed;if(s&&!i.dep.subs){s.flags|=20;for(let n=s.deps;n;n=n.nextDep)Zk(n)}const a=i.dep.subs;a!==i&&(i.prevSub=a,a&&(a.nextSub=i)),i.dep.subs=i}}const ue=new WeakMap,fa=Symbol(""),Ot=Symbol(""),Sn=Symbol("");function Gi(i,s,a){if(Cs&&fi){let n=ue.get(i);n||ue.set(i,n=new Map);let e=n.get(a);e||(n.set(a,e=new Oe),e.map=n,e.key=a),e.track()}}function Js(i,s,a,n,e,t){const l=ue.get(i);if(!l){_n++;return}const k=p=>{p&&p.trigger()};if(Bl(),s==="clear")l.forEach(k);else{const p=si(i),d=p&&ol(a);if(p&&a==="length"){const r=Number(n);l.forEach((c,o)=>{(o==="length"||o===Sn||!Xs(o)&&o>=r)&&k(c)})}else switch((a!==void 0||l.has(void 0))&&k(l.get(a)),d&&k(l.get(Sn)),s){case"add":p?d&&k(l.get("length")):(k(l.get(fa)),Ja(i)&&k(l.get(Ot)));break;case"delete":p||(k(l.get(fa)),Ja(i)&&k(l.get(Ot)));break;case"set":Ja(i)&&k(l.get(fa));break}}yl()}function Pc(i,s){const a=ue.get(i);return a&&a.get(s)}function Ma(i){const s=ci(i);return s===i?s:(Gi(s,"iterate",Sn),ys(i)?s:s.map($i))}function Pe(i){return Gi(i=ci(i),"iterate",Sn),i}const Ic={__proto__:null,[Symbol.iterator](){return et(this,Symbol.iterator,$i)},concat(...i){return Ma(this).concat(...i.map(s=>si(s)?Ma(s):s))},entries(){return et(this,"entries",i=>(i[1]=$i(i[1]),i))},every(i,s){return $s(this,"every",i,s,void 0,arguments)},filter(i,s){return $s(this,"filter",i,s,a=>a.map($i),arguments)},find(i,s){return $s(this,"find",i,s,$i,arguments)},findIndex(i,s){return $s(this,"findIndex",i,s,void 0,arguments)},findLast(i,s){return $s(this,"findLast",i,s,$i,arguments)},findLastIndex(i,s){return $s(this,"findLastIndex",i,s,void 0,arguments)},forEach(i,s){return $s(this,"forEach",i,s,void 0,arguments)},includes(...i){return tt(this,"includes",i)},indexOf(...i){return tt(this,"indexOf",i)},join(i){return Ma(this).join(i)},lastIndexOf(...i){return tt(this,"lastIndexOf",i)},map(i,s){return $s(this,"map",i,s,void 0,arguments)},pop(){return cn(this,"pop")},push(...i){return cn(this,"push",i)},reduce(i,...s){return ch(this,"reduce",i,s)},reduceRight(i,...s){return ch(this,"reduceRight",i,s)},shift(){return cn(this,"shift")},some(i,s){return $s(this,"some",i,s,void 0,arguments)},splice(...i){return cn(this,"splice",i)},toReversed(){return Ma(this).toReversed()},toSorted(i){return Ma(this).toSorted(i)},toSpliced(...i){return Ma(this).toSpliced(...i)},unshift(...i){return cn(this,"unshift",i)},values(){return et(this,"values",$i)}};function et(i,s,a){const n=Pe(i),e=n[s]();return n!==i&&!ys(i)&&(e._next=e.next,e.next=()=>{const t=e._next();return t.value&&(t.value=a(t.value)),t}),e}const Mc=Array.prototype;function $s(i,s,a,n,e,t){const l=Pe(i),k=l!==i&&!ys(i),p=l[s];if(p!==Mc[s]){const c=p.apply(i,t);return k?$i(c):c}let d=a;l!==i&&(k?d=function(c,o){return a.call(this,$i(c),o,i)}:a.length>2&&(d=function(c,o){return a.call(this,c,o,i)}));const r=p.call(l,d,n);return k&&e?e(r):r}function ch(i,s,a,n){const e=Pe(i);let t=a;return e!==i&&(ys(i)?a.length>3&&(t=function(l,k,p){return a.call(this,l,k,p,i)}):t=function(l,k,p){return a.call(this,l,$i(k),p,i)}),e[s](t,...n)}function tt(i,s,a){const n=ci(i);Gi(n,"iterate",Sn);const e=n[s](...a);return(e===-1||e===!1)&&vl(a[0])?(a[0]=ci(a[0]),n[s](...a)):e}function cn(i,s,a=[]){qs(),Bl();const n=ci(i)[s].apply(i,a);return yl(),Ks(),n}const Vc=rl("__proto__,__v_isRef,__isVue"),ip=new Set(Object.getOwnPropertyNames(Symbol).filter(i=>i!=="arguments"&&i!=="caller").map(i=>Symbol[i]).filter(Xs));function jc(i){Xs(i)||(i=String(i));const s=ci(this);return Gi(s,"has",i),s.hasOwnProperty(i)}class sp{constructor(s=!1,a=!1){this._isReadonly=s,this._isShallow=a}get(s,a,n){if(a==="__v_skip")return s.__v_skip;const e=this._isReadonly,t=this._isShallow;if(a==="__v_isReactive")return!e;if(a==="__v_isReadonly")return e;if(a==="__v_isShallow")return t;if(a==="__v_raw")return n===(e?t?hp:lp:t?tp:ep).get(s)||Object.getPrototypeOf(s)===Object.getPrototypeOf(n)?s:void 0;const l=si(s);if(!e){let p;if(l&&(p=Ic[a]))return p;if(a==="hasOwnProperty")return jc}const k=Reflect.get(s,a,Li(s)?s:n);return(Xs(a)?ip.has(a):Vc(a))||(e||Gi(s,"get",a),t)?k:Li(k)?l&&ol(a)?k:k.value:Di(k)?e?wa(k):Sa(k):k}}class ap extends sp{constructor(s=!1){super(!1,s)}set(s,a,n,e){let t=s[a];if(!this._isShallow){const p=ca(t);if(!ys(n)&&!ca(n)&&(t=ci(t),n=ci(n)),!si(s)&&Li(t)&&!Li(n))return p?!1:(t.value=n,!0)}const l=si(s)&&ol(a)?Number(a)<s.length:yi(s,a),k=Reflect.set(s,a,n,Li(s)?s:e);return s===ci(e)&&(l?as(n,t)&&Js(s,"set",a,n):Js(s,"add",a,n)),k}deleteProperty(s,a){const n=yi(s,a);s[a];const e=Reflect.deleteProperty(s,a);return e&&n&&Js(s,"delete",a,void 0),e}has(s,a){const n=Reflect.has(s,a);return(!Xs(a)||!ip.has(a))&&Gi(s,"has",a),n}ownKeys(s){return Gi(s,"iterate",si(s)?"length":fa),Reflect.ownKeys(s)}}class np extends sp{constructor(s=!1){super(!0,s)}set(s,a){return!0}deleteProperty(s,a){return!0}}const Nc=new ap,$c=new np,Hc=new ap(!0),Wc=new np(!0),Pt=i=>i,se=i=>Reflect.getPrototypeOf(i);function Uc(i,s,a){return function(...n){const e=this.__v_raw,t=ci(e),l=Ja(t),k=i==="entries"||i===Symbol.iterator&&l,p=i==="keys"&&l,d=e[i](...n),r=a?Pt:s?ve:$i;return!s&&Gi(t,"iterate",p?Ot:fa),{next(){const{value:c,done:o}=d.next();return o?{value:c,done:o}:{value:k?[r(c[0]),r(c[1])]:r(c),done:o}},[Symbol.iterator](){return this}}}}function ae(i){return function(...s){return i==="delete"?!1:i==="clear"?void 0:this}}function zc(i,s){const a={get(e){const t=this.__v_raw,l=ci(t),k=ci(e);i||(as(e,k)&&Gi(l,"get",e),Gi(l,"get",k));const{has:p}=se(l),d=s?Pt:i?ve:$i;if(p.call(l,e))return d(t.get(e));if(p.call(l,k))return d(t.get(k));t!==l&&t.get(e)},get size(){const e=this.__v_raw;return!i&&Gi(ci(e),"iterate",fa),Reflect.get(e,"size",e)},has(e){const t=this.__v_raw,l=ci(t),k=ci(e);return i||(as(e,k)&&Gi(l,"has",e),Gi(l,"has",k)),e===k?t.has(e):t.has(e)||t.has(k)},forEach(e,t){const l=this,k=l.__v_raw,p=ci(k),d=s?Pt:i?ve:$i;return!i&&Gi(p,"iterate",fa),k.forEach((r,c)=>e.call(t,d(r),d(c),l))}};return Oi(a,i?{add:ae("add"),set:ae("set"),delete:ae("delete"),clear:ae("clear")}:{add(e){!s&&!ys(e)&&!ca(e)&&(e=ci(e));const t=ci(this);return se(t).has.call(t,e)||(t.add(e),Js(t,"add",e,e)),this},set(e,t){!s&&!ys(t)&&!ca(t)&&(t=ci(t));const l=ci(this),{has:k,get:p}=se(l);let d=k.call(l,e);d||(e=ci(e),d=k.call(l,e));const r=p.call(l,e);return l.set(e,t),d?as(t,r)&&Js(l,"set",e,t):Js(l,"add",e,t),this},delete(e){const t=ci(this),{has:l,get:k}=se(t);let p=l.call(t,e);p||(e=ci(e),p=l.call(t,e)),k&&k.call(t,e);const d=t.delete(e);return p&&Js(t,"delete",e,void 0),d},clear(){const e=ci(this),t=e.size!==0,l=e.clear();return t&&Js(e,"clear",void 0,void 0),l}}),["keys","values","entries",Symbol.iterator].forEach(e=>{a[e]=Uc(e,i,s)}),a}function Ie(i,s){const a=zc(i,s);return(n,e,t)=>e==="__v_isReactive"?!i:e==="__v_isReadonly"?i:e==="__v_raw"?n:Reflect.get(yi(a,e)&&e in n?a:n,e,t)}const Jc={get:Ie(!1,!1)},Gc={get:Ie(!1,!0)},qc={get:Ie(!0,!1)},Kc={get:Ie(!0,!0)},ep=new WeakMap,tp=new WeakMap,lp=new WeakMap,hp=new WeakMap;function Xc(i){switch(i){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Qc(i){return i.__v_skip||!Object.isExtensible(i)?0:Xc(Ec(i))}function Sa(i){return ca(i)?i:Me(i,!1,Nc,Jc,ep)}function kp(i){return Me(i,!1,Hc,Gc,tp)}function wa(i){return Me(i,!0,$c,qc,lp)}function Yc(i){return Me(i,!0,Wc,Kc,hp)}function Me(i,s,a,n,e){if(!Di(i)||i.__v_raw&&!(s&&i.__v_isReactive))return i;const t=Qc(i);if(t===0)return i;const l=e.get(i);if(l)return l;const k=new Proxy(i,t===2?n:a);return e.set(i,k),k}function Ca(i){return ca(i)?Ca(i.__v_raw):!!(i&&i.__v_isReactive)}function ca(i){return!!(i&&i.__v_isReadonly)}function ys(i){return!!(i&&i.__v_isShallow)}function vl(i){return i?!!i.__v_raw:!1}function ci(i){const s=i&&i.__v_raw;return s?ci(s):i}function Zc(i){return!yi(i,"__v_skip")&&Object.isExtensible(i)&&Tt(i,"__v_skip",!0),i}const $i=i=>Di(i)?Sa(i):i,ve=i=>Di(i)?wa(i):i;function Li(i){return i?i.__v_isRef===!0:!1}function li(i){return pp(i,!1)}function ni(i){return pp(i,!0)}function pp(i,s){return Li(i)?i:new io(i,s)}class io{constructor(s,a){this.dep=new Oe,this.__v_isRef=!0,this.__v_isShallow=!1,this._rawValue=a?s:ci(s),this._value=a?s:$i(s),this.__v_isShallow=a}get value(){return this.dep.track(),this._value}set value(s){const a=this._rawValue,n=this.__v_isShallow||ys(s)||ca(s);s=n?s:ci(s),as(s,a)&&(this._rawValue=s,this._value=n?s:$i(s),this.dep.trigger())}}function da(i){return Li(i)?i.value:i}function ki(i){return ei(i)?i():da(i)}const so={get:(i,s,a)=>s==="__v_raw"?i:da(Reflect.get(i,s,a)),set:(i,s,a,n)=>{const e=i[s];return Li(e)&&!Li(a)?(e.value=a,!0):Reflect.set(i,s,a,n)}};function rp(i){return Ca(i)?i:new Proxy(i,so)}class ao{constructor(s){this.__v_isRef=!0,this._value=void 0;const a=this.dep=new Oe,{get:n,set:e}=s(a.track.bind(a),a.trigger.bind(a));this._get=n,this._set=e}get value(){return this._value=this._get()}set value(s){this._set(s)}}function El(i){return new ao(i)}function O4(i){const s=si(i)?new Array(i.length):{};for(const a in i)s[a]=dp(i,a);return s}class no{constructor(s,a,n){this._object=s,this._key=a,this._defaultValue=n,this.__v_isRef=!0,this._value=void 0}get value(){const s=this._object[this._key];return this._value=s===void 0?this._defaultValue:s}set value(s){this._object[this._key]=s}get dep(){return Pc(ci(this._object),this._key)}}class eo{constructor(s){this._getter=s,this.__v_isRef=!0,this.__v_isReadonly=!0,this._value=void 0}get value(){return this._value=this._getter()}}function hn(i,s,a){return Li(i)?i:ei(i)?new eo(i):Di(i)&&arguments.length>1?dp(i,s,a):li(i)}function dp(i,s,a){const n=i[s];return Li(n)?n:new no(i,s,a)}class to{constructor(s,a,n){this.fn=s,this.setter=a,this._value=void 0,this.dep=new Oe(this),this.__v_isRef=!0,this.deps=void 0,this.depsTail=void 0,this.flags=16,this.globalVersion=_n-1,this.next=void 0,this.effect=this,this.__v_isReadonly=!a,this.isSSR=n}notify(){if(this.flags|=16,!(this.flags&8)&&fi!==this)return qk(this,!0),!0}get value(){const s=this.dep.track();return Qk(this),s&&(s.version=this.dep.version),this._value}set value(s){this.setter&&this.setter(s)}}function lo(i,s,a=!1){let n,e;return ei(i)?n=i:(n=i.get,e=i.set),new to(n,e,a)}const ne={},Ee=new WeakMap;let Ea;function ho(i,s=!1,a=Ea){if(a){let n=Ee.get(a);n||Ee.set(a,n=[]),n.push(i)}}function ko(i,s,a=Ai){const{immediate:n,deep:e,once:t,scheduler:l,augmentJob:k,call:p}=a,d=C=>e?C:ys(C)||e===!1||e===0?Gs(C,1):Gs(C);let r,c,o,A,v=!1,u=!1;if(Li(i)?(c=()=>i.value,v=ys(i)):Ca(i)?(c=()=>d(i),v=!0):si(i)?(u=!0,v=i.some(C=>Ca(C)||ys(C)),c=()=>i.map(C=>{if(Li(C))return C.value;if(Ca(C))return d(C);if(ei(C))return p?p(C,2):C()})):ei(i)?s?c=p?()=>p(i,2):i:c=()=>{if(o){qs();try{o()}finally{Ks()}}const C=Ea;Ea=r;try{return p?p(i,3,[A]):i(A)}finally{Ea=C}}:c=Is,s&&e){const C=c,w=e===!0?1/0:e;c=()=>Gs(C(),w)}const E=zk(),f=()=>{r.stop(),E&&E.active&&cl(E.effects,r)};if(t&&s){const C=s;s=(...w)=>{C(...w),f()}}let F=u?new Array(i.length).fill(ne):ne;const B=C=>{if(!(!(r.flags&1)||!r.dirty&&!C))if(s){const w=r.run();if(e||v||(u?w.some(($,I)=>as($,F[I])):as(w,F))){o&&o();const $=Ea;Ea=r;try{const I=[w,F===ne?void 0:u&&F[0]===ne?[]:F,A];F=w,p?p(s,3,I):s(...I)}finally{Ea=$}}}else r.run()};return k&&k(B),r=new Jk(c),r.scheduler=l?()=>l(B,!1):B,A=C=>ho(C,!1,r),o=r.onStop=()=>{const C=Ee.get(r);if(C){if(p)p(C,4);else for(const w of C)w();Ee.delete(r)}},s?n?B(!0):F=r.run():l?l(B.bind(null,!0),!0):r.run(),f.pause=r.pause.bind(r),f.resume=r.resume.bind(r),f.stop=f,f}function Gs(i,s=1/0,a){if(s<=0||!Di(i)||i.__v_skip||(a=a||new Set,a.has(i)))return i;if(a.add(i),s--,Li(i))Gs(i.value,s,a);else if(si(i))for(let n=0;n<i.length;n++)Gs(i[n],s,a);else if(Vk(i)||Ja(i))i.forEach(n=>{Gs(n,s,a)});else if($k(i)){for(const n in i)Gs(i[n],s,a);for(const n of Object.getOwnPropertySymbols(i))Object.prototype.propertyIsEnumerable.call(i,n)&&Gs(i[n],s,a)}return i}/**
* @vue/runtime-core v3.5.17
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function jn(i,s,a,n){try{return n?i(...n):i()}catch(e){Nn(e,s,a)}}function _s(i,s,a,n){if(ei(i)){const e=jn(i,s,a,n);return e&&jk(e)&&e.catch(t=>{Nn(t,s,a)}),e}if(si(i)){const e=[];for(let t=0;t<i.length;t++)e.push(_s(i[t],s,a,n));return e}}function Nn(i,s,a,n=!0){const e=s?s.vnode:null,{errorHandler:t,throwUnhandledErrorInProduction:l}=s&&s.appContext.config||Ai;if(s){let k=s.parent;const p=s.proxy,d=`https://vuejs.org/error-reference/#runtime-${a}`;for(;k;){const r=k.ec;if(r){for(let c=0;c<r.length;c++)if(r[c](i,p,d)===!1)return}k=k.parent}if(t){qs(),jn(t,null,10,[i,p,d]),Ks();return}}po(i,a,e,n,l)}function po(i,s,a,n=!0,e=!1){if(e)throw i;console.error(i)}const Qi=[];let Os=-1;const qa=[];let ha=null,ja=0;const cp=Promise.resolve();let me=null;function Aa(i){const s=me||cp;return i?s.then(this?i.bind(this):i):s}function ro(i){let s=Os+1,a=Qi.length;for(;s<a;){const n=s+a>>>1,e=Qi[n],t=xn(e);t<i||t===i&&e.flags&2?s=n+1:a=n}return s}function ml(i){if(!(i.flags&1)){const s=xn(i),a=Qi[Qi.length-1];!a||!(i.flags&2)&&s>=xn(a)?Qi.push(i):Qi.splice(ro(s),0,i),i.flags|=1,op()}}function op(){me||(me=cp.then(Ap))}function co(i){si(i)?qa.push(...i):ha&&i.id===-1?ha.splice(ja+1,0,i):i.flags&1||(qa.push(i),i.flags|=1),op()}function oh(i,s,a=Os+1){for(;a<Qi.length;a++){const n=Qi[a];if(n&&n.flags&2){if(i&&n.id!==i.uid)continue;Qi.splice(a,1),a--,n.flags&4&&(n.flags&=-2),n(),n.flags&4||(n.flags&=-2)}}}function Fe(i){if(qa.length){const s=[...new Set(qa)].sort((a,n)=>xn(a)-xn(n));if(qa.length=0,ha){ha.push(...s);return}for(ha=s,ja=0;ja<ha.length;ja++){const a=ha[ja];a.flags&4&&(a.flags&=-2),a.flags&8||a(),a.flags&=-2}ha=null,ja=0}}const xn=i=>i.id==null?i.flags&2?-1:1/0:i.id;function Ap(i){try{for(Os=0;Os<Qi.length;Os++){const s=Qi[Os];s&&!(s.flags&8)&&(s.flags&4&&(s.flags&=-2),jn(s,s.i,s.i?15:14),s.flags&4||(s.flags&=-2))}}finally{for(;Os<Qi.length;Os++){const s=Qi[Os];s&&(s.flags&=-2)}Os=-1,Qi.length=0,Fe(),me=null,(Qi.length||qa.length)&&Ap()}}let Mi=null,gp=null;function fe(i){const s=Mi;return Mi=i,gp=i&&i.type.__scopeId||null,s}function oo(i,s=Mi,a){if(!s||i._n)return i;const n=(...e)=>{n._d&&Ch(-1);const t=fe(s);let l;try{l=i(...e)}finally{fe(t),n._d&&Ch(1)}return l};return n._n=!0,n._c=!0,n._d=!0,n}function P4(i,s){if(Mi===null)return i;const a=He(Mi),n=i.dirs||(i.dirs=[]);for(let e=0;e<s.length;e++){let[t,l,k,p=Ai]=s[e];t&&(ei(t)&&(t={mounted:t,updated:t}),t.deep&&Gs(l),n.push({dir:t,instance:a,value:l,oldValue:void 0,arg:k,modifiers:p}))}return i}function Ps(i,s,a,n){const e=i.dirs,t=s&&s.dirs;for(let l=0;l<e.length;l++){const k=e[l];t&&(k.oldValue=t[l].value);let p=k.dir[n];p&&(qs(),_s(p,a,8,[i.el,k,i,s]),Ks())}}const Ao=Symbol("_vte"),Bp=i=>i.__isTeleport,ka=Symbol("_leaveCb"),ee=Symbol("_enterCb");function yp(){const i={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return vi(()=>{i.isMounted=!0}),Cl(()=>{i.isUnmounting=!0}),i}const os=[Function,Array],up={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:os,onEnter:os,onAfterEnter:os,onEnterCancelled:os,onBeforeLeave:os,onLeave:os,onAfterLeave:os,onLeaveCancelled:os,onBeforeAppear:os,onAppear:os,onAfterAppear:os,onAppearCancelled:os},vp=i=>{const s=i.subTree;return s.component?vp(s.component):s},go={name:"BaseTransition",props:up,setup(i,{slots:s}){const a=ia(),n=yp();return()=>{const e=s.default&&Fl(s.default(),!0);if(!e||!e.length)return;const t=Ep(e),l=ci(i),{mode:k}=l;if(n.isLeaving)return lt(t);const p=Ah(t);if(!p)return lt(t);let d=wn(p,l,n,a,c=>d=c);p.type!==Ni&&xa(p,d);let r=a.subTree&&Ah(a.subTree);if(r&&r.type!==Ni&&!ma(p,r)&&vp(a).type!==Ni){let c=wn(r,l,n,a);if(xa(r,c),k==="out-in"&&p.type!==Ni)return n.isLeaving=!0,c.afterLeave=()=>{n.isLeaving=!1,a.job.flags&8||a.update(),delete c.afterLeave,r=void 0},lt(t);k==="in-out"&&p.type!==Ni?c.delayLeave=(o,A,v)=>{const u=mp(n,r);u[String(r.key)]=r,o[ka]=()=>{A(),o[ka]=void 0,delete d.delayedLeave,r=void 0},d.delayedLeave=()=>{v(),delete d.delayedLeave,r=void 0}}:r=void 0}else r&&(r=void 0);return t}}};function Ep(i){let s=i[0];if(i.length>1){for(const a of i)if(a.type!==Ni){s=a;break}}return s}const Bo=go;function mp(i,s){const{leavingVNodes:a}=i;let n=a.get(s.type);return n||(n=Object.create(null),a.set(s.type,n)),n}function wn(i,s,a,n,e){const{appear:t,mode:l,persisted:k=!1,onBeforeEnter:p,onEnter:d,onAfterEnter:r,onEnterCancelled:c,onBeforeLeave:o,onLeave:A,onAfterLeave:v,onLeaveCancelled:u,onBeforeAppear:E,onAppear:f,onAfterAppear:F,onAppearCancelled:B}=s,C=String(i.key),w=mp(a,i),$=(_,O)=>{_&&_s(_,n,9,O)},I=(_,O)=>{const W=O[1];$(_,O),si(_)?_.every(T=>T.length<=1)&&W():_.length<=1&&W()},j={mode:l,persisted:k,beforeEnter(_){let O=p;if(!a.isMounted)if(t)O=E||p;else return;_[ka]&&_[ka](!0);const W=w[C];W&&ma(i,W)&&W.el[ka]&&W.el[ka](),$(O,[_])},enter(_){let O=d,W=r,T=c;if(!a.isMounted)if(t)O=f||d,W=F||r,T=B||c;else return;let X=!1;const G=_[ee]=Z=>{X||(X=!0,Z?$(T,[_]):$(W,[_]),j.delayedLeave&&j.delayedLeave(),_[ee]=void 0)};O?I(O,[_,G]):G()},leave(_,O){const W=String(i.key);if(_[ee]&&_[ee](!0),a.isUnmounting)return O();$(o,[_]);let T=!1;const X=_[ka]=G=>{T||(T=!0,O(),G?$(u,[_]):$(v,[_]),_[ka]=void 0,w[W]===i&&delete w[W])};w[W]=i,A?I(A,[_,X]):X()},clone(_){const O=wn(_,s,a,n,e);return e&&e(O),O}};return j}function lt(i){if($n(i))return i=oa(i),i.children=null,i}function Ah(i){if(!$n(i))return Bp(i.type)&&i.children?Ep(i.children):i;if(i.component)return i.component.subTree;const{shapeFlag:s,children:a}=i;if(a){if(s&16)return a[0];if(s&32&&ei(a.default))return a.default()}}function xa(i,s){i.shapeFlag&6&&i.component?(i.transition=s,xa(i.component.subTree,s)):i.shapeFlag&128?(i.ssContent.transition=s.clone(i.ssContent),i.ssFallback.transition=s.clone(i.ssFallback)):i.transition=s}function Fl(i,s=!1,a){let n=[],e=0;for(let t=0;t<i.length;t++){let l=i[t];const k=a==null?l.key:String(a)+String(l.key!=null?l.key:t);l.type===Hi?(l.patchFlag&128&&e++,n=n.concat(Fl(l.children,s,k))):(s||l.type!==Ni)&&n.push(k!=null?oa(l,{key:k}):l)}if(e>1)for(let t=0;t<n.length;t++)n[t].patchFlag=-2;return n}/*! #__NO_SIDE_EFFECTS__ */function M(i,s){return ei(i)?Oi({name:i.name},s,{setup:i}):i}function Fp(){const i=ia();return i?(i.appContext.config.idPrefix||"v")+"-"+i.ids[0]+i.ids[1]++:""}function fl(i){i.ids=[i.ids[0]+i.ids[2]+++"-",0,0]}function I4(i){const s=ia(),a=ni(null);if(s){const e=s.refs===Ai?s.refs={}:s.refs;Object.defineProperty(e,i,{enumerable:!0,get:()=>a.value,set:t=>a.value=t})}return a}function Ka(i,s,a,n,e=!1){if(si(i)){i.forEach((v,u)=>Ka(v,s&&(si(s)?s[u]:s),a,n,e));return}if(ba(n)&&!e){n.shapeFlag&512&&n.type.__asyncResolved&&n.component.subTree.component&&Ka(i,s,a,n.component.subTree);return}const t=n.shapeFlag&4?He(n.component):n.el,l=e?null:t,{i:k,r:p}=i,d=s&&s.r,r=k.refs===Ai?k.refs={}:k.refs,c=k.setupState,o=ci(c),A=c===Ai?()=>!1:v=>yi(o,v);if(d!=null&&d!==p&&(Ri(d)?(r[d]=null,A(d)&&(c[d]=null)):Li(d)&&(d.value=null)),ei(p))jn(p,k,12,[l,r]);else{const v=Ri(p),u=Li(p);if(v||u){const E=()=>{if(i.f){const f=v?A(p)?c[p]:r[p]:p.value;e?si(f)&&cl(f,t):si(f)?f.includes(t)||f.push(t):v?(r[p]=[t],A(p)&&(c[p]=r[p])):(p.value=[t],i.k&&(r[i.k]=p.value))}else v?(r[p]=l,A(p)&&(c[p]=l)):u&&(p.value=l,i.k&&(r[i.k]=l))};l?(E.id=-1,ps(E,a)):E()}}}let gh=!1;const Va=()=>{gh||(console.error("Hydration completed but contains mismatches."),gh=!0)},yo=i=>i.namespaceURI.includes("svg")&&i.tagName!=="foreignObject",uo=i=>i.namespaceURI.includes("MathML"),te=i=>{if(i.nodeType===1){if(yo(i))return"svg";if(uo(i))return"mathml"}},Wa=i=>i.nodeType===8;function vo(i){const{mt:s,p:a,o:{patchProp:n,createText:e,nextSibling:t,parentNode:l,remove:k,insert:p,createComment:d}}=i,r=(B,C)=>{if(!C.hasChildNodes()){a(null,B,C),Fe(),C._vnode=B;return}c(C.firstChild,B,null,null,null),Fe(),C._vnode=B},c=(B,C,w,$,I,j=!1)=>{j=j||!!C.dynamicChildren;const _=Wa(B)&&B.data==="[",O=()=>u(B,C,w,$,I,_),{type:W,ref:T,shapeFlag:X,patchFlag:G}=C;let Z=B.nodeType;C.el=B,G===-2&&(j=!1,C.dynamicChildren=null);let V=null;switch(W){case _a:Z!==3?C.children===""?(p(C.el=e(""),l(B),B),V=B):V=O():(B.data!==C.children&&(Va(),B.data=C.children),V=t(B));break;case Ni:F(B)?(V=t(B),f(C.el=B.content.firstChild,B,w)):Z!==8||_?V=O():V=t(B);break;case mn:if(_&&(B=t(B),Z=B.nodeType),Z===1||Z===3){V=B;const ai=!C.children.length;for(let K=0;K<C.staticCount;K++)ai&&(C.children+=V.nodeType===1?V.outerHTML:V.data),K===C.staticCount-1&&(C.anchor=V),V=t(V);return _?t(V):V}else O();break;case Hi:_?V=v(B,C,w,$,I,j):V=O();break;default:if(X&1)(Z!==1||C.type.toLowerCase()!==B.tagName.toLowerCase())&&!F(B)?V=O():V=o(B,C,w,$,I,j);else if(X&6){C.slotScopeIds=I;const ai=l(B);if(_?V=E(B):Wa(B)&&B.data==="teleport start"?V=E(B,B.data,"teleport end"):V=t(B),s(C,ai,null,w,$,te(ai),j),ba(C)&&!C.type.__asyncResolved){let K;_?(K=Ti(Hi),K.anchor=V?V.previousSibling:ai.lastChild):K=B.nodeType===3?Qp(""):Ti("div"),K.el=B,C.component.subTree=K}}else X&64?Z!==8?V=O():V=C.type.hydrate(B,C,w,$,I,j,i,A):X&128&&(V=C.type.hydrate(B,C,w,$,te(l(B)),I,j,i,c))}return T!=null&&Ka(T,null,$,C),V},o=(B,C,w,$,I,j)=>{j=j||!!C.dynamicChildren;const{type:_,props:O,patchFlag:W,shapeFlag:T,dirs:X,transition:G}=C,Z=_==="input"||_==="option";if(Z||W!==-1){X&&Ps(C,null,w,"created");let V=!1;if(F(B)){V=jp(null,G)&&w&&w.vnode.props&&w.vnode.props.appear;const K=B.content.firstChild;if(V){const hi=K.getAttribute("class");hi&&(K.$cls=hi),G.beforeEnter(K)}f(K,B,w),C.el=B=K}if(T&16&&!(O&&(O.innerHTML||O.textContent))){let K=A(B.firstChild,C,B,w,$,I,j);for(;K;){le(B,1)||Va();const hi=K;K=K.nextSibling,k(hi)}}else if(T&8){let K=C.children;K[0]===`
`&&(B.tagName==="PRE"||B.tagName==="TEXTAREA")&&(K=K.slice(1)),B.textContent!==K&&(le(B,0)||Va(),B.textContent=C.children)}if(O){if(Z||!j||W&48){const K=B.tagName.includes("-");for(const hi in O)(Z&&(hi.endsWith("value")||hi==="indeterminate")||Mn(hi)&&!Ga(hi)||hi[0]==="."||K)&&n(B,hi,null,O[hi],void 0,w)}else if(O.onClick)n(B,"onClick",null,O.onClick,void 0,w);else if(W&4&&Ca(O.style))for(const K in O.style)O.style[K]}let ai;(ai=O&&O.onVnodeBeforeMount)&&As(ai,w,C),X&&Ps(C,null,w,"beforeMount"),((ai=O&&O.onVnodeMounted)||X||V)&&Gp(()=>{ai&&As(ai,w,C),V&&G.enter(B),X&&Ps(C,null,w,"mounted")},$)}return B.nextSibling},A=(B,C,w,$,I,j,_)=>{_=_||!!C.dynamicChildren;const O=C.children,W=O.length;for(let T=0;T<W;T++){const X=_?O[T]:O[T]=Bs(O[T]),G=X.type===_a;B?(G&&!_&&T+1<W&&Bs(O[T+1]).type===_a&&(p(e(B.data.slice(X.children.length)),w,t(B)),B.data=X.children),B=c(B,X,$,I,j,_)):G&&!X.children?p(X.el=e(""),w):(le(w,1)||Va(),a(null,X,w,null,$,I,te(w),j))}return B},v=(B,C,w,$,I,j)=>{const{slotScopeIds:_}=C;_&&(I=I?I.concat(_):_);const O=l(B),W=A(t(B),C,O,w,$,I,j);return W&&Wa(W)&&W.data==="]"?t(C.anchor=W):(Va(),p(C.anchor=d("]"),O,W),W)},u=(B,C,w,$,I,j)=>{if(le(B.parentElement,1)||Va(),C.el=null,j){const W=E(B);for(;;){const T=t(B);if(T&&T!==W)k(T);else break}}const _=t(B),O=l(B);return k(B),a(null,C,O,_,w,$,te(O),I),w&&(w.vnode.el=C.el,zp(w,C.el)),_},E=(B,C="[",w="]")=>{let $=0;for(;B;)if(B=t(B),B&&Wa(B)&&(B.data===C&&$++,B.data===w)){if($===0)return t(B);$--}return B},f=(B,C,w)=>{const $=C.parentNode;$&&$.replaceChild(B,C);let I=w;for(;I;)I.vnode.el===C&&(I.vnode.el=I.subTree.el=B),I=I.parent},F=B=>B.nodeType===1&&B.tagName==="TEMPLATE";return[r,c]}const Bh="data-allow-mismatch",Eo={0:"text",1:"children",2:"class",3:"style",4:"attribute"};function le(i,s){if(s===0||s===1)for(;i&&!i.hasAttribute(Bh);)i=i.parentElement;const a=i&&i.getAttribute(Bh);if(a==null)return!1;if(a==="")return!0;{const n=a.split(",");return s===0&&n.includes("children")?!0:n.includes(Eo[s])}}Le().requestIdleCallback;Le().cancelIdleCallback;function mo(i,s){if(Wa(i)&&i.data==="["){let a=1,n=i.nextSibling;for(;n;){if(n.nodeType===1){if(s(n)===!1)break}else if(Wa(n))if(n.data==="]"){if(--a===0)break}else n.data==="["&&a++;n=n.nextSibling}}else s(i)}const ba=i=>!!i.type.__asyncLoader;/*! #__NO_SIDE_EFFECTS__ */function fp(i){ei(i)&&(i={loader:i});const{loader:s,loadingComponent:a,errorComponent:n,delay:e=200,hydrate:t,timeout:l,suspensible:k=!0,onError:p}=i;let d=null,r,c=0;const o=()=>(c++,d=null,A()),A=()=>{let v;return d||(v=d=s().catch(u=>{if(u=u instanceof Error?u:new Error(String(u)),p)return new Promise((E,f)=>{p(u,()=>E(o()),()=>f(u),c+1)});throw u}).then(u=>v!==d&&d?d:(u&&(u.__esModule||u[Symbol.toStringTag]==="Module")&&(u=u.default),r=u,u)))};return M({name:"AsyncComponentWrapper",__asyncLoader:A,__asyncHydrate(v,u,E){const f=t?()=>{const B=t(()=>{E()},C=>mo(v,C));B&&(u.bum||(u.bum=[])).push(B),(u.u||(u.u=[])).push(()=>!0)}:E;r?f():A().then(()=>!u.isUnmounted&&f())},get __asyncResolved(){return r},setup(){const v=Ii;if(fl(v),r)return()=>ht(r,v);const u=B=>{d=null,Nn(B,v,13,!n)};if(k&&v.suspense||sn)return A().then(B=>()=>ht(B,v)).catch(B=>(u(B),()=>n?Ti(n,{error:B}):null));const E=li(!1),f=li(),F=li(!!e);return e&&setTimeout(()=>{F.value=!1},e),l!=null&&setTimeout(()=>{if(!E.value&&!f.value){const B=new Error(`Async component timed out after ${l}ms.`);u(B),f.value=B}},l),A().then(()=>{E.value=!0,v.parent&&$n(v.parent.vnode)&&v.parent.update()}).catch(B=>{u(B),f.value=B}),()=>{if(E.value&&r)return ht(r,v);if(f.value&&n)return Ti(n,{error:f.value});if(a&&!F.value)return Ti(a)}}})}function ht(i,s){const{ref:a,props:n,children:e,ce:t}=s.vnode,l=Ti(i,n,e);return l.ref=a,l.ce=t,delete s.vnode.ce,l}const $n=i=>i.type.__isKeepAlive;function Fo(i,s){Cp(i,"a",s)}function fo(i,s){Cp(i,"da",s)}function Cp(i,s,a=Ii){const n=i.__wdc||(i.__wdc=()=>{let e=a;for(;e;){if(e.isDeactivated)return;e=e.parent}return i()});if(Ve(s,n,a),a){let e=a.parent;for(;e&&e.parent;)$n(e.parent.vnode)&&Co(n,s,a,e),e=e.parent}}function Co(i,s,a,n){const e=Ve(s,i,n,!0);Zs(()=>{cl(n[s],e)},a)}function Ve(i,s,a=Ii,n=!1){if(a){const e=a[i]||(a[i]=[]),t=s.__weh||(s.__weh=(...l)=>{qs();const k=Hn(a),p=_s(s,a,i,l);return k(),Ks(),p});return n?e.unshift(t):e.push(t),t}}const Ys=i=>(s,a=Ii)=>{(!sn||i==="sp")&&Ve(i,(...n)=>s(...n),a)},bo=Ys("bm"),vi=Ys("m"),Do=Ys("bu"),bp=Ys("u"),Cl=Ys("bum"),Zs=Ys("um"),_o=Ys("sp"),So=Ys("rtg"),xo=Ys("rtc");function wo(i,s=Ii){Ve("ec",i,s)}const To="components";function xi(i,s){return Lo(To,i,!0,s)||i}const Ro=Symbol.for("v-ndc");function Lo(i,s,a=!0,n=!1){const e=Mi||Ii;if(e){const t=e.type;{const k=BA(t,!1);if(k&&(k===s||k===is(s)||k===Vn(is(s))))return t}const l=yh(e[i]||t[i],s)||yh(e.appContext[i],s);return!l&&n?t:l}}function yh(i,s){return i&&(i[s]||i[is(s)]||i[Vn(is(s))])}function M4(i,s,a,n){let e;const t=a,l=si(i);if(l||Ri(i)){const k=l&&Ca(i);let p=!1,d=!1;k&&(p=!ys(i),d=ca(i),i=Pe(i)),e=new Array(i.length);for(let r=0,c=i.length;r<c;r++)e[r]=s(p?d?ve($i(i[r])):$i(i[r]):i[r],r,void 0,t)}else if(typeof i=="number"){e=new Array(i);for(let k=0;k<i;k++)e[k]=s(k+1,k,void 0,t)}else if(Di(i))if(i[Symbol.iterator])e=Array.from(i,(k,p)=>s(k,p,void 0,t));else{const k=Object.keys(i);e=new Array(k.length);for(let p=0,d=k.length;p<d;p++){const r=k[p];e[p]=s(i[r],r,p,t)}}else e=[];return e}function V4(i,s,a={},n,e){if(Mi.ce||Mi.parent&&ba(Mi.parent)&&Mi.parent.ce)return s!=="default"&&(a.name=s),Nt(),$t(Hi,null,[Ti("slot",a,n)],64);let t=i[s];t&&t._c&&(t._d=!1),Nt();const l=t&&Dp(t(a)),k=a.key||l&&l.key,p=$t(Hi,{key:(k&&!Xs(k)?k:`_${s}`)+""},l||[],l&&i._===1?64:-2);return t&&t._c&&(t._d=!0),p}function Dp(i){return i.some(s=>Rn(s)?!(s.type===Ni||s.type===Hi&&!Dp(s.children)):!0)?i:null}const It=i=>i?Yp(i)?He(i):It(i.parent):null,En=Oi(Object.create(null),{$:i=>i,$el:i=>i.vnode.el,$data:i=>i.data,$props:i=>i.props,$attrs:i=>i.attrs,$slots:i=>i.slots,$refs:i=>i.refs,$parent:i=>It(i.parent),$root:i=>It(i.root),$host:i=>i.ce,$emit:i=>i.emit,$options:i=>Sp(i),$forceUpdate:i=>i.f||(i.f=()=>{ml(i.update)}),$nextTick:i=>i.n||(i.n=Aa.bind(i.proxy)),$watch:i=>iA.bind(i)}),kt=(i,s)=>i!==Ai&&!i.__isScriptSetup&&yi(i,s),Oo={get({_:i},s){if(s==="__v_skip")return!0;const{ctx:a,setupState:n,data:e,props:t,accessCache:l,type:k,appContext:p}=i;let d;if(s[0]!=="$"){const A=l[s];if(A!==void 0)switch(A){case 1:return n[s];case 2:return e[s];case 4:return a[s];case 3:return t[s]}else{if(kt(n,s))return l[s]=1,n[s];if(e!==Ai&&yi(e,s))return l[s]=2,e[s];if((d=i.propsOptions[0])&&yi(d,s))return l[s]=3,t[s];if(a!==Ai&&yi(a,s))return l[s]=4,a[s];Mt&&(l[s]=0)}}const r=En[s];let c,o;if(r)return s==="$attrs"&&Gi(i.attrs,"get",""),r(i);if((c=k.__cssModules)&&(c=c[s]))return c;if(a!==Ai&&yi(a,s))return l[s]=4,a[s];if(o=p.config.globalProperties,yi(o,s))return o[s]},set({_:i},s,a){const{data:n,setupState:e,ctx:t}=i;return kt(e,s)?(e[s]=a,!0):n!==Ai&&yi(n,s)?(n[s]=a,!0):yi(i.props,s)||s[0]==="$"&&s.slice(1)in i?!1:(t[s]=a,!0)},has({_:{data:i,setupState:s,accessCache:a,ctx:n,appContext:e,propsOptions:t}},l){let k;return!!a[l]||i!==Ai&&yi(i,l)||kt(s,l)||(k=t[0])&&yi(k,l)||yi(n,l)||yi(En,l)||yi(e.config.globalProperties,l)},defineProperty(i,s,a){return a.get!=null?i._.accessCache[s]=0:yi(a,"value")&&this.set(i,s,a.value,null),Reflect.defineProperty(i,s,a)}};function Ce(i){return si(i)?i.reduce((s,a)=>(s[a]=null,s),{}):i}function j4(i,s){return!i||!s?i||s:si(i)&&si(s)?i.concat(s):Oi({},Ce(i),Ce(s))}let Mt=!0;function Po(i){const s=Sp(i),a=i.proxy,n=i.ctx;Mt=!1,s.beforeCreate&&uh(s.beforeCreate,i,"bc");const{data:e,computed:t,methods:l,watch:k,provide:p,inject:d,created:r,beforeMount:c,mounted:o,beforeUpdate:A,updated:v,activated:u,deactivated:E,beforeDestroy:f,beforeUnmount:F,destroyed:B,unmounted:C,render:w,renderTracked:$,renderTriggered:I,errorCaptured:j,serverPrefetch:_,expose:O,inheritAttrs:W,components:T,directives:X,filters:G}=s;if(d&&Io(d,n,null),l)for(const ai in l){const K=l[ai];ei(K)&&(n[ai]=K.bind(a))}if(e){const ai=e.call(a,a);Di(ai)&&(i.data=Sa(ai))}if(Mt=!0,t)for(const ai in t){const K=t[ai],hi=ei(K)?K.bind(a,a):ei(K.get)?K.get.bind(a,a):Is,ts=!ei(K)&&ei(K.set)?K.set.bind(a):Is,Ki=b({get:hi,set:ts});Object.defineProperty(n,ai,{enumerable:!0,configurable:!0,get:()=>Ki.value,set:ji=>Ki.value=ji})}if(k)for(const ai in k)_p(k[ai],n,a,ai);if(p){const ai=ei(p)?p.call(a):p;Reflect.ownKeys(ai).forEach(K=>{bs(K,ai[K])})}r&&uh(r,i,"c");function V(ai,K){si(K)?K.forEach(hi=>ai(hi.bind(a))):K&&ai(K.bind(a))}if(V(bo,c),V(vi,o),V(Do,A),V(bp,v),V(Fo,u),V(fo,E),V(wo,j),V(xo,$),V(So,I),V(Cl,F),V(Zs,C),V(_o,_),si(O))if(O.length){const ai=i.exposed||(i.exposed={});O.forEach(K=>{Object.defineProperty(ai,K,{get:()=>a[K],set:hi=>a[K]=hi})})}else i.exposed||(i.exposed={});w&&i.render===Is&&(i.render=w),W!=null&&(i.inheritAttrs=W),T&&(i.components=T),X&&(i.directives=X),_&&fl(i)}function Io(i,s,a=Is){si(i)&&(i=Vt(i));for(const n in i){const e=i[n];let t;Di(e)?"default"in e?t=bi(e.from||n,e.default,!0):t=bi(e.from||n):t=bi(e),Li(t)?Object.defineProperty(s,n,{enumerable:!0,configurable:!0,get:()=>t.value,set:l=>t.value=l}):s[n]=t}}function uh(i,s,a){_s(si(i)?i.map(n=>n.bind(s.proxy)):i.bind(s.proxy),s,a)}function _p(i,s,a,n){let e=n.includes(".")?Hp(a,n):()=>a[n];if(Ri(i)){const t=s[i];ei(t)&&Si(e,t)}else if(ei(i))Si(e,i.bind(a));else if(Di(i))if(si(i))i.forEach(t=>_p(t,s,a,n));else{const t=ei(i.handler)?i.handler.bind(a):s[i.handler];ei(t)&&Si(e,t,i)}}function Sp(i){const s=i.type,{mixins:a,extends:n}=s,{mixins:e,optionsCache:t,config:{optionMergeStrategies:l}}=i.appContext,k=t.get(s);let p;return k?p=k:!e.length&&!a&&!n?p=s:(p={},e.length&&e.forEach(d=>be(p,d,l,!0)),be(p,s,l)),Di(s)&&t.set(s,p),p}function be(i,s,a,n=!1){const{mixins:e,extends:t}=s;t&&be(i,t,a,!0),e&&e.forEach(l=>be(i,l,a,!0));for(const l in s)if(!(n&&l==="expose")){const k=Mo[l]||a&&a[l];i[l]=k?k(i[l],s[l]):s[l]}return i}const Mo={data:vh,props:Eh,emits:Eh,methods:yn,computed:yn,beforeCreate:Xi,created:Xi,beforeMount:Xi,mounted:Xi,beforeUpdate:Xi,updated:Xi,beforeDestroy:Xi,beforeUnmount:Xi,destroyed:Xi,unmounted:Xi,activated:Xi,deactivated:Xi,errorCaptured:Xi,serverPrefetch:Xi,components:yn,directives:yn,watch:jo,provide:vh,inject:Vo};function vh(i,s){return s?i?function(){return Oi(ei(i)?i.call(this,this):i,ei(s)?s.call(this,this):s)}:s:i}function Vo(i,s){return yn(Vt(i),Vt(s))}function Vt(i){if(si(i)){const s={};for(let a=0;a<i.length;a++)s[i[a]]=i[a];return s}return i}function Xi(i,s){return i?[...new Set([].concat(i,s))]:s}function yn(i,s){return i?Oi(Object.create(null),i,s):s}function Eh(i,s){return i?si(i)&&si(s)?[...new Set([...i,...s])]:Oi(Object.create(null),Ce(i),Ce(s??{})):s}function jo(i,s){if(!i)return s;if(!s)return i;const a=Oi(Object.create(null),i);for(const n in s)a[n]=Xi(i[n],s[n]);return a}function xp(){return{app:null,config:{isNativeTag:uc,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let No=0;function $o(i,s){return function(n,e=null){ei(n)||(n=Oi({},n)),e!=null&&!Di(e)&&(e=null);const t=xp(),l=new WeakSet,k=[];let p=!1;const d=t.app={_uid:No++,_component:n,_props:e,_container:null,_context:t,_instance:null,version:ir,get config(){return t.config},set config(r){},use(r,...c){return l.has(r)||(r&&ei(r.install)?(l.add(r),r.install(d,...c)):ei(r)&&(l.add(r),r(d,...c))),d},mixin(r){return t.mixins.includes(r)||t.mixins.push(r),d},component(r,c){return c?(t.components[r]=c,d):t.components[r]},directive(r,c){return c?(t.directives[r]=c,d):t.directives[r]},mount(r,c,o){if(!p){const A=d._ceVNode||Ti(n,e);return A.appContext=t,o===!0?o="svg":o===!1&&(o=void 0),c&&s?s(A,r):i(A,r,o),p=!0,d._container=r,r.__vue_app__=d,He(A.component)}},onUnmount(r){k.push(r)},unmount(){p&&(_s(k,d._instance,16),i(null,d._container),delete d._container.__vue_app__)},provide(r,c){return t.provides[r]=c,d},runWithContext(r){const c=Da;Da=d;try{return r()}finally{Da=c}}};return d}}let Da=null;function bs(i,s){if(Ii){let a=Ii.provides;const n=Ii.parent&&Ii.parent.provides;n===a&&(a=Ii.provides=Object.create(n)),a[i]=s}}function bi(i,s,a=!1){const n=Ii||Mi;if(n||Da){let e=Da?Da._context.provides:n?n.parent==null||n.ce?n.vnode.appContext&&n.vnode.appContext.provides:n.parent.provides:void 0;if(e&&i in e)return e[i];if(arguments.length>1)return a&&ei(s)?s.call(n&&n.proxy):s}}function wp(){return!!(Ii||Mi||Da)}const Tp={},Rp=()=>Object.create(Tp),Lp=i=>Object.getPrototypeOf(i)===Tp;function Ho(i,s,a,n=!1){const e={},t=Rp();i.propsDefaults=Object.create(null),Op(i,s,e,t);for(const l in i.propsOptions[0])l in e||(e[l]=void 0);a?i.props=n?e:kp(e):i.type.props?i.props=e:i.props=t,i.attrs=t}function Wo(i,s,a,n){const{props:e,attrs:t,vnode:{patchFlag:l}}=i,k=ci(e),[p]=i.propsOptions;let d=!1;if((n||l>0)&&!(l&16)){if(l&8){const r=i.vnode.dynamicProps;for(let c=0;c<r.length;c++){let o=r[c];if($e(i.emitsOptions,o))continue;const A=s[o];if(p)if(yi(t,o))A!==t[o]&&(t[o]=A,d=!0);else{const v=is(o);e[v]=jt(p,k,v,A,i,!1)}else A!==t[o]&&(t[o]=A,d=!0)}}}else{Op(i,s,e,t)&&(d=!0);let r;for(const c in k)(!s||!yi(s,c)&&((r=Qs(c))===c||!yi(s,r)))&&(p?a&&(a[c]!==void 0||a[r]!==void 0)&&(e[c]=jt(p,k,c,void 0,i,!0)):delete e[c]);if(t!==k)for(const c in t)(!s||!yi(s,c))&&(delete t[c],d=!0)}d&&Js(i.attrs,"set","")}function Op(i,s,a,n){const[e,t]=i.propsOptions;let l=!1,k;if(s)for(let p in s){if(Ga(p))continue;const d=s[p];let r;e&&yi(e,r=is(p))?!t||!t.includes(r)?a[r]=d:(k||(k={}))[r]=d:$e(i.emitsOptions,p)||(!(p in n)||d!==n[p])&&(n[p]=d,l=!0)}if(t){const p=ci(a),d=k||Ai;for(let r=0;r<t.length;r++){const c=t[r];a[c]=jt(e,p,c,d[c],i,!yi(d,c))}}return l}function jt(i,s,a,n,e,t){const l=i[a];if(l!=null){const k=yi(l,"default");if(k&&n===void 0){const p=l.default;if(l.type!==Function&&!l.skipFactory&&ei(p)){const{propsDefaults:d}=e;if(a in d)n=d[a];else{const r=Hn(e);n=d[a]=p.call(null,s),r()}}else n=p;e.ce&&e.ce._setProp(a,n)}l[0]&&(t&&!k?n=!1:l[1]&&(n===""||n===Qs(a))&&(n=!0))}return n}const Uo=new WeakMap;function Pp(i,s,a=!1){const n=a?Uo:s.propsCache,e=n.get(i);if(e)return e;const t=i.props,l={},k=[];let p=!1;if(!ei(i)){const r=c=>{p=!0;const[o,A]=Pp(c,s,!0);Oi(l,o),A&&k.push(...A)};!a&&s.mixins.length&&s.mixins.forEach(r),i.extends&&r(i.extends),i.mixins&&i.mixins.forEach(r)}if(!t&&!p)return Di(i)&&n.set(i,za),za;if(si(t))for(let r=0;r<t.length;r++){const c=is(t[r]);mh(c)&&(l[c]=Ai)}else if(t)for(const r in t){const c=is(r);if(mh(c)){const o=t[r],A=l[c]=si(o)||ei(o)?{type:o}:Oi({},o),v=A.type;let u=!1,E=!0;if(si(v))for(let f=0;f<v.length;++f){const F=v[f],B=ei(F)&&F.name;if(B==="Boolean"){u=!0;break}else B==="String"&&(E=!1)}else u=ei(v)&&v.name==="Boolean";A[0]=u,A[1]=E,(u||yi(A,"default"))&&k.push(c)}}const d=[l,k];return Di(i)&&n.set(i,d),d}function mh(i){return i[0]!=="$"&&!Ga(i)}const bl=i=>i[0]==="_"||i==="$stable",Dl=i=>si(i)?i.map(Bs):[Bs(i)],zo=(i,s,a)=>{if(s._n)return s;const n=oo((...e)=>Dl(s(...e)),a);return n._c=!1,n},Ip=(i,s,a)=>{const n=i._ctx;for(const e in i){if(bl(e))continue;const t=i[e];if(ei(t))s[e]=zo(e,t,n);else if(t!=null){const l=Dl(t);s[e]=()=>l}}},Mp=(i,s)=>{const a=Dl(s);i.slots.default=()=>a},Vp=(i,s,a)=>{for(const n in s)(a||!bl(n))&&(i[n]=s[n])},Jo=(i,s,a)=>{const n=i.slots=Rp();if(i.vnode.shapeFlag&32){const e=s.__;e&&Tt(n,"__",e,!0);const t=s._;t?(Vp(n,s,a),a&&Tt(n,"_",t,!0)):Ip(s,n)}else s&&Mp(i,s)},Go=(i,s,a)=>{const{vnode:n,slots:e}=i;let t=!0,l=Ai;if(n.shapeFlag&32){const k=s._;k?a&&k===1?t=!1:Vp(e,s,a):(t=!s.$stable,Ip(s,e)),l=s}else s&&(Mp(i,s),l={default:1});if(t)for(const k in e)!bl(k)&&l[k]==null&&delete e[k]},ps=Gp;function qo(i){return Ko(i,vo)}function Ko(i,s){const a=Le();a.__VUE__=!0;const{insert:n,remove:e,patchProp:t,createElement:l,createText:k,createComment:p,setText:d,setElementText:r,parentNode:c,nextSibling:o,setScopeId:A=Is,insertStaticContent:v}=i,u=(y,m,D,R=null,x=null,L=null,z=void 0,H=null,N=!!m.dynamicChildren)=>{if(y===m)return;y&&!ma(y,m)&&(R=S(y),ji(y,x,L,!0),y=null),m.patchFlag===-2&&(N=!1,m.dynamicChildren=null);const{type:P,ref:ii,shapeFlag:J}=m;switch(P){case _a:E(y,m,D,R);break;case Ni:f(y,m,D,R);break;case mn:y==null&&F(m,D,R,z);break;case Hi:T(y,m,D,R,x,L,z,H,N);break;default:J&1?w(y,m,D,R,x,L,z,H,N):J&6?X(y,m,D,R,x,L,z,H,N):(J&64||J&128)&&P.process(y,m,D,R,x,L,z,H,N,Q)}ii!=null&&x?Ka(ii,y&&y.ref,L,m||y,!m):ii==null&&y&&y.ref!=null&&Ka(y.ref,null,L,y,!0)},E=(y,m,D,R)=>{if(y==null)n(m.el=k(m.children),D,R);else{const x=m.el=y.el;m.children!==y.children&&d(x,m.children)}},f=(y,m,D,R)=>{y==null?n(m.el=p(m.children||""),D,R):m.el=y.el},F=(y,m,D,R)=>{[y.el,y.anchor]=v(y.children,m,D,R,y.el,y.anchor)},B=({el:y,anchor:m},D,R)=>{let x;for(;y&&y!==m;)x=o(y),n(y,D,R),y=x;n(m,D,R)},C=({el:y,anchor:m})=>{let D;for(;y&&y!==m;)D=o(y),e(y),y=D;e(m)},w=(y,m,D,R,x,L,z,H,N)=>{m.type==="svg"?z="svg":m.type==="math"&&(z="mathml"),y==null?$(m,D,R,x,L,z,H,N):_(y,m,x,L,z,H,N)},$=(y,m,D,R,x,L,z,H)=>{let N,P;const{props:ii,shapeFlag:J,transition:Y,dirs:ti}=y;if(N=y.el=l(y.type,L,ii&&ii.is,ii),J&8?r(N,y.children):J&16&&j(y.children,N,null,R,x,pt(y,L),z,H),ti&&Ps(y,null,R,"created"),I(N,y,y.scopeId,z,R),ii){for(const Fi in ii)Fi!=="value"&&!Ga(Fi)&&t(N,Fi,null,ii[Fi],L,R);"value"in ii&&t(N,"value",null,ii.value,L),(P=ii.onVnodeBeforeMount)&&As(P,R,y)}ti&&Ps(y,null,R,"beforeMount");const di=jp(x,Y);di&&Y.beforeEnter(N),n(N,m,D),((P=ii&&ii.onVnodeMounted)||di||ti)&&ps(()=>{P&&As(P,R,y),di&&Y.enter(N),ti&&Ps(y,null,R,"mounted")},x)},I=(y,m,D,R,x)=>{if(D&&A(y,D),R)for(let L=0;L<R.length;L++)A(y,R[L]);if(x){let L=x.subTree;if(m===L||Jp(L.type)&&(L.ssContent===m||L.ssFallback===m)){const z=x.vnode;I(y,z,z.scopeId,z.slotScopeIds,x.parent)}}},j=(y,m,D,R,x,L,z,H,N=0)=>{for(let P=N;P<y.length;P++){const ii=y[P]=H?pa(y[P]):Bs(y[P]);u(null,ii,m,D,R,x,L,z,H)}},_=(y,m,D,R,x,L,z)=>{const H=m.el=y.el;let{patchFlag:N,dynamicChildren:P,dirs:ii}=m;N|=y.patchFlag&16;const J=y.props||Ai,Y=m.props||Ai;let ti;if(D&&ya(D,!1),(ti=Y.onVnodeBeforeUpdate)&&As(ti,D,m,y),ii&&Ps(m,y,D,"beforeUpdate"),D&&ya(D,!0),(J.innerHTML&&Y.innerHTML==null||J.textContent&&Y.textContent==null)&&r(H,""),P?O(y.dynamicChildren,P,H,D,R,pt(m,x),L):z||K(y,m,H,null,D,R,pt(m,x),L,!1),N>0){if(N&16)W(H,J,Y,D,x);else if(N&2&&J.class!==Y.class&&t(H,"class",null,Y.class,x),N&4&&t(H,"style",J.style,Y.style,x),N&8){const di=m.dynamicProps;for(let Fi=0;Fi<di.length;Fi++){const ui=di[Fi],ss=J[ui],zi=Y[ui];(zi!==ss||ui==="value")&&t(H,ui,ss,zi,x,D)}}N&1&&y.children!==m.children&&r(H,m.children)}else!z&&P==null&&W(H,J,Y,D,x);((ti=Y.onVnodeUpdated)||ii)&&ps(()=>{ti&&As(ti,D,m,y),ii&&Ps(m,y,D,"updated")},R)},O=(y,m,D,R,x,L,z)=>{for(let H=0;H<m.length;H++){const N=y[H],P=m[H],ii=N.el&&(N.type===Hi||!ma(N,P)||N.shapeFlag&198)?c(N.el):D;u(N,P,ii,null,R,x,L,z,!0)}},W=(y,m,D,R,x)=>{if(m!==D){if(m!==Ai)for(const L in m)!Ga(L)&&!(L in D)&&t(y,L,m[L],null,x,R);for(const L in D){if(Ga(L))continue;const z=D[L],H=m[L];z!==H&&L!=="value"&&t(y,L,H,z,x,R)}"value"in D&&t(y,"value",m.value,D.value,x)}},T=(y,m,D,R,x,L,z,H,N)=>{const P=m.el=y?y.el:k(""),ii=m.anchor=y?y.anchor:k("");let{patchFlag:J,dynamicChildren:Y,slotScopeIds:ti}=m;ti&&(H=H?H.concat(ti):ti),y==null?(n(P,D,R),n(ii,D,R),j(m.children||[],D,ii,x,L,z,H,N)):J>0&&J&64&&Y&&y.dynamicChildren?(O(y.dynamicChildren,Y,D,x,L,z,H),(m.key!=null||x&&m===x.subTree)&&Np(y,m,!0)):K(y,m,D,ii,x,L,z,H,N)},X=(y,m,D,R,x,L,z,H,N)=>{m.slotScopeIds=H,y==null?m.shapeFlag&512?x.ctx.activate(m,D,R,z,N):G(m,D,R,x,L,z,N):Z(y,m,N)},G=(y,m,D,R,x,L,z)=>{const H=y.component=dA(y,R,x);if($n(y)&&(H.ctx.renderer=Q),cA(H,!1,z),H.asyncDep){if(x&&x.registerDep(H,V,z),!y.el){const N=H.subTree=Ti(Ni);f(null,N,m,D)}}else V(H,y,m,D,x,L,z)},Z=(y,m,D)=>{const R=m.component=y.component;if(eA(y,m,D))if(R.asyncDep&&!R.asyncResolved){ai(R,m,D);return}else R.next=m,R.update();else m.el=y.el,R.vnode=m},V=(y,m,D,R,x,L,z)=>{const H=()=>{if(y.isMounted){let{next:J,bu:Y,u:ti,parent:di,vnode:Fi}=y;{const hs=$p(y);if(hs){J&&(J.el=Fi.el,ai(y,J,z)),hs.asyncDep.then(()=>{y.isUnmounted||H()});return}}let ui=J,ss;ya(y,!1),J?(J.el=Fi.el,ai(y,J,z)):J=Fi,Y&&oe(Y),(ss=J.props&&J.props.onVnodeBeforeUpdate)&&As(ss,di,J,Fi),ya(y,!0);const zi=rt(y),Fs=y.subTree;y.subTree=zi,u(Fs,zi,c(Fs.el),S(Fs),y,x,L),J.el=zi.el,ui===null&&zp(y,zi.el),ti&&ps(ti,x),(ss=J.props&&J.props.onVnodeUpdated)&&ps(()=>As(ss,di,J,Fi),x)}else{let J;const{el:Y,props:ti}=m,{bm:di,m:Fi,parent:ui,root:ss,type:zi}=y,Fs=ba(m);if(ya(y,!1),di&&oe(di),!Fs&&(J=ti&&ti.onVnodeBeforeMount)&&As(J,ui,m),ya(y,!0),Y&&Ei){const hs=()=>{y.subTree=rt(y),Ei(Y,y.subTree,y,x,null)};Fs&&zi.__asyncHydrate?zi.__asyncHydrate(Y,y,hs):hs()}else{ss.ce&&ss.ce._def.shadowRoot!==!1&&ss.ce._injectChildStyle(zi);const hs=y.subTree=rt(y);u(null,hs,D,R,y,x,L),m.el=hs.el}if(Fi&&ps(Fi,x),!Fs&&(J=ti&&ti.onVnodeMounted)){const hs=m;ps(()=>As(J,ui,hs),x)}(m.shapeFlag&256||ui&&ba(ui.vnode)&&ui.vnode.shapeFlag&256)&&y.a&&ps(y.a,x),y.isMounted=!0,m=D=R=null}};y.scope.on();const N=y.effect=new Jk(H);y.scope.off();const P=y.update=N.run.bind(N),ii=y.job=N.runIfDirty.bind(N);ii.i=y,ii.id=y.uid,N.scheduler=()=>ml(ii),ya(y,!0),P()},ai=(y,m,D)=>{m.component=y;const R=y.vnode.props;y.vnode=m,y.next=null,Wo(y,m.props,R,D),Go(y,m.children,D),qs(),oh(y),Ks()},K=(y,m,D,R,x,L,z,H,N=!1)=>{const P=y&&y.children,ii=y?y.shapeFlag:0,J=m.children,{patchFlag:Y,shapeFlag:ti}=m;if(Y>0){if(Y&128){ts(P,J,D,R,x,L,z,H,N);return}else if(Y&256){hi(P,J,D,R,x,L,z,H,N);return}}ti&8?(ii&16&&Ui(P,x,L),J!==P&&r(D,J)):ii&16?ti&16?ts(P,J,D,R,x,L,z,H,N):Ui(P,x,L,!0):(ii&8&&r(D,""),ti&16&&j(J,D,R,x,L,z,H,N))},hi=(y,m,D,R,x,L,z,H,N)=>{y=y||za,m=m||za;const P=y.length,ii=m.length,J=Math.min(P,ii);let Y;for(Y=0;Y<J;Y++){const ti=m[Y]=N?pa(m[Y]):Bs(m[Y]);u(y[Y],ti,D,null,x,L,z,H,N)}P>ii?Ui(y,x,L,!0,!1,J):j(m,D,R,x,L,z,H,N,J)},ts=(y,m,D,R,x,L,z,H,N)=>{let P=0;const ii=m.length;let J=y.length-1,Y=ii-1;for(;P<=J&&P<=Y;){const ti=y[P],di=m[P]=N?pa(m[P]):Bs(m[P]);if(ma(ti,di))u(ti,di,D,null,x,L,z,H,N);else break;P++}for(;P<=J&&P<=Y;){const ti=y[J],di=m[Y]=N?pa(m[Y]):Bs(m[Y]);if(ma(ti,di))u(ti,di,D,null,x,L,z,H,N);else break;J--,Y--}if(P>J){if(P<=Y){const ti=Y+1,di=ti<ii?m[ti].el:R;for(;P<=Y;)u(null,m[P]=N?pa(m[P]):Bs(m[P]),D,di,x,L,z,H,N),P++}}else if(P>Y)for(;P<=J;)ji(y[P],x,L,!0),P++;else{const ti=P,di=P,Fi=new Map;for(P=di;P<=Y;P++){const ks=m[P]=N?pa(m[P]):Bs(m[P]);ks.key!=null&&Fi.set(ks.key,P)}let ui,ss=0;const zi=Y-di+1;let Fs=!1,hs=0;const dn=new Array(zi);for(P=0;P<zi;P++)dn[P]=0;for(P=ti;P<=J;P++){const ks=y[P];if(ss>=zi){ji(ks,x,L,!0);continue}let Rs;if(ks.key!=null)Rs=Fi.get(ks.key);else for(ui=di;ui<=Y;ui++)if(dn[ui-di]===0&&ma(ks,m[ui])){Rs=ui;break}Rs===void 0?ji(ks,x,L,!0):(dn[Rs-di]=P+1,Rs>=hs?hs=Rs:Fs=!0,u(ks,m[Rs],D,null,x,L,z,H,N),ss++)}const hh=Fs?Xo(dn):za;for(ui=hh.length-1,P=zi-1;P>=0;P--){const ks=di+P,Rs=m[ks],kh=ks+1<ii?m[ks+1].el:R;dn[P]===0?u(null,Rs,D,kh,x,L,z,H,N):Fs&&(ui<0||P!==hh[ui]?Ki(Rs,D,kh,2):ui--)}}},Ki=(y,m,D,R,x=null)=>{const{el:L,type:z,transition:H,children:N,shapeFlag:P}=y;if(P&6){Ki(y.component.subTree,m,D,R);return}if(P&128){y.suspense.move(m,D,R);return}if(P&64){z.move(y,m,D,Q);return}if(z===Hi){n(L,m,D);for(let J=0;J<N.length;J++)Ki(N[J],m,D,R);n(y.anchor,m,D);return}if(z===mn){B(y,m,D);return}if(R!==2&&P&1&&H)if(R===0)H.beforeEnter(L),n(L,m,D),ps(()=>H.enter(L),x);else{const{leave:J,delayLeave:Y,afterLeave:ti}=H,di=()=>{y.ctx.isUnmounted?e(L):n(L,m,D)},Fi=()=>{J(L,()=>{di(),ti&&ti()})};Y?Y(L,di,Fi):Fi()}else n(L,m,D)},ji=(y,m,D,R=!1,x=!1)=>{const{type:L,props:z,ref:H,children:N,dynamicChildren:P,shapeFlag:ii,patchFlag:J,dirs:Y,cacheIndex:ti}=y;if(J===-2&&(x=!1),H!=null&&(qs(),Ka(H,null,D,y,!0),Ks()),ti!=null&&(m.renderCache[ti]=void 0),ii&256){m.ctx.deactivate(y);return}const di=ii&1&&Y,Fi=!ba(y);let ui;if(Fi&&(ui=z&&z.onVnodeBeforeUnmount)&&As(ui,m,y),ii&6)Ts(y.component,D,R);else{if(ii&128){y.suspense.unmount(D,R);return}di&&Ps(y,null,m,"beforeUnmount"),ii&64?y.type.remove(y,m,D,Q,R):P&&!P.hasOnce&&(L!==Hi||J>0&&J&64)?Ui(P,m,D,!1,!0):(L===Hi&&J&384||!x&&ii&16)&&Ui(N,m,D),R&&ls(y)}(Fi&&(ui=z&&z.onVnodeUnmounted)||di)&&ps(()=>{ui&&As(ui,m,y),di&&Ps(y,null,m,"unmounted")},D)},ls=y=>{const{type:m,el:D,anchor:R,transition:x}=y;if(m===Hi){Ns(D,R);return}if(m===mn){C(y);return}const L=()=>{e(D),x&&!x.persisted&&x.afterLeave&&x.afterLeave()};if(y.shapeFlag&1&&x&&!x.persisted){const{leave:z,delayLeave:H}=x,N=()=>z(D,L);H?H(y.el,L,N):N()}else L()},Ns=(y,m)=>{let D;for(;y!==m;)D=o(y),e(y),y=D;e(m)},Ts=(y,m,D)=>{const{bum:R,scope:x,job:L,subTree:z,um:H,m:N,a:P,parent:ii,slots:{__:J}}=y;Fh(N),Fh(P),R&&oe(R),ii&&si(J)&&J.forEach(Y=>{ii.renderCache[Y]=void 0}),x.stop(),L&&(L.flags|=8,ji(z,y,m,D)),H&&ps(H,m),ps(()=>{y.isUnmounted=!0},m),m&&m.pendingBranch&&!m.isUnmounted&&y.asyncDep&&!y.asyncResolved&&y.suspenseId===m.pendingId&&(m.deps--,m.deps===0&&m.resolve())},Ui=(y,m,D,R=!1,x=!1,L=0)=>{for(let z=L;z<y.length;z++)ji(y[z],m,D,R,x)},S=y=>{if(y.shapeFlag&6)return S(y.component.subTree);if(y.shapeFlag&128)return y.suspense.next();const m=o(y.anchor||y.el),D=m&&m[Ao];return D?o(D):m};let q=!1;const U=(y,m,D)=>{y==null?m._vnode&&ji(m._vnode,null,null,!0):u(m._vnode||null,y,m,null,null,null,D),m._vnode=y,q||(q=!0,oh(),Fe(),q=!1)},Q={p:u,um:ji,m:Ki,r:ls,mt:G,mc:j,pc:K,pbc:O,n:S,o:i};let oi,Ei;return s&&([oi,Ei]=s(Q)),{render:U,hydrate:oi,createApp:$o(U,oi)}}function pt({type:i,props:s},a){return a==="svg"&&i==="foreignObject"||a==="mathml"&&i==="annotation-xml"&&s&&s.encoding&&s.encoding.includes("html")?void 0:a}function ya({effect:i,job:s},a){a?(i.flags|=32,s.flags|=4):(i.flags&=-33,s.flags&=-5)}function jp(i,s){return(!i||i&&!i.pendingBranch)&&s&&!s.persisted}function Np(i,s,a=!1){const n=i.children,e=s.children;if(si(n)&&si(e))for(let t=0;t<n.length;t++){const l=n[t];let k=e[t];k.shapeFlag&1&&!k.dynamicChildren&&((k.patchFlag<=0||k.patchFlag===32)&&(k=e[t]=pa(e[t]),k.el=l.el),!a&&k.patchFlag!==-2&&Np(l,k)),k.type===_a&&(k.el=l.el),k.type===Ni&&!k.el&&(k.el=l.el)}}function Xo(i){const s=i.slice(),a=[0];let n,e,t,l,k;const p=i.length;for(n=0;n<p;n++){const d=i[n];if(d!==0){if(e=a[a.length-1],i[e]<d){s[n]=e,a.push(n);continue}for(t=0,l=a.length-1;t<l;)k=t+l>>1,i[a[k]]<d?t=k+1:l=k;d<i[a[t]]&&(t>0&&(s[n]=a[t-1]),a[t]=n)}}for(t=a.length,l=a[t-1];t-- >0;)a[t]=l,l=s[l];return a}function $p(i){const s=i.subTree.component;if(s)return s.asyncDep&&!s.asyncResolved?s:$p(s)}function Fh(i){if(i)for(let s=0;s<i.length;s++)i[s].flags|=8}const Qo=Symbol.for("v-scx"),Yo=()=>bi(Qo);function je(i,s){return Ne(i,null,s)}function Zo(i,s){return Ne(i,null,{flush:"sync"})}function Si(i,s,a){return Ne(i,s,a)}function Ne(i,s,a=Ai){const{immediate:n,deep:e,flush:t,once:l}=a,k=Oi({},a),p=s&&n||!s&&t!=="post";let d;if(sn){if(t==="sync"){const A=Yo();d=A.__watcherHandles||(A.__watcherHandles=[])}else if(!p){const A=()=>{};return A.stop=Is,A.resume=Is,A.pause=Is,A}}const r=Ii;k.call=(A,v,u)=>_s(A,r,v,u);let c=!1;t==="post"?k.scheduler=A=>{ps(A,r&&r.suspense)}:t!=="sync"&&(c=!0,k.scheduler=(A,v)=>{v?A():ml(A)}),k.augmentJob=A=>{s&&(A.flags|=4),c&&(A.flags|=2,r&&(A.id=r.uid,A.i=r))};const o=ko(i,s,k);return sn&&(d?d.push(o):p&&o()),o}function iA(i,s,a){const n=this.proxy,e=Ri(i)?i.includes(".")?Hp(n,i):()=>n[i]:i.bind(n,n);let t;ei(s)?t=s:(t=s.handler,a=s);const l=Hn(this),k=Ne(e,t.bind(n),a);return l(),k}function Hp(i,s){const a=s.split(".");return()=>{let n=i;for(let e=0;e<a.length&&n;e++)n=n[a[e]];return n}}function N4(i,s,a=Ai){const n=ia(),e=is(s),t=Qs(s),l=Wp(i,e),k=El((p,d)=>{let r,c=Ai,o;return Zo(()=>{const A=i[e];as(r,A)&&(r=A,d())}),{get(){return p(),a.get?a.get(r):r},set(A){const v=a.set?a.set(A):A;if(!as(v,r)&&!(c!==Ai&&as(A,c)))return;const u=n.vnode.props;u&&(s in u||e in u||t in u)&&(`onUpdate:${s}`in u||`onUpdate:${e}`in u||`onUpdate:${t}`in u)||(r=A,d()),n.emit(`update:${s}`,v),as(A,v)&&as(A,c)&&!as(v,o)&&d(),c=A,o=v}}});return k[Symbol.iterator]=()=>{let p=0;return{next(){return p<2?{value:p++?l||Ai:k,done:!1}:{done:!0}}}},k}const Wp=(i,s)=>s==="modelValue"||s==="model-value"?i.modelModifiers:i[`${s}Modifiers`]||i[`${is(s)}Modifiers`]||i[`${Qs(s)}Modifiers`];function sA(i,s,...a){if(i.isUnmounted)return;const n=i.vnode.props||Ai;let e=a;const t=s.startsWith("update:"),l=t&&Wp(n,s.slice(7));l&&(l.trim&&(e=a.map(r=>Ri(r)?r.trim():r)),l.number&&(e=a.map(Rt)));let k,p=n[k=st(s)]||n[k=st(is(s))];!p&&t&&(p=n[k=st(Qs(s))]),p&&_s(p,i,6,e);const d=n[k+"Once"];if(d){if(!i.emitted)i.emitted={};else if(i.emitted[k])return;i.emitted[k]=!0,_s(d,i,6,e)}}function Up(i,s,a=!1){const n=s.emitsCache,e=n.get(i);if(e!==void 0)return e;const t=i.emits;let l={},k=!1;if(!ei(i)){const p=d=>{const r=Up(d,s,!0);r&&(k=!0,Oi(l,r))};!a&&s.mixins.length&&s.mixins.forEach(p),i.extends&&p(i.extends),i.mixins&&i.mixins.forEach(p)}return!t&&!k?(Di(i)&&n.set(i,null),null):(si(t)?t.forEach(p=>l[p]=null):Oi(l,t),Di(i)&&n.set(i,l),l)}function $e(i,s){return!i||!Mn(s)?!1:(s=s.slice(2).replace(/Once$/,""),yi(i,s[0].toLowerCase()+s.slice(1))||yi(i,Qs(s))||yi(i,s))}function rt(i){const{type:s,vnode:a,proxy:n,withProxy:e,propsOptions:[t],slots:l,attrs:k,emit:p,render:d,renderCache:r,props:c,data:o,setupState:A,ctx:v,inheritAttrs:u}=i,E=fe(i);let f,F;try{if(a.shapeFlag&4){const C=e||n,w=C;f=Bs(d.call(w,C,r,c,A,o,v)),F=k}else{const C=s;f=Bs(C.length>1?C(c,{attrs:k,slots:l,emit:p}):C(c,null)),F=s.props?k:aA(k)}}catch(C){Fn.length=0,Nn(C,i,1),f=Ti(Ni)}let B=f;if(F&&u!==!1){const C=Object.keys(F),{shapeFlag:w}=B;C.length&&w&7&&(t&&C.some(dl)&&(F=nA(F,t)),B=oa(B,F,!1,!0))}return a.dirs&&(B=oa(B,null,!1,!0),B.dirs=B.dirs?B.dirs.concat(a.dirs):a.dirs),a.transition&&xa(B,a.transition),f=B,fe(E),f}const aA=i=>{let s;for(const a in i)(a==="class"||a==="style"||Mn(a))&&((s||(s={}))[a]=i[a]);return s},nA=(i,s)=>{const a={};for(const n in i)(!dl(n)||!(n.slice(9)in s))&&(a[n]=i[n]);return a};function eA(i,s,a){const{props:n,children:e,component:t}=i,{props:l,children:k,patchFlag:p}=s,d=t.emitsOptions;if(s.dirs||s.transition)return!0;if(a&&p>=0){if(p&1024)return!0;if(p&16)return n?fh(n,l,d):!!l;if(p&8){const r=s.dynamicProps;for(let c=0;c<r.length;c++){const o=r[c];if(l[o]!==n[o]&&!$e(d,o))return!0}}}else return(e||k)&&(!k||!k.$stable)?!0:n===l?!1:n?l?fh(n,l,d):!0:!!l;return!1}function fh(i,s,a){const n=Object.keys(s);if(n.length!==Object.keys(i).length)return!0;for(let e=0;e<n.length;e++){const t=n[e];if(s[t]!==i[t]&&!$e(a,t))return!0}return!1}function zp({vnode:i,parent:s},a){for(;s;){const n=s.subTree;if(n.suspense&&n.suspense.activeBranch===i&&(n.el=i.el),n===i)(i=s.vnode).el=a,s=s.parent;else break}}const Jp=i=>i.__isSuspense;function Gp(i,s){s&&s.pendingBranch?si(i)?s.effects.push(...i):s.effects.push(i):co(i)}const Hi=Symbol.for("v-fgt"),_a=Symbol.for("v-txt"),Ni=Symbol.for("v-cmt"),mn=Symbol.for("v-stc"),Fn=[];let ds=null;function Nt(i=!1){Fn.push(ds=i?null:[])}function tA(){Fn.pop(),ds=Fn[Fn.length-1]||null}let Tn=1;function Ch(i,s=!1){Tn+=i,i<0&&ds&&s&&(ds.hasOnce=!0)}function qp(i){return i.dynamicChildren=Tn>0?ds||za:null,tA(),Tn>0&&ds&&ds.push(i),i}function $4(i,s,a,n,e,t){return qp(Xp(i,s,a,n,e,t,!0))}function $t(i,s,a,n,e){return qp(Ti(i,s,a,n,e,!0))}function Rn(i){return i?i.__v_isVNode===!0:!1}function ma(i,s){return i.type===s.type&&i.key===s.key}const Kp=({key:i})=>i??null,Ae=({ref:i,ref_key:s,ref_for:a})=>(typeof i=="number"&&(i=""+i),i!=null?Ri(i)||Li(i)||ei(i)?{i:Mi,r:i,k:s,f:!!a}:i:null);function Xp(i,s=null,a=null,n=0,e=null,t=i===Hi?0:1,l=!1,k=!1){const p={__v_isVNode:!0,__v_skip:!0,type:i,props:s,key:s&&Kp(s),ref:s&&Ae(s),scopeId:gp,slotScopeIds:null,children:a,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetStart:null,targetAnchor:null,staticCount:0,shapeFlag:t,patchFlag:n,dynamicProps:e,dynamicChildren:null,appContext:null,ctx:Mi};return k?(_l(p,a),t&128&&i.normalize(p)):a&&(p.shapeFlag|=Ri(a)?8:16),Tn>0&&!l&&ds&&(p.patchFlag>0||t&6)&&p.patchFlag!==32&&ds.push(p),p}const Ti=lA;function lA(i,s=null,a=null,n=0,e=null,t=!1){if((!i||i===Ro)&&(i=Ni),Rn(i)){const k=oa(i,s,!0);return a&&_l(k,a),Tn>0&&!t&&ds&&(k.shapeFlag&6?ds[ds.indexOf(i)]=k:ds.push(k)),k.patchFlag=-2,k}if(yA(i)&&(i=i.__vccOpts),s){s=hA(s);let{class:k,style:p}=s;k&&!Ri(k)&&(s.class=gl(k)),Di(p)&&(vl(p)&&!si(p)&&(p=Oi({},p)),s.style=Al(p))}const l=Ri(i)?1:Jp(i)?128:Bp(i)?64:Di(i)?4:ei(i)?2:0;return Xp(i,s,a,n,e,l,t,!0)}function hA(i){return i?vl(i)||Lp(i)?Oi({},i):i:null}function oa(i,s,a=!1,n=!1){const{props:e,ref:t,patchFlag:l,children:k,transition:p}=i,d=s?kA(e||{},s):e,r={__v_isVNode:!0,__v_skip:!0,type:i.type,props:d,key:d&&Kp(d),ref:s&&s.ref?a&&t?si(t)?t.concat(Ae(s)):[t,Ae(s)]:Ae(s):t,scopeId:i.scopeId,slotScopeIds:i.slotScopeIds,children:k,target:i.target,targetStart:i.targetStart,targetAnchor:i.targetAnchor,staticCount:i.staticCount,shapeFlag:i.shapeFlag,patchFlag:s&&i.type!==Hi?l===-1?16:l|16:l,dynamicProps:i.dynamicProps,dynamicChildren:i.dynamicChildren,appContext:i.appContext,dirs:i.dirs,transition:p,component:i.component,suspense:i.suspense,ssContent:i.ssContent&&oa(i.ssContent),ssFallback:i.ssFallback&&oa(i.ssFallback),el:i.el,anchor:i.anchor,ctx:i.ctx,ce:i.ce};return p&&n&&xa(r,p.clone(r)),r}function Qp(i=" ",s=0){return Ti(_a,null,i,s)}function H4(i,s){const a=Ti(mn,null,i);return a.staticCount=s,a}function W4(i="",s=!1){return s?(Nt(),$t(Ni,null,i)):Ti(Ni,null,i)}function Bs(i){return i==null||typeof i=="boolean"?Ti(Ni):si(i)?Ti(Hi,null,i.slice()):Rn(i)?pa(i):Ti(_a,null,String(i))}function pa(i){return i.el===null&&i.patchFlag!==-1||i.memo?i:oa(i)}function _l(i,s){let a=0;const{shapeFlag:n}=i;if(s==null)s=null;else if(si(s))a=16;else if(typeof s=="object")if(n&65){const e=s.default;e&&(e._c&&(e._d=!1),_l(i,e()),e._c&&(e._d=!0));return}else{a=32;const e=s._;!e&&!Lp(s)?s._ctx=Mi:e===3&&Mi&&(Mi.slots._===1?s._=1:(s._=2,i.patchFlag|=1024))}else ei(s)?(s={default:s,_ctx:Mi},a=32):(s=String(s),n&64?(a=16,s=[Qp(s)]):a=8);i.children=s,i.shapeFlag|=a}function kA(...i){const s={};for(let a=0;a<i.length;a++){const n=i[a];for(const e in n)if(e==="class")s.class!==n.class&&(s.class=gl([s.class,n.class]));else if(e==="style")s.style=Al([s.style,n.style]);else if(Mn(e)){const t=s[e],l=n[e];l&&t!==l&&!(si(t)&&t.includes(l))&&(s[e]=t?[].concat(t,l):l)}else e!==""&&(s[e]=n[e])}return s}function As(i,s,a,n=null){_s(i,s,7,[a,n])}const pA=xp();let rA=0;function dA(i,s,a){const n=i.type,e=(s?s.appContext:i.appContext)||pA,t={uid:rA++,vnode:i,type:n,parent:s,appContext:e,root:null,next:null,subTree:null,effect:null,update:null,job:null,scope:new Tc(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:s?s.provides:Object.create(e.provides),ids:s?s.ids:["",0,0],accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Pp(n,e),emitsOptions:Up(n,e),emit:null,emitted:null,propsDefaults:Ai,inheritAttrs:n.inheritAttrs,ctx:Ai,data:Ai,props:Ai,attrs:Ai,slots:Ai,refs:Ai,setupState:Ai,setupContext:null,suspense:a,suspenseId:a?a.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return t.ctx={_:t},t.root=s?s.root:t,t.emit=sA.bind(null,t),i.ce&&i.ce(t),t}let Ii=null;const ia=()=>Ii||Mi;let De,Ht;{const i=Le(),s=(a,n)=>{let e;return(e=i[a])||(e=i[a]=[]),e.push(n),t=>{e.length>1?e.forEach(l=>l(t)):e[0](t)}};De=s("__VUE_INSTANCE_SETTERS__",a=>Ii=a),Ht=s("__VUE_SSR_SETTERS__",a=>sn=a)}const Hn=i=>{const s=Ii;return De(i),i.scope.on(),()=>{i.scope.off(),De(s)}},bh=()=>{Ii&&Ii.scope.off(),De(null)};function Yp(i){return i.vnode.shapeFlag&4}let sn=!1;function cA(i,s=!1,a=!1){s&&Ht(s);const{props:n,children:e}=i.vnode,t=Yp(i);Ho(i,n,t,s),Jo(i,e,a||s);const l=t?oA(i,s):void 0;return s&&Ht(!1),l}function oA(i,s){const a=i.type;i.accessCache=Object.create(null),i.proxy=new Proxy(i.ctx,Oo);const{setup:n}=a;if(n){qs();const e=i.setupContext=n.length>1?gA(i):null,t=Hn(i),l=jn(n,i,0,[i.props,e]),k=jk(l);if(Ks(),t(),(k||i.sp)&&!ba(i)&&fl(i),k){if(l.then(bh,bh),s)return l.then(p=>{Dh(i,p)}).catch(p=>{Nn(p,i,0)});i.asyncDep=l}else Dh(i,l)}else Zp(i)}function Dh(i,s,a){ei(s)?i.type.__ssrInlineRender?i.ssrRender=s:i.render=s:Di(s)&&(i.setupState=rp(s)),Zp(i)}function Zp(i,s,a){const n=i.type;i.render||(i.render=n.render||Is);{const e=Hn(i);qs();try{Po(i)}finally{Ks(),e()}}}const AA={get(i,s){return Gi(i,"get",""),i[s]}};function gA(i){const s=a=>{i.exposed=a||{}};return{attrs:new Proxy(i.attrs,AA),slots:i.slots,emit:i.emit,expose:s}}function He(i){return i.exposed?i.exposeProxy||(i.exposeProxy=new Proxy(rp(Zc(i.exposed)),{get(s,a){if(a in s)return s[a];if(a in En)return En[a](i)},has(s,a){return a in s||a in En}})):i.proxy}function BA(i,s=!0){return ei(i)?i.displayName||i.name:i.name||s&&i.__name}function yA(i){return ei(i)&&"__vccOpts"in i}const b=(i,s)=>lo(i,s,sn);function h(i,s,a){const n=arguments.length;return n===2?Di(s)&&!si(s)?Rn(s)?Ti(i,null,[s]):Ti(i,s):Ti(i,null,s):(n>3?a=Array.prototype.slice.call(arguments,2):n===3&&Rn(a)&&(a=[a]),Ti(i,s,a))}const ir="3.5.17";/**
* @vue/runtime-dom v3.5.17
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let Wt;const _h=typeof window<"u"&&window.trustedTypes;if(_h)try{Wt=_h.createPolicy("vue",{createHTML:i=>i})}catch{}const sr=Wt?i=>Wt.createHTML(i):i=>i,uA="http://www.w3.org/2000/svg",vA="http://www.w3.org/1998/Math/MathML",zs=typeof document<"u"?document:null,Sh=zs&&zs.createElement("template"),EA={insert:(i,s,a)=>{s.insertBefore(i,a||null)},remove:i=>{const s=i.parentNode;s&&s.removeChild(i)},createElement:(i,s,a,n)=>{const e=s==="svg"?zs.createElementNS(uA,i):s==="mathml"?zs.createElementNS(vA,i):a?zs.createElement(i,{is:a}):zs.createElement(i);return i==="select"&&n&&n.multiple!=null&&e.setAttribute("multiple",n.multiple),e},createText:i=>zs.createTextNode(i),createComment:i=>zs.createComment(i),setText:(i,s)=>{i.nodeValue=s},setElementText:(i,s)=>{i.textContent=s},parentNode:i=>i.parentNode,nextSibling:i=>i.nextSibling,querySelector:i=>zs.querySelector(i),setScopeId(i,s){i.setAttribute(s,"")},insertStaticContent(i,s,a,n,e,t){const l=a?a.previousSibling:s.lastChild;if(e&&(e===t||e.nextSibling))for(;s.insertBefore(e.cloneNode(!0),a),!(e===t||!(e=e.nextSibling)););else{Sh.innerHTML=sr(n==="svg"?`<svg>${i}</svg>`:n==="mathml"?`<math>${i}</math>`:i);const k=Sh.content;if(n==="svg"||n==="mathml"){const p=k.firstChild;for(;p.firstChild;)k.appendChild(p.firstChild);k.removeChild(p)}s.insertBefore(k,a)}return[l?l.nextSibling:s.firstChild,a?a.previousSibling:s.lastChild]}},ea="transition",on="animation",an=Symbol("_vtc"),ar={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},nr=Oi({},up,ar),mA=i=>(i.displayName="Transition",i.props=nr,i),nn=mA((i,{slots:s})=>h(Bo,er(i),s)),ua=(i,s=[])=>{si(i)?i.forEach(a=>a(...s)):i&&i(...s)},xh=i=>i?si(i)?i.some(s=>s.length>1):i.length>1:!1;function er(i){const s={};for(const T in i)T in ar||(s[T]=i[T]);if(i.css===!1)return s;const{name:a="v",type:n,duration:e,enterFromClass:t=`${a}-enter-from`,enterActiveClass:l=`${a}-enter-active`,enterToClass:k=`${a}-enter-to`,appearFromClass:p=t,appearActiveClass:d=l,appearToClass:r=k,leaveFromClass:c=`${a}-leave-from`,leaveActiveClass:o=`${a}-leave-active`,leaveToClass:A=`${a}-leave-to`}=i,v=FA(e),u=v&&v[0],E=v&&v[1],{onBeforeEnter:f,onEnter:F,onEnterCancelled:B,onLeave:C,onLeaveCancelled:w,onBeforeAppear:$=f,onAppear:I=F,onAppearCancelled:j=B}=s,_=(T,X,G,Z)=>{T._enterCancelled=Z,la(T,X?r:k),la(T,X?d:l),G&&G()},O=(T,X)=>{T._isLeaving=!1,la(T,c),la(T,A),la(T,o),X&&X()},W=T=>(X,G)=>{const Z=T?I:F,V=()=>_(X,T,G);ua(Z,[X,V]),wh(()=>{la(X,T?p:t),Ls(X,T?r:k),xh(Z)||Th(X,n,u,V)})};return Oi(s,{onBeforeEnter(T){ua(f,[T]),Ls(T,t),Ls(T,l)},onBeforeAppear(T){ua($,[T]),Ls(T,p),Ls(T,d)},onEnter:W(!1),onAppear:W(!0),onLeave(T,X){T._isLeaving=!0;const G=()=>O(T,X);Ls(T,c),T._enterCancelled?(Ls(T,o),Ut()):(Ut(),Ls(T,o)),wh(()=>{T._isLeaving&&(la(T,c),Ls(T,A),xh(C)||Th(T,n,E,G))}),ua(C,[T,G])},onEnterCancelled(T){_(T,!1,void 0,!0),ua(B,[T])},onAppearCancelled(T){_(T,!0,void 0,!0),ua(j,[T])},onLeaveCancelled(T){O(T),ua(w,[T])}})}function FA(i){if(i==null)return null;if(Di(i))return[dt(i.enter),dt(i.leave)];{const s=dt(i);return[s,s]}}function dt(i){return fc(i)}function Ls(i,s){s.split(/\s+/).forEach(a=>a&&i.classList.add(a)),(i[an]||(i[an]=new Set)).add(s)}function la(i,s){s.split(/\s+/).forEach(n=>n&&i.classList.remove(n));const a=i[an];a&&(a.delete(s),a.size||(i[an]=void 0))}function wh(i){requestAnimationFrame(()=>{requestAnimationFrame(i)})}let fA=0;function Th(i,s,a,n){const e=i._endId=++fA,t=()=>{e===i._endId&&n()};if(a!=null)return setTimeout(t,a);const{type:l,timeout:k,propCount:p}=tr(i,s);if(!l)return n();const d=l+"end";let r=0;const c=()=>{i.removeEventListener(d,o),t()},o=A=>{A.target===i&&++r>=p&&c()};setTimeout(()=>{r<p&&c()},k+1),i.addEventListener(d,o)}function tr(i,s){const a=window.getComputedStyle(i),n=v=>(a[v]||"").split(", "),e=n(`${ea}Delay`),t=n(`${ea}Duration`),l=Rh(e,t),k=n(`${on}Delay`),p=n(`${on}Duration`),d=Rh(k,p);let r=null,c=0,o=0;s===ea?l>0&&(r=ea,c=l,o=t.length):s===on?d>0&&(r=on,c=d,o=p.length):(c=Math.max(l,d),r=c>0?l>d?ea:on:null,o=r?r===ea?t.length:p.length:0);const A=r===ea&&/\b(transform|all)(,|$)/.test(n(`${ea}Property`).toString());return{type:r,timeout:c,propCount:o,hasTransform:A}}function Rh(i,s){for(;i.length<s.length;)i=i.concat(i);return Math.max(...s.map((a,n)=>Lh(a)+Lh(i[n])))}function Lh(i){return i==="auto"?0:Number(i.slice(0,-1).replace(",","."))*1e3}function Ut(){return document.body.offsetHeight}function CA(i,s,a){const n=i[an];n&&(s=(s?[s,...n]:[...n]).join(" ")),s==null?i.removeAttribute("class"):a?i.setAttribute("class",s):i.className=s}const _e=Symbol("_vod"),lr=Symbol("_vsh"),U4={beforeMount(i,{value:s},{transition:a}){i[_e]=i.style.display==="none"?"":i.style.display,a&&s?a.beforeEnter(i):An(i,s)},mounted(i,{value:s},{transition:a}){a&&s&&a.enter(i)},updated(i,{value:s,oldValue:a},{transition:n}){!s!=!a&&(n?s?(n.beforeEnter(i),An(i,!0),n.enter(i)):n.leave(i,()=>{An(i,!1)}):An(i,s))},beforeUnmount(i,{value:s}){An(i,s)}};function An(i,s){i.style.display=s?i[_e]:"none",i[lr]=!s}const bA=Symbol(""),DA=/(^|;)\s*display\s*:/;function _A(i,s,a){const n=i.style,e=Ri(a);let t=!1;if(a&&!e){if(s)if(Ri(s))for(const l of s.split(";")){const k=l.slice(0,l.indexOf(":")).trim();a[k]==null&&ge(n,k,"")}else for(const l in s)a[l]==null&&ge(n,l,"");for(const l in a)l==="display"&&(t=!0),ge(n,l,a[l])}else if(e){if(s!==a){const l=n[bA];l&&(a+=";"+l),n.cssText=a,t=DA.test(a)}}else s&&i.removeAttribute("style");_e in i&&(i[_e]=t?n.display:"",i[lr]&&(n.display="none"))}const Oh=/\s*!important$/;function ge(i,s,a){if(si(a))a.forEach(n=>ge(i,s,n));else if(a==null&&(a=""),s.startsWith("--"))i.setProperty(s,a);else{const n=SA(i,s);Oh.test(a)?i.setProperty(Qs(n),a.replace(Oh,""),"important"):i[n]=a}}const Ph=["Webkit","Moz","ms"],ct={};function SA(i,s){const a=ct[s];if(a)return a;let n=is(s);if(n!=="filter"&&n in i)return ct[s]=n;n=Vn(n);for(let e=0;e<Ph.length;e++){const t=Ph[e]+n;if(t in i)return ct[s]=t}return s}const Ih="http://www.w3.org/1999/xlink";function Mh(i,s,a,n,e,t=xc(s)){n&&s.startsWith("xlink:")?a==null?i.removeAttributeNS(Ih,s.slice(6,s.length)):i.setAttributeNS(Ih,s,a):a==null||t&&!Hk(a)?i.removeAttribute(s):i.setAttribute(s,t?"":Xs(a)?String(a):a)}function Vh(i,s,a,n,e){if(s==="innerHTML"||s==="textContent"){a!=null&&(i[s]=s==="innerHTML"?sr(a):a);return}const t=i.tagName;if(s==="value"&&t!=="PROGRESS"&&!t.includes("-")){const k=t==="OPTION"?i.getAttribute("value")||"":i.value,p=a==null?i.type==="checkbox"?"on":"":String(a);(k!==p||!("_value"in i))&&(i.value=p),a==null&&i.removeAttribute(s),i._value=a;return}let l=!1;if(a===""||a==null){const k=typeof i[s];k==="boolean"?a=Hk(a):a==null&&k==="string"?(a="",l=!0):k==="number"&&(a=0,l=!0)}try{i[s]=a}catch{}l&&i.removeAttribute(e||s)}function Na(i,s,a,n){i.addEventListener(s,a,n)}function xA(i,s,a,n){i.removeEventListener(s,a,n)}const jh=Symbol("_vei");function wA(i,s,a,n,e=null){const t=i[jh]||(i[jh]={}),l=t[s];if(n&&l)l.value=n;else{const[k,p]=TA(s);if(n){const d=t[s]=OA(n,e);Na(i,k,d,p)}else l&&(xA(i,k,l,p),t[s]=void 0)}}const Nh=/(?:Once|Passive|Capture)$/;function TA(i){let s;if(Nh.test(i)){s={};let n;for(;n=i.match(Nh);)i=i.slice(0,i.length-n[0].length),s[n[0].toLowerCase()]=!0}return[i[2]===":"?i.slice(3):Qs(i.slice(2)),s]}let ot=0;const RA=Promise.resolve(),LA=()=>ot||(RA.then(()=>ot=0),ot=Date.now());function OA(i,s){const a=n=>{if(!n._vts)n._vts=Date.now();else if(n._vts<=a.attached)return;_s(PA(n,a.value),s,5,[n])};return a.value=i,a.attached=LA(),a}function PA(i,s){if(si(s)){const a=i.stopImmediatePropagation;return i.stopImmediatePropagation=()=>{a.call(i),i._stopped=!0},s.map(n=>e=>!e._stopped&&n&&n(e))}else return s}const $h=i=>i.charCodeAt(0)===111&&i.charCodeAt(1)===110&&i.charCodeAt(2)>96&&i.charCodeAt(2)<123,IA=(i,s,a,n,e,t)=>{const l=e==="svg";s==="class"?CA(i,n,l):s==="style"?_A(i,a,n):Mn(s)?dl(s)||wA(i,s,a,n,t):(s[0]==="."?(s=s.slice(1),!0):s[0]==="^"?(s=s.slice(1),!1):MA(i,s,n,l))?(Vh(i,s,n),!i.tagName.includes("-")&&(s==="value"||s==="checked"||s==="selected")&&Mh(i,s,n,l,t,s!=="value")):i._isVueCE&&(/[A-Z]/.test(s)||!Ri(n))?Vh(i,is(s),n,t,s):(s==="true-value"?i._trueValue=n:s==="false-value"&&(i._falseValue=n),Mh(i,s,n,l))};function MA(i,s,a,n){if(n)return!!(s==="innerHTML"||s==="textContent"||s in i&&$h(s)&&ei(a));if(s==="spellcheck"||s==="draggable"||s==="translate"||s==="autocorrect"||s==="form"||s==="list"&&i.tagName==="INPUT"||s==="type"&&i.tagName==="TEXTAREA")return!1;if(s==="width"||s==="height"){const e=i.tagName;if(e==="IMG"||e==="VIDEO"||e==="CANVAS"||e==="SOURCE")return!1}return $h(s)&&Ri(a)?!1:s in i}const hr=new WeakMap,kr=new WeakMap,Se=Symbol("_moveCb"),Hh=Symbol("_enterCb"),VA=i=>(delete i.props.mode,i),jA=VA({name:"TransitionGroup",props:Oi({},nr,{tag:String,moveClass:String}),setup(i,{slots:s}){const a=ia(),n=yp();let e,t;return bp(()=>{if(!e.length)return;const l=i.moveClass||`${i.name||"v"}-move`;if(!WA(e[0].el,a.vnode.el,l)){e=[];return}e.forEach(NA),e.forEach($A);const k=e.filter(HA);Ut(),k.forEach(p=>{const d=p.el,r=d.style;Ls(d,l),r.transform=r.webkitTransform=r.transitionDuration="";const c=d[Se]=o=>{o&&o.target!==d||(!o||/transform$/.test(o.propertyName))&&(d.removeEventListener("transitionend",c),d[Se]=null,la(d,l))};d.addEventListener("transitionend",c)}),e=[]}),()=>{const l=ci(i),k=er(l);let p=l.tag||Hi;if(e=[],t)for(let d=0;d<t.length;d++){const r=t[d];r.el&&r.el instanceof Element&&(e.push(r),xa(r,wn(r,k,n,a)),hr.set(r,r.el.getBoundingClientRect()))}t=s.default?Fl(s.default()):[];for(let d=0;d<t.length;d++){const r=t[d];r.key!=null&&xa(r,wn(r,k,n,a))}return Ti(p,null,t)}}}),pr=jA;function NA(i){const s=i.el;s[Se]&&s[Se](),s[Hh]&&s[Hh]()}function $A(i){kr.set(i,i.el.getBoundingClientRect())}function HA(i){const s=hr.get(i),a=kr.get(i),n=s.left-a.left,e=s.top-a.top;if(n||e){const t=i.el.style;return t.transform=t.webkitTransform=`translate(${n}px,${e}px)`,t.transitionDuration="0s",i}}function WA(i,s,a){const n=i.cloneNode(),e=i[an];e&&e.forEach(k=>{k.split(/\s+/).forEach(p=>p&&n.classList.remove(p))}),a.split(/\s+/).forEach(k=>k&&n.classList.add(k)),n.style.display="none";const t=s.nodeType===1?s:s.parentNode;t.appendChild(n);const{hasTransform:l}=tr(n);return t.removeChild(n),l}const Wh=i=>{const s=i.props["onUpdate:modelValue"]||!1;return si(s)?a=>oe(s,a):s};function UA(i){i.target.composing=!0}function Uh(i){const s=i.target;s.composing&&(s.composing=!1,s.dispatchEvent(new Event("input")))}const At=Symbol("_assign"),z4={created(i,{modifiers:{lazy:s,trim:a,number:n}},e){i[At]=Wh(e);const t=n||e.props&&e.props.type==="number";Na(i,s?"change":"input",l=>{if(l.target.composing)return;let k=i.value;a&&(k=k.trim()),t&&(k=Rt(k)),i[At](k)}),a&&Na(i,"change",()=>{i.value=i.value.trim()}),s||(Na(i,"compositionstart",UA),Na(i,"compositionend",Uh),Na(i,"change",Uh))},mounted(i,{value:s}){i.value=s??""},beforeUpdate(i,{value:s,oldValue:a,modifiers:{lazy:n,trim:e,number:t}},l){if(i[At]=Wh(l),i.composing)return;const k=(t||i.type==="number")&&!/^0\d/.test(i.value)?Rt(i.value):i.value,p=s??"";k!==p&&(document.activeElement===i&&i.type!=="range"&&(n&&s===a||e&&i.value.trim()===p)||(i.value=p))}},zA=["ctrl","shift","alt","meta"],JA={stop:i=>i.stopPropagation(),prevent:i=>i.preventDefault(),self:i=>i.target!==i.currentTarget,ctrl:i=>!i.ctrlKey,shift:i=>!i.shiftKey,alt:i=>!i.altKey,meta:i=>!i.metaKey,left:i=>"button"in i&&i.button!==0,middle:i=>"button"in i&&i.button!==1,right:i=>"button"in i&&i.button!==2,exact:(i,s)=>zA.some(a=>i[`${a}Key`]&&!s.includes(a))},J4=(i,s)=>{const a=i._withMods||(i._withMods={}),n=s.join(".");return a[n]||(a[n]=(e,...t)=>{for(let l=0;l<s.length;l++){const k=JA[s[l]];if(k&&k(e,s))return}return i(e,...t)})},GA={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},G4=(i,s)=>{const a=i._withKeys||(i._withKeys={}),n=s.join(".");return a[n]||(a[n]=e=>{if(!("key"in e))return;const t=Qs(e.key);if(s.some(l=>l===t||GA[l]===t))return i(e)})},qA=Oi({patchProp:IA},EA);let gt,zh=!1;function KA(){return gt=zh?gt:qo(qA),zh=!0,gt}const XA=(...i)=>{const s=KA().createApp(...i),{mount:a}=s;return s.mount=n=>{const e=YA(n);if(e)return a(e,!0,QA(e))},s};function QA(i){if(i instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&i instanceof MathMLElement)return"mathml"}function YA(i){return Ri(i)?document.querySelector(i):i}var Wn=i=>/^[a-z][a-z0-9+.-]*:/.test(i)||i.startsWith("//"),ZA=/.md((\?|#).*)?$/,Sl=(i,s="/")=>Wn(i)||i.startsWith("/")&&!i.startsWith(s)&&!ZA.test(i),Ta=i=>/^(https?:)?\/\//.test(i),Jh=i=>{if(!i||i.endsWith("/"))return i;let s=i.replace(/(^|\/)README.md$/i,"$1index.html");return s.endsWith(".md")?s=`${s.substring(0,s.length-3)}.html`:s.endsWith(".html")||(s=`${s}.html`),s.endsWith("/index.html")&&(s=s.substring(0,s.length-10)),s},ig="http://.",sg=(i,s)=>{if(!i.startsWith("/")&&s){const a=s.slice(0,s.lastIndexOf("/"));return Jh(new URL(`${a}/${i}`,ig).pathname)}return Jh(i)},ag=(i,s)=>{const a=Object.keys(i).sort((n,e)=>{const t=e.split("/").length-n.split("/").length;return t!==0?t:e.length-n.length});for(const n of a)if(s.startsWith(n))return n;return"/"},ng=/(#|\?)/,rr=i=>{const[s,...a]=i.split(ng);return{pathname:s,hashAndQueries:a.join("")}},eg=["link","meta","script","style","noscript","template"],tg=["title","base"],lg=([i,s,a])=>tg.includes(i)?i:eg.includes(i)?i==="meta"&&s.name?`${i}.${s.name}`:i==="template"&&s.id?`${i}.${s.id}`:JSON.stringify([i,Object.entries(s).map(([n,e])=>typeof e=="boolean"?e?[n,""]:null:[n,e]).filter(n=>n!=null).sort(([n],[e])=>n.localeCompare(e)),a]):null,hg=i=>{const s=new Set,a=[];return i.forEach(n=>{const e=lg(n);e&&!s.has(e)&&(s.add(e),a.push(n))}),a},kg=i=>i.startsWith("/")?i:`/${i}`,dr=i=>i.endsWith("/")||i.endsWith(".html")?i:`${i}/`,We=i=>i.endsWith("/")?i.slice(0,-1):i,cr=i=>i.startsWith("/")?i.slice(1):i,Ds=i=>Object.prototype.toString.call(i)==="[object Object]",gi=i=>typeof i=="string";const pg="modulepreload",rg=function(i){return"/blogs/"+i},Gh={},g=function(s,a,n){let e=Promise.resolve();if(a&&a.length>0){let l=function(d){return Promise.all(d.map(r=>Promise.resolve(r).then(c=>({status:"fulfilled",value:c}),c=>({status:"rejected",reason:c}))))};document.getElementsByTagName("link");const k=document.querySelector("meta[property=csp-nonce]"),p=(k==null?void 0:k.nonce)||(k==null?void 0:k.getAttribute("nonce"));e=l(a.map(d=>{if(d=rg(d),d in Gh)return;Gh[d]=!0;const r=d.endsWith(".css"),c=r?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${d}"]${c}`))return;const o=document.createElement("link");if(o.rel=r?"stylesheet":pg,r||(o.as="script"),o.crossOrigin="",o.href=d,p&&o.setAttribute("nonce",p),document.head.appendChild(o),r)return new Promise((A,v)=>{o.addEventListener("load",A),o.addEventListener("error",()=>v(new Error(`Unable to preload CSS for ${d}`)))})}))}function t(l){const k=new Event("vite:preloadError",{cancelable:!0});if(k.payload=l,window.dispatchEvent(k),!k.defaultPrevented)throw l}return e.then(l=>{for(const k of l||[])k.status==="rejected"&&t(k.reason);return s().catch(t)})},dg=JSON.parse("{}"),cg=Object.fromEntries([["/",{loader:()=>g(()=>import("./index.html-NQ1eqPJJ.js"),__vite__mapDeps([0,1])),meta:{title:"Mr. LRH blogs",icon:"home"}}],["/home.html",{loader:()=>g(()=>import("./home.html-CLuheNeG.js"),__vite__mapDeps([2,1])),meta:{title:"项目主页",icon:"home"}}],["/intro.html",{loader:()=>g(()=>import("./intro.html-BubuvfY1.js"),__vite__mapDeps([3,1])),meta:{date:16205812e5,excerpt:`
`,readingTime:{minutes:.01,words:3},title:"Mr.LRH",icon:"info",type:"article"}}],["/%E4%B9%A6%E7%AD%BE.html",{loader:()=>g(()=>import("./书签.html-C4cjeq3e.js"),__vite__mapDeps([4,1])),meta:{date:1651735737e3,excerpt:`
<h2>导航网站</h2>
<ul>
<li><a href="https://www.code-nav.cn/" target="_blank" rel="noopener noreferrer">编程导航</a></li>
<li><a href="https://www.thosefree.com/" target="_blank" rel="noopener noreferrer">那些免费的砖</a></li>
<li><a href="https://www.cxy521.com/" target="_blank" rel="noopener noreferrer">cxy521 程序员一站式导航</a></li>
<li><a href="http://www.alloyteam.com/nav/" target="_blank" rel="noopener noreferrer">Web前端导航</a></li>
<li><a href="https://docs.pfan123.com/" target="_blank" rel="noopener noreferrer">前端导航平台</a></li>
<li><a href="https://www.thoughtworks.com/zh-cn" target="_blank" rel="noopener noreferrer">Thoughtworks</a> ： 通过整合战略、设计和软件工程帮助企业开启流畅数字化之路，引航未来征程</li>
</ul>`,readingTime:{minutes:26.59,words:7976},title:"书签",type:"article"}}],["/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/BEM.html",{loader:()=>g(()=>import("./BEM.html-u_mSRmbL.js"),__vite__mapDeps([5,1])),meta:{date:1619107808e3,excerpt:`
<h2>BEM</h2>
<p><code>BEM</code>表示<code>block</code>（块）、<code>element</code>（元素）、<code>modifier</code>（修饰符）。</p>
<div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">.block</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* styles */</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> }</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">.block__element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* styles */</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> }</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">.block--modifier</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* styles */</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:5.39,words:1617},title:"CSS命名规范 - BEM",type:"article"}}],["/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/",{loader:()=>g(()=>import("./index.html-9Mp9e-H7.js"),__vite__mapDeps([6,1])),meta:{date:1603019226e3,excerpt:`
<ul>
<li><a href="/blogs/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/BEM.html" target="_blank">BEM</a></li>
</ul>
`,readingTime:{minutes:.02,words:6},title:"代码规范",type:"article"}}],["/%E6%95%B0%E6%8D%AE%E5%BA%93/",{loader:()=>g(()=>import("./index.html-Bjk3essF.js"),__vite__mapDeps([7,1])),meta:{date:1620210494e3,excerpt:`
<ul>
<li>SQL</li>
<li>MongoDB</li>
</ul>
`,readingTime:{minutes:.02,words:5},title:"数据库",type:"article"}}],["/%E7%A7%BB%E5%8A%A8%E7%AB%AF/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91.html",{loader:()=>g(()=>import("./混合开发.html-BFjwwoCV.js"),__vite__mapDeps([8,1])),meta:{date:1584893796e3,excerpt:`
<p>Hybrid App：混合了 Native（原生）技术和 web 技术进行开发的移动应用。主要有以三种方式：</p>
<ul>
<li><strong>基于<code>WebView UI(JSBridge)</code></strong>: 通过<code>JSBridge</code>完成<code>Web端</code>和<code>Native端</code>的通讯，从而赋予<code>Web端</code>原生能力</li>
<li><strong>基于<code>Native UI(ReactNative、Weex)</code></strong>: 在赋予<code>Web端</code>原生能力的基础之上，通过<code>JSBridge</code>将 js 解析成虚拟节点树(Virtual Dom)传递到<code>Native端</code>并使用原生渲染</li>
<li><strong>小程序方案(微信、支付宝小程序等)</strong>: 通过更加<code>定制化的JSBridge</code>，并使用<code>双 WebView</code>、<code>双线程</code>的模式隔离了<code>JS逻辑</code>与<code>UI渲染</code>，形成了特殊的开发模式，加强了 Web 端与 Native 端混合程度，提高了页面性能及开发体验。</li>
</ul>`,readingTime:{minutes:15.54,words:4662},title:"混合开发",type:"article"}}],["/%E7%AE%80%E4%BB%8B/",{loader:()=>g(()=>import("./index.html-B2DBsesj.js"),__vite__mapDeps([9,1])),meta:{date:1584982192e3,excerpt:`
`,readingTime:{minutes:.01,words:4},title:"个人简历",type:"article"}}],["/%E5%85%B6%E4%BB%96/Git/",{loader:()=>g(()=>import("./index.html-zevKZMqf.js"),__vite__mapDeps([10,1])),meta:{date:1606752141e3,excerpt:`
<p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>
<h2>推荐与参考</h2>
<ul>
<li><a href="https://gitee.com/progit/index.html" target="_blank" rel="noopener noreferrer">Pro Git（中文版）</a></li>
<li><a href="http://gitbook.liuhui998.com/index.html" target="_blank" rel="noopener noreferrer">Git Community Book 中文版</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener noreferrer">常用 Git 命令清单</a></li>
<li><a href="https://www.cnblogs.com/jasongrass/p/10582449.html" target="_blank" rel="noopener noreferrer">深入理解 Git - 一切皆 commit</a></li>
<li><a href="https://www.cnblogs.com/jasongrass/p/10582465.html" target="_blank" rel="noopener noreferrer">深入理解 Git - Git 底层对象</a></li>
<li><a href="https://learngitbranching.js.org/?locale=zh_CN" target="_blank" rel="noopener noreferrer">Learn Git Branching</a></li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener noreferrer">git - 简明指南</a></li>
<li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html#reset" target="_blank" rel="noopener noreferrer">图解 Git</a></li>
<li><a href="https://www.jianshu.com/p/74bd0ceb6182" target="_blank" rel="noopener noreferrer">Git 忽略提交 .gitignore</a></li>
</ul>`,readingTime:{minutes:.41,words:122},title:"Git",type:"article"}}],["/%E5%85%B6%E4%BB%96/Git/git_head.html",{loader:()=>g(()=>import("./git_head.html-BJIOvBDD.js"),__vite__mapDeps([11,1])),meta:{date:1618649014e3,excerpt:`
<h2>HEAD 简介</h2>
<p><code>HEAD</code> 是当前分支引用的指针，它总是指向该分支上的最后一次提交。当做分支切换的时候，<code>HEAD</code> 是会跟着切换的，指针就会指向新的分支，其最终会落脚到某一个 commit 上。</p>
<h2>相对引用（^n / ~n）</h2>
<ul>
<li><code>(&lt;commit&gt; | HEAD)^n</code>：指 HEAD 的第 n 个父提交（HEAD存在多个父提交的情况下）。如果 HEAD 存在 N 个父提交，那么 n &lt; N</li>
<li><code>(&lt;commit&gt; | HEAD)~n</code>：指的是 HEAD 的第n个祖先提交</li>
<li><code>(&lt;commit&gt; | HEAD)~n = (&lt;commit&gt; | HEAD)^^^...(^的个数为n)</code></li>
</ul>`,readingTime:{minutes:1.52,words:457},title:"Git HEAD",type:"article"}}],["/%E5%85%B6%E4%BB%96/Git/git%E5%91%BD%E4%BB%A4.html",{loader:()=>g(()=>import("./git命令.html-Bi-8eboB.js"),__vite__mapDeps([12,1])),meta:{date:1618649014e3,excerpt:`
<h2>基础配置</h2>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 缺省等同于 local</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> config</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># local 只对某个仓库有效</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --local</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># global 对当前用户所有仓库有效</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --global</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># system 对系统所有登陆的用户有效</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --system</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 显示 config 的配置，使用 --list</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --list</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --local</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --list</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --global</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --list</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --system</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 对当前用户所有仓库，设置用户名</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> user.name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'your_name'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 对当前用户所有仓库，设置电子邮箱地址</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> user.email</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'your_email@domain.com'</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:8.55,words:2566},title:"Git 命令",type:"article"}}],["/%E5%85%B6%E4%BB%96/Git/git%E5%9F%BA%E7%A1%80.html",{loader:()=>g(()=>import("./git基础.html-DUnecYzt.js"),__vite__mapDeps([13,1])),meta:{date:1618649014e3,excerpt:`
<h2>Git 的三种状态</h2>
<ul>
<li><strong>已提交</strong>（committed）：表示数据已经安全的保存在本地数据库中</li>
<li><strong>已修改</strong>（modified）：表示修改了文件，但还没保存到数据库中</li>
<li><strong>已暂存</strong>（staged）：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中</li>
</ul>
<p>由此，引入 Git 项目的三个工作区域的概念：</p>
<ul>
<li><strong>Git仓库</strong>：Git 用来保存项目的元数据和对象数据库的地方。从其它计算机克隆仓库时，拷贝的就是这里的数据</li>
<li><strong>工作目录</strong>：对项目的某个版本独立提取出来的内容。这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改</li>
<li><strong>暂存区域</strong>：一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中</li>
</ul>`,readingTime:{minutes:.99,words:296},title:"Git 基础",type:"article"}}],["/%E5%85%B6%E4%BB%96/Git/git%E5%AF%B9%E8%B1%A1.html",{loader:()=>g(()=>import("./git对象.html-CN93F-2S.js"),__vite__mapDeps([14,1])),meta:{date:1618649014e3,excerpt:`
<p>Git 是一个内容寻址文件系统。Git 的核心部分是一个简单的键值对数据库（key-value data store）。向该数据库插入任意类型的内容，它会返回一个键值，通过该键值可以在任意时刻再次检索（retrieve）该内容。</p>
<h2>.git目录</h2>
<div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-md"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.git/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">| -- description # 仅供 GitWeb 程序使用</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">| -- config # 包含项目特有的配置选项</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">| -- info/ # 包含一个全局性排除（global exclude）文件，用以放置那些不希望被记录在 .gitignore 文件中的忽略模式（ignored patterns）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">| -- hooks/ # 包含客户端或服务端的钩子脚本（hook scripts）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">| -- HEAD # 指示目前被检出的分支</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">| -- index # 保存暂存区信息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">| -- objects/ # 存储所有数据内容</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">| -- refs/ # 存储指向数据（分支）的提交对象的指针</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:3.46,words:1039},title:"Git 对象",type:"article"}}],["/%E5%85%B6%E4%BB%96/Git/git%E5%BF%BD%E7%95%A5%E6%8F%90%E4%BA%A4.html",{loader:()=>g(()=>import("./git忽略提交.html-B0awCdzG.js"),__vite__mapDeps([15,1])),meta:{date:1618649014e3,excerpt:`
<h2>Git 忽略规则</h2>
<h3>Git 忽略规则优先级</h3>
<ul>
<li>从命令行中读取可用的忽略规则</li>
<li>当前目录定义的规则</li>
<li>父级目录定义的规则，依次地推</li>
<li><code>$GIT_DIR/info/exclude</code> 文件中定义的规则</li>
<li><code>core.excludesfile</code> 中定义的全局规则</li>
</ul>
<h3>Git 忽略规则匹配语法</h3>
<ul>
<li><code>空格</code> : 不匹配任意文件，可作为分隔符，可用反斜杠转义</li>
<li><code># 开头</code> : 标识注释，可以使用反斜杠进行转义</li>
<li><code>! 开头</code> : 标识否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用 <code>!</code> 也不会再次被包含。可以使用反斜杠进行转义</li>
<li><code>/ 结束</code> : 只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件</li>
<li><code>/ 开始</code> : 的模式匹配项目跟目录</li>
<li>如果一个模式不包含斜杠，则它匹配相对于当前 <code>.gitignore</code> 文件路径的内容，如果该模式不在 <code>.gitignore</code> 文件中，则相对于项目根目录</li>
<li><code>**</code> : 匹配多级目录，可在开始，中间，结束
?通用匹配单个字符</li>
<li><code>[]</code> : 通用匹配单个字符列表</li>
</ul>`,readingTime:{minutes:1.67,words:500},title:"Git .gitignore",type:"article"}}],["/%E5%85%B6%E4%BB%96/Git/git%E6%8A%80%E5%B7%A7.html",{loader:()=>g(()=>import("./git技巧.html--sVLMnBc.js"),__vite__mapDeps([16,1])),meta:{date:1618649014e3,excerpt:`
<h2>Git 修改分支名称</h2>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 老分支名: oldBranchName 新分支名: newBranchName</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 1、本地分支重命名（未推送至远程）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> branch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> oldBranchName</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> newBranchName</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 2、远程分支重命名（推送至远程）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 2.1、删除远程分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> push</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --delete</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> origin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> oldBranchName</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 2.2、上传新分支名</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> origin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> newBranchName</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 2.3、将修改后的本地分支与远程分支关联</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> branch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --set-upstream-to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> origin/newBranchName</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:4.46,words:1339},title:"Git 技巧",type:"article"}}],["/%E5%85%B6%E4%BB%96/Git/git%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98.html",{loader:()=>g(()=>import("./git相关问题.html-_Ktpoazn.js"),__vite__mapDeps([17,1])),meta:{date:1618649014e3,excerpt:`
<h2>Please make sure you have the correct access rights and the repository exists</h2>
<p>原因： ssh key 有问题，连接不上服务器</p>
<p>解决方法：重新设置用户名（user.name）和邮箱（user.email），再重新生成 ssh公钥 即可。</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 1、重新设置用户名（user.name）和邮箱（user.email）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 对当前用户所有仓库，设置用户名</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> user.name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'your_name'</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 对当前用户所有仓库，设置电子邮箱地址</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> user.email</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'your_email@domain.com'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 2、生成 ssh公钥</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ssh-keygen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rsa</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "your_email@domain.com"</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 3、设置 github/gitee/gitlab 等 ssh公钥</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:1.42,words:426},title:"Git 相关问题",type:"article"}}],["/%E5%85%B6%E4%BB%96/%E5%8A%A0%E5%AF%86/",{loader:()=>g(()=>import("./index.html-DbiWdZjH.js"),__vite__mapDeps([18,1])),meta:{date:162419053e4,excerpt:`
<h2>性能优化 - 加载</h2>
<ul>
<li>加载瀑布图（waterfall）
F12 --&gt; Network --&gt; Network Setting
Use large request rows : 打开
Show overview : 打开
Capture screenshots : 打开</li>
<li>Lightouse
Performance
First Contentful Paint
Speed Index : 4s 内
Largest Contentful Paint
Time to Interactive
Total Blocking Time
Cumulative Layout Shift</li>
<li>F12 --&gt; Ctrl + Shift + P
show frames pre second (FPS) meter</li>
<li>基于 HAR 存储于重建性能信息
F12 --&gt; Network --&gt; 选中请求 --&gt; 右键 --&gt; Save all as HAR with content</li>
<li>TTFB：从客户端开始和服务端交互到服务端开始向客户端浏览器传输数据的时间（包括DNS、socket连接和请求响应时间）</li>
<li>页面加载时间</li>
<li>首次渲染</li>
</ul>`,readingTime:{minutes:12.65,words:3794},title:"性能优化",type:"article"}}],["/%E5%85%B6%E4%BB%96/%E5%8A%A0%E5%AF%86/%E5%8A%A0%E5%AF%86.html",{loader:()=>g(()=>import("./加密.html-BjSHnKzP.js"),__vite__mapDeps([19,1])),meta:{date:162419053e4,excerpt:`
<h2>加密</h2>
<p>加密是为了提升数据的安全性。</p>
<p>加密三要素：</p>
<ul>
<li>数据：明文/密文</li>
<li>密钥：定长的字符串，根据加密算法确定其长度。</li>
<li>算法：加密算法/解密算法，加解密算法可能相同也可能不同</li>
</ul>
<p>简单加密算法</p>
<ul>
<li>
<p>异或，示例如下：</p>
<ul>
<li>数据：123</li>
<li>密钥: 666</li>
<li>算法: 异或</li>
<li>加密过程: 123 ^ 666 = 737</li>
<li>解密过程: 737 ^ 666 = 123</li>
</ul>
</li>
<li>
<p>凯撒加密。将字母按顺序推后起3位起到加密作用。</p>
</li>
</ul>`,readingTime:{minutes:18.58,words:5573},title:"密码",type:"article"}}],["/%E5%85%B6%E4%BB%96/%E5%B7%A5%E5%85%B7/",{loader:()=>g(()=>import("./index.html-CUTqn1rY.js"),__vite__mapDeps([20,1])),meta:{date:1603019226e3,excerpt:`
<ul>
<li><a href="/blogs/%E5%85%B6%E4%BB%96/%E5%B7%A5%E5%85%B7/VSCode%E6%8F%92%E4%BB%B6.html" target="_blank">Visual Studio Code</a></li>
</ul>
`,readingTime:{minutes:.03,words:9},title:"工具",type:"article"}}],["/%E5%85%B6%E4%BB%96/%E5%B7%A5%E5%85%B7/VSCode%E6%8F%92%E4%BB%B6.html",{loader:()=>g(()=>import("./VSCode插件.html-pN_94HkM.js"),__vite__mapDeps([21,1])),meta:{date:1617764982e3,excerpt:`
<h2>快捷键</h2>
<p><kbd>Ctrl</kbd> + <kbd>K</kbd> <kbd>Ctrl</kbd> + <kbd>S</kbd> 打开快捷键列表</p>
<ul>
<li>
<p><kbd>Ctrl</kbd> + <kbd>P</kbd>：转到文件</p>
</li>
<li>
<p><kbd>Ctrl</kbd> + <kbd>\`</kbd>：在 VS Code 中打开 terminal</p>
</li>
<li>
<p><kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>F</kbd>：代码格式化（推荐使用 Prettier）</p>
</li>
<li>
<p><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>↑ / ↓</kbd>：向上/下同时编辑</p>
<p>可在属性的单词前添加好同时编辑鼠标点后，可配合 <kbd>Ctrl</kbd> + <kbd>→</kbd> 使用跳转到行末</p>
</li>
<li>
<p><kbd>Shift</kbd> + <kbd>Alt</kbd>：多行选中同时编辑</p>
</li>
<li>
<p><kbd>Alt</kbd> + <kbd>Down</kbd>：下移一行</p>
</li>
<li>
<p><kbd>Alt</kbd> + <kbd>Up</kbd>：上移一行</p>
</li>
<li>
<p><kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>Down</kbd>：向下复制行</p>
</li>
<li>
<p><kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>Up</kbd>：向上复制行</p>
</li>
<li>
<p><kbd>Ctrl</kbd> + <kbd>D</kbd>：将选定的字符移动到下一个匹配字符串上</p>
</li>
<li>
<p><kbd>Ctrl</kbd> + <kbd>Space</kbd>：触发建议</p>
</li>
<li>
<p><kbd>Ctrl </kbd> + <kbd>Shift</kbd> + <kbd>T</kbd>：重新打开最新关闭的窗口</p>
</li>
</ul>`,readingTime:{minutes:6.33,words:1900},title:"Visual Studio Code",type:"article"}}],["/%E5%85%B6%E4%BB%96/%E5%B7%A5%E5%85%B7/whistle.html",{loader:()=>g(()=>import("./whistle.html-DyLFhud0.js"),__vite__mapDeps([22,1])),meta:{date:1631811867e3,excerpt:`
<p><a href="https://wproxy.org/whistle/" target="_blank" rel="noopener noreferrer">whistle</a> 基于 Node 实现的跨平台 Web 调试代理工具</p>
`,readingTime:{minutes:.07,words:20},title:"Whistle",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/",{loader:()=>g(()=>import("./index.html-CQwC1zMs.js"),__vite__mapDeps([23,1])),meta:{date:16180571e5,readingTime:{minutes:.01,words:2},title:"",type:"article"}}],["/%E5%89%8D%E7%AB%AF/H5/",{loader:()=>g(()=>import("./index.html-BjxVvwwc.js"),__vite__mapDeps([24,1])),meta:{date:16180571e5,readingTime:{minutes:.01,words:2},title:"",type:"article"}}],["/%E5%89%8D%E7%AB%AF/H5/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html",{loader:()=>g(()=>import("./移动端基本概念.html-m6QQmb34.js"),__vite__mapDeps([25,1])),meta:{date:1617474812e3,excerpt:`
<h2>基本概念</h2>
<h3>CSS像素</h3>
<p>CSS 像素（CSS Pixel，简称 <code>px</code>）也称为 <strong>设备独立像素</strong> 、<strong>逻辑像素</strong> 。在 iOS 中称为 <strong>PT</strong> ，Android 中称之为 <strong>DIP</strong>  或 <strong>DP</strong> ，默认情况下在 PC 端等于一个<strong>物理像素</strong> 。</p>
<p>CSS像素与设备无关的像素（device-independent pixel， DIPs）。主要使用在浏览器上，用来精确度量 Web 页面上的内容。</p>`,readingTime:{minutes:11.17,words:3350},title:"移动端基本概念",type:"article"}}],["/%E5%89%8D%E7%AB%AF/H5/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html",{loader:()=>g(()=>import("./移动端常见问题.html-B6uY3DME.js"),__vite__mapDeps([26,1])),meta:{date:1600014439e3,excerpt:`
<h2>HTML相关</h2>
<h3>调用系统功能</h3>
<p>使用 <code>&lt;a&gt;</code> 能快速调用移动设备的电话/短信/邮件三大通讯功能，使用 <code>&lt;input&gt;</code> 能快速调用移动设备的的图库/文件。</p>
<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">&lt;!-- 拨打电话 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"tel:10086"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;拨打电话给10086&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">&lt;!-- 发送短信 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"sms:10086"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;发送短信给10086&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">&lt;!-- 发送邮件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"mailto:10086@139.com"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;发送邮件给10086&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">&lt;!-- 选择照片或拍摄照片 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">input</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"file"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> accept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"image/*"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">&lt;!-- 选择视频或拍摄视频 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">input</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"file"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> accept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"video/*"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">&lt;!-- 多选文件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">input</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"file"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> multiple</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:32.77,words:9832},title:"移动端常见问题",type:"article"}}],["/%E5%89%8D%E7%AB%AF/H5/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D.html",{loader:()=>g(()=>import("./移动端适配.html-CL7vlciH.js"),__vite__mapDeps([27,1])),meta:{date:1589577746e3,excerpt:`
<h2>移动端适配流程</h2>
<ul>
<li>在 <code>head</code> 设置 <code>width=device-width</code> 的 <code>viewport</code></li>
<li>在 css 中使用 <code>px</code></li>
<li>在适当的场景使用 <code>flex</code> 布局，或者配合 <code>vw</code> 进行自适应</li>
<li>在跨设备类型的时候（pc &lt;-&gt; 手机 &lt;-&gt; 平板）使用媒体查询</li>
<li>在跨设备类型如果交互差异太大的情况，考虑分开项目开发</li>
</ul>`,readingTime:{minutes:9.83,words:2948},title:"移动端适配",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/",{loader:()=>g(()=>import("./index.html-IpJoW6YF.js"),__vite__mapDeps([28,1])),meta:{date:1603019226e3,excerpt:`
<p>JavaScript 是一门基于原型和头等函数的多范式高级解释型编程语言，它支持面向对象程序设计、指令式编程和函数式编程。</p>
<p>它提供方法来操控文本、数组、日期以及正则表达式等。不支持I/O，比如网络、存储和图形等，但这些都可以由它的宿主环境提供支持。</p>
<p>它由ECMA（欧洲电脑制造商协会）通过ECMAScript实现语言的标准化。目前，它被世界上的绝大多数网站所使用，也被世界主流浏览器（Chrome、IE、Firefox、Safari 和 Opera）所支持。</p>
<p>JavaScript 是一门用来与网页交互的脚本语言，包含以下三个组成部分。</p>
<ul>
<li>ECMAScript：由 ECMA-262 定义并提供核心功能。</li>
<li>文档对象模型（DOM）：提供与网页内容交互的方法和接口。</li>
<li>浏览器对象模型（BOM）：提供与浏览器交互的方法和接口。</li>
</ul>`,readingTime:{minutes:.82,words:245},title:"JavaScript",type:"article"}}],["/%E5%89%8D%E7%AB%AF/Node/",{loader:()=>g(()=>import("./index.html-BuFFKYRd.js"),__vite__mapDeps([29,1])),meta:{date:1603019226e3,excerpt:`
<ul>
<li><a href="/blogs/%E5%89%8D%E7%AB%AF/Node/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html" target="_blank">基础</a></li>
</ul>
`,readingTime:{minutes:.03,words:8},title:"Node",type:"article"}}],["/%E5%89%8D%E7%AB%AF/Node/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html",{loader:()=>g(()=>import("./基础知识.html-CtIA21zh.js"),__vite__mapDeps([30,1])),meta:{date:1589560467e3,excerpt:`
`,readingTime:{minutes:.01,words:3},title:"Node基础",type:"article"}}],["/%E5%89%8D%E7%AB%AF/TypeScript/",{loader:()=>g(()=>import("./index.html-yb-k-k-L.js"),__vite__mapDeps([31,1])),meta:{date:1603019226e3,excerpt:`
<ul>
<li>TypeScript 类型系统</li>
<li>TypeScript 项目配置</li>
<li>TypeScript 实战</li>
</ul>
`,readingTime:{minutes:.05,words:14},title:"TypeScript",type:"article"}}],["/%E5%89%8D%E7%AB%AF/TypeScript/TypeScriptTips.html",{loader:()=>g(()=>import("./TypeScriptTips.html-K0EPpm1M.js"),__vite__mapDeps([32,1])),meta:{date:1644856541e3,excerpt:`
<h2>可辨识联合类型保证每个 case 都被处理</h2>
<p>把单例类型、联合类型、类型保护和类型别名这几种类型进行合并，来创建一个叫做可辨识联合的高级类型，它也可称作标签联合或代数数据类型。</p>
<p>可辨识联合要求具有两个要素：</p>
<ul>
<li>具有普通的单例类型属性（单例类型，符合单例模式的数据类型，比如枚举成员类型，字面量类型。）</li>
<li>一个类型别名，包含了那些类型的联合（即把几个类型封装为联合类型，并起一个别名）。</li>
</ul>
<h3>利用 strictNullChecks</h3>
<div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-typescript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Square</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  kind</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "square"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  size</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Rectangle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  kind</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "rectangle"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  height</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  width</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Circle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  kind</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "circle"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  radius</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Triangle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  kind</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "triangle"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  bottom</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  height</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Shape</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Square</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF"> |</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Rectangle</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF"> |</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Circle</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF"> |</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Triangle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Shape 联合有四种接口，但函数的 switch 里只包含三个 case，编译器并没有提示任何错误</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 因为当传入函数的是类型是 Triangle 时，没有任何一个 case 符合，则不会有 return 语句执行，那么函数是默认返回 undefined。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 开启 strictNullChecks，然后让函数的返回值类型为 number，那么当返回 undefined 的时候，就会报错</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getArea</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">s</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Shape</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // error Function lacks ending return statement and return type does not include 'undefined'</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  switch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    case</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "square"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">size</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    case</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "rectangle"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">height</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    case</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "circle"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">PI</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">radius</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> **</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:13.22,words:3967},title:"TypeScript Tips",type:"article"}}],["/%E5%89%8D%E7%AB%AF/TypeScript/TypeScript%E5%85%B6%E4%BB%96%E7%B1%BB%E5%9E%8B.html",{loader:()=>g(()=>import("./TypeScript其他类型.html-NYPyj_zF.js"),__vite__mapDeps([33,1])),meta:{date:1644856541e3,excerpt:`
<h2>接口（interface）</h2>
<p>使用 interface 来定义接口。在定义接口的时候，<code>{}</code> 括号包裹的是一个代码块，是声明类型的语句。使用冒号指定类型，每条声明之间使用换行分隔，也可以使用分号或逗号。</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Say</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">words</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  age</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> number</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 可选属性</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  readonly</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> isMale</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> boolean</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 只读属性</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  say</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">words</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 函数类型描述方法一：在 interface 内部描述函数</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // say: Say // 函数类型描述方法二：先用接口直接描述函数类型，然后再 User 内使用</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getUserName</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">user</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:20.52,words:6157},title:"TypeScript 接口、函数、泛型、类",type:"article"}}],["/%E5%89%8D%E7%AB%AF/TypeScript/TypeScript%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B.html",{loader:()=>g(()=>import("./TypeScript基础类型.html-1-WZKy19.js"),__vite__mapDeps([34,1])),meta:{date:1644856541e3,excerpt:`
<h2>类型</h2>
<h3>基础类型</h3>
<div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-typescript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// ===== 【Boolean】 - true / false =====</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> bool</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> boolean</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// ===== 【Number】 =====</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 支持二、八、十、十六进制的数值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> num</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> number</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// ===== 【String】 =====</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 单引号/双引号/模板字符串包裹的内容、字符串字面量类型</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> str1</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "Bob"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">str1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'Tom'</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 字符串字面量类型，即把一个字符串字面量作为一种类型</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 当把一个变量指定为字符串类型的时候，就不能再赋值为其他字符串值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> str2</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'Bob'</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">str2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'Jerry'</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // error 不能将类型 "Jerry"，分配给类型 "Bob"</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// ===== 【Array】 =====</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 格式: type[] 或 Array&lt;type&gt; - type为元素类型</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 设置元素类型均为 number 类型的数组类型，如下所示：</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> arr1</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// type[] 格式 - 推荐使用格式</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> arr2</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Array&lt;type&gt; 格式</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 指定数组里的元素既可以是数值也是字符串，如下所示：</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> arr3</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> number</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">|</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'str'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// ===== 【Object】 =====</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 希望一个变量或者函数的参数的类型是一个对象时，使用此类型</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> obj</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> object</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">obj</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'Tom'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 问题一: 访问对象中的某个属性，会报错，提示类型 object 上没有这个属性</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // error: 类型 object 上不存在属性 name</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 问题一解决方法：可以使用接口（interface）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> obj</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> User</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'Tom'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 问题二: 当定义一个函数，参数必须为对象，此时需要用到 object 类型，</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">obj</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// error</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'name'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 问题二解决方法：使用泛型</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">T</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">U</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD"> keyof</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">obj</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// ===== 【null 和 undefined】 =====</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 默认情况下， undefined 和 null 可以赋值给任意类型的值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 在 tsconfig.json 的"compilerOptions"里设置了"strictNullChecks": true时，</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// &gt;&gt;&gt; undefined 和 null 将只能赋值给它们自身和 void 类型</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> u</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> undefined</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> n</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> null</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// ===== 【Symbol】 =====</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 表示独一无二的值，通过 Symbol 函数生成</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 注意：使用 Symbol 的时候，必须添加 es6 的编译辅助库</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// tsconfig.json - "lib": ["es6", "dom"]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> sym1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Symbol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'key'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//  ===== 【BigInt】 =====</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 可以安全地存储和操作大整数。（即超出 Number 能够表示的安全整数范围）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 使用 BigInt(number) 把 Number 转换为 BigInt</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 如果类型是 BigInt，那么数字后面需要加 n。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// eg: const max1 = max + 1n</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 注意：使用 BigInt 的时候，必须添加 ESNext 的编译辅助库</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// tsconfig.json - "lib": ["es6", "dom", "ESNext"]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// declare 定义的类型只会用于编译时的检查，编译结果中会被删除。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">declare</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> foo</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">declare</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> bar</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> bigint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">foo</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> bar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// error: Type 'bigint' is not assignable to type 'number'.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">bar</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// error: Type 'number' is not assignable to type 'bigint'.</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:29.72,words:8916},title:"TypeScript 基础类型",type:"article"}}],["/%E5%89%8D%E7%AB%AF/TypeScript/TypeScript%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6.html",{loader:()=>g(()=>import("./TypeScript声明文件.html-D2aAU_Xj.js"),__vite__mapDeps([35,1])),meta:{date:1598722948e3,excerpt:`
<h2>识别库类型</h2>
<h3>全局库</h3>
<p>全局库：不需要我们引入什么变量，只需要将库引入即可使用的库。</p>
<p>可以通过看库的源码，来判断它是什么类型，一个全局库，通常会包含下面内容中的一个或多个：</p>
<ul>
<li>顶级的 <code>var</code> 语句或 <code>function</code> 声明: 顶级的 <code>var</code> 或 <code>function</code> 是直接在全局环境声明变量或函数，不使用立即执行函数包裹会影响到全局，所以有这种一般会是全局库</li>
<li>一个或多个赋值给 <code>window.someName</code> 的赋值语句: 当出现给 <code>window</code> 设置某个属性名 <code>someName</code> ，然后给这个属性赋值的语句时，是在给全局对象 <code>window</code> 赋值。引入这个库后直接通过 <code>window.someName</code> 即可在全局任何地方访问到这个属性值</li>
<li>判断 <code>document</code> 或 <code>window</code> 是否存在的判断逻辑: 出现 <code>if</code> 语句或三元操作符这种判断 <code>document</code> 或 <code>window</code> 是否存在的语句，也有可能是要给这两个全局对象添加内容，所以也有可能是全局库。</li>
</ul>`,readingTime:{minutes:7.21,words:2164},title:"声明文件",type:"article"}}],["/%E5%89%8D%E7%AB%AF/TypeScript/TypeScript%E5%AE%9E%E7%8E%B0Promise.html",{loader:()=>g(()=>import("./TypeScript实现Promise.html-CjWdW1dG.js"),__vite__mapDeps([36,1])),meta:{date:1644856541e3,excerpt:`
<div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-typescript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ResolveType</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">value</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> RejectType</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">value</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Executor</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">resolve</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ResolveType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">reject</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> RejectType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> isPromise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">val</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> val</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD"> is</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> isObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">&amp;&amp;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> isFunction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> isObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">val</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> val</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD"> is</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Record</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> val</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> !==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> null</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD"> typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> val</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'object'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> isFunction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">data</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> data</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD"> is</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD"> typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'function'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD"> default</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">T</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  public</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> resolve</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">!:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ResolveType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  public</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> reject</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">!:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> RejectType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  public</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> status</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 状态值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  public</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> resolve_executor_value</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  public</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> reject_executor_value</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 保存【成功】状态需要执行的函数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  public</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> resolve_then_callbacks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)[] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [];</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 保存【失败】状态需要执行的函数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  public</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> reject_then_callbacks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)[] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [];</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">executor</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Executor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">status</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'pending'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 状态值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 成功</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">resolve</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">value</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">status</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'pending'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">status</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'success'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">resolve_executor_value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">resolve_then_callbacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">callback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> callback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    };</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 失败</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">reject</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">reason</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">status</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'pending'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">status</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'reject'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">reject_executor_value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> reason</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">reject_then_callbacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">callback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> callback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    };</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">      executor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 执行函数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">err</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">      this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">status</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'pending'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">      this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 失败，则直接执行 reject 函数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'程序停止!!!'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">resolveInthen</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ResolveType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">rejectInThen</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> RejectType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> result</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">status</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'success'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        result</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> resolveInthen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">resolve_executor_value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//ok</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">status</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'reject'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        result</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> rejectInThen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">reject_executor_value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">status</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'pending'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">processManyAsyncAndSync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">resolveInthen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">rejectInThen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  static</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> all</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">promises</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[])</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> allPrmiseResolveSucssValue</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      promises</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">        promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">          (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">resolveSuccess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            ProcessData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">resolveSuccess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">          },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">          (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">rejectFail</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">rejectFail</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 只要有一个promise对象的resolve执行失败，执行reject</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">          }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ProcessData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">resolveSuccess</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">index</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        allPrmiseResolveSucssValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> resolveSuccess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">index</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> promises</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          // 所有的 promise 对象 resolve 函数全部执行完成</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">          resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">allPrmiseResolveSucssValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   * 执行多个异步+多级then的处理方法</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   * </span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">param</span><span style="--shiki-light:#E45649;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> resolveInthen</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   * </span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">param</span><span style="--shiki-light:#E45649;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> rejectInThen</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   * </span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">param</span><span style="--shiki-light:#E45649;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> resolve</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   * </span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">param</span><span style="--shiki-light:#E45649;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> reject</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  processManyAsyncAndSync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">    resolveInthen</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ResolveType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">    rejectInThen</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> RejectType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">    resolve</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ResolveType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">    reject</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> RejectType</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  ) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> result</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">resolve_then_callbacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">      result</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> resolveInthen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">resolve_executor_value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">isPromise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // 是异步的 Promise 对象</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">        result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">          (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">resolveSuccess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">resolveSuccess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">          },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">          (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">rejectSuccess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">rejectSuccess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">          }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 如果是普通的数据,不是异步的 Promise 对象</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    });</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">reject_then_callbacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">      result</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> rejectInThen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">reject_executor_value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">      reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:1.3,words:391},title:"TypeScript 实现 Promise",type:"article"}}],["/%E5%89%8D%E7%AB%AF/TypeScript/TypeScript%E5%AE%9E%E7%8E%B0Vuex.html",{loader:()=>g(()=>import("./TypeScript实现Vuex.html-BZJy55zV.js"),__vite__mapDeps([37,1])),meta:{date:1644856541e3,excerpt:`
<div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-typescript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">inject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'vue'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// provide / inject</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// provide 设置一个可以被注入到应用范围内所有组件中的值。组件使用 inject 来接收 provide 的值。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> injectKey</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'store'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> useStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;()</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> inject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">injectKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">as</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> createStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">options</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> StoreOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  moduleCollection</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ModuleCollection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  mutations</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Record</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  actions</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Record</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  getters</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> GetterTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  commit</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  dispatch</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Dispatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">options</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> StoreOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 初始化模块集合：添加子模块到父模块中，并对模块进行包装</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">moduleCollection</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ModuleCollection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'this.moduleCollection: '</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">moduleCollection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> store</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> ref</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> commit</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">commit_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> dispatch</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dispatch_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">commit</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> boundCommit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">payload</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">payload</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    };</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">dispatch</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> boundDispatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">payload</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      dispatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">payload</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 获取根 Store 的 state</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> rootState</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">moduleCollection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 注册模块</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    installModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">rootState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, [], </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">moduleCollection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  install</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">app</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">provide</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">injectKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  commit_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">payload</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">mutations</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'[vuex] unknown mutation type: '</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">mutations</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">](</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">payload</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  dispatch_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">payload</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">actions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'[vuex] unknown actions type: '</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">actions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">](</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">payload</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">param</span><span style="--shiki-light:#E45649;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> store</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">param</span><span style="--shiki-light:#E45649;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> rootState_</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> 根 state</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">param</span><span style="--shiki-light:#E45649;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> path</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> 保存模块名【命名空间名】的数组</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">param</span><span style="--shiki-light:#E45649;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> module</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> 当前模块</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> installModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">  store</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">  rootState_</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">  path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">  module</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ModuleWrapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> isRoot</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> !</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> namespace</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">moduleCollection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getNamespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> actionContext</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ActionContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> makeLocalContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">!</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">isRoot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 1、如果不是根模块，则获取父级的 state 对象</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> parentState</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Record</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getParentState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">rootState_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">slice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 2、将当前模块的 state对象 和 当前模块名 合成一个对象，加到父级 state对象 上</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    parentState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 遍历 父模块 中的 子模块</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">  module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEachChild</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    installModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">rootState_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">concat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">), </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 遍历模块中的 getter</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">  module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEachGetter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">getter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> namespaceType</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> namespace</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">defineProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">getters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">namespaceType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">      get</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'store.getters: '</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">getters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  });</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 遍历模块中的 mutation</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">  module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEachMutation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">mutation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> namespaceType</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> namespace</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">mutations</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">namespaceType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">payload</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      mutation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">payload</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'store.mutations: '</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">mutations</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  });</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 遍历模块中的 action</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">  module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEachAction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">action</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> namespaceType</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> namespace</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">actions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">namespaceType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">payload</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      action</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">commit</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> actionContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> }, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">payload</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'store.actions: '</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">actions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> makeLocalContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">store</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">namespace</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> noNamespace</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> namespace</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ''</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 根模块没有命名空间</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> actionContext</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ActionContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    commit</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> noNamespace</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">      ?</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">commit</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">      :</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">payload</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">          type</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> namespace</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">          store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">payload</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  };</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> actionContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getParentState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">rootState</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[]) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">reduce</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">state</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> as</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">rootState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// path: ["foodSortModule", "foodModule", "foodDetailModule"]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// rootState:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//   "navList": 根state对象数据,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//   "foodSortModule": {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//     foodSortList: { 美食分类对象数据 },</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//     "foodModule": {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//       "美食state对象数据",</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//       "foodDetailModule": { 美食详情对象数据 }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//     }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//   },</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//   "hotelSortModule": 酒店分类state数据对象 //酒店分类 state</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// rootState对象结束</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 处理模块集合</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ModuleCollection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  root</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">!:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ModuleWrapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">rawRootModule</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">register</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">([], </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">rawRootModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 注册模块</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  register</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[], </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">rawModule</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> newModule</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ModuleWrapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">rawModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      // path 长度等于 0 为根模块</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">      this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">root</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> newModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      // 添加 子模块 到 父模块 中</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      // 1、获取 父模块 的 ModuleWrapper 对象</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> parentModule</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">slice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      // 2、将 子模块 添加到 父模块 中</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      parentModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addChild</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">], </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">newModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">rawModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">modules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> sonModules</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> rawModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">modules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 获取子模块</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      // 遍历子模块，并进行注册</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      Util</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEachValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">sonModules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">modules</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">register</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">concat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">), </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">modules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[]) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> module</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">reduce</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">moduleWrapper</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ModuleWrapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getChild</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  getNamespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[]) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> moduleWrapper</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">reduce</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">      moduleWrapper</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> moduleWrapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getChild</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> namespace</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">moduleWrapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">namespaced</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD"> ?</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> key</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '/'</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD"> :</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ''</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">''</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Util</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  static</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> forEachValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">obj</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">fn</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">      fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">obj</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> as</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">], </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 模块包装</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ModuleWrapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  children</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Record</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ModuleWrapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  rawModule</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  state</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  namespaced</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">rawModule_</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // rawModule 原始模块： namespaced 、 state 、 getter 、 mutations 、 actions</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">rawModule</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> rawModule_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">state</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> rawModule_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">state</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">namespaced</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> rawModule_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">namespaced</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ||</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  addChild</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">moduleWrapper</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ModuleWrapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">children</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> moduleWrapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  getChild</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">children</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  forEachChild</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">fn</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ChldMdleWrperToKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    Util</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEachValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">children</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  forEachGetter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">fn</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> GetterToKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">rawModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">getters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      Util</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEachValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">rawModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">getters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  forEachMutation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">fn</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MutationToKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">rawModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">mutations</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      Util</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEachValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">rawModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">mutations</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  forEachAction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">fn</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ActionToKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">rawModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">actions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      Util</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEachValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">rawModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">actions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Dispatch</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">payload</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Commit</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">payload</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ActionContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  //dispatch: Dispatch;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  commit</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  //state: S;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// type Getter&lt;S, R&gt; = (state: S, getters: any, rootState: R, rootGetters: any) =&gt; any</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Getter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">state</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Mutation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">state</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">payload</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Action</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">context</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ActionContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">payload</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> GetterToKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">getter</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Getter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MutationToKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">getter</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Mutation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ActionToKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">action</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Action</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ChldMdleWrperToKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">moduleWrapper</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ModuleWrapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 【start】 StoreOptions 接口增加多模块管理属性</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> GetterTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  [</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Getter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MutationTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  [</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Mutation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ActionTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  [</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Action</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ModuleTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  [</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> StoreOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  state</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  getters</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> GetterTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  mutations</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MutationTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  actions</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ActionTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  modules</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ModuleTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  namespaced</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  state</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  getters</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> GetterTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  mutations</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MutationTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  actions</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ActionTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  modules</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ModuleTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 【end】 StoreOptions 接口增加多模块管理属性</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:3.62,words:1086},title:"TypeScript 实现 Vuex",type:"article"}}],["/%E5%89%8D%E7%AB%AF/TypeScript/TypeScript%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html",{loader:()=>g(()=>import("./TypeScript控制反转和依赖注入.html-DMojjpB_.js"),__vite__mapDeps([38,1])),meta:{date:1644856541e3,excerpt:`
<h2>IoC 控制反转</h2>
<p>IoC（Inversion of Control），即 “控制反转”。在开发中， IoC 意味着将设计好的对象交给容器控制，⽽不是使⽤传统的⽅式，在对象内部直接控制。</p>
<ul>
<li><strong>IoC 是有专⻔⼀个容器来创建这些对象，即由 IoC 容器控制对象的创建</strong>。而直接在对象内部通过 <code>new</code> 的方式创建对象，是程序主动创建依赖对象。</li>
<li>传统应⽤程序是由我们⾃⼰在程序中主动控制去获取依赖对象，称为<strong>正转</strong>。<strong>反转，则是由容器来帮忙创建及注⼊依赖对象</strong>。因为由容器帮我们查找及注⼊依赖对象，对象只是被动的接受依赖对象，依赖对象的获取被反转。</li>
</ul>`,readingTime:{minutes:1.55,words:465},title:"TypeScript控制反转和依赖注入",type:"article"}}],["/%E5%89%8D%E7%AB%AF/TypeScript/TypeScript%E8%A3%85%E9%A5%B0%E5%99%A8.html",{loader:()=>g(()=>import("./TypeScript装饰器.html-eT_djUi-.js"),__vite__mapDeps([39,1])),meta:{date:1644856541e3,excerpt:`
<h2>基础</h2>
<ul>
<li>
<p>装饰器定义</p>
<p>装饰器能够作用于类声明、方法、访问符、属性和参数上。使用 <code>@</code> 符号加一个名字来定义，如 <code>@decorate</code>， <code>decorate</code> 必须<strong>是一个函数或者求值后是一个函数</strong>。函数在运行的时候被调用，被装饰的声明作为参数会自动传入。</p>
<p>注意：装饰器要紧挨着要修饰的内容的前面，而且所有的装饰器不能用在 <code>.d.ts</code> （声明文件）中，和任何外部上下文中。</p>
</li>
<li>
<p>装饰器工厂</p>
<p>装饰器工厂是一个函数，它的返回值是<strong>一个函数</strong>，返回的函数作为装饰器的调用函数。如果使用装饰器工厂，那么在使用的时候，就要加上函数调用。</p>
</li>
<li>
<p>装饰器组合（对于同一个目标，引用多个装饰器），多个装饰器的执行顺序如下：</p>
<ul>
<li>装饰器工厂从上到下依次执行，但是只是用于返回函数但不调用函数；</li>
<li>装饰器函数从下到上依次执行，也就是执行工厂函数返回的函数。</li>
</ul>
<div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-typescript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> setName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'get setName'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'setName'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> setAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'get setAge'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'setAge'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 打印出来的内容如下：</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 'get setName -&gt; get setAge -&gt; setAge -&gt; setName</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>装饰器求值</p>
<p>类的定义中,不同声明上的装饰器将按以下规定的顺序引用：</p>
<ul>
<li>参数装饰器，方法装饰器，访问符装饰器或属性装饰器应用到每个实例成员；</li>
<li>参数装饰器，方法装饰器，访问符装饰器或属性装饰器应用到每个静态成员；</li>
<li>参数装饰器应用到构造函数；</li>
<li>类装饰器应用到类。</li>
</ul>
</li>
<li>
<p>装饰器 JavaScript 实现</p>
<div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-typescript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> FirstClassDecorator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">targetClass</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">targetClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">prototype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '信息'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">targetClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">prototype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">methodname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'方法'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">methodname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> dataprop</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getOwnPropertyDescriptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">targetClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">prototype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">methodname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'方法数据属性:'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">dataprop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">FirstClassDecorator</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> CustomerService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> string</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '名字'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  buy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '购买'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  placeOrder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '下单购买'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// ========== JavaScript 实现 ==========</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'use strict'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __decorate</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">__decorate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">||</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // decorators : 接收数组，包含多个装饰器函数</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // target : 表示被装饰的类</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // key</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // desc</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">decorators</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">desc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 参数数量</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // &gt; argsNum = 2, 装饰器修饰的是【类】或者【构造器参数】, targetInfo = target[类名]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // &gt; argsNum = 3, 装饰器修饰的是【方法参数】或者【属性】, targetInfo = undefined</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // &gt; argsNum = 4, 装饰器修饰的是【方法】（第四个参数 desc 等于 null）, targetInfo = 该方法的数据属性 [desc = Object.getOwnPropertyDescriptor(target, key)]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> argsNum</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> arguments</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // targetInfo : 被装饰器修饰的目标 - 类、属性、方法、方法参数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> targetInfo</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">      argsNum</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 3</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">        ?</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> target</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">        :</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> desc</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> null</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">        ?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">desc</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getOwnPropertyDescriptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">        :</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> desc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> decorator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 保存装饰器数组元素</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // Reflect.decorate : ES6是没有提供 Reflect.decorate 方法，元数据信息,支持 reflect-metadata 元数据</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> Reflect</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'object'</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD"> typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> Reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">decorate</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'function'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">      targetInfo</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> Reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">decorate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">decorators</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">desc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    else</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> decorators</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">--</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ((</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">decorator</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> decorators</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]))</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          // argsNum &lt; 3, decorator 为【类装饰器】或者【构造器参数装饰器】，执行 decorator(targetInfo), 直接执行 decorator 装饰器，并传递目标 targetInfo</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          // argsNum &gt; 3, decorator 为【方法装饰器】，直接执行 decorator(target, key, targetInfo)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          // argsNum = 3, decorator 为【方法参数装饰器】或者【属性装饰器】，直接执行 decorator(target, key)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          // targetInfo 最终为各个装饰器执行后的返回值,但如果没有返回值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">          targetInfo</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">argsNum</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 3</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">              ?</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> decorator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">targetInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">              :</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> argsNum</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 3</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">              ?</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> decorator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">targetInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">              :</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> decorator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">||</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> targetInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> argsNum</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 3</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> targetInfo</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">defineProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">targetInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">), </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">targetInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  };</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> __metadata</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">__metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">||</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">k</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">v</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> Reflect</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'object'</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD"> typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> Reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">metadata</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'function'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> Reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">k</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">v</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> FirstClassDecorator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">targetClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">targetClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">prototype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '信息'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">targetClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">prototype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">methodname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'方法'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">methodname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> dataprop</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getOwnPropertyDescriptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">targetClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">prototype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">methodname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'方法数据属性:'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">dataprop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> CustomerService</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> CustomerService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '姓名'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  buy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '购买'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  placeOrder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '下单购买'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">CustomerService</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> __decorate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  [</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">FirstClassDecorator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">__metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'design:paramtypes'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, [])],</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 【注意】：类装饰器，此处为类的实例</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  CustomerService</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>`,readingTime:{minutes:14.59,words:4377},title:"TypeScript 装饰器",type:"article"}}],["/%E5%89%8D%E7%AB%AF/TypeScript/demo.html",{loader:()=>g(()=>import("./demo.html-unKNXRTE.js"),__vite__mapDeps([40,1])),meta:{date:1643892451e3,excerpt:`
<h2>工具</h2>
<ul>
<li><a href="https://nodemon.io/" target="_blank" rel="noopener noreferrer">nodemon</a> : 自动重启node应用的工具，当监听的文件或监听目录下的文件发生修改时，自动重启应用。</li>
<li>Parcel 打包支持浏览器允许 ts 文件 : <code>npm install parcel-bundler --save-dev</code></li>
</ul>
<h2>单例设计模式</h2>
<h3>定义</h3>
<p>一个类对外有且仅有一个实例【只提供一个实例】</p>`,readingTime:{minutes:6.72,words:2016},title:"笔记",type:"article"}}],["/%E5%89%8D%E7%AB%AF/TypeScript/tsconfig%E9%85%8D%E7%BD%AE.html",{loader:()=>g(()=>import("./tsconfig配置.html-DrPwrRIr.js"),__vite__mapDeps([41,1])),meta:{date:1598720131e3,excerpt:`
<h2>使用 tsc 命令编译项目</h2>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 直接在项目根目录下执行 tsc 命令，会自动根据 tsconfig.json 配置项编译</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 如果在当前目录没找到，就会逐级向父文件夹查找。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tsc</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 指定要编译的项目，即 tsconfig.json 所在文件目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tsc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --project</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ./dir/project</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 指定要编译的文件，忽略 tsconfig.json 文件配置</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">tsc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ./src/main.ts</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:8.4,words:2520},title:"tsconfig.json配置",type:"article"}}],["/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5/01.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E9%80%9A%E8%AF%86.html",{loader:()=>g(()=>import("./01.编程语言通识.html-u_9tR3ZP.js"),__vite__mapDeps([42,1])),meta:{date:1613149193e3,excerpt:`
<h2>形式语言（乔姆斯基谱系）</h2>
<ul>
<li>0型 无限制文发</li>
<li>1型 上下文相关文法</li>
<li>2型 上下文无关文法</li>
<li>3型 正则文法</li>
</ul>
<h2>BNF（巴科斯范式）</h2>
<p>一种形式化的语法表示方法，用来描述语法的一种形式体系，是一种典型的元语言。又称巴科斯-诺尔形式(Backus-Naur form)。它不仅能严格地表示语法规则，而且所描述的语法是与上下文无关的。它具有语法简单，表示明确，便于语法分析和编译的特点。</p>
<h3>语法规则</h3>
<ul>
<li>非终结符用尖括号括起</li>
<li>每条规则的左部是一个非终结符，右部是由非终结符和终结符组成的一个符号串，中间一般以<code>::=</code>分开</li>
<li>具有相同左部的规则可以共用一个左部，各右部之间以直竖“|”隔开</li>
</ul>`,readingTime:{minutes:3.44,words:1032},title:"编程语言通识",type:"article"}}],["/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5/02.JavaScript%E8%AF%8D%E6%B3%95%E5%92%8C%E7%B1%BB%E5%9E%8B.html",{loader:()=>g(()=>import("./02.JavaScript词法和类型.html-BWlDmHe7.js"),__vite__mapDeps([43,1])),meta:{date:1613149193e3,excerpt:`
<h2>Unicode（字符集）</h2>
<p>中文又称万国码、国际码、统一码、单一码，是计算机科学领域的业界标准。它整理、编码了世界上大部分的文字系统，使得电脑可以用更为简单的方式来呈现和处理文字。</p>
<h3>Blocks（区段）</h3>
<p>在 Unicode 中，Blocks 被定义为一组连续码位的范围。Blocks 会被给予唯一的名称，且区段与区段间不会重叠。</p>
<h3>Categories （类别）</h3>
<h2>Lexical Grammar（词法）</h2>
<p>ECMAScript 源码文本会被从左到右扫描，并被转换为一系列的输入元素，包括 token、控制符、行终止符、注释和空白符。</p>`,readingTime:{minutes:13.81,words:4142},title:"JavaScript词法和类型",type:"article"}}],["/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5/03.%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html",{loader:()=>g(()=>import("./03.表达式和类型转换.html-BztLZp21.js"),__vite__mapDeps([44,1])),meta:{date:1613366759e3,excerpt:`
<h2>表达式语句</h2>
<p>表达式语句实际上就是一个表达式，它是由运算符连接变量或者直接量构成的。</p>
<h3>PrimaryExpression 主要表达式</h3>
<p>Primary Expression 是表达式的最小单位，它涉及的语法结构也是优先级最高的。</p>
<p>Primary Expression 包含了各种直接量，直接量为直接用某种语法写出来的具有特定类型的值。</p>
<p>任何表达式加上圆括号，都被认为是 Primary Expression。使得圆括号成为改变运算优先顺序的手段。</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"abc"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;            </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 字符串</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">123</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;              </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 数值</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;             </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// null：使用 null 关键字获取 null 值</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;             </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 布尔值</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;            </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 布尔值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({});             </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 对象</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(){});   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 函数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{});        </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 类</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75">/abc/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">g</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;           </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 正则表达式</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;             </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// this</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">myVar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;            </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 变量：在语法上，把变量称作“标识符引用”</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);          </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 任何表达式加上圆括号，都被认为是 Primary Expression</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:9.12,words:2735},title:"表达式和类型转换",type:"article"}}],["/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5/04.%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%AF%B9%E8%B1%A1.html",{loader:()=>g(()=>import("./04.语句和对象.html-CmsWcNdv.js"),__vite__mapDeps([45,1])),meta:{date:1613400183e3,excerpt:`
<h2>语句</h2>
<h3>普通语句</h3>
<h4>语句块</h4>
<p>语句块可以把多行语句视为同一行语句。需要注意，语句块会产生作用域。</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  y</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 报错：let声明，仅仅对语句块作用域生效</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:10.16,words:3048},title:"语句和对象",type:"article"}}],["/%E5%89%8D%E7%AB%AF/%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/H5%E7%9B%B4%E6%92%AD%E7%82%B9%E8%B5%9E%E5%8A%A8%E7%94%BB.html",{loader:()=>g(()=>import("./H5直播点赞动画.html-SYGq2288.js"),__vite__mapDeps([46,1])),meta:{date:1627231031e3,category:["动效"],tag:["动画"],excerpt:`
<h2>CSS3 方式</h2>
<h3>CSS3 animation</h3>
<p><code>animation: name duration timing-function delay iteration-count direction fill-mode play-state;</code></p>
<ul>
<li><code>name</code> : <strong>animation-name</strong> , 规定需要绑定到选择器的 <code>@keyframe</code> （规定动画） 名称。</li>
<li><code>duration</code> : <strong>animation-duration</strong> , 规定完成动画所花费的时间，以秒或毫秒计。</li>
<li><code>timing-function</code> : <strong>animation-timing-function</strong> , 规定动画的速度曲线。
<ul>
<li><code>linear</code> : 动画从头到尾的速度是相同的。</li>
<li><code>ease</code> : 默认。动画以低速开始，然后加快，在结束前变慢。</li>
<li><code>ease-in</code> : 动画以低速开始。</li>
<li><code>ease-out</code> : 动画以低速结束。</li>
<li><code>ease-in-out</code> : 动画以低速开始和结束。</li>
<li><code>cubic-bezier(n,n,n,n)</code> : 在 <code>cubic-bezier</code> 函数中自己的值。可能的值是从 <code>0</code> 到 <code>1</code> 的数值。</li>
</ul>
</li>
<li><code>delay</code> : <strong>animation-delay</strong> , 规定在动画开始之前的延迟。单位可以是秒（s）或毫秒（ms）。</li>
<li><code>iteration-count</code> : <strong>animation-iteration-count</strong> , 规定动画应该播放的次数。
<ul>
<li><code>n</code> : 一个数字，定义应该播放多少次动画。</li>
<li><code>infinite</code> : 指定动画应该播放无限次（永远）。</li>
</ul>
</li>
<li><code>direction</code> : <strong>animation-direction</strong> , 规定是否应该轮流反向播放动画。
<ul>
<li><code>normal</code> : 默认值。动画按正常播放。</li>
<li><code>reverse</code> : 动画反向播放。</li>
<li><code>alternate</code> : 动画在奇数次（1、3、5...）正向播放，在偶数次（2、4、6...）反向播放。</li>
<li><code>alternate-reverse</code> : 动画在奇数次（1、3、5...）反向播放，在偶数次（2、4、6...）正向播放。</li>
<li><code>initial</code> : 设置该属性为它的默认值。</li>
<li><code>inherit</code> : 从父元素继承该属性。</li>
</ul>
</li>
<li><code>fill-mode</code> : <strong>animation-fill-mode</strong> , 规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。
<ul>
<li><code>none</code> : 默认值。动画在动画执行之前和之后不会应用任何样式到目标元素。</li>
<li><code>forwards</code> : 在动画结束后（由 <code>animation-iteration-count</code> 决定），动画将应用该属性值。</li>
<li><code>backwards</code> : 动画将应用在 <code>animation-delay</code> 定义期间启动动画的第一次迭代的关键帧中定义的属性值。这些都是 from 关键帧中的值（当 <code>animation-direction</code> 为 <code>normal</code> 或 <code>alternate</code> 时）或 to 关键帧中的值（当 <code>animation-direction</code> 为 <code>reverse</code> 或 <code>alternate-reverse</code> 时）。</li>
<li><code>both</code> : 动画遵循 forwards 和 backwards 的规则。也就是说，动画会在两个方向上扩展动画属性。</li>
<li><code>initial</code> : 设置该属性为它的默认值。请参阅 initial。</li>
<li><code>inherit</code> : 从父元素继承该属性。请参阅 inherit。</li>
</ul>
</li>
<li><code>play-state</code> : <strong>animation-play-state</strong> , 指定动画是否正在运行或已暂停。
<ul>
<li><code>paused</code> : 指定暂停动画</li>
<li><code>running</code> : 指定正在运行的动画</li>
</ul>
</li>
</ul>`,readingTime:{minutes:3.46,words:1037},title:"H5 直播点赞动画",type:"article"}}],["/%E5%89%8D%E7%AB%AF/%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/",{loader:()=>g(()=>import("./index.html-COWgCKMB.js"),__vite__mapDeps([47,1])),meta:{date:1603019226e3,excerpt:`
<ul>
<li><a href="/blogs/%E5%89%8D%E7%AB%AF/%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/H5%E7%9B%B4%E6%92%AD%E7%82%B9%E8%B5%9E%E5%8A%A8%E7%94%BB.html" target="_blank">H5直播点赞动画</a></li>
</ul>
`,readingTime:{minutes:.06,words:17},title:"动效",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Electron/",{loader:()=>g(()=>import("./index.html-D25ipRSI.js"),__vite__mapDeps([48,1])),meta:{date:1603019226e3,excerpt:`
<p>Electron 是一个使用 JavaScript、HTML 和 CSS 构建桌面应用程序的框架。</p>
<p>嵌入 Chromium 和 Node.js 到二进制的 Electron 允许您保持一个 JavaScript 代码代码库并创建，在 Windows 上运行的跨平台应用 macOS 和 Linux —— 不需要本地开发经验。</p>
`,readingTime:{minutes:.24,words:72},title:"Electron",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/",{loader:()=>g(()=>import("./index.html-xyYpov0T.js"),__vite__mapDeps([49,1])),meta:{date:1603019226e3,excerpt:`
<p>React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。</p>
<ul>
<li>
<p>声明式</p>
<p>React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据变动时 React 能高效更新并渲染合适的组件。</p>
<p>以声明式编写 UI，可以让你的代码更加可靠，且方便调试。</p>
</li>
<li>
<p>组件化</p>
<p>构建管理自身状态的封装组件，然后对其组合以构成复杂的 UI。</p>
<p>由于组件逻辑使用 JavaScript 编写而非模板，因此你可以轻松地在应用中传递数据，并保持状态与 DOM 分离。</p>
</li>
<li>
<p>一次学习，跨平台编写</p>
<p>无论你现在使用什么技术栈，在无需重写现有代码的前提下，通过引入 React 来开发新功能。</p>
<p>React 还可以使用 Node 进行服务器渲染，或使用 React Native 开发原生移动应用。</p>
</li>
</ul>`,readingTime:{minutes:.81,words:243},title:"React",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/",{loader:()=>g(()=>import("./index.html-BOTuxgDF.js"),__vite__mapDeps([50,1])),meta:{date:1603019226e3,excerpt:`
<p>Vue (发音为 /vjuː/，类似 view) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。</p>
<ul>
<li>
<p>易学易用</p>
<p>基于标准 HTML、CSS 和 JavaScript 构建，提供容易上手的 API 和一流的文档。</p>
</li>
<li>
<p>性能出色</p>
<p>经过编译器优化、完全响应式的渲染系统，几乎不需要手动优化。</p>
</li>
<li>
<p>灵活多变</p>
<p>丰富的、可渐进式集成的生态系统，可以根据应用规模在库和框架间切换自如。</p>
</li>
</ul>`,readingTime:{minutes:.54,words:162},title:"Vue",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Q_A.html",{loader:()=>g(()=>import("./Q_A.html-DTYLywYL.js"),__vite__mapDeps([51,1])),meta:{date:1649339546e3,excerpt:`
<h2>css <code>import</code> 使用 alias 相对路径</h2>
<p>在 less, sass, stylus 中，使用 <code>@import "@/style/theme"</code> 的语法引用相对 <code>@</code> 的目录确会报错: 找不到 <code>@</code> 目录。说明 webpack 没有正确识别资源相对路径。</p>
<p>【原因】</p>
<p>css 文件会被用 <code>css-loader</code> 处理，css <code>@import</code> 后的字符串会被 <code>css-loader</code> 视为 <strong>绝对路径</strong> 解析，因为并没有添加 <code>css-loader</code> 的 <code>alias</code>，所以会报找不到 <code>@</code> 目录。</p>`,readingTime:{minutes:.68,words:204},title:"Webpack Q&A",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/",{loader:()=>g(()=>import("./index.html-D2BJHliY.js"),__vite__mapDeps([52,1])),meta:{date:1603019226e3,excerpt:`
<p>Webpack 是一个用于现代 JavaScript 应用程序的 静态模块打包工具。</p>
<p>当 Webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个依赖图(dependency graph)，然后将你项目中所需的每一个模块组合成一个或多个 bundles，它们均为静态资源，用于展示你的内容。</p>
`,readingTime:{minutes:.32,words:95},title:"Webpack",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/uni-app/",{loader:()=>g(()=>import("./index.html-BWSkIni8.js"),__vite__mapDeps([53,1])),meta:{date:1643892451e3,excerpt:`
<h2>使用特定前缀的方式引用图片路径</h2>
<h3>scss 中使用特定前缀引用图片路径</h3>
<ul>
<li>创建 <code>globalVar.scss</code> 文件，并在 <code>uni.scss</code> 文件中引入</li>
</ul>
<details class="hint-container details"><summary>globalVar.scss</summary>
<div class="language-scss line-numbers-mode" data-highlighter="shiki" data-ext="scss" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-scss"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">$src</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'https://csxbank.oss-cn-shanghai-finance-1-pub.aliyuncs.com/sxf/'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div></details>`,readingTime:{minutes:1.77,words:530},title:"uni-app",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83.html",{loader:()=>g(()=>import("./编程规范.html-CSI_zKQu.js"),__vite__mapDeps([54,1])),meta:{date:1619107808e3,excerpt:`
<h2>EditorConfig</h2>
<p><a href="https://editorconfig.org/" target="_blank" rel="noopener noreferrer">EditorConfig</a> 可以在不同的编辑器和 IDE 中，为同一个项目工作的多个开发人员维护一致的编码风格。</p>
<p>如果使用 Visual Studio Code 编辑器，需要安装 EditorConfig for VS Code 插件。</p>
<details class="hint-container details"><summary>.editorconfig 配置</summary>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># .editorconfig</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># https://editorconfig.org</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 表示是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 表示所有文件适用</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[*]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 设置编码，值为 latin1、utf-8、utf-8-bom、utf-16be和utf-16le，不建议使用 utf-8-bom</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">charset</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> utf-8</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 设置缩进风格(tab是硬缩进，space为软缩进)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">indent_style</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> space</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 用一个整数定义的列数来设置缩进的宽度</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 如果 indent_style 为 tab，则此属性默认为 tab_width</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">indent_size</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 设置换行符，值为lf、cr和crlf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">end_of_line</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> lf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 设为 true 表示使文件以一个空白行结尾</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">insert_final_newline</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> true</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 设为 true 表示会去除换行行首的任意空白字符</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">trim_trailing_whitespace</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 仅 .md 文件适用以下规则</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[*.md]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 设为 true 表示使文件以一个空白行结尾</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">insert_final_newline</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> false</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 设为 true 表示会去除换行行首的任意空白字符</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">trim_trailing_whitespace</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> false</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,readingTime:{minutes:27.82,words:8346},title:"编程规范",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/%E8%84%9A%E6%89%8B%E6%9E%B6.html",{loader:()=>g(()=>import("./脚手架.html-aFMNuQZw.js"),__vite__mapDeps([55,1])),meta:{date:1702912721e3,excerpt:`
<p>脚手架本质是操作系统的客户端，用于快速构建项目的工具。</p>
<h2>环境变量</h2>
<p>环境变量（environment variables）一般是指在操作系统中用来指定操作系统运行环境的一些参数，如：临时文件夹位置和系统文件夹位置等。</p>
<p>在 Windows 和 DOS 操作系统中的 path 环境变量，当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到 path 中指定的路径去找。</p>
<h2>脚手架执行过程</h2>
<p></p>
<p><code>#!/usr/bin/env node</code> ： 表示让系统动态的查找 node 执行脚本文件。</p>`,readingTime:{minutes:1.5,words:450},title:"脚手架",type:"article"}}],["/%E6%95%B0%E6%8D%AE%E5%BA%93/MongoDB/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html",{loader:()=>g(()=>import("./基础知识.html-CgeDtXaV.js"),__vite__mapDeps([56,1])),meta:{date:1600014271e3,excerpt:`
<h2>1. 优点</h2>
<ul>
<li>高可扩展性</li>
<li>分布式存储</li>
<li>低成本</li>
<li>解构灵活</li>
</ul>
<h2>2. window 下安装 MongoDB</h2>
<p>参考：<a href="http://www.imooc.com/article/18438" target="_blank" rel="noopener noreferrer">http://www.imooc.com/article/18438</a></p>
<h3><a class="header-anchor" href="#_2-1-下载-mongodb-安装包"><span>2.1 </span></a><a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener noreferrer">下载 MongoDB 安装包</a></h3>`,readingTime:{minutes:18.03,words:5409},title:"MongoDB 基础",type:"article"}}],["/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E8%AF%AD%E8%A8%80/",{loader:()=>g(()=>import("./index.html-MjP9BbPw.js"),__vite__mapDeps([57,1])),meta:{date:1620210494e3,excerpt:`
<h2>SQL 相关知识</h2>
<p>SQL 语言按照功能可划分为：</p>
<ul>
<li><code>DDL</code> （Data Definition Language，数据定义语言）：用于定义数据库对象，包括数据库、数据表和列。可创建、删除和修改数据库和表结构。</li>
<li><code>DML</code> （Data Manipulation Language，数据操作语言）：用于操作和数据库相关的记录，比如增加、删除、修改数据库表中的记录。</li>
<li><code>DCL</code> （Data Control Language，数据控制语言）：用于定义访问权限和安全级别。</li>
<li><code>DQL</code> （Data Query Language，数据查询语言）：用于查询记录。</li>
</ul>`,readingTime:{minutes:3.32,words:997},title:"SQL",type:"article"}}],["/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E8%AF%AD%E8%A8%80/SQL%E5%9F%BA%E7%A1%80.html",{loader:()=>g(()=>import("./SQL基础.html-9YY8EnCy.js"),__vite__mapDeps([58,1])),meta:{date:1620210494e3,excerpt:`
<ul>
<li>创建数据库： <code>CREATE DATABASE &lt;database_name&gt;</code></li>
<li>删除数据库： <code>DROP DATABASE &lt;database_name&gt;</code></li>
<li>创建数据库中的表： <code>CREATE TABLE &lt;table_name&gt;</code></li>
<li>删除数据库中的表： <code>DROP TABLE &lt;table_name&gt;</code></li>
</ul>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">-- 使用 Navicat 设计表。导出 SQL 文件如下：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">-- 数据表和字段使用反引号，是为了避免它们名称与 MySQL 保留字段相同</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">-- 先删除 player 表（如果数据库中存在该表的话），然后再创建 player 表</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">DROP</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> TABLE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> IF</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> EXISTS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \`player\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">-- 创建球员表</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">player</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\`  (</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- player_id      球员ID</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- int(11)        整数类型，显示长度为 11 位</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- NOT NULL       表示整个字段不能是空值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- AUTO_INCREMENT 表示主键自动增长</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  \`player_id\`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- team_id        球队ID</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- int(11)        整数类型，显示长度为 11 位</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- NOT NULL       表示整个字段不能是空值</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  \`team_id\`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- player_name    球员姓名</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- varchar(255)   可变字符串类型，最大长度为 255</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- CHARACTER SET  指定数据库采用的字符集，utf8 不能写为 utf-8</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- COLLATE        指定数据库字符集的排序规则。utf8 的默认排序规则为 utf8_general_ci （表示对大小写不铭感， utf8_bin 表示对大小写敏感）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- NOT NULL       表示整个字段不能是空值</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  \`player_name\`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> varchar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">255</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">CHARACTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> utf8 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">COLLATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> utf8_general_ci </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- height         球员身高</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- float(size, d) 带有浮动小数点的小数字。size 表示规定显示最大位数， d 表示规定小数点右侧的最大位数</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- NULL           如果表中的某个列是可选的，那么可以在不向该列添加值的情况下插入新记录或更新已有的记录</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  --                意味着该字段将以 NULL 值保存。用作未知的或不适用的值的占位符。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- DEFAULT        约束用于向列中插入默认值</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  \`height\`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">NULL</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> DEFAULT</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- PRIMARY KEY    约束唯一标识数据库表中的每条记录</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  --                主键必须包含唯一的值。主键列不能包含 NULL 值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  --                每个表都应该有一个主键，并且每个表只能有一个主键</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- USING BTREE    索引方法采用 BTREE</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\`player_id\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">USING</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> BTREE,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- UNIQUE         约束唯一标识数据库表中的每条记录</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  --                UNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  --                PRIMARY KEY 约束拥有自动定义的 UNIQUE 约束</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  --                每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  -- UNIQUE INDEX   唯一索引。可设置其他索引方式 NORMAL INDEX（普通索引）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  --                唯一索引和普通索引的区别在于它对字段进行了唯一性的约束</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  UNIQUE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> INDEX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \`player_name\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\`player_name\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">USING</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> BTREE</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">-- ENGINE = InnoDB  存储规则采用 InnoDB</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">-- ROW_FORMAT       设置行格式。Dynamic 基于compact格式，提高存储容量，支持大索引（large index）3072字节，由innodb_large_prefix参数控制。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">ENGINE </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> InnoDB </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">CHARACTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> SET</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> utf8 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">COLLATE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> utf8_general_ci ROW_FORMAT </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> Dynamic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:2.5,words:751},title:"SQL 基础",type:"article"}}],["/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Linux/",{loader:()=>g(()=>import("./index.html-C_yJ_Qqq.js"),__vite__mapDeps([59,1])),meta:{date:1603019226e3,excerpt:`
<ul>
<li><a href="/blogs/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Linux/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html" target="_blank">Linux基础知识和命令</a></li>
</ul>
`,readingTime:{minutes:.05,words:14},title:"Linux",type:"article"}}],["/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Linux/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html",{loader:()=>g(()=>import("./基础知识.html-7sJDoEmf.js"),__vite__mapDeps([60,1])),meta:{date:1596361454e3,excerpt:`
<h2>基础知识</h2>
<h3>命令行提示符</h3>
<p></p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 获取当前的用户名</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[lrh@localhost ~]$ whoami</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 切换为超级用户（root）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 命令提示符也会随之变化为 [root@localhost ~]#</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[lrh@localhost ~]$ sudo su</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 退出 root 身份，或使用 Ctrl + D</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[root@localhost ~]# exit</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:58.53,words:17559},title:"Linux基础知识和命令",type:"article"}}],["/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Nginx/",{loader:()=>g(()=>import("./index.html-DhYXO6vs.js"),__vite__mapDeps([61,1])),meta:{date:1603019226e3,excerpt:`
`,readingTime:{minutes:0,words:1},title:"Nginx",type:"article"}}],["/%E6%9E%B6%E6%9E%84/%E5%9F%BA%E7%A1%80/",{loader:()=>g(()=>import("./index.html-Ct1Fl-cT.js"),__vite__mapDeps([62,1])),meta:{date:1633968478e3,excerpt:`
<h2>软件设计原则</h2>
<h3>单一职责原则</h3>
<ul>
<li>永远不应该有多于一个原因来改变某个类。</li>
<li>理解：对于一个类而言，应该仅有一个引起它变化的原因。</li>
<li>应用：如果一个类拥有了两种职责，那就可以将这个类分成两个类。</li>
</ul>
<h3>开放封闭原则</h3>
<ul>
<li>软件实体扩展应该是开放的，但对于修改应该是封闭的。</li>
<li>理解：对扩展开放，对修改封闭。可以去扩展类，但不要去修改类。</li>
<li>应用：当需求有改动，尽量用继承或组合的方式来扩展类的功能，而不是直接修改类的代码。</li>
</ul>`,readingTime:{minutes:11.16,words:3348},title:"软件设计原则与分层",type:"article"}}],["/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E5%89%8D%E7%AB%AF/",{loader:()=>g(()=>import("./index.html-DGuAF6kE.js"),__vite__mapDeps([63,1])),meta:{date:1603019226e3,excerpt:`
<blockquote>
<p>Techniques, strategies and recipes for building a modern web app with multiple teams that can ship features independently. -- <a href="https://micro-frontends.org/" target="_blank" rel="noopener noreferrer">Micro Frontends</a></p>
<p>微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。</p>
<p>构建一个现代web应用所需要的技术、策略和方法，具备多个团队独立开发、部署的特性。</p>
</blockquote>`,readingTime:{minutes:8.17,words:2451},title:"微前端简介",type:"article"}}],["/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0.html",{loader:()=>g(()=>import("./基础模块实现.html-BuV_sE8y.js"),__vite__mapDeps([64,1])),meta:{date:164933958e4,excerpt:`
`,readingTime:{minutes:.03,words:9},title:"微前端基础模块实现",type:"article"}}],["/%E7%A7%BB%E5%8A%A8%E7%AB%AF/Flutter/",{loader:()=>g(()=>import("./index.html-Bb8kXMks.js"),__vite__mapDeps([65,1])),meta:{date:1603019226e3,excerpt:`
`,readingTime:{minutes:0,words:1},title:"Flutter",type:"article"}}],["/%E7%A7%BB%E5%8A%A8%E7%AB%AF/ReactNative/",{loader:()=>g(()=>import("./index.html-BhA0DqeS.js"),__vite__mapDeps([66,1])),meta:{date:1603019226e3,excerpt:`
`,readingTime:{minutes:0,words:1},title:"ReactNative",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/BFC.html",{loader:()=>g(()=>import("./BFC.html-CKvCEUyf.js"),__vite__mapDeps([67,1])),meta:{date:16180571e5,category:["CSS基础"],tag:["CSS"],excerpt:`
<p>BFC 全称为 block formatting context，中文为 “块级格式化上下文”。相对应的还有 IFC，也就是 inline formatting context，中文为“内联格式化上下”。</p>
<ul>
<li>
<p>BFC 的特性：可以用 “CSS 世界的结界” 这种称谓概括。</p>
</li>
<li>
<p>表现原则</p>
<ul>
<li>如果一个元素具有 BFC，内部子元素不管如何布局等，都不会影响外部的元素。所以，BFC 元素不会产生 <code>margin</code> 重叠；</li>
<li>BFC 元素也可以用来清除 <code>float</code> 浮动的影响，因为如果不清除，子元素浮动则父元素高度塌陷，必然会影响后面元素布局和定位，这显然有违 BFC 元素的子元素不会影响外部元素的设定。</li>
</ul>
</li>
<li>
<p>触发BFC的常见情况如下</p>
<ul>
<li><code>&lt;html&gt;</code> 根元素</li>
<li><code>float</code> 的值 【<strong>不为</strong>】 <code>none</code></li>
<li><code>overflow</code> 的值 【<strong>为</strong>】 <code>auto</code>、 <code>scroll</code> 或 <code>hidden</code></li>
<li><code>display</code> 的值 【<strong>为</strong>】 <code>table-cell</code>、 <code>table-caption</code> 和 <code>inline-block</code> 中的任何一个</li>
<li><code>position</code> 的值 【<strong>不为</strong>】 <code>relative</code> 和 <code>static</code></li>
</ul>
<p>【注】 对于 <code>float</code> 元素造成高度塌陷的影响，只要元素符合以上任一条件，则无需使用 <code>clear: both;</code> 清除浮动。</p>
</li>
</ul>`,readingTime:{minutes:2.9,words:870},title:"块级格式化上下文（BFC）",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/CSS%E5%8A%A8%E7%94%BB.html",{loader:()=>g(()=>import("./CSS动画.html-Bw6gLB6K.js"),__vite__mapDeps([68,1])),meta:{date:1744130565e3,category:["CSS基础"],tag:["CSS"],excerpt:`
<p>CSS 动画类型</p>
<ul>
<li>transition （过渡动画）</li>
<li>keyframe （关键帧动画）</li>
<li>steps() （逐帧动画）</li>
</ul>
<p>过渡动画和关键帧动画的区别：过渡动画需要有状态变化，关键帧动画不需要状态变化，关键帧动画能控制更精细。</p>
<h2>transform 变换</h2>
<p>transform 属性允许你旋转、缩放、倾斜或平移给定元素。</p>
<h3>transform-origin</h3>
<p><code>transform-origin(x, y, z)</code> 设置对象变换的原点，通常和 <code>rotate</code> 旋转、 <code>scale</code> 缩放、 <code>skew</code> 斜切等一起使用。</p>`,readingTime:{minutes:12.51,words:3752},title:"CSS 动画",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E6%9D%83%E9%87%8D.html",{loader:()=>g(()=>import("./CSS选择器与权重.html-DqIOf1Hm.js"),__vite__mapDeps([69,1])),meta:{date:1742284261e3,category:["CSS基础"],tag:["CSS"],excerpt:`
<h2>CSS 选择器权重</h2>
<ul>
<li>
<p>权重计算规则</p>
<ul>
<li>
<p>第一等：代表内联样式。如: <code>style=””</code> 权值为 <code>+1000</code></p>
</li>
<li>
<p>第二等：代表 ID 选择器。如：<code>#content</code> 权值为 <code>+100</code></p>
</li>
<li>
<p>第三等：代表类，伪类和属性选择器。如：<code>.content</code> 权值为 <code>+10</code></p>
</li>
<li>
<p>第四等：代表类型选择器和伪元素选择器，如：<code>div p</code> 权值为 <code>+1</code></p>
</li>
<li>
<p>通配符、子选择器、相邻选择器等。权值为 <code>+0</code></p>
</li>
<li>
<p>继承的样式没有权值</p>
</li>
</ul>
</li>
<li>
<p>权重比较规则： <strong><code>1,0,0,0 &gt; 0,99,99,99</code></strong></p>
<ul>
<li>
<p>从左往右逐个等级比较，前一等级相等才往后比</p>
</li>
<li>
<p>在权重相同的情况下，后面的样式会覆盖掉前面的样式。</p>
</li>
<li>
<p>通配符、子选择器、相邻选择器等的。虽然权值为 0000，但是也比继承的样式优先</p>
</li>
</ul>
</li>
<li>
<p><code>!important</code></p>
<p><code>!important</code> 的作用是提升优先级，样式的优先级是最高的（比内联样式的优先级还高）</p>
</li>
</ul>`,readingTime:{minutes:5.63,words:1688},title:"CSS 选择器与权重",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/background.html",{loader:()=>g(()=>import("./background.html-K0Ls5K-y.js"),__vite__mapDeps([70,1])),meta:{date:1742284261e3,category:["CSS基础"],tag:["CSS"],excerpt:`
<div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* 规定要使用的背景颜色。无论是单背景图还是多背景图，背景色一定是在最底下的位置 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">background-color</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: transparent;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* 规定背景图像的位置 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">background-position</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: 0% 0%;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* 规定背景图片的尺寸 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">background-size</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: auto auto;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* 规定如何重复背景图像  */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* repeat ： 默认。背景图像将在垂直方向和水平方向重复 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* repeat-x ： 背景图像将在水平方向重复 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* repeat-y ： 背景图像将在垂直方向重复 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* no-repeat ： 背景图像将仅显示一次 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">background-repeat</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: repeat;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* 规定背景图片的定位区域 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">background-origin</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">padding-box</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* 规定背景的绘制区域 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">background-clip</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">border-box</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* 规定背景图像是否固定或者随着页面的其余部分滚动 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* scroll ： 默认值，背景相对于元素本身固定，而不是随着它的内容滚动（对元素边框是有效的） */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* fixed : 背景相对于视口固定。即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">background-attachment</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: scroll;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* 规定要使用的背景图像  */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">background-image</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: none;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:11.63,words:3490},title:"background",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/css-shapes.html",{loader:()=>g(()=>import("./css-shapes.html-DcEcFyi9.js"),__vite__mapDeps([71,1])),meta:{date:1744014496e3,category:["CSS基础"],tag:["CSS"],excerpt:`
<h2>传统 CSS3 的方式绘制几何图形</h2>

<h2>CSS 形状函数</h2>
<h3>circle 圆形</h3>
<p><code>circle(r at cx cy)</code> 定义了一个圆形。</p>
<ul>
<li>
<p><code>r</code> 指圆的半径，它的值可以是 <code>&lt;length-percentage&gt;</code> 。如果取百分比值时，其值是从参考框的宽度和高度解析出来的；</p>
<ul>
<li><code>closest-side</code> ：从形状中心到参考框最近边的长度。对于圆来说，这是任何维度中最近的边；对于椭圆来说，这是半径维度中最近的边；</li>
<li><code>farthest-side</code> ：从形状中心到参考框最远边的长度。对于圆来说，这是任何维度中最远的边；对于椭圆来说，这是半径维度中最远的边。</li>
</ul>
</li>
<li>
<p><code>cx</code> 和 <code>cy</code> 指的是圆心位置，其中 <code>cx</code> 对应的圆心在 <code>x</code> 轴上的坐标位置，<code>cy</code> 对应的圆心在 <code>y</code> 轴上的坐标位置。如果省略，元素的中心(对角线的交点)将被用作默认值，元素的水平垂直中心点位置。</p>
</li>
</ul>`,readingTime:{minutes:15.7,words:4710},title:"CSS Shapes",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/float.html",{loader:()=>g(()=>import("./float.html-C6oVGd4m.js"),__vite__mapDeps([72,1])),meta:{date:16180571e5,category:["CSS基础"],tag:["CSS"],excerpt:`
<h2>float 的本质与特征</h2>
<p><code>float</code> 的本质是为了<strong>实现文字环绕效果</strong>。主要指文字环绕图片的效果。</p>
<p><code>float</code> 的特征:</p>
<ul>
<li>
<p>包裹性：由 “包裹” 和 “自适应性” 两部分组成</p>
<ul>
<li>
<p>包裹</p>
<p>假设 <code>float</code> 元素的父元素宽度为 200px，<code>float</code> 元素的子元素为 <code>width: 100px</code> 的图片，则此时 <code>float</code> 元素宽度表现为 “包裹”，宽度为 100px 。</p>

</li>
<li>
<p>自适应性</p>
<p>假设 <code>float</code> 元素的父元素宽度为 200px，<code>float</code> 元素的子元素包括图片和文字，则此时 <code>float</code> 元素宽度自适应父元素的宽度 200px 。</p>
<p>如果需要最大宽度自适应 <code>float</code> 元素的父元素宽度，则 <code>float</code> 元素宽度的 “首选最小宽度” 比父元素宽度小的前提下。</p>
<p>【注】首选最小宽度是指元素最合适的最小宽度。CSS 中，图片和文字的权重远大于布局，当 <code>width: 0</code> ，此时所表现的宽度就是 “首选最小宽度” 。具体表现规则如下：</p>
<ul>
<li>东亚文字（如中文）最小宽度为每个汉字的宽度</li>
<li>西方文字最小宽度由特定的连续的英文字符单元决定</li>
<li>类似图片等的替换元素的最小宽度就是该元素内容本身的宽度</li>
</ul>

</li>
</ul>
</li>
<li>
<p>块状化并格式化上下文</p>
<p>元素设置 <code>float</code> 属性值不为 <code>none</code>，则其 <code>display</code> 计算值为 <code>block / table</code> 。则：</p>
<ul>
<li><code>text-align</code> 属性无法控制 <code>float</code> 元素的左右对齐，<code>text-align</code> 对块级元素无效</li>
<li><code>display: block; float: left;</code> 组合中，<code>display: block</code> 是多余的</li>
<li><code>float: left; vertical-align: middle;</code> 组合中，<code>vertical-align: middle;</code> 是多余的。</li>
</ul>
<p>【注】 <code>vertical-align</code> 属性定义<strong>行内元素</strong>的基线相对于该元素所在行的基线的垂直对齐。</p>
</li>
<li>
<p>破坏文档流</p>
</li>
<li>
<p>没有任何 <code>margin</code> 合并</p>
</li>
</ul>`,readingTime:{minutes:8.46,words:2539},title:"float / clear",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/font.html",{loader:()=>g(()=>import("./font.html-UQ1pM3Mc.js"),__vite__mapDeps([73,1])),meta:{date:1742284261e3,category:["CSS基础"],tag:["CSS"],excerpt:`
<h2>font-size</h2>
<h3><code>font-size</code> 属性值</h3>
<p><code>font-size</code> 支持长度值（如 <code>1em</code>），也支持百分比值（如 <code>100%</code>）。同时，还支持关键字属性值。</p>
<p><code>font-size</code> 的关键字属性值分以下两类。</p>
<ul>
<li>
<p>相对尺寸关键字。指相对于当前元素 <code>font-size</code> 计算，包括：</p>
<ul>
<li><code>larger</code> ：大一点，是 <code>&lt;big&gt;</code> 元素的默认 <code>font-size</code> 属性值。</li>
<li><code>smaller</code> ：小一点，是 <code>&lt;small&gt;</code> 元素的默认 <code>font-size</code> 属性值。</li>
</ul>
</li>
<li>
<p>绝对尺寸关键字。与当前元素 <code>font-size</code> 无关，仅受浏览器设置的字号影响。</p>
<ul>
<li><code>xx-large</code> ：好大好大，和 <code>&lt;h1&gt;</code> 元素计算值一样。</li>
<li><code>x-large</code> ：好大，和 <code>&lt;h2&gt;</code> 元素计算值一样。</li>
<li><code>large</code> ：大，和 <code>&lt;h3&gt;</code> 元素计算值近似（“近似”指计算值偏差在1 像素以内，下同）。</li>
<li><code>medium</code> ：不上不下，是 <code>font-size</code> 的初始值，和 <code>&lt;h4&gt;</code> 元素计算值一样。</li>
<li><code>small</code> ：小，和 <code>&lt;h5&gt;</code> 元素计算值近似。</li>
<li><code>x-small</code> ：好小，和 <code>&lt;h6&gt;</code> 元素计算值近似。</li>
<li><code>xx-small</code> ：好小好小，无对应的 HTML 元素。</li>
</ul>
</li>
</ul>`,readingTime:{minutes:13.04,words:3911},title:"font",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/line-height-and-vertical-align.html",{loader:()=>g(()=>import("./line-height-and-vertical-align.html-CrSJpTHy.js"),__vite__mapDeps([74,1])),meta:{date:1744045434e3,category:["CSS基础"],tag:["CSS"],excerpt:`
<h2>x-height</h2>
<h3>x 字高</h3>
<p><a href="https://zh.wikipedia.org/wiki/X%E5%AD%97%E9%AB%98" target="_blank" rel="noopener noreferrer">x 字高</a>： 指字母 x 的高度。即：基线（baseline）和主线（median line）之间的距离。</p>
<p></p>
<p>注：<code>vertical-align: middle</code> 与字母中线（median）不是一个意思，<code>vertical-align: middle</code> 指的是基线（baseline）往上 1/2 <code>x-height</code> 高度。</p>`,readingTime:{minutes:21.82,words:6546},title:"line-height 与 vertical-align",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/position.html",{loader:()=>g(()=>import("./position.html-DRv_34xv.js"),__vite__mapDeps([75,1])),meta:{date:1744130565e3,category:["CSS基础"],tag:["CSS"],excerpt:`
<p><code>position</code> 属性用于指定一个元素在文档中的定位方式。</p>
<ul>
<li><code>static</code> ：该关键字指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。</li>
<li><code>relative</code> ：该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。</li>
<li><code>absolute</code> ：元素会被移出正常文档流，并不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</li>
<li><code>fixed</code> ：元素会被移出正常文档流，并不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。fixed 属性会创建新的层叠上下文。当元素祖先的 transform、perspective、filter 或 backdrop-filter 属性非 none 时，容器由视口改为该祖先。</li>
<li><code>sticky</code> ：元素根据正常文档流进行定位，然后相对它的最近滚动祖先（nearest scrolling ancestor）和包含块（最近块级祖先 nearest block-level ancestor），包括 table-related 元素，基于 top、right、bottom 和 left 的值进行偏移。偏移值不会影响任何其他元素的位置。该值总是创建一个新的层叠上下文（stacking context）。</li>
</ul>`,readingTime:{minutes:6.36,words:1909},title:"position",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/scroll-bar.html",{loader:()=>g(()=>import("./scroll-bar.html-1gIvfUCg.js"),__vite__mapDeps([76,1])),meta:{date:1744008305e3,category:["CSS基础"],tag:["CSS"],excerpt:`
<p></p>
<table>
<thead>
<tr>
<th>序号</th>
<th>伪元素</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>::-webkit-scrollbar</td>
<td>滚动条整体部分，其中的属性有width,height,background,border（就和一个块级元素一样）等</td>
</tr>
<tr>
<td>2</td>
<td>::-webkit-scrollbar-button</td>
<td>滚动条两端的按钮。可以用display:none让其不显示，也可以添加背景图片，颜色改变显示效果</td>
</tr>
<tr>
<td>3</td>
<td>::-webkit-scrollbar-track</td>
<td>外层轨道。可以用display:none让其不显示，也可以添加背景图片，颜色改变显示效果</td>
</tr>
<tr>
<td>4</td>
<td>::-webkit-scrollbar-track-piece</td>
<td>内层轨道，滚动条中间部分（除去）</td>
</tr>
<tr>
<td>5</td>
<td>::-webkit-scrollbar-thumb</td>
<td>滚动条里面可以拖动的那部分</td>
</tr>
<tr>
<td>6</td>
<td>::-webkit-scrollbar-corner</td>
<td>边角</td>
</tr>
<tr>
<td>7</td>
<td>::-webkit-resizer</td>
<td>定义右下角拖动块的样式</td>
</tr>
</tbody>
</table>`,readingTime:{minutes:2.48,words:745},title:"滚动条样式",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/stacking.html",{loader:()=>g(()=>import("./stacking.html-Cz1oUEsd.js"),__vite__mapDeps([77,1])),meta:{date:1744130565e3,category:["CSS基础"],tag:["CSS"],excerpt:`
<h2>层叠上下文</h2>
<p>假定用户正面向（浏览器）视窗或网页，而 HTML 元素沿着其相对于用户的一条虚构的 z 轴排开，层叠上下文就是对这些 HTML 元素的一个三维构想。众 HTML 元素基于其元素属性按照优先级顺序占据这个空间。</p>
<h3>层叠水平</h3>
<p>层叠水平，决定了同一个层叠上下文中元素在 z 轴上的显示顺序。 层叠水平和 CSS 的 <code>z-index</code> 属性不一样：</p>
<ul>
<li>某些情况下 <code>z-index</code> 确实可以影响层叠水平，但是只限于定位元素以及 <code>flex</code> 盒子的孩子元素。</li>
<li>层叠水平所有的元素都存在。对普通元素的层叠水平探讨只局限在当前层叠上下文元素中。</li>
</ul>`,readingTime:{minutes:5,words:1500},title:"层叠规则与 z-index",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/text.html",{loader:()=>g(()=>import("./text.html-CtVVXjot.js"),__vite__mapDeps([78,1])),meta:{date:1742284261e3,category:["CSS基础"],tag:["CSS"],excerpt:`
<h2>text-indent 与内联元素缩进</h2>
<p><code>text-indent</code> 对文本进行缩进控制。</p>
<div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* &lt;length&gt; 值，允许使用负值 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">text-indent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: 3mm;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">text-indent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: 40px;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* &lt;percentage&gt; 值，相对于包含区块的宽度 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">text-indent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: 15%;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* 关键字值 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* each-line 缩进会影响区块容器的第一行以及强制换行后的每一行，但不影响软换行后的行。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* hanging 反转缩进行。除第一行外，所有行都将缩进。 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">text-indent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: 5em </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">each-line</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">text-indent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: 5em hanging;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">text-indent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: 5em hanging </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">each-line</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* 全局值 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">text-indent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: inherit;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">text-indent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: initial;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">text-indent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: revert;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">text-indent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">revert-layer</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">text-indent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">: unset;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:13.9,words:4169},title:"text",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/%E5%85%83%E7%B4%A0%E7%9A%84%E6%98%BE%E9%9A%90.html",{loader:()=>g(()=>import("./元素的显隐.html-Dsyihcbu.js"),__vite__mapDeps([79,1])),meta:{date:1744130565e3,category:["CSS基础"],tag:["CSS"],excerpt:`
<h2>操作元素的显隐</h2>
<ul>
<li>
<p>元素不可见，同时不占据空间，辅助设备无法访问，同时不渲染，可使用 <code>&lt;script&gt;</code> 标签隐藏。</p>
<p><code>&lt;script&gt;</code> 标签是不支持嵌套的，因此，如果希望在 <code>&lt;script&gt;</code> 标签中再放置其他不渲染的模板内容，可以试试使用 <code>&lt;textarea&gt;</code> 元素。</p>
<p><code>&lt;script&gt;</code> 标签隐藏内容获取使用 <code>script.innerHTML</code> ，<code>&lt;textarea&gt;</code> 使用 <code>textarea.value</code>。</p>
<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">script</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"text/html"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1.jpg"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">script</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"text/html"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1.jpg"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">textarea</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379">display:none;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"2.jpg"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">textarea</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>元素不可见，同时不占据空间，辅助设备无法访问，但资源有加载，DOM 可访问，可以直接使用 <code>display: none</code> 隐藏。</p>
</li>
<li>
<p>元素不可见，同时不占据空间，辅助设备无法访问，但显隐的时候可以有 <code>transition</code> 淡入淡出效果，可使用： <code>.hidden { position: absolute; visibility: hidden; }</code></p>
</li>
<li>
<p>元素不可见，不能点击，辅助设备无法访问，但占据空间保留，可使用 <code>visibility: hidden</code> 隐藏。</p>
</li>
<li>
<p>元素不可见，不能点击，不占据空间，但键盘可访问，可使用 <code>clip</code> 剪裁隐藏。</p>
<div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">.clip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  position: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66">absolute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  clip: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">rect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">} </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">.out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  position: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66">relative</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  left: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">-999</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">em</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>元素不可见，不能点击，但占据空间，且键盘可访问，则可以试试 <code>relative</code> 隐藏。</p>
<div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* 如果条件允许，也就是和层叠上下文之间存在设置了背景色的父元素，则也可以使用更友好的z-index 负值隐藏 */</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">.lower</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  position: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66">relative</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  z-index: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">-1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>元素不可见，但可以点击，而且不占据空间，则可以使用透明度。</p>
<div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">.opacity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  position: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66">absolute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  opacity: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  filter: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66">Alpha</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(opacity=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>元素看不见，但位置保留，依然可以点可以选，则直接让透明度为 0 。</p>
<div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">.opacity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  opacity: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  filter: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66">Alpha</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(opacity=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>标签受限的情况下希望隐藏某文字，可能使用 <code>text-indent</code> 缩进。</p>
<div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">.hidden</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  /* 希望显示的时候可以加一个 transition 动画，就可能要使用 max-height 进行隐藏 */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  max-height: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  overflow: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66">hidden</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>`,readingTime:{minutes:3.16,words:947},title:"元素的显隐",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E4%B8%8E%E5%AE%B9%E5%99%A8%E6%9F%A5%E8%AF%A2.html",{loader:()=>g(()=>import("./媒体查询与容器查询.html-DP9I97IG.js"),__vite__mapDeps([80,1])),meta:{date:1745939219e3,excerpt:`
<h2>CSS 媒体查询</h2>
<p>CSS 媒体查询规则 ： <code>@media &lt;media-type&gt; and &lt;media-feature&gt; { /* CSS 样式规则 */ }</code></p>
<h3>浏览器视窗</h3>
<div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* CSS 媒体查询根据浏览器视窗的断点来给元素设置不同的样式规则 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* Mobile First */</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">.container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  margin-inline: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* Tablet - 平板 */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">@media</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> only</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF"> screen</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (min-width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">768</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  .container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    max-width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">720</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* Tablet Landscape - 平板横向 */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">@media</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> only</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF"> screen</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (min-width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1024</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  .container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    max-width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">960</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* Laptop - 笔记本电脑 */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">@media</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> only</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF"> screen</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (min-width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1600</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  .container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    max-width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1140</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* Desktop - 台式电脑 */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">@media</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> only</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF"> screen</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (min-width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1920</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  .container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    max-width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1320</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:11.24,words:3372},title:"CSS 媒体查询与容器查询",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/%E6%B5%81%E4%B8%8E%E5%85%83%E7%B4%A0.html",{loader:()=>g(()=>import("./流与元素.html-DE6-Unz8.js"),__vite__mapDeps([81,1])),meta:{date:1744045434e3,category:["CSS基础"],tag:["CSS"],excerpt:`
<h2>块级元素</h2>
<p>常见的块级元素有 <code>&lt;div&gt;</code>、<code>&lt;li&gt;</code> 和 <code>&lt;table&gt;</code> 等。“块级元素” 和 <code>display</code> 为 <code>block</code> 的元素不是一个概念。</p>
<p>“块级元素” 的特征：一个水平流上只能单独显示一个元素，多个块级元素则换行显示。正是由于 “块级元素” 具有换行特性，因此理论上它都可以配合 <code>clear</code> 属性来清除浮动带来的影响。</p>
<p>按照 <code>display</code> 的属性值不同：</p>`,readingTime:{minutes:11.22,words:3365},title:"流与元素",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/%E7%9B%92%E6%A8%A1%E5%9E%8B.html",{loader:()=>g(()=>import("./盒模型.html-CwcXufgN.js"),__vite__mapDeps([82,1])),meta:{date:1744086848e3,category:["CSS基础"],tag:["CSS"],excerpt:`
<p>当对一个文档进行布局（layout）的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box）。CSS 决定这些盒子的大小、位置以及属性（例如颜色、背景、边框尺寸等）。</p>
<p><code>box-sizing</code> 属性定义了 user agent 应该如何计算一个元素的总宽度和总高度。</p>
<ul>
<li>
<p><code>content-box</code> ：默认值，标准盒子模型。</p>
<p>尺寸计算公式：<code>width = 内容的宽度</code>；<code>height = 内容的高度</code></p>
<p>宽度和高度的计算值都不包含内容的边框（border）和内边距（padding）。</p>
</li>
<li>
<p><code>border-box</code> ： 当文档处于 Quirks 模式 时 Internet Explorer 使用的盒模型。</p>
<p>尺寸计算公式：<code>width = border + padding + 内容的宽度</code>；<code>height = border + padding + 内容的高度</code></p>
</li>
</ul>`,readingTime:{minutes:19.35,words:5805},title:"盒模型",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/Flex%E5%B8%83%E5%B1%80.html",{loader:()=>g(()=>import("./Flex布局.html-BXtkBuxY.js"),__vite__mapDeps([83,1])),meta:{date:1616781737e3,category:["CSS布局"],tag:["CSS","Flex"],excerpt:`
<h2>基本概念</h2>
<p>设置 <code>display: flex</code> 或者 <code>display: inline-flex</code> 的元素称为 Flex 容器。在 Flex 容器中的子元素，包括其伪元素 <code>::before</code> 、<code>::after</code> 和 文本节点都将成为 Flex 项目。</p>
<ul>
<li><code>display: flex</code>：保持元素块状特性，宽度默认 100%，不和内联元素一行显示。</li>
<li><code>display： inline-flex</code>：inline-flex 容器为 inline 特性，因此可以和图片文字一行显示。</li>
</ul>`,readingTime:{minutes:21.01,words:6304},title:"Flex 布局",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/Grid%E5%B8%83%E5%B1%80.html",{loader:()=>g(()=>import("./Grid布局.html-DPsCrP-o.js"),__vite__mapDeps([84,1])),meta:{date:1616781737e3,category:["CSS布局"],tag:["CSS","Grid"],excerpt:`
<h2>基本概念</h2>
<p>设置 <code>display: grid</code> 或者 <code>display: inline-grid</code> 的元素称为 Grid 容器，容器内部采用网格定位的子元素称为 Grid 项目。</p>
<ul>
<li><code>display: grid</code>：保持元素块状特性，宽度默认 100%，不和内联元素一行显示。</li>
<li><code>display: inline-grid</code>：inline-grid 容器为 inline 特性，因此可以和图片文字一行显示。</li>
<li><code>display: subgrid</code>：如果网格容器本身就是一个嵌套网格，可以使用该属性来表示从它的父节点取得它的行/列的大小，而不是指定它自己的大小。</li>
</ul>`,readingTime:{minutes:20.78,words:6233},title:"Grid 布局",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/StickyFooter.html",{loader:()=>g(()=>import("./StickyFooter.html-BoA55UOi.js"),__vite__mapDeps([85,1])),meta:{date:1589710889e3,category:["CSS布局"],tag:["CSS"],excerpt:`
<ul>
<li>如果页面内容不足够长时，页脚固定在浏览器窗口的底部。</li>
<li>如果页面内容足够长时，页脚固定在页面的最底部。但如果页面内容不够长，置底的页脚就会保持在浏览器窗口底部。</li>
</ul>
<p></p>
<h2>将内容部分的底部外边距设为负数</h2>
<ul>
<li>将内容部分最小高度设为 100% （即， <code>min-height: 100%</code>）。</li>
<li>再将内容部分的底部外边距设为负数，与底部内容高度保持一致。当高度不满时，页脚保持在窗口底部，当高度超出则随之推出的效果。</li>
</ul>
<p>注意：使用该方法需要 <strong>容器里有额外的占位元素（如 .push）</strong> 。</p>`,readingTime:{minutes:4.14,words:1242},title:"Sticky Footer",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/%E5%85%A8%E5%B1%8F%E5%B8%83%E5%B1%80.html",{loader:()=>g(()=>import("./全屏布局.html-DfZJJzBm.js"),__vite__mapDeps([86,1])),meta:{date:1616781737e3,category:["CSS布局"],tag:["CSS"],excerpt:`
<h2>position</h2>

<h2>Flex</h2>

<h2>Grid</h2>

`,readingTime:{minutes:1.82,words:546},title:"全屏布局",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/%E5%A4%9A%E5%88%97%E5%B8%83%E5%B1%80.html",{loader:()=>g(()=>import("./多列布局.html-BN7j_pzN.js"),__vite__mapDeps([87,1])),meta:{date:1616781737e3,category:["CSS布局"],tag:["CSS"],excerpt:`
<h2>两列布局</h2>
<h3>左列定宽，右列自适应</h3>
<h4>float + margin</h4>

<h4>float + margin(fix)</h4>

<h4>float + overflow</h4>
<ul>
<li>优点：代码简单，容易理解，无需关注定宽的宽度，利用 BFC 达到自适应效果</li>
<li>缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持 IE6</li>
</ul>

<h4>position</h4>

<h4>Flex</h4>

<h4>Grid</h4>

<h4>table</h4>
<ul>
<li>优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果</li>
<li>缺点：<code>margin</code> 失效；设置间隔比较麻烦；不支持 IE8-</li>
</ul>`,readingTime:{minutes:15.53,words:4659},title:"多列布局",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/%E6%A0%85%E6%A0%BC%E5%B8%83%E5%B1%80.html",{loader:()=>g(()=>import("./栅格布局.html-B93NshfV.js"),__vite__mapDeps([88,1])),meta:{date:1616781737e3,category:["CSS布局"],tag:["CSS"],excerpt:`
<h2>Flex</h2>

<h2>Grid</h2>

<h2>使用 less 生成栅格系统</h2>
<div class="language-less line-numbers-mode" data-highlighter="shiki" data-ext="less" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-less"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* 使用 less 生成栅格系统 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">@media</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF"> screen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> and (max-width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">768</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  /*此处设置生成列数*/</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  .generate-columns</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">12</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  .generate-columns</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">@n</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">@i</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">) when (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">@i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> &lt;=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> @n</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">) </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    .column-xs-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">@{i}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      width: (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">@i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">%</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> /</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> @n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    .generate-columns</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">@n</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">, (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">@i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">))</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">@media</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF"> screen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> and (min-width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">768</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  /*此处设置生成列数*/</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  .generate-columns</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">12</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  .generate-columns</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">@n</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">@i</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">) when (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">@i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> &lt;=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> @n</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">) </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    .column-sm-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">@{i}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      width: (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">@i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">%</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> /</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> @n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    .generate-columns</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">@n</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">, (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">@i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">))</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">^=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'column-xs-'</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">] </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  float: </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF">left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">^=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'column-sm-'</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">] </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  float: </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF">left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:3.01,words:903},title:"栅格布局",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD.html",{loader:()=>g(()=>import("./水平垂直居中.html-BJUevNNL.js"),__vite__mapDeps([89,1])),meta:{date:1616781737e3,category:["CSS布局"],tag:["CSS"],excerpt:`
<h2>水平居中</h2>
<ul>
<li>对于水平居中，应先考虑，哪些元素有自带的居中效果。 <code>text-align:center</code> 针对行内内容，必须将子元素设置为 <code>display: inline;</code> 或者 <code>display: inline-block;</code></li>
<li>其次就是考虑能不能用 <code>margin: 0 auto;</code></li>
<li>实在不行就是使用绝对定位实现</li>
<li>移动端能用 <code>flex</code> ，简单方便，灵活并且功能强大</li>
</ul>
<h3>单行文本/行内元素/行内块级元素</h3>`,readingTime:{minutes:17.36,words:5208},title:"水平垂直居中",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80.html",{loader:()=>g(()=>import("./自适应布局.html-BHhhJzc2.js"),__vite__mapDeps([90,1])),meta:{date:1616781737e3,category:["CSS布局"],tag:["CSS"],excerpt:`
<p>注意事项</p>
<ul>
<li>使用 IE 盒模型 <code>box-sizing: border-box;</code></li>
<li>不固定宽高，使用百分比、 <code>auto</code> 或 <code>calc()</code></li>
<li>使用 <code>@media</code> 查询，针对不同媒体类型定义不同的样式</li>
<li>使用 <code>&lt;meta&gt;</code> 标签对 <code>viewport</code> （可视区域） 进行控制</li>
<li>选择布局方式
<ul>
<li>在浏览器支持的情况下，页面大框架推荐使用 Grid 布局 ，局部布局推荐使用 Flex 布局</li>
<li><code>float</code> 与 <code>inline-block</code> 浏览器支持好，但是各有缺点</li>
</ul>
</li>
</ul>`,readingTime:{minutes:1.41,words:422},title:"自适应布局",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/%E9%A1%B5%E9%9D%A2%E7%AD%89%E6%AF%94%E9%80%82%E9%85%8D.html",{loader:()=>g(()=>import("./页面等比适配.html-DYrRHd_s.js"),__vite__mapDeps([91,1])),meta:{date:1617474812e3,excerpt:`
<h2>vueAutoResizeContainer 组件</h2>
<div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-md"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">vueAutoResizeContainer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">├─ util</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">│ └─ index.js</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">├─ autoResize.js</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">└─ index.vue</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:2.91,words:873},title:"页面等比缩放",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E7%9B%B8%E5%85%B3/CSS%E5%AE%9E%E7%8E%B0%E9%95%BF%E5%AE%BD%E6%AF%94.html",{loader:()=>g(()=>import("./CSS实现长宽比.html-BFPnzRiT.js"),__vite__mapDeps([92,1])),meta:{date:1617963302e3,excerpt:`
<h2>垂直方向的 padding</h2>
<p>原理：利用 <code>padding-top</code> 或者 <code>padding-bottom</code> 的百分比值。在 CSS 中，<code>padding-top</code> 或者 <code>padding-bottom</code> 的百分比是根据容器的 <code>width</code> 来计算的。</p>
<p>【注意】 需要把容器的 <code>height: 0</code> ，容器内容中所有的元素需要采用 <code>position: absolute</code> ，不然子元素内容会被 <code>padding</code> 挤出容器，造成内容溢出。</p>`,readingTime:{minutes:4.32,words:1295},title:"CSS实现长宽比",type:"article"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E7%9B%B8%E5%85%B3/CSS%E5%B8%B8%E7%94%A8%E5%B0%81%E8%A3%85.html",{loader:()=>g(()=>import("./CSS常用封装.html-CrTxwIJG.js"),__vite__mapDeps([93,1])),meta:{date:1584893796e3,excerpt:`
<h2>文本超出 n行 显示省略号</h2>
<div class="language-less line-numbers-mode" data-highlighter="shiki" data-ext="less" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-less"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 超过固定宽度显示 ...</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">.ellipsis</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> () </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  overflow: </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF">hidden</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  white-space: </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF">nowrap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 禁止文字折行</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  text-overflow: </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF">ellipsis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 当文本溢出时显示省略标记</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 超过 @row 显示 ...</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">.ellipsis_line</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">@row</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">) </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  display: </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">webkit</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF">box</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  overflow: </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF">hidden</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  text-overflow: </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF">ellipsis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  word-break: </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF">break-all</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  white-space: </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF">pre-line</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  /* autoprefixer: off */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  -webkit-box-orient: </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF">vertical</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  /* autoprefixer: on */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  -webkit-line-clamp:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> @row</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:2.63,words:790},title:"CSS 常用封装",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/BOM/URL.html",{loader:()=>g(()=>import("./URL.html-D7Y3cfFY.js"),__vite__mapDeps([94,1])),meta:{date:1698046341e3,excerpt:`
<h2>location 对象</h2>
<p><code>location</code> 对象提供 URL 相关的信息和操作方法。可以通过 <code>window.location</code> 和 <code>document.location</code> 属性获取。</p>
<h3>location 对象属性</h3>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">href</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'https://username:password@developer.mozilla.org/en-US/search?q=URL#search-results-close-container'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 整个 URL</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">href</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 'https://username:password@developer.mozilla.org/en-US/search?q=URL#search-results-close-container'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// URL 的协议、主机名和端口，只读</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">origin</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 'https://developer.mozilla.org'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// URL 对应协议，包含冒号（:）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">protocol</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 'https:'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 主机，如果端口不是协议默认的 80 和 433，则还包括冒号（:）和端口</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">host</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 'developer.mozilla.org'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 主机名，不包括端口</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">hostname</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 'developer.mozilla.org'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 端口号</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">port</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // ''</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// URL 的路径部分，从根路径 / 开始</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">pathname</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // '/en-US/search'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// URL 参数，从问号 ? 开始。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">search</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // '?q=javascript'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 块标识符，从 # 开始</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">hash</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // '#search-results-close-container'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// URL 中域名前的用户名</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">username</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 'username'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// URL 域名前的密码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">password</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 'password'</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:11.87,words:3562},title:"location 对象、history 对象与 URL",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/BOM/file.html",{loader:()=>g(()=>import("./file.html-DVhqMK6X.js"),__vite__mapDeps([95,1])),meta:{date:1698290835e3,excerpt:`
<p></p>
<h2>Blob</h2>
<p><code>Blob</code> 对象（Binary Large Object，二进制大型对象）表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 <code>ReadableStream</code> 来用于数据操作。</p>
<h3>Blob 构造函数</h3>
<p><code>new Blob(array, options)</code> ： 返回一个新的 <code>Blob</code> 对象。</p>
<ul>
<li>
<p><code>array</code> 参数 ： 是一个由 <code>ArrayBuffer</code>, <code>ArrayBufferView</code>, <code>Blob</code>, <code>DOMString</code> 等对象构成的 <code>Array</code> ，或者其他类似对象的混合体，它将会被放进 <code>Blob</code>。<code>DOMStrings</code> 会被编码为 UTF-8 。</p>
</li>
<li>
<p><code>options</code> 参数 ： 是一个可选的 <code>BlobPropertyBag</code> 字典，它可能会指定如下两个属性：</p>
<ul>
<li>
<p><code>type</code> ： 默认值为 <code>""</code> 。表示将会被放入到 <code>Blob</code> 中的数组内容的 <code>MIME</code> 类型（媒体类型，用来表示文档、文件或一组数据的性质和格式）。</p>
<table>
<thead>
<tr>
<th style="text-align:left">MIME 类型</th>
<th style="text-align:left">扩展名</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">text/plain</td>
<td style="text-align:left">.txt</td>
<td style="text-align:left">纯文本</td>
</tr>
<tr>
<td style="text-align:left">text/html</td>
<td style="text-align:left">.html</td>
<td style="text-align:left">HTML 文档</td>
</tr>
<tr>
<td style="text-align:left">text/css</td>
<td style="text-align:left">.css</td>
<td style="text-align:left">CSS 文件</td>
</tr>
<tr>
<td style="text-align:left">text/javascript</td>
<td style="text-align:left">.js</td>
<td style="text-align:left">JavaScript 文件</td>
</tr>
<tr>
<td style="text-align:left">text/csv</td>
<td style="text-align:left">.csv</td>
<td style="text-align:left">CSV 文件</td>
</tr>
<tr>
<td style="text-align:left">application/json</td>
<td style="text-align:left">.json</td>
<td style="text-align:left">JSON 文件</td>
</tr>
<tr>
<td style="text-align:left">application/pdf</td>
<td style="text-align:left">.pdf</td>
<td style="text-align:left">PDF 文件</td>
</tr>
<tr>
<td style="text-align:left">application/xml</td>
<td style="text-align:left">.xml</td>
<td style="text-align:left">XML 文件</td>
</tr>
<tr>
<td style="text-align:left">image/jpeg</td>
<td style="text-align:left">.jpeg / .jpg</td>
<td style="text-align:left">JPEG 图像</td>
</tr>
<tr>
<td style="text-align:left">image/png</td>
<td style="text-align:left">.png</td>
<td style="text-align:left">PNG 图像</td>
</tr>
<tr>
<td style="text-align:left">image/gif</td>
<td style="text-align:left">.gif</td>
<td style="text-align:left">GIF 图像</td>
</tr>
<tr>
<td style="text-align:left">image/svg+xml</td>
<td style="text-align:left">.svg</td>
<td style="text-align:left">SVG 图像</td>
</tr>
<tr>
<td style="text-align:left">audio/mpeg</td>
<td style="text-align:left">.mp3</td>
<td style="text-align:left">MP3 文件</td>
</tr>
<tr>
<td style="text-align:left">video/mpeg</td>
<td style="text-align:left">.mpeg</td>
<td style="text-align:left">MP4 文件</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><code>endings</code> ： 非标准。默认值为 <code>"transparent"</code> 。用于指定包含行结束符 <code>\\n</code> 的字符串如何被写入。</p>
<ul>
<li><code>"native"</code> ： 代表行结束符会被更改为适合宿主操作系统文件系统的换行符。</li>
<li><code>"transparent"</code> ： 代表会保持 <code>Blob</code> 中保存的结束符不变。</li>
</ul>
</li>
</ul>
</li>
</ul>`,readingTime:{minutes:7.75,words:2324},title:"Blob、File、FileList、FileReader、Base64",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/BOM/navigator.html",{loader:()=>g(()=>import("./navigator.html-oFCdPVvv.js"),__vite__mapDeps([96,1])),meta:{date:1698046341e3,excerpt:`
<h2>navigator 对象</h2>
<p>Navigator 接口表示用户代理的状态和标识，包含浏览器和系统信息。它允许脚本查询它和注册自己进行一些活动。</p>
<h3>navigator 属性</h3>
<ul>
<li><code>navigator.permissions</code> ： 只读属性。返回一个权限对象，可用于查询和更新权限 API 所涵盖 API 的权限状态。</li>
<li><code>navigator.userAgent</code> ： 返回浏览器的 User Agent 字符串，表示用户设备信息，包含了浏览器的厂商、版本、操作系统等信息。</li>
<li><code>navigator.cookieEnabled</code> ： 只读属性。返回一个布尔值，来表示当前页面是否启用了 <code>cookie</code> 。</li>
<li><code>navigator.onLine</code> ： 返回浏览器的联机状态的布尔值，<code>true</code> 表示在线，<code>false</code> 表示离线。只要浏览器连接网络的能力发生变化，该属性就会发送更新。</li>
<li><code>navigator.language</code> ： 只读属性。返回一个表示用户偏好语言（通常是浏览器界面语言）的字符串。</li>
<li><code>navigator.languages</code> ： 只读属性。返回代表用户首选语言的字符串数组。</li>
<li><code>navigator.geolocation</code> ： 只读属性。返回一个 <code>Geolocation</code> 对象，通过这个对象可以访问到设备的位置信息。
<ul>
<li><code>navigator.geolocation.getCurrentPosition(success, error, options)</code> ： 确定设备的位置并返回一个携带位置信息的 Position 对象。</li>
<li><code>navigator.geolocation.watchPosition(success, error, options)</code> ： 注册监听器，在设备的地理位置发生改变的时候自动被调用。每当设备位置改变时，返回一个 long 类型的该监听器的 ID 值。</li>
<li><code>navigator.geolocation.clearWatch(id)</code> ： 注销使用 <code>geolocation.watchPosition()</code> 注册的位置监听器或错误监听器。</li>
</ul>
</li>
<li><code>navigator.clipboard</code> ： 返回一个可以读写剪切板内容的 <code>Clipboard</code> 对象。
<ul>
<li><code>navigator.clipboard.read()</code> ： 从剪贴板读取数据（比如图片），返回一个 <code>Promise</code> 对象。在检索到数据后，<code>Promise</code> 将兑现一个 <code>ClipboardItem</code> 对象的数组来提供剪切板数据。</li>
<li><code>navigator.clipboard.readText()</code> ： 从操作系统读取文本，返回一个 <code>Promise</code> 对象。在从剪切板中检索到文本后，<code>Promise</code> 将兑现一个包含剪切板文本数据的 DOMString。</li>
<li><code>navigator.clipboard.write()</code> ： 写入任意数据至操作系统剪贴板。异步操作，在操作完成后，返回的 <code>Promise</code> 的将被兑现。</li>
<li><code>navigator.clipboard.writeText()</code> ： 写入文本至操作系统剪贴板，返回一个 <code>Promise</code> 对象。在文本被完全写入剪切板后，返回的 <code>Promise</code> 将被兑现。</li>
</ul>
</li>
<li>.....</li>
</ul>`,readingTime:{minutes:3.17,words:951},title:"navigator 对象，screen 对象",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/BOM/storage.html",{loader:()=>g(()=>import("./storage.html-BOWotW8j.js"),__vite__mapDeps([97,1])),meta:{date:1698162204e3,excerpt:`
<h2>sessionStorage 和 localStorage</h2>
<p>Storage 提供了访问特定域名下的会话存储或本地存储的功能，数据存储大小为 5M 。例如，可以添加、修改或删除存储的数据项。</p>
<ul>
<li>
<p><code>window.sessionStorage</code> ： 操作一个域名的会话存储。当会话结束（通常是窗口关闭），数据会被清空。</p>
</li>
<li>
<p><code>window.localStorage</code> ： 操作一个域名的本地存储，数据长期存储。</p>
</li>
</ul>
<h3>Storage 属性</h3>`,readingTime:{minutes:22.04,words:6612},title:"Storage",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/BOM/window.html",{loader:()=>g(()=>import("./window.html-De-68bzN.js"),__vite__mapDeps([98,1])),meta:{date:1698046341e3,excerpt:`
<h2>window 对象属性</h2>
<h3>window.name</h3>
<p><code>window.name</code> ： 获取/设置窗口的名称（只能保存字符串，如写入不是字符串，会自动转成字符串）。主要用于为超链接和表单设置目标（targets），窗口不需要有名称。</p>
<p>只要浏览器窗口不关闭，这个属性是不会消失的。访问 a.com 时，该页面的脚本设置了 <code>window.name</code> ，在同一个窗口里面载入 b.com，新页面的脚本可以读到上一个网页设置的 <code>window.name</code>。页面刷新也是这种情况。一旦浏览器窗口关闭后，该属性保存的值就会消失，因为这时窗口已经不存在了。</p>`,readingTime:{minutes:15.52,words:4657},title:"window 对象",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E4%BC%98%E5%8C%96.html",{loader:()=>g(()=>import("./canvas优化.html-DqlMdYHP.js"),__vite__mapDeps([99,1])),meta:{date:1625678527e3,category:["Canvas"],tag:["Canvas"],excerpt:`
<h2>在离屏 canvas 上预渲染相似的图形或重复的对象</h2>
<p>如果发现在每个动画帧上重复了一些相同的绘制操作，请考虑将其分流到屏幕外的画布上。 然后，可以根据需要频繁地将屏幕外图像渲染到主画布上，而不必首先重复生成该图像的步骤。</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">myEntity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">offscreenCanvas</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">createElement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"canvas"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">myEntity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">offscreenCanvas</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">width</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> myEntity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">myEntity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">offscreenCanvas</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">height</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> myEntity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">myEntity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">offscreenContext</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> myEntity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">offscreenCanvas</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"2d"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">myEntity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">myEntity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">offscreenContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:2.96,words:888},title:"Canvas 优化",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%83%8F.html",{loader:()=>g(()=>import("./canvas使用图像.html-C6gOJJbk.js"),__vite__mapDeps([100,1])),meta:{date:1625154331e3,category:["Canvas"],tag:["Canvas"],excerpt:`
<p>引入图像到 canvas 中的基本操作：</p>
<ul>
<li>获得一个指向 <code>HTMLImageElement</code> 的对象或者另一个 <code>canvas</code> 元素的引用作为源，也可以通过提供一个 URL 的方式来使用图片</li>
<li>使用 <code>drawImage()</code> 函数将图片绘制到画布上</li>
</ul>
<h2>获取绘制的图片</h2>
<p>canvas 可以使用作为图片的源的类型：</p>
<ul>
<li><code>HTMLImageElement</code> : 由 <code>Image()</code> 函数构造出来，或者任何的 <code>&lt;img&gt;</code> 元素。</li>
<li><code>HTMLVideoElement</code> : 用一个 HTML 的 <code>&lt;video&gt;</code> 元素作为图片源，可以从视频中抓取当前帧作为一个图像。</li>
<li><code>HTMLCanvasElement</code> : 使用另一个 <code>&lt;canvas&gt;</code> 元素作为图片源。</li>
<li><code>ImageBitmap</code> : 一个高性能的位图，可以低延迟地绘制，它可以从上述的所有源以及其它几种源中生成。</li>
</ul>`,readingTime:{minutes:6.66,words:1999},title:"Canvas 使用图像",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E5%83%8F%E7%B4%A0%E6%93%8D%E4%BD%9C.html",{loader:()=>g(()=>import("./canvas像素操作.html-CCU_-8Eh.js"),__vite__mapDeps([101,1])),meta:{date:1625677704e3,category:["Canvas"],tag:["Canvas"],excerpt:`
<h2>ImageData 对象</h2>
<p><code>ImageData</code> 接口描述 <code>&lt;canvas&gt;</code> 元素的一个隐含像素数据的区域。</p>
<h3>属性</h3>
<ul>
<li><code>ImageData.data</code> : 只读。<code>Uint8ClampedArray</code> 描述了一个一维数组，包含以 <code>RGBA</code> 顺序的数据，数据使用 <code>0</code> 至 <code>255</code>（包含）的整数表示。</li>
<li><code>ImageData.height</code> : 只读。无符号长整型（unsigned long），使用像素描述 <code>ImageData</code> 的实际高度。</li>
<li><code>ImageData.width</code> : 只读。无符号长整型（unsigned long），使用像素描述 <code>ImageData</code> 的实际宽度。</li>
</ul>`,readingTime:{minutes:5.92,words:1775},title:"Canvas 像素操作",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E5%8F%98%E5%BD%A2.html",{loader:()=>g(()=>import("./canvas变形.html-BTYazZdF.js"),__vite__mapDeps([102,1])),meta:{date:1625248967e3,category:["Canvas"],tag:["Canvas"],excerpt:`
<h2>状态的保存和恢复 Saving and restoring state</h2>
<ul>
<li>
<p><code>save()</code> : 通过将当前状态放入栈中，保存 canvas 全部状态的方法。保存到栈中的绘制状态有下面部分组成：</p>
<ul>
<li>当前的变换矩阵。</li>
<li>当前的剪切区域。</li>
<li>当前的虚线列表.</li>
<li>以下属性当前的值： <code>strokeStyle</code>, <code>fillStyle</code>, <code>globalAlpha</code>, <code>lineWidth</code>, <code>lineCap</code>, <code>lineJoin</code>, <code>miterLimit</code>, <code>lineDashOffset</code>, <code>shadowOffsetX</code>, <code>shadowOffsetY</code>, <code>shadowBlur</code>, <code>shadowColor</code>, <code>globalCompositeOperation</code>, <code>font</code>, <code>textAlign</code>, <code>textBaseline</code>, <code>direction</code>, <code>imageSmoothingEnabled</code></li>
</ul>
</li>
<li>
<p><code>restore()</code> : 恢复画布(canvas)状态。在绘图状态栈中弹出顶端的状态，将 canvas 恢复到最近的保存状态的方法。如果没有保存状态，此方法不做任何改变。</p>
</li>
</ul>`,readingTime:{minutes:4.09,words:1226},title:"Canvas 变形",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E5%90%88%E6%88%90%E4%B8%8E%E8%A3%81%E5%89%AA.html",{loader:()=>g(()=>import("./canvas合成与裁剪.html-8SkKD9Ju.js"),__vite__mapDeps([103,1])),meta:{date:1625334375e3,category:["Canvas"],tag:["Canvas"],excerpt:`
<h2>globalCompositeOperation 设置图像混合模式</h2>
<p><code>globalCompositeOperation = type</code> : 设置 Canvas 图形的混合模式。</p>

<h2>clip() 裁切路径</h2>
<p><code>clip(fillRule)</code> : 路径剪裁。使用的时候，先绘制剪裁路径，执行 <code>clip()</code> 方法，再绘制的内容就在这个剪裁路径中呈现。</p>
<ul>
<li><code>fillRule</code> : 填充规则。
<ul>
<li><code>nonzero</code>: 非零环绕原则，默认的原则。</li>
<li><code>evenodd</code>: 奇偶环绕原则。</li>
</ul>
</li>
</ul>`,readingTime:{minutes:5.65,words:1696},title:"Canvas 合成与裁剪",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E5%9F%BA%E6%9C%AC%E5%8A%A8%E7%94%BB.html",{loader:()=>g(()=>import("./canvas基本动画.html-CEPXGamw.js"),__vite__mapDeps([104,1])),meta:{date:1625622745e3,category:["Canvas"],tag:["Canvas","动画"],excerpt:`
<h2>动画的基本步骤</h2>
<ul>
<li><strong>清空 canvas</strong> ： 如果存在绘制的内容会完全清空 canvas （例如：背景图），否则需要清空所有。最简单的做法是使用 <code>cleanRect()</code> 方法。</li>
<li><strong>保存 canvas 状态</strong> : 如果一些设置（样式、变形之类的）会改变 canvas 状态，而在画每一帧的时候是原始状态，则需要使用 <code>save()</code> 方法先保存一下。</li>
<li><strong>绘制动画图形（animated shapes）</strong> : 重绘动画帧。</li>
<li><strong>恢复 canvas 状态</strong> : 如果已经保存了 canvas 的状态，可以先恢复它，然后重绘下一帧。</li>
</ul>`,readingTime:{minutes:6.47,words:1942},title:"Canvas 基本动画",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E5%9F%BA%E7%A1%80.html",{loader:()=>g(()=>import("./canvas基础.html--AzkTYIm.js"),__vite__mapDeps([105,1])),meta:{date:162472936e4,category:["Canvas"],tag:["Canvas"],excerpt:`
<p>Canvas API 提供了一个通过 JavaScript 和 HTML 的 <code>&lt;canvas&gt;</code> 元素来绘制图形的方式。它可以用于动画、游戏画面、数据可视化、图片编辑以及实时视频处理等方面。</p>
<h2>Canvas 与 svg 的区别</h2>
<ul>
<li>Canvas 是基于像素的即时模式图形系统，绘制完对象后不保存对象到内存中，当再次需要这个对象时，需要重新绘制</li>
<li>svg 是基于形状的保留模式图形系统，绘制完对象后会将其保存在内存中，当需要修改这个对象信息时，直接修改就可以了。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">Canvas</th>
<th style="text-align:left">svg</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">依赖分辨率（位图）</td>
<td style="text-align:left">不依赖分辨率（矢量图）</td>
</tr>
<tr>
<td style="text-align:left">单个 HTML 元素</td>
<td style="text-align:left">每一个图形都是一个 DOM 元素</td>
</tr>
<tr>
<td style="text-align:left">只能通过脚本语言绘制图形</td>
<td style="text-align:left">可以通过 CSS 也可以通过脚本语言绘制</td>
</tr>
<tr>
<td style="text-align:left">不支持事件处理程序</td>
<td style="text-align:left">支持事件处理程序</td>
</tr>
<tr>
<td style="text-align:left">弱的文本渲染能力</td>
<td style="text-align:left">最适合带有大型渲染区域的应用程序（比如谷歌地图）</td>
</tr>
</tbody>
</table>`,readingTime:{minutes:3.41,words:1022},title:"Canvas 基础",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E6%B7%BB%E5%8A%A0%E6%A0%B7%E5%BC%8F.html",{loader:()=>g(()=>import("./canvas添加样式.html-CcPX-tno.js"),__vite__mapDeps([106,1])),meta:{date:1624813836e3,category:["Canvas"],tag:["Canvas"],excerpt:`
<h2>色彩 Colors</h2>
<ul>
<li><code>fillStyle = color</code> 设置图形填充的颜色</li>
<li><code>strokeStyle = color</code> 设置图形轮廓的颜色</li>
</ul>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">fillStyle</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "orange"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">fillStyle</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "#FFA500"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">fillStyle</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "rgb(255,165,0)"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">fillStyle</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "rgba(255,165,0,1)"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">strokeStyle</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "orange"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">strokeStyle</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "#FFA500"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">strokeStyle</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "rgb(255,165,0)"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">strokeStyle</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "rgba(255,165,0,1)"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:8.02,words:2405},title:"Canvas 添加样式",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E7%BB%98%E5%88%B6%E5%BD%A2%E7%8A%B6.html",{loader:()=>g(()=>import("./canvas绘制形状.html-DZkDvfBI.js"),__vite__mapDeps([107,1])),meta:{date:1624795833e3,category:["Canvas"],tag:["Canvas"],excerpt:`
<h2>绘制矩形</h2>
<ul>
<li><code>fillRect(x, y, width, height)</code> : 绘制一个填充的矩形。
<ul>
<li><code>x</code> : 矩形起始点的 x 轴坐标</li>
<li><code>y</code> : 矩形起始点的 y 轴坐标</li>
<li><code>width</code> : 矩形的宽度。正值在右侧，负值在左侧。</li>
<li><code>height</code> : 矩形的高度。正值在下，负值在上。</li>
</ul>
</li>
<li><code>strokeRect(x, y, width, height)</code> : 绘制一个矩形的边框。
<ul>
<li><code>x</code> : 矩形起始点的 x 轴坐标</li>
<li><code>y</code> : 矩形起始点的 y 轴坐标</li>
<li><code>width</code> : 矩形的宽度。正值在右侧，负值在左侧。</li>
<li><code>height</code> : 矩形的高度。正值在下，负值在上。</li>
</ul>
</li>
<li><code>clearRect(x, y, width, height)</code> : 清除指定矩形区域，让清除部分完全透明。
<ul>
<li><code>x</code> : 矩形起始点的 x 轴坐标</li>
<li><code>y</code> : 矩形起始点的 y 轴坐标</li>
<li><code>width</code> : 矩形的宽度</li>
<li><code>height</code> : 矩形的高度</li>
</ul>
</li>
</ul>`,readingTime:{minutes:7.25,words:2176},title:"Canvas 绘制形状",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E7%BB%98%E5%88%B6%E6%96%87%E6%9C%AC.html",{loader:()=>g(()=>import("./canvas绘制文本.html-CYTQAwRc.js"),__vite__mapDeps([108,1])),meta:{date:1625069797e3,category:["Canvas"],tag:["Canvas"],excerpt:`
<h2>绘制文本</h2>
<h2>fillText() 填充指定的文本</h2>
<p><code>fillText(text, x, y, [maxWidth])</code> : 在 <code>(x, y)</code> 位置填充文本 <code>text</code> 。如果提供了最大宽度 <code>maxWidth</code> ，文本会进行缩放以适应最大宽度。</p>
<ul>
<li><code>text</code> : 使用当前的 <code>font</code> （绘制文字时，当前字体样式的属性）, <code>textAlign</code> （绘制文本时，文本的对齐方式的属性）, <code>textBaseline</code> （绘制文本时，当前文本基线的属性） 和 <code>direction</code> （绘制文本时，描述当前文本方向的属性） 值对文本进行渲染。</li>
<li><code>x</code> : 文本起点的 x 轴坐标。</li>
<li><code>y</code> : 文本起点的 y 轴坐标。</li>
<li><code>maxWidth</code> : 绘制的最大宽度。如果指定了值，并且经过计算字符串的值比最大宽度还要宽，字体为了适应会水平缩放（如果通过水平缩放当前字体，可以进行有效的或者合理可读的处理）或者使用小号的字体。</li>
</ul>`,readingTime:{minutes:3.5,words:1050},title:"Canvas 绘制文本",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/DOM/MutationObserver.html",{loader:()=>g(()=>import("./MutationObserver.html-2ZmgWAXt.js"),__vite__mapDeps([109,1])),meta:{date:1699171298e3,excerpt:`
<p><code>MutationObserver</code> 接口异步监视 DOM 的变动，例如节点的增减、属性变动、文本内容变动等。</p>
<ul>
<li>当所有 DOM 的变动都完成后，才会运行（即异步触发）。</li>
<li>DOM 的变化记录会被封装成一个数组（包含多条 DOM 的变动），在 <code>MutationObserver</code> 的回调函数中返回。</li>
<li>可以监听 DOM 的所有变动，也可以指定观察某一类 DOM 的变动。</li>
</ul>
<h2>MutationObserver 构造函数</h2>
<p><strong>语法</strong> ： <code>new MutationObserver(callback)</code></p>`,readingTime:{minutes:3.85,words:1154},title:"MutationObserver",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/DOM/WebComponents.html",{loader:()=>g(()=>import("./WebComponents.html-BFHr_seI.js"),__vite__mapDeps([110,1])),meta:{date:1700202535e3,excerpt:`
<p>Web Components 由自定义元素（Custom element）、影子 DOM （Shadow DOM）、HTML 模板（HTML template）三个技术组成，它们可以一起使用来创建独立的可重用组件。</p>
<ul>
<li>自定义元素（Custom element）：一组 JavaScript API，允许自定义元素以及其行为，可在用户界面中按需使用。</li>
<li>影子 DOM （Shadow DOM）：一组 JavaScript API，用于将封装的 “影子” DOM 树附加到元素（与主文档 DOM 分开呈现）并控制其关联的功能。可以保持元素功能私有，可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。</li>
<li>HTML 模板（HTML template）：<code>&lt;template&gt;</code> 和 <code>&lt;slot&gt;</code> 元素可以编写不在呈现页面中显示的标记模板，可以作为自定义元素结构的基础被多次重用。</li>
</ul>`,readingTime:{minutes:5.61,words:1682},title:"Web Components",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/DOM/css.html",{loader:()=>g(()=>import("./css.html-DNaqGSRy.js"),__vite__mapDeps([111,1])),meta:{date:1699120295e3,excerpt:`
<h2>操作元素节点的 style 属性</h2>
<p>操作 HTML 元素的 <code>style</code> 属性：</p>
<ul>
<li>
<p>使用元素节点的相关方法操作 <code>style</code> 属性</p>
<ul>
<li>
<p><code>element.getAttribute()</code></p>
<p><strong>语法</strong> ： <code>element.getAttribute(attributeName)</code></p>
<p><strong>描述</strong> ： 返回当前元素的 <code>attributeName</code> 属性值。</p>
</li>
<li>
<p><code>element.setAttribute()</code></p>
<p><strong>语法</strong> ： <code>element.setAttribute(attributeName, attributeValue)</code></p>
<p><strong>描述</strong> ： 设置当前元素的 <code>attributeName</code> 属性值为 <code>attributeValue</code>。如果已存在，则更新属性值。</p>
</li>
<li>
<p><code>element.removeAttribute()</code></p>
<p><strong>语法</strong> ： <code>element.removeAttribute(attributeName)</code></p>
<p><strong>描述</strong> ： 移除当前元素的 <code>attributeName</code> 属性。</p>
</li>
</ul>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// &lt;div id="divId" style="color: red; font-size: 20px"&gt;div content&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> divDOM</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getElementById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'divId'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">divDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'style'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// color: red; font-size: 20px</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">divDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'style'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'color: blue; font-size: 30px'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p><code>style</code> 属性不仅可以使用字符串读写，其本身也是一个对象（<code>CSSStyleDeclaration</code> 接口），可以直接读写个别属性</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// &lt;div id="divId" style="color: red; font-size: 20px"&gt;div content&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> divDOM</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getElementById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'divId'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">divDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">color</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // red</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">divDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">fontSize</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 20px</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">divDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">color</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'blue'</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">divDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">fontSize</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '30px'</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>`,readingTime:{minutes:7.83,words:2350},title:"CSS 操作",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/DOM/document.html",{loader:()=>g(()=>import("./document.html-Di9nCSXX.js"),__vite__mapDeps([112,1])),meta:{date:1698775088e3,excerpt:`
<p><code>Document</code> 接口表示整个文档，并作为网页的入口，即 DOM 树。继承了 <code>Node</code> 接口和 <code>EventTarget</code> 接口。</p>
<p><code>Document</code> 对象可以通过如下方法获取：</p>
<ul>
<li>正常网页，可直接使用 <code>document</code> 或 <code>window.document</code> 。</li>
<li><code>iframe</code> 框架中的网页，可以使用 <code>iframe</code> 节点的 <code>contentDocument</code> 属性。</li>
<li>Ajax 操作返回的文档，可以使用 <code>XMLHttpRequest</code> 对象的 <code>responseXML</code> 属性。</li>
<li>网页内部 <code>Node</code> 节点的 <code>ownerDocument</code> 属性。</li>
</ul>`,readingTime:{minutes:13.64,words:4091},title:"Document 类型",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/DOM/element.html",{loader:()=>g(()=>import("./element.html-BQqXWhyA.js"),__vite__mapDeps([113,1])),meta:{date:1698775113e3,excerpt:`
<p>在 XML 和 HTML 中，<code>Element</code> 用来描述页面的结构，可以是数据项、文本、按钮、复选框、图像等。</p>
<p><code>Element</code> 继承链路： <code>EventTarget &lt;-- Node &lt;-- Element</code> 。。</p>
<p><code>Element</code> 包括开始标签、结束标签、属性以及其他内容。</p>
<p></p>
<h2>Element 类型属性</h2>
<h3>元素特性属性</h3>
<ul>
<li>
<p><code>element.id</code> ： 获取或者设置当前元素的 <code>id</code> 属性值。</p>
</li>
<li>
<p><code>element.tagName</code> ： 返回当前元素的大写标签名，与 <code>nodeName</code> 属性值一致。</p>
</li>
<li>
<p><code>element.attributes</code> ： 返回一个 <code>NamedNodeMap</code> 对象，包含元素的所有属性。</p>
</li>
<li>
<p><code>element.innerHTML</code> ： 获取或者设置当前元素包含的所有 HTML 代码。用来设置某个节点的内容。</p>
</li>
<li>
<p><code>element.outerHTML</code> ： 获取或者设置当前元素包含的所有 HTML 代码，包含当前元素本身与所有子元素。用来替换当前元素节点。</p>
</li>
<li>
<p><code>element.localName</code> ： 只读属性。返回当前元素的标签名，不包含命名空间前缀。</p>
</li>
<li>
<p><code>element.prefix</code> ： 返回当前元素的命名空间前缀，如果未指定前缀，则返回 null。</p>
</li>
<li>
<p><code>element.namespaceURI</code> ： 只读属性。返回元素的命名空间，若该元素不在命名空间中则返回 <code>null</code> 。</p>
</li>
<li>
<p><code>element.shadowRoot</code> ： 只读属性。返回当前元素的 <code>ShadowRoot</code> 对象，如果没有则返回 <code>null</code>。</p>
</li>
<li>
<p><code>element.slot</code> ： 返回已插入元素所在的 Shadow DOM slot 的名称。</p>
</li>
</ul>`,readingTime:{minutes:12.37,words:3710},title:"Element 类型",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/DOM/event.html",{loader:()=>g(()=>import("./event.html-DMlSFkyz.js"),__vite__mapDeps([114,1])),meta:{date:1699540946e3,excerpt:`
<h2>事件流</h2>
<p>事件流分为三个阶段：事件捕获阶段、处于目标阶段、事件冒泡阶段。</p>
<ul>
<li><strong>事件捕获阶段</strong>（capture phase）：事件从最外层（<code>window</code> 对象）开始，逐级向下传播到目标节点。</li>
<li><strong>处于目标阶段</strong>（target phase）：事件到达目标节点触发。</li>
<li><strong>事件冒泡阶段</strong>（bubbling phase）：事件从目标节点开始，逐级向上传播到最外层（<code>window</code> 对象）。</li>
</ul>`,readingTime:{minutes:21.8,words:6540},title:"事件",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/DOM/node.html",{loader:()=>g(()=>import("./node.html-DTe_Vdad.js"),__vite__mapDeps([115,1])),meta:{date:1698775067e3,excerpt:`
<p>文档对象模型（DOM）是一个网络文档的编程接口，DOM 将文档表示为节点和对象。</p>
<p>在 DOM 的上下文中，节点（Node）是节点树中的单个点，包括文档本身、元素、文本以及注释都属于是节点。</p>
<p>Node 接口是 DOM 树中所有节点类型的基类，定义了所有节点类型的通用属性和方法。</p>
<h2>Node 类型属性</h2>
<ul>
<li>
<p><code>Node.prototype.childNodes</code> ： 返回指定节点的所有子节点集合（<code>NodeList</code> 集合），包含元素节点、文本节点、注释节点等。如果当前节点不包含任何子节点，则返回空的 <code>NodeList</code> 集合。该集合为动态集合，子节点变化时会自动更新。</p>
</li>
<li>
<p><code>Node.prototype.parentNode</code> ： 返回指定节点的父节点，如果没有父节点，则返回 <code>null</code>。父节点只可能是三种类型：元素节点（<code>Element</code>）、文档节点（<code>Document</code>）和文档片段节点（<code>DocumentFragment</code>）。</p>
</li>
<li>
<p><code>Node.prototype.parentElement</code> ： 返回指定节点的父元素节点，如果指定节点没有父节点，或者父节点类型不是元素节点，则返回 <code>null</code>。</p>
</li>
<li>
<p><code>Node.prototype.firstChild</code> ： 返回指定节点的第一个子节点，如果没有子节点，则返回 <code>null</code>。</p>
</li>
<li>
<p><code>Node.prototype.lastChild</code> ： 返回指定节点的最后一个子节点，如果没有子节点，则返回 <code>null</code>。</p>
</li>
<li>
<p><code>Node.prototype.previousSibling</code> ：返回指定节点的上一个兄弟节点，如果没有上一个兄弟节点，则返回 <code>null</code>。</p>
</li>
<li>
<p><code>Node.prototype.nextSibling</code> ： 返回指定节点的下一个兄弟节点，如果没有下一个兄弟节点，则返回 <code>null</code>。</p>
</li>
<li>
<p><code>Node.prototype.isConnected</code> ： 返回布尔值，表示指定节点是否在文档中。</p>
</li>
<li>
<p><code>Node.prototype.nodeName</code> ： 返回指定节点的名称（大写的标签名称，例如：<code>DIV</code>）。不同类型节点的 nodeName 属性值：</p>
<table>
<thead>
<tr>
<th style="text-align:left">节点类型</th>
<th style="text-align:left">nodeName 属性值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Document （文档节点）</td>
<td style="text-align:left"><code>#document</code></td>
</tr>
<tr>
<td style="text-align:left">Element （元素节点）</td>
<td style="text-align:left">元素的标签名称</td>
</tr>
<tr>
<td style="text-align:left">Attr （属性节点）</td>
<td style="text-align:left">属性的名称，等同于 <code>Attr.name</code> 属性的值</td>
</tr>
<tr>
<td style="text-align:left">Text （文本节点）</td>
<td style="text-align:left"><code>#text</code></td>
</tr>
<tr>
<td style="text-align:left">Comment （注释节点）</td>
<td style="text-align:left"><code>#comment</code></td>
</tr>
<tr>
<td style="text-align:left">DocumentType （文档类型节点）</td>
<td style="text-align:left"><code>#document-type</code></td>
</tr>
<tr>
<td style="text-align:left">DocumentFragment （文档片段节点）</td>
<td style="text-align:left"><code>#document-fragment</code></td>
</tr>
<tr>
<td style="text-align:left">CDATASection （CDATA 节点）</td>
<td style="text-align:left"><code>#cdata-section</code></td>
</tr>
<tr>
<td style="text-align:left">ProcessingInstruction （处理指令节点）</td>
<td style="text-align:left"><code>#processing-instruction</code></td>
</tr>
</tbody>
</table>
</li>
<li>
<p><code>Node.prototype.nodeType</code> ： 返回指定节点的类型。</p>
<table>
<thead>
<tr>
<th style="text-align:left">常量</th>
<th style="text-align:left">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Node.ELEMENT_NODE</code></td>
<td style="text-align:left"><code>1</code></td>
<td style="text-align:left">元素节点。例如：<code>&lt;p&gt;</code>、<code>&lt;div&gt;</code></td>
</tr>
<tr>
<td style="text-align:left"><code>Node.ATTRIBUTE_NODE</code></td>
<td style="text-align:left"><code>2</code></td>
<td style="text-align:left">元素的属性。例如：<code>class="right"</code></td>
</tr>
<tr>
<td style="text-align:left"><code>Node.TEXT_NODE</code></td>
<td style="text-align:left"><code>3</code></td>
<td style="text-align:left">元素之间或者元素包含的文本节点</td>
</tr>
<tr>
<td style="text-align:left"><code>Node.CDATA_SECTION_NO</code>DE</td>
<td style="text-align:left"><code>4</code></td>
<td style="text-align:left">CDATA 片段，例如：<code>&lt;!CDATA[[ … ]]&gt;</code></td>
</tr>
<tr>
<td style="text-align:left"><code>Node.PROCESSING_INSTRUCTION_NODE</code></td>
<td style="text-align:left"><code>7</code></td>
<td style="text-align:left">用于 XML 文档的 <code>ProcessingInstruction</code>。例如 <code>&lt;?xml-stylesheet ... ?&gt;</code> 声明</td>
</tr>
<tr>
<td style="text-align:left"><code>Node.COMMENT_NODE</code></td>
<td style="text-align:left"><code>8</code></td>
<td style="text-align:left">注释，<code>&lt;!--</code> 和 <code>--&gt;</code> 之间的内容</td>
</tr>
<tr>
<td style="text-align:left"><code>Node.DOCUMENT_NODE</code></td>
<td style="text-align:left"><code>9</code></td>
<td style="text-align:left"><code>Document</code> 节点</td>
</tr>
<tr>
<td style="text-align:left"><code>Node.DOCUMENT_TYPE_NODE</code></td>
<td style="text-align:left"><code>10</code></td>
<td style="text-align:left">描述文档类型的 <code>DocumentType</code> 节点。例如 <code>&lt;!DOCTYPE html&gt;</code> 用于 HTML5</td>
</tr>
<tr>
<td style="text-align:left"><code>Node.DOCUMENT_FRAGMENT_NODE</code></td>
<td style="text-align:left"><code>11</code></td>
<td style="text-align:left">文档片段，作为一个轻量版的 <code>Document</code> 使用</td>
</tr>
</tbody>
</table>
<p>以下节点类型常量已被弃用且不再使用：<code>Node.ENTITY_REFERENCE_NODE</code>（值为 <code>5</code>）、<code>Node.ENTITY_NODE</code>（值为 <code>6</code>）和 <code>Node.NOTATION_NODE</code>（值为 <code>12</code>）。</p>
</li>
<li>
<p><code>Node.prototype.nodeValue</code> ： 返回或设置指定节点的文本值。只有文本节点（<code>text</code>）、注释节点（<code>comment</code>）和属性节点（<code>attr</code>）有文本值，其他类型的节点一律返回 <code>null</code>。</p>
</li>
<li>
<p><code>Node.prototype.textContent</code> ： 返回指定节点的文本内容，包括子文本节点的内容，以及后代节点的文本内容。如果指定节点没有后代节点，则返回空字符串。如果指定节点是文本节点，则返回文本节点的文本内容。</p>
</li>
<li>
<p><code>Node.prototype.ownerDocument</code> ： 返回指定节点所在的顶层文档对象（<code>Document</code> 对象）。</p>
</li>
<li>
<p><code>Node.prototype.baseURI</code> ： 只读。返回当前网页的绝对路径。当浏览器获取绝对 URL 时，会使用 baseURI 解析相对 URL。一般情况下，由当前网页的 URL （即 <code>window.location</code> 属性）决定，但可以通过 HTML 的 <code>&lt;base&gt;</code> 标签改变属性值。</p>
</li>
</ul>`,readingTime:{minutes:8.39,words:2518},title:"Node 类型",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/DOM/other.html",{loader:()=>g(()=>import("./other.html-DxaXlJsW.js"),__vite__mapDeps([116,1])),meta:{date:1698775113e3,excerpt:`
<h2>Text 类型</h2>
<p><code>Text</code> 文本节点表示文本内容，代表 <code>Element</code> 元素节点和 <code>Attribute</code> 属性节点的文本内容。如果一个节点只包含一段文本，该节点就有一个文本子节点，表示该文本内容。</p>
<p>空格也会形成文本节点，比如 <code>&lt;p&gt;&lt;/p&gt;</code> 包含一个空格，其子节点就是一个文本节点。</p>
<p>Text 继承链路： <code>EventTarget &lt;-- Node &lt;-- CharacterData &lt;-- Text</code> 。</p>`,readingTime:{minutes:3.95,words:1185},title:"其他类型",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/SVG/svgSMIL%E5%8A%A8%E7%94%BB.html",{loader:()=>g(()=>import("./svgSMIL动画.html-1reKwPIQ.js"),__vite__mapDeps([117,1])),meta:{date:1627163421e3,category:["SVG"],tag:["SVG","SMIL"],excerpt:`
<p>SMIL 动画指在 SVG 集成了 Synchronized Multimedia Integration Language (SMIL) 这种动画标准，该语言被 SVG 原生支持，主要是使用标签来描述动画。SMIL 允许你：</p>
<ul>
<li>变动一个元素的数字属性（x、y……）</li>
<li>变动元素的变形属性（ <code>translation</code> 或 <code>rotation</code> ）</li>
<li>变动元素的颜色属性</li>
<li>物件方向与运动路径方向同步</li>
</ul>
<h2><code>&lt;animate&gt;</code> 元素</h2>`,readingTime:{minutes:1.49,words:448},title:"SMIL 动画",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/SVG/svg%E5%8A%A8%E7%94%BB.html",{loader:()=>g(()=>import("./svg动画.html-CfjKS-pS.js"),__vite__mapDeps([118,1])),meta:{date:1627162016e3,category:["SVG"],tag:["SVG","动画"],excerpt:`
<h2>描边动画</h2>
<h3>描边动画原理</h3>
<p>SVG 描边动画主要与以下 3 个属性相关。</p>
<ul>
<li><code>stroke="&lt;paint&gt;"</code> : 定义图形元素的外轮廓的颜色。它的默认值是 <code>none</code> 。</li>
<li><code>stroke-dasharray="&lt;dasharray&gt;"</code> : 控制用来描边的点划线的图案范式。
<ul>
<li><code>&lt;dasharray&gt;</code> : 它是一个 <code>&lt;length&gt;</code> 和 <code>&lt;percentage&gt;</code> 数列，数与数之间用逗号或者空白隔开，指定<strong>短划线</strong>和<strong>缺口</strong>的长度。如果提供了奇数个值，则这个值的数列重复一次，从而变成偶数个值。因此，<code>5,3,2</code> 等同于 <code>5,3,2,5,3,2</code> 。</li>
</ul>
</li>
<li><code>stroke-dashoffset="&lt;percentage&gt; | &lt;length&gt; | inherit"</code> : 指定了 dash 模式到路径开始的距离。如果使用了一个百分比值，那么这个值就代表了当前 viewport(视口) 的一个百分比。</li>
</ul>`,readingTime:{minutes:15.85,words:4755},title:"SVG 动画",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/SVG/svg%E5%9F%BA%E7%A1%80.html",{loader:()=>g(()=>import("./svg基础.html-B3E5p_oI.js"),__vite__mapDeps([119,1])),meta:{date:162472936e4,category:["SVG"],tag:["SVG","动画"],excerpt:`
<p>可缩放矢量图形（Scalable Vector Graphics，SVG），是一种用于描述二维的矢量图形，基于 XML 的标记语言。作为一个基于文本的开放网络标准，SVG 能够优雅而简洁地渲染不同大小的图形，并和 CSS，DOM，JavaScript 和 SMIL 等其他网络标准无缝衔接。本质上，SVG 相对于图像，就好比 HTML 相对于文本。</p>
<h2>容器</h2>
<h3><code>&lt;svg&gt;</code> 元素</h3>
<p><code>svg</code> 元素可以用于在当前文档（比如说，一个 HTML 文档）内嵌套一个独立的 <code>svg</code> 片段。 这个独立片段拥有独立的视口和坐标系统。</p>`,readingTime:{minutes:10.75,words:3225},title:"SVG 基础",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/SVG/%E5%9F%BA%E4%BA%8Eanime.js%E7%9A%84svg%E5%8A%A8%E7%94%BB.html",{loader:()=>g(()=>import("./基于anime.js的svg动画.html-Q0Mllg31.js"),__vite__mapDeps([120,1])),meta:{date:1627194099e3,category:["SVG"],tag:["SVG"],excerpt:`
<p>动画库: <a href="https://www.animejs.cn/" target="_blank" rel="noopener noreferrer">animejs</a></p>
<h2>描边动画</h2>

<h2>路径动画</h2>
<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"motionPath"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"motion-path-wrapper"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"motion-path-square"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">svg</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"500"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"300"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> viewBox</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"0 0 500 300"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">path</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">        id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"curpath"</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">        fill</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"none"</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">        stroke</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"currentColor"</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">        stroke-width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1"</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">        d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"M11.6,246.9c0,0,143.1-274.1,267.8-137.9s124.7,136.2,124.7,136.2L11.6,246.9z"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">svg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:4.34,words:1301},title:"基于 Anime.js 的 SVG 动画",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/API.html",{loader:()=>g(()=>import("./API.html-DtLpyD_a.js"),__vite__mapDeps([121,1])),meta:{date:1700065895e3,excerpt:`
<h2>postMessage 多窗口通信</h2>
<h3>window.postMessage</h3>
<p><strong>语法</strong> ： <code>otherWindow.postMessage(message, targetOrigin, [transfer])</code></p>
<p><strong>描述</strong> ： 用于安全地实现跨源通信。例如：在 a.com 页面中，向其 <code>iframe</code> 子窗口 b.com 页面发送消息。</p>
<p><strong>参数</strong> ：</p>
<ul>
<li><code>otherWindow</code> 参数 ：其他窗口的一个引用，比如 <code>iframe</code> 的 <code>contentWindow</code> 属性、执行 <code>window.open</code> 返回的窗口对象、或者是命名过或数值索引的 <code>window.frames</code>。</li>
<li><code>message</code> 参数 ：将要发送到其他 window 的数据。</li>
<li><code>targetOrigin</code> 参数 ： 通过窗口的 <code>origin</code> 属性来指定哪些窗口能接收到消息事件，
<ul>
<li>其值可以是字符串 <code>"*"</code>（表示无限制）或者一个 URI。</li>
<li>在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配 <code>targetOrigin</code> 提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。</li>
</ul>
</li>
<li><code>transfer</code> 参数 ： 可选。是一串和 <code>message</code> 同时传递的 <code>Transferable</code> 对象。该对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。</li>
</ul>`,readingTime:{minutes:12.2,words:3661},title:"JavaScript API",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/ArrayBuffer.html",{loader:()=>g(()=>import("./ArrayBuffer.html-D0YZ1Z6e.js"),__vite__mapDeps([122,1])),meta:{date:1693730997e3,excerpt:`
<p>JavaScript 可以通过类型化数组操作原始的二进制数据，JavaScript 类型化数组中的每一个元素都是原始二进制值，而二进制值采用多种支持的格式之一（从 8 位整数到 64 位浮点数）。</p>
<p>JavaScript 类型化数组将实现拆分为缓冲和视图两部分。缓冲（由 <code>ArrayBuffer</code> 对象实现）描述一个数据分块。可通过视图访问缓存对象中包含的内存，视图提供了上下文（即数据类型、起始偏移量和元素数）将数据转换为实际有类型的数组。</p>
<ul>
<li><code>ArrayBuffer</code> 对象：用来表示通用的、固定长度的原始二进制数据缓冲区。</li>
<li><code>TypedArray</code> 视图：从 <code>ArrayBuffer</code> 对象中<strong>读写简单类型</strong>的二进制数据。包含类型的视图如下：
<ul>
<li><code>Int8Array</code> ：8 位有符号整型（补码），长度 1 字节。</li>
<li><code>Uint8Array</code> ：8 位无符号整型，长度 1 字节。</li>
<li><code>Uint8ClampedArray</code> ：8 位无符号整型，长度 1 字节。</li>
<li><code>Int16Array</code> ：16 位有符号整型（补码），长度 2 字节。</li>
<li><code>Uint16Array</code> ：16 位无符号整型，长度 2 字节。</li>
<li><code>Int32Array</code> ：32 位有符号整型（补码），长度 4 字节。</li>
<li><code>Uint32Array</code> ：32 位无符号整型，长度 4 字节。</li>
<li><code>Float32Array</code> ：32 位 IEEE 浮点数（7 位有效数字），长度 4 字节。</li>
<li><code>Float64Array</code> ：64 位 IEEE 浮点数（16 位有效数字），长度 8 字节。</li>
<li><code>BigInt64Array</code> ：64 位有符号整型（补码），长度 8 字节。</li>
<li><code>BigUint64Array</code> ：64 位无符号整型，长度 8 字节。</li>
</ul>
</li>
<li><code>DataView</code> 视图：从 <code>ArrayBuffer</code> 对象中<strong>读写复杂类型</strong>的二进制数据。比如第一个字节是 <code>Uint8Array</code>，第二、三个字节是 <code>Int16Array</code>、第四个字节开始是 <code>Float32Array</code>（32 位浮点数）等，此外还可以自定义字节序。</li>
</ul>`,readingTime:{minutes:24.68,words:7404},title:"ArrayBuffer",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Class.html",{loader:()=>g(()=>import("./Class.html-DR61xmns.js"),__vite__mapDeps([123,1])),meta:{date:1683392378e3,excerpt:`
<p>在面向对象的编程中，<code>Class</code> 是用于创建对象的可扩展的程序代码模版，它为对象提供了状态（成员变量）的初始值和行为（成员函数或方法）的实现。</p>
<h2>Class 的使用</h2>
<p>类（class）的属性和方法，除非显式定义在其本身（即定义在 <code>this</code> 对象上），否则都是定义在原型上（即定义在 <code>class</code> 上）。</p>
<p>类（class）通过 <code>static</code> 关键字定义静态方法。</p>
<ul>
<li>不能在类的实例上调用静态方法，而应该通过类本身调用。</li>
<li>静态方法中，调用同一个类中的其他静态方法，可使用 <code>this</code> 关键字。</li>
<li>非静态方法中，不能直接使用 <code>this</code> 关键字来访问静态方法。而是要用类名或者用构造函数的属性来调用：
<ul>
<li>使用类名调用：<code>CLASSNAME.STATIC_METHOD_NAME()</code></li>
<li>使用构造函数的属性调用：<code>this.constructor.STATIC_METHOD_NAME()</code></li>
</ul>
</li>
</ul>`,readingTime:{minutes:11.33,words:3398},title:"Class",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/EventLoop.html",{loader:()=>g(()=>import("./EventLoop.html-NHXrDqIR.js"),__vite__mapDeps([124,1])),meta:{date:1686663349e3,excerpt:`
<h2>概述</h2>
<p>事件循环的实现至少应该含有一个用于宏任务的队列和至少一个用于微任务的队列。大部分的实现通常会更多用于不同类型的宏任务和微任务的队列，这使得事件循环能够根据任务类型进行优先处理。例如，优先考虑对性能敏感的任务，如用户输入。</p>
<ul>
<li>
<p>宏任务（macrotask）：创建主文档对象、解析 HTML、执行主线（或全局）JavaScript 代码，更改当前 URL 以及各种事件，如页面加载、输入、网络事件和定时器事件（<code>setTimeout</code> 、<code>setInterval</code> 等）。</p>
</li>
<li>
<p>微任务（microtask）：<code>Promise</code> 回调函数、DOM 发生变化等</p>
<p>所有微任务会在下一次渲染之前执行完成，其目标是在渲染前更新应用程序状态。能够在重新渲染 UI 之前执行指定的行为，避免不必要的 UI 重绘，UI 重绘会使应用程序的状态不连续。</p>
</li>
</ul>`,readingTime:{minutes:5.88,words:1764},title:"Event Loop",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Generator.html",{loader:()=>g(()=>import("./Generator.html-iw7g_fGQ.js"),__vite__mapDeps([125,1])),meta:{date:1686663349e3,excerpt:`
<h2>Generator 概述</h2>
<p><code>Generator</code> 对象由生成器函数（<code>function* name([param[, param[, ... param]]]) { statements }</code>）返回并且它符合可迭代协议和迭代器协议。</p>
<ul>
<li><code>Generator</code> 对象是一个<strong>状态机</strong>，封装了多个内部状态。</li>
<li><code>Generator</code> 对象是一个<strong>迭代器对象</strong>，可以依次遍历 <code>Generator</code> 对象内部的每一个状态。</li>
<li><code>Generator</code> 对象是一个<strong>普通函数</strong>，包含特征如下：
<ul>
<li><code>function</code> 关键字后跟一个星号： <code>function* name([param[, param[, ... param]]]) { statements }</code> 。</li>
<li>函数体内部使用 <code>yield</code> 表达式，定义不同的内部状态。</li>
</ul>
</li>
</ul>`,readingTime:{minutes:12.93,words:3879},title:"Generator",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/JSON.html",{loader:()=>g(()=>import("./JSON.html-Cc9bT5Cv.js"),__vite__mapDeps([126,1])),meta:{date:1700495654e3,excerpt:`
<h2>概述</h2>
<p>JSON （JavaScript Object Notation） 是一种语法，用来序列化对象、数组、数值、字符串、布尔值和 <code>null</code> 。</p>
<p>JSON 语法支持 3 种类型的值：</p>
<ul>
<li>简单值：字符串、数值、布尔值和 <code>null</code> ，但是 <code>undefined</code> 不可以。
<ul>
<li>数值：禁止出现前导零（<code>JSON.stringify</code> 方法自动忽略前导零，而在 <code>JSON.parse</code> 方法中将会抛出 <code>SyntaxError</code>）；如果存在小数点，则后面至少跟一位数字。</li>
<li>字符串：必须使用双引号。禁止某些控制字符；Unicode 行分隔符（<code>U+2028</code>）和段分隔符（<code>U+2029</code>）被允许。</li>
</ul>
</li>
<li>对象：表示有序的键/值对。值可以是简单值，也可以是复杂类型。</li>
<li>数组：表示可以通过数值索引访问值的有序列表。数组的值可以是任意类型。</li>
</ul>`,readingTime:{minutes:4.58,words:1374},title:"JSON",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Math%E5%92%8CDate.html",{loader:()=>g(()=>import("./Math和Date.html-CMWkS-nC.js"),__vite__mapDeps([127,1])),meta:{date:1694965948e3,excerpt:`
<h2>Math</h2>
<p><code>Math</code> 是一个内置对象，它拥有一些数学常数属性和数学函数方法。<code>Math</code> 不是一个函数对象。<code>Math</code> 用于 <code>Number</code> 类型。它不支持 <code>BigInt</code>。</p>
<h3>Math 的属性</h3>
<ul>
<li>
<p><code>Math.E</code> ：欧拉常数，也是自然对数的底数，约等于 2.718。</p>
</li>
<li>
<p><code>Math.LN2</code> ：2 的自然对数，约等于 0.693。</p>
</li>
<li>
<p><code>Math.LN10</code> ：10 的自然对数，约等于 2.303。</p>
</li>
<li>
<p><code>Math.LOG2E</code> ：以 2 为底的 E 的对数，约等于 1.443。</p>
</li>
<li>
<p><code>Math.LOG10E</code> ：以 10 为底的 E 的对数，约等于 0.434。</p>
</li>
<li>
<p><code>Math.PI</code> ：圆周率，一个圆的周长和直径之比，约等于 3.14159。</p>
</li>
<li>
<p><code>Math.SQRT1_2</code> ：二分之一的平方根，同时也是 2 的平方根的倒数，约等于 0.707。</p>
</li>
<li>
<p><code>Math.SQRT2</code> ：2 的平方根，约等于 1.414</p>
</li>
</ul>`,readingTime:{minutes:9.55,words:2866},title:"Math 和 Date",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Promise.html",{loader:()=>g(()=>import("./Promise.html-n-gOkxGj.js"),__vite__mapDeps([128,1])),meta:{date:1686663349e3,excerpt:`
<h2>Promise 的状态</h2>
<p><code>Promise</code> 对象表示异步操作最终的完成（或失败）以及其结果值。<code>Promise</code> 是一个有状态的对象，必然处于以下几种状态之一：</p>
<ul>
<li><strong>待定（<code>pending</code>）</strong> ：初始状态，既没有被兑现，也没有被拒绝。</li>
<li><strong>已兑现（<code>fulfilled</code>，也称为“解决”，<code>resolved</code>）</strong> ：意味着操作成功完成。</li>
<li><strong>已拒绝（<code>rejected</code>）</strong> ：意味着操作失败。</li>
</ul>`,readingTime:{minutes:15.74,words:4722},title:"Promise",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Reflect.html",{loader:()=>g(()=>import("./Reflect.html-Dt77tAnx.js"),__vite__mapDeps([129,1])),meta:{date:1686108099e3,excerpt:`
<p><code>Reflect</code> 是一个内置的对象，它提供拦截 JavaScript 操作的方法。</p>
<h2>概述</h2>
<ul>
<li>将 <code>Object</code> 对象的一些明显属于语言内部的方法（比如 <code>Object.defineProperty</code>），放到 <code>Reflect</code> 对象上。</li>
<li>修改某些 <code>Object</code> 方法的返回结果，让其变得更合理。比如，<code>Object.defineProperty(obj, name, desc)</code> 在无法定义属性时，会抛出错误，而 <code>Reflect.defineProperty(obj, name, desc)</code> 则会返回 <code>false</code> 。</li>
<li>让 <code>Object</code> 操作都变成函数行为。某些 <code>Object</code> 操作是命令式，比如 <code>name in obj</code> 和 <code>delete obj[name]</code> ，而 <code>Reflect.has(obj, name)</code> 和 <code>Reflect.deleteProperty(obj, name)</code> 让它们变成了函数行为。</li>
<li><code>Reflect</code> 对象的方法与 <code>Proxy</code> 对象的方法一一对应。在 <code>Proxy</code> 修改默认行为，都可以在 <code>Reflect</code> 上获取默认行为。</li>
</ul>`,readingTime:{minutes:7.99,words:2397},title:"Reflect",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/RegExp.html",{loader:()=>g(()=>import("./RegExp.html-DB-KNXCB.js"),__vite__mapDeps([130,1])),meta:{date:1694879378e3,excerpt:`
<p>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript 中，正则表达式也是对象。</p>
<p>正则表达式可以被用于 <code>RegExp</code> 的 <code>exec</code> 和 <code>test</code> 方法，以及 <code>String</code> 的 <code>match</code>、<code>matchAll</code>、<code>replace</code>、<code>search</code> 和 <code>split</code> 方法。</p>
<h2>位置匹配</h2>
<p>对位置的理解，可以理解为空字符 <code>""</code> ，相邻字符之间的位置。</p>`,readingTime:{minutes:16.74,words:5021},title:"RegExp",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Set%E5%92%8CMap.html",{loader:()=>g(()=>import("./Set和Map.html-CGZjXBER.js"),__vite__mapDeps([131,1])),meta:{date:1693073313e3,excerpt:`
<h2>Set</h2>
<h3>Set 的基本含义</h3>
<p><code>Set</code> 对象允许存储任何类型的<strong>唯一值</strong>，无论是原始值或者是对象引用。可以按照插入的顺序迭代它的元素。</p>
<ul>
<li>在 <code>Set</code> 中， <code>+0</code> 和 <code>-0</code> 是同一个的值，在严格相等（<code>===</code>）中也是严格相等。</li>
<li><code>NaN</code> 在 <code>Set</code> 中被认为是同一个值，但在严格相等（<code>===</code>）中 <code>NaN</code> 不等于自身。</li>
<li><code>null</code> 和 <code>undefined</code> 都可以被存储在 <code>Set</code> 中。</li>
</ul>`,readingTime:{minutes:17.66,words:5298},title:"Set 和 Map",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/async.html",{loader:()=>g(()=>import("./async.html-BLYyhHH5.js"),__vite__mapDeps([132,1])),meta:{date:1686663349e3,excerpt:`
<h2>async / await 概述</h2>
<p>async 函数是使用 <code>async</code> 关键字声明的函数。async 函数是 <code>AsyncFunction</code> 构造函数的实例，并且其中允许使用 <code>await</code> 关键字。</p>
<ul>
<li><code>AsyncFunction</code> 对象为异步函数提供方法。该对象不是全局对象，是 <code>Function</code> 的子类型。可以通过 <code>const AsyncFunction = async function () {}.constructor;</code> 获取。</li>
<li><code>await</code> 表达式会暂停整个 <code>async</code> 函数的执行进程并出让其控制权，只有当其等待的基于 <code>Promise</code> 的异步操作被兑现或被拒绝之后才会恢复进程。</li>
</ul>`,readingTime:{minutes:7.72,words:2317},title:"async",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%97%AD%E5%8C%85.html",{loader:()=>g(()=>import("./作用域与闭包.html-BNjVdJnJ.js"),__vite__mapDeps([133,1])),meta:{date:1587920122e3,excerpt:`
<h2>编译原理</h2>
<p>在传统编译语言的流程中，程序中一段源代码在执行之前会经历三个步骤，统称为 <strong>编译</strong> 。</p>
<ul>
<li>
<p><strong><code>分词/词法分析(Tokenizing/Lexing)</code></strong> ：该过程将代码字符串分解成有意义的代码块。被分解成的代码块成为 <strong><code>词法单元(token)</code></strong> 。</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 词法分析后的结构</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 空格是否会被当做词法单元，取决于在语言中是否具有意义。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  "var"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"keyword"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  "a"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"identifier"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  "="</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"assignment"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  "2"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"integer"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  ";"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"eos"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> of</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> statement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong><code>分词(tokenizing)</code></strong> 和 <strong><code>词法分析(Lexing)</code></strong> 之间的区别在于**词法单元的识别是通过有状态还是无状态的方式进行的。
<ul>
<li>分词：是无状态的</li>
<li>词法分析：是有状态的。</li>
</ul>
</li>
<li>词法单元生成器判断 <code>a</code> 是一个独立的词法单元还是其他词法单元的一部分时，调用的状态的解析规则，则这个过程被称为 <strong><code>词法分析</code></strong> 。</li>
</ul>
</li>
<li>
<p><strong><code>解析/语法分析(Parsing)</code></strong> ： 该过程将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。生成的树被称为 <strong><code>抽象语法树(Abstract Syntax Tree, AST)</code></strong>。</p>
<p>如果源码符合语法规则，会生成一个抽象语法树；如果源码存在语法错误，会抛出一个 “语法错误”。</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  operation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"="</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    keyword</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"var"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    right</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"a"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  right</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"2"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 上面代码中，抽象语法树的一个节点是赋值操作符（=），它两侧的词义单位，分别成左侧子节点和右侧子节点</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p><strong><code>代码生成</code></strong>：将 <code>抽象语法树 AST</code> 转换为可执行代码。</p>
</li>
</ul>`,readingTime:{minutes:28.01,words:8403},title:"作用域与闭包",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%87%BD%E6%95%B0.html",{loader:()=>g(()=>import("./函数.html-Cwp7DmyT.js"),__vite__mapDeps([134,1])),meta:{date:1686108108e3,excerpt:`
<h2>函数概述</h2>
<p>每个函数都是 <code>Function</code> 类型的实例，而 <code>Function</code> 也有属性和方法，跟其他引用类型一样。因为函数是对象，所以函数名就是指向函数对象的指针，而且不一定与函数本身紧密绑定。</p>
<p>由于函数与其他数据类型地位平等，所以在 JavaScript 语言中又称函数为第一等公民。比如，可以把函数赋值给变量和对象的属性，也可以当作参数传入其他函数，或者作为函数的结果返回。函数只是一个可以执行的值，此外并无特殊之处。</p>
<h2>函数的声明</h2>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// function 命令</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> namedFunction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 函数表达式</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 函数表达式声明函数时，如果 function 命令后不带有函数名</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> expression</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 函数表达式声明函数时，如果 function 命令后带有函数名</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// &gt; 函数名仅在函数体内部有效，可在函数体内部调用自身</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// &gt; 方便排查错误。显示函数调用栈时，将显示函数名</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> expression</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> expression</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> expression</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// function</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> y</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Function 构造函数 - 不推荐使用</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 使用 Function 构造函数声明函数会被解释两次，会影响性能。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// &gt; 第一次，将其当作常规 ECMAScript 代码</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// &gt; 第二次，解释传给构造函数的字符串</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> newFunction</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'x'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'y'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'return x + y'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 等同于 function newFunction(x, y) { return x + y }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:18.14,words:5442},title:"函数",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E7%BB%A7%E6%89%BF.html",{loader:()=>g(()=>import("./原型与继承.html-CiEYoTPw.js"),__vite__mapDeps([135,1])),meta:{date:1587920122e3,excerpt:`
<h2>原型</h2>
<h3>原型内容</h3>
<p></p>
<ul>
<li>
<p><strong>每个函数都会创建一个 <code>prototype</code> 属性（指向原型对象），该属性是一个对象，默认只有一个 <code>constructor</code> 属性（指向该函数本身）。其他所有方法都继承自 <code>Object</code> 。</strong></p>
<ul>
<li>
<p>通过 <code>new</code> 运算符生成对象，每次生成的对象都不一样，可使用函数的 <code>prototype</code> 属性在对象之间提供共享的属性和方法。</p>
</li>
<li>
<p>并不是所有函数都具有 <code>prototype</code> 属性，<code>Function.prototype.bind()</code> 没有该属性，因为 <code>bind()</code> 并不是一个构造函数。</p>
</li>
</ul>
</li>
<li>
<p><strong>每个 JavaScript 函数实际上都是一个 <code>Function</code> 对象</strong>，由 <code>Function()</code> 构造函数创建一个新的 <code>Function</code> 对象。</p>
</li>
<li>
<p><strong><code>Function</code> 是一个函数，也是一种特殊类型的对象，也具有 <code>__proto__</code> 属性</strong>。<strong><code>Function</code> 是它自己的构造器</strong>，因 <code>Function.__proto__</code> 指向 <code>Function.prototype</code>，导致 <code>Function.constructor === Function</code>。</p>
</li>
<li>
<p><strong>每个对象都有一个 <code>__proto__</code> 属性，指向创建该对象的函数（即：<code>function Object()</code>）的 <code>prototype</code>。</strong></p>
<ul>
<li>
<p><code>__proto__</code> 是存在于实例与构造函数的原型对象（<code>prototype</code>）之间的连接，而不是存在于实例与构造函数之间。</p>
</li>
<li>
<p><code>__proto__</code> 属性已在 ECMAScript 6 语言规范中标准化，用于确保 Web 浏览器的兼容性。它已被不推荐使用，现在更推荐使用以下 API：</p>
<ul>
<li>
<p><code>Object.getPrototypeOf(object)</code> / <code>Reflect.getPrototypeOf(target)</code> ：返回指定对象的原型（内部 <code>[[Prototype]]</code> 属性的值）。</p>
</li>
<li>
<p><code>Object.setPrototypeOf(obj, prototype)</code> / <code>Reflect.setPrototypeOf(target, prototype)</code> ：设置一个指定的对象的原型（即，内部 <code>[[Prototype]]</code> 属性）到另一个对象或 <code>null</code>。</p>
</li>
<li>
<p><code>Object.create(proto)</code> ：用于创建一个新对象，使用现有的对象来作为新创建对象的原型（<code>prototype</code>）。</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong><code>Object.prototype</code> 是原型链的终点，所有对象都是从它继承了方法和属性。<code>Object.prototype</code> 的 <code>__proto__</code> 指向 <code>null</code>。</strong></p>
</li>
<li>
<p>原型的动态性：从原型上搜索值的过程是动态的，所以即使实例在修改原型之前已经存在，任何时候对原型对象所做的修改也会在实例上反映出来。</p>
</li>
<li>
<p>原型的问题：源自它的共享特性，来自于包含引用值的属性。</p>
</li>
</ul>`,readingTime:{minutes:8.07,words:2421},title:"原型与继承",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B.html",{loader:()=>g(()=>import("./基础类型.html-DV6BMsM_.js"),__vite__mapDeps([136,1])),meta:{date:1681141522e3,excerpt:`
<h2>Undefined</h2>
<p>一个没有被赋值的变量的类型是 <code>undefined</code>。如果方法或者是语句中操作的变量没有被赋值，则会返回 <code>undefined</code>。转为数值时为 <code>NaN</code>。</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 变量声明了，但没有赋值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> foo</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">foo</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // undefined</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 对象没有赋值的属性</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> obj</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">attr</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // undefined</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 调用函数时，应该提供的参数没有提供，该参数等于 undefined</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> fun</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// undefined</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> a</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">fun</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 函数没有返回值时，默认返回 undefined</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> fun</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">fun</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// undefined</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:56.26,words:16878},title:"基础类型",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%AF%B9%E8%B1%A1.html",{loader:()=>g(()=>import("./对象.html-CrkAVF4Z.js"),__vite__mapDeps([137,1])),meta:{date:1681788517e3,excerpt:`
<h2>Object 概述</h2>
<p><code>Object</code> 用于存储各种键值集合和更复杂的实体，所有引用类型都从它继承了基本的行为。创建 <code>Object</code> 有两种方式：</p>
<ul>
<li>使用 <code>new</code> 操作符和 <code>Object</code> 构造函数。</li>
<li>使用对象字面量（object literal）表示法。在使用对象字面量表示法定义对象时，并不会实际调用 <code>Object</code> 构造函数。</li>
</ul>
<p>如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有变量。</p>`,readingTime:{minutes:27.58,words:8274},title:"Object",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%BC%82%E6%AD%A5.html",{loader:()=>g(()=>import("./异步.html-DenvprgP.js"),__vite__mapDeps([138,1])),meta:{date:1588925601e3,excerpt:`
<h2>进程与线程</h2>
<ul>
<li>
<p>进程是 CPU 资源分配的最小单位，是能拥有资源和独立运行的最小单位。</p>
</li>
<li>
<p>线程是 CPU 调度的最小单位，是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程。</p>
</li>
</ul>
<h2>单线程模型</h2>
<p>JavaScript 只在一个线程上运行。<strong>JavaScript 同时只能执行一个任务，其他任务都必须在后面排队等待。</strong></p>
<p>注意：JavaScript 只在一个线程上运行，不代表 JavaScript 引擎只有一个线程。事实上，JavaScript 引擎有多个线程，单个脚本只能在一个线程上运行（称为主线程），其他线程都是在后台配合。</p>`,readingTime:{minutes:4.39,words:1316},title:"异步操作",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%95%B0%E7%BB%84.html",{loader:()=>g(()=>import("./数组.html-DB_uz-DR.js"),__vite__mapDeps([139,1])),meta:{date:1594573929e3,excerpt:`
<h2>Array 概述</h2>
<p>数组是一种<strong>类列表对象</strong>，是值的有序集合，它的键名是按次序排列的一组整数（0，1，2...）。</p>
<ul>
<li>
<p>JavaScript 数组使用一个 32 位整数保存数组的元素个数。数组的索引从 <code>0</code> 开始，数组最大能容纳 <code>4294967295</code>（即 <code>2^32-1</code>）个元素。</p>
<p>数组元素是对象属性，JavaScript 语法要求使用方括号表示法（或用引号包裹数组下标）访问以数字开头的属性。</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> arr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'a'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'b'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'c'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'d'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'e'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'f'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// JavaScript 引擎通过隐式的 toString，将 arr[1] 中的 1 强制转换为字符串。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1.00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'1'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// b</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// '1' 和 '01' 将指向 arr 对象上的两个不同的槽位</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'01'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// undefined</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 使用 Object.keys 方法返回数组的所有键名</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> arr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'a'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'b'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'c'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'d'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'e'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'f'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// ['0', '1', '2', '3', '4', '5']</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>每个 JavaScript 数组都有一个 <code>length</code> 属性，该属性是一个动态值。针对非稀疏数组，<code>length</code> 属性就是数组元素的个数；针对稀疏数组，<code>length</code> 比所有元素的索引都要大。</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> arr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'a'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'b'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'c'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// arr.length 为 3</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 设置数组的 length 属性【小于】当前数组成员个数的值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 该数组的成员数量会自动【减少】到 length 设置的值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// ['a', 'b']</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 设置数组的 length 属性【大于】当前数组成员个数的值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 该数组的成员数量会自动【增加】到 length 设置的值，新增的位置都是空位</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 读取新增的位置会返回 undefined</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 4</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// ['a', 'b', empty × 2]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 清空数组的一个有效方法，就是设置数组的 length 属性为 0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 设置数组的 length 属性为不合法的值，JavaScript 会报错</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // Uncaught RangeError: Invalid array length</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">pow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Uncaught RangeError: Invalid array length</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'abc'</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // Uncaught RangeError: Invalid array length</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 数组本质上是一种对象，可以为数组添加属性，但是这影响 length 属性的值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// length 属性的值等于最大的数字键加 1，数组如果没有整数键，所以 length 属性保持为 0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> arr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> []</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'abc'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'abc'</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'abc'</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// [abc: 'abc', 2.1: 'abc']</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 数组的键名添加超过范围的数值，该键名会自动转为字符串</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> arr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> []</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'a'</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">pow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'b'</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// [-1: 'a', 4294967296: 'b']</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 'a'</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">4294967296</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 'b'</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>JavaScript 数组是<strong>动态的</strong>，并且可以包含不同的数据类型。</p>
<ul>
<li>在创建数组时无需声明一个固定的大小或者在数组大小变化时无需重新分配空间。</li>
<li>数组中包含数组称之为多维数组。可以通过将两组方括号链接在一起来访问数组内的另一个数组。</li>
</ul>
</li>
<li>
<p>JavaScript 数组不是关联数组（具有命名索引的数组，可以使用字符串或者其他类型的值作为索引），不能使用任意字符串作为索引访问数组元素，必须使用非负整数（或者非负整数的字符串形式）作为索引访问。</p>
</li>
<li>
<p>JavaScript 数组可能是稀疏数组，<strong>数组元素的索引不一定要连续的</strong>，它们之间可以有空缺。</p>
<ul>
<li>
<p>稀疏数组的特性</p>
<ul>
<li>含有空元素 <code>empty</code> 的数组。索引不连续，数组长度大于元素个数的数组。数组的空位是可读取的，返回 <code>undefined</code> 。</li>
<li>在大多数遍历数组的方法中，遇到 <code>empty</code> 元素的时候，<code>callback</code> 函数是不会执行的。比如 <code>forEach</code> 、 <code>for...in</code> 以及 <code>Object.keys</code> 方法进行遍历，空位都会被跳过。如果某个位置是 <code>undefined</code>，遍历的时候则不会被跳过。</li>
<li>稀疏数组在访问元素的速度上比密集数组慢。</li>
<li>稀疏数组在一些数组方法中与密集数组存在差异。</li>
</ul>
</li>
<li>
<p>生成稀疏数组</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> sparseArr01</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'sparseArr01 : '</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">sparseArr01</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// sparseArr02 : [empty × 5]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> sparseArr02</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> []</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">sparseArr02</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 4</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'sparseArr02 : '</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">sparseArr02</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// sparseArr02 : [empty × 4, 5]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> sparseArr03</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> []</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">sparseArr03</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 5</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'sparseArr03 : '</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">sparseArr03</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// sparseArr03 : [empty × 5]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> sparseArr04</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, , , , ,]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'sparseArr04 : '</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">sparseArr04</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// sparseArr04 : [0, empty × 4]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> sparseArr05</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">delete</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> sparseArr05</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'sparseArr05 : '</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">sparseArr05</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// sparseArr05 : [0, 1, 2, 3, empty]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p><code>empty</code> VS <code>undefined</code></p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> sparseArr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">sparseArr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// [empty × 3]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">sparseArr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> undefinedArr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">undefinedArr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// [undefined, undefined, undefined]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">undefinedArr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">sparseArr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">item</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 无 console.log 输出</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">undefinedArr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">item</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 输出如下：</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// undefined</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// undefined</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 使用 in 运算符判断指定属性是否在指定对象或原型链中</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// sparseArr 的键名都是空的</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// undefinedArr 的键名是有值的</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> sparseArr</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // false</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> undefinedArr</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // true</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>稀疏数组转密集数组</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> sparseArr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, , , , ,]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'sparseArr : '</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">sparseArr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// sparseArr : [0, empty × 4]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">Array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">apply</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">sparseArr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// [0, undefined, undefined, undefined, undefined]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">Array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">sparseArr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// [0, undefined, undefined, undefined, undefined]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">sparseArr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// // [0, undefined, undefined, undefined, undefined]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>
</li>
</ul>`,readingTime:{minutes:52.55,words:15765},title:"Array",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%B1%BB%E5%9E%8B%E6%A6%82%E8%BF%B0.html",{loader:()=>g(()=>import("./类型概述.html-DMSl10OM.js"),__vite__mapDeps([140,1])),meta:{date:1681141501e3,excerpt:`
<h2>原始值（primitive value）</h2>
<p>原始值（primitive value）是最简单的数据，也称为原始类型。</p>
<ul>
<li><code>Undefined</code> ：一个声明未定义的变量的初始值，或没有实际参数的形式参数。</li>
<li><code>Null</code> ：表示一个空对象指针。</li>
<li><code>Boolean</code> ：布尔值，取值仅能为 <code>true</code>（真）和 <code>false</code>（假）的数据类型。</li>
<li><code>Number</code> ：64 位双精度浮点型的数字数据类型。</li>
<li><code>Bigint</code> ：表示大于 <code>2^53 - 1</code> 的整数，<code>BigInt</code> 可以表示任意大的整数。</li>
<li><code>String</code> ：字符串，用于表示文本的字符序列。</li>
<li><code>Symbol</code> ：<code>Symbol()</code> 函数会返回 <code>symbol</code> 类型的值，<code>symbol</code> 值都是唯一的。一个 <code>symbol</code> 值能作为对象属性的标识符，这是该数据类型仅有的目的。</li>
</ul>`,readingTime:{minutes:14.6,words:4381},title:"类型概述",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82.html",{loader:()=>g(()=>import("./网络请求.html-CbK7ygGZ.js"),__vite__mapDeps([141,1])),meta:{date:1700736799e3,excerpt:`
<h2>XMLHttpRequest 对象</h2>
<p><code>XMLHttpRequest</code>（XHR）对象用于与服务器交互。通过 <code>XMLHttpRequest</code> 可以在不刷新页面的情况下请求特定 URL，获取数据。</p>
<h3>XMLHttpRequest 实例属性</h3>
<ul>
<li>
<p><code>XMLHttpRequest.readyState</code> ： 返回一个 <code>XMLHttpRequest</code> 代理当前所处的状态。一个 XHR 代理总是处于下列状态中的一个：</p>
<table>
<thead>
<tr>
<th style="text-align:center">值</th>
<th style="text-align:center">状态</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>0</code></td>
<td style="text-align:center"><code>UNSENT</code></td>
<td style="text-align:left"><code>XMLHttpRequest</code> 代理已创建，但尚未调用 <code>open()</code> 方法</td>
</tr>
<tr>
<td style="text-align:center"><code>1</code></td>
<td style="text-align:center"><code>OPENED</code></td>
<td style="text-align:left"><code>open()</code> 方法已经被调用，可以使用 <code>XMLHttpRequest</code> 实例的 <code>setRequestHeader()</code> 方法，设定 HTTP 请求的头信息</td>
</tr>
<tr>
<td style="text-align:center"><code>2</code></td>
<td style="text-align:center"><code>HEADERS_RECEIVED</code></td>
<td style="text-align:left"><code>send()</code> 方法已经被调用，并且头部和状态已经可获得</td>
</tr>
<tr>
<td style="text-align:center"><code>3</code></td>
<td style="text-align:center"><code>LOADING</code></td>
<td style="text-align:left">响应体部分正在被接收。<code>responseText</code> 属性已经包含部分数据</td>
</tr>
<tr>
<td style="text-align:center"><code>4</code></td>
<td style="text-align:center"><code>DONE</code></td>
<td style="text-align:left">请求操作已经完成。服务器返回的数据已经完全或失败</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><code>XMLHttpRequest.response</code> ： 只读。返回响应的正文（即 HTTP 回应的 body 部分）。返回的类型为 <code>ArrayBuffer</code>、<code>Blob</code>、<code>Document</code>、<code>JavaScript Object</code> 或字符串中的一个，取决于请求的 <code>responseType</code> 属性。</p>
<ul>
<li>如果请求未成功或尚未发送，则返回 <code>null</code>。</li>
<li>如果 <code>responseType</code> 属性为 <code>"text"</code> 或 <code>""</code> （空字符串），在请求状态为 <code>LOADING</code> 时，<code>response</code> 属性包含到目前为止该请求已经取得的内容。</li>
</ul>
</li>
<li>
<p><code>XMLHttpRequest.responseType</code> ： 枚举字符串。用于指定响应中包含的数据类型。</p>
<ul>
<li>该属性可写。在调用 <code>open()</code> 方法之后、调用 <code>send()</code> 方法之前，可设置该属性的值。</li>
<li>如果 <code>responseType</code> 设为 <code>""</code> （空字符串），等同于默认值 <code>"text"</code>。</li>
<li><code>responseType</code> 属性枚举值
<ul>
<li><code>""</code>（空字符串） ： 等同于 <code>"text"</code> ，表示服务器返回文本数据。</li>
<li><code>"arraybuffer"</code> ： <code>ArrayBuffer</code> 对象，表示服务器返回二进制数组。</li>
<li><code>"blob"</code> ： <code>Blob</code> 对象，表示服务器返回二进制对象。</li>
<li><code>"document"</code> ： <code>Document</code> 对象，表示服务器返回一个文档对象。</li>
<li><code>"json"</code> ： JSON 对象。</li>
<li><code>"text"</code> ： 字符串。</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>XMLHttpRequest.responseText</code> ： 只读。返回从服务器接收到的字符串。只有 HTTP 请求完成接收以后，该属性才会包含完整的数据。</p>
</li>
<li>
<p><code>XMLHttpRequest.responseXML</code> ： 字符串。表示发送数据的服务器的网址。</p>
<ul>
<li>如果 URL 为空，则返回空字符串。</li>
<li>如果 URL 有锚点，则位于 URL # 后面的内容会被删除。</li>
<li>如果 URL 有重定向，<code>responseURL</code> 的值会是经过多次重定向后的最终 URL。</li>
</ul>
</li>
<li>
<p><code>XMLHttpRequest.responseURL</code> ： 只读。返回从服务器接收到 HTML 或 XML 的 <code>Document</code> 对象。</p>
<ul>
<li>如果请求未成功，尚未发送，或者检索的数据无法正确解析为 XML 或 HTML，则为 <code>null</code>。</li>
<li>该属性生效的前提是 HTTP 回应的 <code>Content-Type</code> 头信息等于 <code>text/xml</code> 或 <code>application/xml</code> 。要求在发送请求前，<code>XMLHttpRequest.responseType</code> 属性要设为 <code>document</code>。</li>
<li>如果 HTTP 回应的 <code>Content-Type</code> 头信息不等于 <code>text/xml</code> 和 <code>application/xml</code> ，从 <code>responseXML</code> 获取数据（即把数据按照 DOM 格式解析），需要手动调用 <code>XMLHttpRequest.overrideMimeType()</code> 方法，强制进行 XML 解析。</li>
</ul>
</li>
<li>
<p><code>XMLHttpRequest.status</code> ： 只读。返回 <code>XMLHttpRequest</code> 响应中的 HTTP 状态码。</p>
<ul>
<li>请求成功状态码为 <code>200</code> ，如果服务器没有返回状态码，该属性默认是 <code>200</code> 。请求发出之前，该属性为 <code>0</code> 。</li>
<li>HTTP 响应状态码分类
<ul>
<li>信息响应 (<code>100</code> – <code>199</code>)</li>
<li>成功响应 (<code>200</code> – <code>299</code>)</li>
<li>重定向消息 (<code>300</code> – <code>399</code>)</li>
<li>客户端错误响应 (<code>400</code> – <code>499</code>)</li>
<li>服务端错误响应 (<code>500</code> – <code>599</code>)</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>XMLHttpRequest.statusText</code> ： 服务器返回的一个 <code>DOMString</code> 类型的文本信息（包含了响应的 HTTP 状态码）。</p>
</li>
<li>
<p><code>XMLHttpRequest.timeout</code> ： 表示请求的超时时间（毫秒），超过该时长，请求会自动终止。默认值为 <code>0</code> ，表示没有超时限制。</p>
</li>
<li>
<p><code>XMLHttpRequest.upload</code> ： 返回一个 <code>XMLHttpRequestUpload</code> 对象，用来表示文件上传的进度。可以通过对其绑定事件来监听上传进度。</p>
<table>
<thead>
<tr>
<th style="text-align:center">事件</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>onloadstart</code></td>
<td style="text-align:left">获取开始</td>
</tr>
<tr>
<td style="text-align:center"><code>onprogress</code></td>
<td style="text-align:left">数据传输进行中</td>
</tr>
<tr>
<td style="text-align:center"><code>onabort</code></td>
<td style="text-align:left">获取操作终止</td>
</tr>
<tr>
<td style="text-align:center"><code>onerror</code></td>
<td style="text-align:left">获取失败</td>
</tr>
<tr>
<td style="text-align:center"><code>onload</code></td>
<td style="text-align:left">获取成功</td>
</tr>
<tr>
<td style="text-align:center"><code>ontimeout</code></td>
<td style="text-align:left">获取操作在用户规定的时间内未完成</td>
</tr>
<tr>
<td style="text-align:center"><code>onloadend</code></td>
<td style="text-align:left">获取完成（不论成功与否）</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><code>XMLHttpRequest.withCredentials</code> ： 布尔值，表示跨域请求时，用户信息（比如 <code>Cookie</code> 和认证的 HTTP 头信息）是否会包含在请求之中，默认为 <code>false</code> 。</p>
<ul>
<li>同源请求设置 <code>withCredentials</code> 无效。</li>
<li>为了让这个属性生效，服务器必须显式返回 <code>Access-Control-Allow-Credentials</code> 头信息。</li>
</ul>
</li>
</ul>`,readingTime:{minutes:25.53,words:7658},title:"网络请求",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0.html",{loader:()=>g(()=>import("./工具函数.html-BVJZ1Ipl.js"),__vite__mapDeps([142,1])),meta:{date:1584981824e3,excerpt:`
<h2>判断类型</h2>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> typeOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> toString</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">prototype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> map</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    '[object Boolean]'</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'boolean'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    '[object Number]'</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'number'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    '[object String]'</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'string'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    '[object Function]'</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'function'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    '[object Array]'</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'array'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    '[object Date]'</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'date'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    '[object RegExp]'</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'regExp'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    '[object Undefined]'</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'undefined'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    '[object Null]'</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'null'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    '[object Object]'</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'object'</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  };</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:.45,words:135},title:"工具函数",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81.html",{loader:()=>g(()=>import("./手写代码.html-DuSqBD01.js"),__vite__mapDeps([143,1])),meta:{date:1594551645e3,excerpt:`
<h2>深度比较，模拟 lodash.isEqual</h2>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 判断是否是对象或数组</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> isObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD"> typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> obj</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'object'</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> obj</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> !==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> null</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> isEqual</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">obj1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">obj2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">!</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">isObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">obj1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">||</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> !</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">isObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">obj2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 值类型（注意，参数 equal 的一般不会是函数）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> obj1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> obj2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">obj1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ===</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> obj2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 两个都是对象或数组，而且不相等</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 1. 先取出 obj1 和 obj2 的 keys，比较个数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> obj1Keys</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">obj1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> obj2Keys</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">obj2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">obj1Keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> !==</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> obj2Keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> false</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 2. 以 obj1 为基数，和 obj2 一次递归比较</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> key</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> obj1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 比较当前 key 的 val —— 递归</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> res</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> isEqual</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">obj1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">], </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">obj2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">])</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">!</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> false</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 全相等</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:4.13,words:1239},title:"手写代码",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/%E7%BD%91%E9%A1%B5%E6%88%AA%E5%B1%8F.html",{loader:()=>g(()=>import("./网页截屏.html-qtZkeC9m.js"),__vite__mapDeps([144,1])),meta:{date:1627316948e3,category:["JavaScript"],tag:["网页截屏"],excerpt:`
<h2><a class="header-anchor" href="#puppeteer"><span></span></a><a href="http://puppeteerjs.com/" target="_blank" rel="noopener noreferrer">Puppeteer</a></h2>
<p>Puppeteer 是一个 Node 库，它提供了一个高级 API 来通过 DevTools 协议控制 Chromium 或 Chrome。Puppeteer 默认以 headless 模式运行。可实现：</p>
<ul>
<li>生成页面 PDF。</li>
<li>抓取 SPA（单页应用）并生成预渲染内容（即“SSR”（服务器端渲染））。</li>
<li>自动提交表单，进行 UI 测试，键盘输入等。</li>
<li>创建一个时时更新的自动化测试环境。 使用最新的 JavaScript 和浏览器功能直接在最新版本的Chrome中执行测试。</li>
<li>捕获网站的 timeline trace，用来帮助分析性能问题。</li>
<li>测试浏览器扩展。</li>
</ul>`,readingTime:{minutes:1.81,words:544},title:"网页截屏",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E7%AE%97%E6%B3%95/",{loader:()=>g(()=>import("./index.html-BfWg7tMP.js"),__vite__mapDeps([145,1])),meta:{date:1603019226e3,title:"",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/SOLID.html",{loader:()=>g(()=>import("./SOLID.html-Df2vICSF.js"),__vite__mapDeps([146,1])),meta:{date:1702365993e3,excerpt:`
<h2>面向对象程序设计</h2>
<p>面向对象程序设计（OOP，Object-oriented programming）是种具有对象概念的编程典范，同时也是一种程序开发的抽象方针。</p>
<ul>
<li>它可能包含数据、特性、代码与方法。</li>
<li>对象则指的是类（class）的实例。</li>
<li>它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性，对象里的程序可以访问及经常修改对象相关连的数据。</li>
</ul>
<p>面向对象程序设计的基本概念：</p>
<ul>
<li><strong>类与对象</strong>：
<ul>
<li>类：定义事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。</li>
<li>对象：类的实例（Instance），可以调用类中的方法。</li>
</ul>
</li>
<li><strong>封装</strong>：通过限制只有特定类的对象可以访问该特定类的成员，通常利用接口实现消息的传入传出。通常来说，成员的访问权限被分为 3 种：公有成员（public）、私有成员（private）以及保护成员（protected）。</li>
<li><strong>继承</strong>：根据已有类创建新类，子类继承父类。
<ul>
<li>子类比父类要更加具体化。</li>
<li>如果父类实现了某个接口，那么其所有子类都必须实现该接口。</li>
</ul>
</li>
<li><strong>多态</strong>：由继承而产生的相关的不同的类，其对象对同一消息会做出不同的响应。程序能够检测对象所属的实际类，并在当前上下文不知道其真实类型的情况下调用其实现的能力。</li>
</ul>`,readingTime:{minutes:3.99,words:1196},title:"设计原则",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html",{loader:()=>g(()=>import("./创建型设计模式.html-BjESa62p.js"),__vite__mapDeps([147,1])),meta:{date:1702365993e3,excerpt:`
<p>创建型模式提供创建对象的机制，增加已有代码的灵活性和可复用性。</p>
<h2>工厂模式 （Factory Method）</h2>
<p><strong>在父类中提供一个创建对象的方法，允许子类决定实例化对象的类型。</strong></p>
<p>适合应用场景：</p>
<ul>
<li>无法预知对象确切类别及其依赖关系时。可以将创建产品的代码与实际使用产品的代码分离，从而能在不影响其他代码的情况下扩展产品创建部分代码。</li>
<li>希望用户能扩展软件库或框架的内部组件时。在使用子类替代标准组件时，可以将各框架中构造组件的代码集中到单个工厂方法中，并在继承该组件之外允许任何人对该方法进行重写。</li>
<li>希望复用现有对象来节省系统资源，而不是每次都重新创建对象。</li>
</ul>`,readingTime:{minutes:15.07,words:4520},title:"创建型设计模式",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html",{loader:()=>g(()=>import("./结构型设计模式.html-DNSRxqPF.js"),__vite__mapDeps([148,1])),meta:{date:1702365993e3,excerpt:`
<p>结构型模式介绍如何将对象和类组装成较大的结构，并同时保持结构的灵活和高效。</p>
<h2>适配器模式 （Adapter）</h2>
<p><strong>能使接口不兼容的对象能够相互合作。</strong></p>
<p>适合应用场景：</p>
<ul>
<li>希望使用某个类，但是其接口与其他代码不兼容时，可以使用适配器类。适配器模式允许创建一个中间层类，其可作为代码与遗留类、第三方类或提供怪异接口的类之间的转换器。</li>
<li>需要复用这样一些类，他们处于同一个继承体系，并且他们又有了额外的一些共同的方法，但是这些共同的方法不是所有在这一继承体系中的子类所具有的共性。可以将缺少功能的对象封装在适配器中，从而动态地获取所需功能。</li>
</ul>`,readingTime:{minutes:21.16,words:6348},title:"结构型设计模式",type:"article"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html",{loader:()=>g(()=>import("./行为型设计模式.html-CrJT2fNj.js"),__vite__mapDeps([149,1])),meta:{date:1702365993e3,excerpt:`
<p>行为模式负责对象间的高效沟通和职责委派。</p>
<h2>职责链模式 （Chain of Responsibility）</h2>
<p><strong>允许将请求沿着处理者链进行发送。收到请求后，每个处理者均可对请求进行处理，或将其传递给链上的下个处理者。</strong></p>
<p>适合应用场景：</p>
<ul>
<li>当程序需要使用不同方式处理不同种类请求，而且请求类型和顺序预先未知时，可以使用责任链模式。该模式能将多个处理者连接成一条链。接收到请求后，它会“询问”每个处理者是否能够对其进行处理。这样所有处理者都有机会来处理请求。</li>
<li>当必须按顺序执行多个处理者时，可以使用责任链模式。无论以何种顺序将处理者连接成一条链，所有请求都会严格按照顺序通过链上的处理者。</li>
<li>如果所需处理者及其顺序必须在运行时进行改变，可以使用责任链模式。如果在处理者类中有对引用成员变量的设定方法，将能动态地插入和移除处理者，或者改变其顺序。</li>
</ul>`,readingTime:{minutes:31.73,words:9518},title:"行为型设计模式",type:"article"}}],["/%E5%89%8D%E7%AB%AF/Node/Nestjs/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html",{loader:()=>g(()=>import("./基础知识.html-zakP0o3P.js"),__vite__mapDeps([150,1])),meta:{date:1744299598e3,excerpt:`
<p></p>
`,readingTime:{minutes:.01,words:3},title:"Nestjs",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E4%BC%98%E5%8C%96/%E5%85%B6%E4%BB%96%E4%BC%98%E5%8C%96.html",{loader:()=>g(()=>import("./其他优化.html-DnrEOWye.js"),__vite__mapDeps([151,1])),meta:{date:1671788383e3,excerpt:`
<ul>
<li>
<p>防抖：一般用于表单搜索，点击事件等场景，为了防止短时间内多次触发事件。</p>
</li>
<li>
<p>节流：一般为了降低函数执行的频率，比如滚动条滚动。</p>
</li>
<li>
<p>按需引入：使用 UI 框架（例如：Ant Design）时，按需引入相关组件。</p>
</li>
<li>
<p>React 动画相关</p>
<ul>
<li>可使用 <code>classnames</code> npm 库动态添加类名，实现动画切换。该方式既不需要频繁 <code>setState</code> ，也不需要改变 DOM 。</li>
<li>操纵原生 DOM 。通过获取原生 DOM ，然后单独操作 DOM 实现动画功能，可以避免了 <code>setState</code> 改变带来 React Fiber 深度调和渲染的影响。</li>
<li>当使用 <code>setState</code> 实时改变 DOM 元素状态的是，尽量采用 CSS3 ， CSS3 开启硬件加速，使 GPU (Graphics Processing Unit) 发挥功能，从而提升性能。</li>
</ul>
</li>
<li>
<p>及时清除定时器/延时器/监听器。在对应的生命周期，进行清除，不然可能会造成内部泄露的情况。</p>
</li>
<li>
<p>合理使用 <code>state</code> 。对于视图更新不依赖于当前 <code>state</code> 时</p>
<ul>
<li>在类组件中，可以挂载到当前实例 <code>this</code>，避免通过 <code>state</code> 管理。</li>
<li>在函数组件中，可以通过 <code>useRef</code> 缓存数据。<code>useRef</code> 可以创建出一个 <code>ref</code> 原始对象，只要组件没有销毁，<code>ref</code> 对象就一直存在，可以把一些不依赖于视图更新的数据储存到 <code>ref</code> 对象中。</li>
</ul>
</li>
<li>
<p>不要在 hooks 的参数中，执行函数或者 new 实例。</p>
<ul>
<li>
<p>函数每次 rerender 都会执行 hooks ，在执行 hooks 函数的同时，也会执行函数的参数（如，代码片段中的 <code>fn()</code> 和 <code>new Fn()</code>），每一次 rerender 都会执行 fn 或者是 new 一个实例。</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> hook1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> useRef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">())</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> hook2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> useRef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">())</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>函数组件在初始化和更新流程中，会使用不同的 hooks 对象。大部分的 hooks 参数都作为初始化的参数，在更新阶段压根没有用到，那么传入的参数也就没有了意义。</p>
</li>
</ul>
</li>
</ul>`,readingTime:{minutes:1.68,words:503},title:"其他优化",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E4%BC%98%E5%8C%96/%E5%A4%84%E7%90%86%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE.html",{loader:()=>g(()=>import("./处理海量数据.html-UFwoEF-u.js"),__vite__mapDeps([152,1])),meta:{date:1671782601e3,excerpt:`
<p>根据 W3C 性能小组的介绍，超过 50ms 的任务就是长任务。</p>
<ul>
<li><code>0 - 16 ms</code> : 人们特别擅长跟踪运动，如果动画不流畅，他们就会对运动心生反感。用户可以感知每秒渲染 60 帧的平滑动画转场。也就是每帧 16 毫秒(包括浏览器将新帧绘制到屏蒂上所需的时间)，留给应用大约 10 毫秒的时间来生成一帧。</li>
<li><code>0 - 100 ms</code> : 在此时间窗口内响应用户操作，他们会觉得可以立即获得结果。时间再长，操作与反应之间的连接就会中断。</li>
<li><code>100 - 300 ms</code> : 用户会遇到轻微可觉察的延迟。</li>
<li><code>300 - 1000 ms</code> : 在此窗口内，延迟感觉像是任务自然和持续发展的一部分。对于网络上的大多数用户，加载页面或更改视图代表着一个任务。</li>
<li><code>1000+ ms</code> : 超过 1 秒，用户的注意力将离开他们正在执行的任务。</li>
<li><code>10000+ ms</code> : 用户感到失望，可能会放弃任务；之后他们或许不会再回来。</li>
</ul>`,readingTime:{minutes:5.49,words:1648},title:"处理海量数据",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E4%BC%98%E5%8C%96/%E6%B8%B2%E6%9F%93%E6%8E%A7%E5%88%B6.html",{loader:()=>g(()=>import("./渲染控制.html-CsOpa-uq.js"),__vite__mapDeps([153,1])),meta:{date:1671782574e3,excerpt:`
<p><code>render</code> 的作用是根据一次更新中产生的新状态值，通过 <code>React.createElement</code> 替换成新的状态，得到新的 <code>React Element</code> 对象。在新的 <code>Element</code> 对象上，保存了最新状态值。 <code>createElement</code> 会产生一个全新的 <code>props</code>。</p>
<p>React 会调和由 <code>render</code> 函数产生 <code>children</code>，将子代 <code>Element</code> 变成 <code>Fiber</code>（在该过程中，如果存在 <code>alternate</code>，会复用 <code>alternate</code> 进行克隆，如果没有 <code>alternate</code> ，则会创建一个），将 <code>props</code> 变成 <code>pendingProps</code> ，至此当前组件更新完毕。如果 <code>children</code> 是组件，会继续重复上一步，直到全部 <code>Fiber</code> 调和完毕，完成 <code>render</code> 阶段。</p>`,readingTime:{minutes:11.18,words:3353},title:"React 渲染控制",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E4%BC%98%E5%8C%96/%E6%B8%B2%E6%9F%93%E8%B0%83%E4%BC%98.html",{loader:()=>g(()=>import("./渲染调优.html-DOzNTCBH.js"),__vite__mapDeps([154,1])),meta:{date:167178259e4,excerpt:`
<h2>React.Suspense 异步渲染</h2>
<p><code>React.Suspense</code> 使得组件可以“等待”某些操作结束后，再进行渲染。可以通过 <code>fallback</code> 属性指定加载指示器（loading indicator）。</p>
<p>目前，<code>React.Suspense</code> 仅支持的使用场景是：通过 <code>React.lazy</code> 动态加载组件。它将在未来支持其它使用场景，如数据获取等。</p>
<p>最佳实践是将 <code>React.Suspense</code> 置于需要展示加载指示器（loading indicator）的位置，而 <code>React.lazy</code> 则可被放置于任何想要做代码分割的地方。</p>`,readingTime:{minutes:4.7,words:1411},title:"React 渲染调优",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%8E%9F%E7%90%86/Context.html",{loader:()=>g(()=>import("./Context.html-Hsnug2u0.js"),__vite__mapDeps([155,1])),meta:{date:1677241803e3,excerpt:`
<ul>
<li>
<p><code>Provider</code> 传递流程：<code>Provider</code> 的更新，会深度遍历子代 <code>Fiber</code>，消费 <code>context</code> 的 <code>Fiber</code> 和父级链都会提升更新优先级。对于类组件的 <code>Fiber</code> ，会 <code>forceUpdate</code> 处理。接下来所有消费的 <code>Fiber</code>，都会 <code>beginWork</code> 。</p>
</li>
<li>
<p><code>context</code> 订阅流程： <code>contextType</code>、<code>useContext</code>、<code>Consumer</code> 会内部调用 <code>readContext</code>。<code>readContext</code> 会把 <code>Fiber</code> 上的 <code>dependencies</code> 属性和 <code>context</code> 对象建立起关联。</p>
</li>
</ul>`,readingTime:{minutes:7.58,words:2274},title:"Context 原理",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%8E%9F%E7%90%86/Fiber.html",{loader:()=>g(()=>import("./Fiber.html-D5R-QQpm.js"),__vite__mapDeps([156,1])),meta:{date:1675418223e3,excerpt:`
<h2>React 理念</h2>
<blockquote>
<p>React 是用 JavaScript 构建快速响应的大型 Web 应用程序的首选方式。</p>
</blockquote>
<p>React 关键是实现快速响应。制约快速响应的因素有：</p>
<ul>
<li>
<p>CPU 瓶颈。当遇到大计算量的操作或者设备性能不足使页面掉帧，导致卡顿。</p>
<ul>
<li>
<p>原因</p>
<p>JavaScript 引擎是单线程运行的，负责解析和执行 JavaScript 脚本程序。与 GUI 渲染线程互斥，防止渲染出现不可预期的结果。另外，异步 I/O 操作底层实际上可能是多线程的在驱动。</p>
<p>主流浏览器刷新频率是 60Hz （赫兹，频率的单位），即每 16.67ms （= 1000ms / 60Hz）浏览器刷新一次。每 16.67ms 时间内，需要完成的工作如下：</p>
<ul>
<li>
<p>输入事件（Input events）</p>
<ul>
<li>Blocking input events （阻塞输入事件）：如 <code>touch</code> 或 <code>wheel</code></li>
<li>Non-Blocking input events （非阻塞输入事件）：如 <code>click</code> 或 <code>keypress</code></li>
</ul>
</li>
<li>
<p>JavaScript 引擎解析执行：执行定时器（Timers）事件等回调</p>
</li>
<li>
<p>帧开始（Begin frame）：每一帧事件（Per frame events），如 <code>window resize</code> 、 <code>scroll</code> 、 <code>media query change</code> 、 <code>animation events</code></p>
</li>
<li>
<p>rAF（requestAnimationFrame）：执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。</p>
</li>
<li>
<p>页面布局（Layout） ：计算样式（Recalculate style）、更新布局（Update Layout）和 ResizeObserver（监视 Element 内容盒或边框盒或者 SVGElement 边界尺寸的变化）</p>
</li>
<li>
<p>绘制渲染（Paint）：合成更新（Compositing update）、重绘部分节点（Paint invalidation）和创建绘制记录（Paint Record）</p>
</li>
<li>
<p>执行 RIC （RequestIdleCallback）：插入一个函数，该函数将在浏览器空闲时期被调用</p>
<p>在浏览器繁忙的时候，可能不会有盈余时间，<code>requestIdleCallback</code> 回调可能就不会被执行。 为了避免饿死，可以通过 <code>requestIdleCallback</code> 的第二个参数指定一个超时时间。</p>
<p>同时，不建议在 <code>requestIdleCallback</code> 中进行 DOM 操作，因为这可能导致样式重新计算或重新布局(比如，操作 DOM 后马上调用 <code>getBoundingClientRect</code>)，时间很难预估，很有可能导致回调执行超时，从而掉帧。</p>
</li>
</ul>
<p></p>
<p>注：如果上述任意步骤占用时间过长，总时间超过过 16.67ms ，就会看到明显的卡顿。</p>
</li>
<li>
<p>解决方案</p>
<p>当 JavaScript 长时间执行时（如大量计算等），就会出现阻塞样式计算、绘制等工作，出现页面脱帧现象。</p>
<p>React 通过 Fiber 架构，使 Reconciliation （调和） 过程变成可中断的异步更新。</p>
<p>在浏览器每一帧的时间中，预留了时间给 JavaScript 线程，React 将渲染更新过程拆分为多个子任务。当预留时间不够用时，React 将线程控制权交还给浏览器执行样式布局和样式绘制等任务，进行 UI 渲染，React 则等待下一帧时间继续被中断的工作。</p>
</li>
</ul>
</li>
<li>
<p>I/O 瓶颈。发送网络请求后，由于需要等待数据返回才能进一步操作导致不能快速响应。</p>
<p>React 的解决方案是将人机交互研究的结果整合到真实的 UI 中 (opens new window)。</p>
<p>研究表明，在屏幕之间切换时显示过多的中间加载状态会使切换的速度变慢。从研究得知，悬停和文本输入之类的交互需要在很短的时间内处理，而点击和页面转换可以等待稍长时间而不会感到迟缓。</p>
<p>React 实现了 <code>Suspense</code> (opens new window)功能及配套的 hook —— <code>useDeferredValue</code></p>
</li>
</ul>`,readingTime:{minutes:12.94,words:3882},title:"Fiber",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%8E%9F%E7%90%86/Hooks.html",{loader:()=>g(()=>import("./Hooks.html-0cuRxacs.js"),__vite__mapDeps([157,1])),meta:{date:1675989831e3,excerpt:`
<h2>函数组件触发</h2>
<p>在 React Fiber Reconciler （调和）过程中，对于 <code>FunctionComponent</code> 类型（函数组件）的 <code>Fiber</code> ，会调用 <code>updateFunctionComponent()</code> 更新 <code>Fiber</code> 。</p>
<details class="hint-container details"><summary>updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) 函数</summary>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> updateFunctionComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">  current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">  workInProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">  Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">  nextProps</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">  renderLanes</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> context</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">!</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">disableLegacyContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> unmaskedContext</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getUnmaskedContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">workInProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    context</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getMaskedContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">workInProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">unmaskedContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> nextChildren</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> hasId</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  prepareToReadContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">workInProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">renderLanes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">enableSchedulingProfiler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    markComponentRenderStarted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">workInProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">__DEV__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // ... 省略 DEV 环境代码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    nextChildren</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> renderWithHooks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">      current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">      workInProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">      Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">      nextProps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">      context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">      renderLanes</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    hasId</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> checkDidRenderIdHook</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">enableSchedulingProfiler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    markComponentRenderStopped</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">current</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> !==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> null</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> !</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">didReceiveUpdate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    bailoutHooks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">workInProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">renderLanes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> bailoutOnAlreadyFinishedWork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">workInProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">renderLanes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getIsHydrating</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">&amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> hasId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    pushMaterializedTreeId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">workInProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // React DevTools reads this flag.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  workInProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">flags</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD"> |=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> PerformedWork</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  reconcileChildren</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">workInProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">nextChildren</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">renderLanes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> workInProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">child</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,readingTime:{minutes:26.62,words:7986},title:"Hooks 原理",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%8E%9F%E7%90%86/React%E4%BD%8D%E8%BF%90%E7%AE%97.html",{loader:()=>g(()=>import("./React位运算.html-CYd5h5Yu.js"),__vite__mapDeps([158,1])),meta:{date:1675758893e3,excerpt:`
<h2>位运算符</h2>
<h3>基本概念</h3>
<p>位运算符中的左右操作数转换为有符号 32 位整型二进制串（0 和 1 组成）， 且返回结果也是有符号 32 位整型。</p>
<ul>
<li>所以当操作数是浮点型时，首先会被转换成整型, 再进行位运算。对非 Number 类型使用位运算操作符时，会发生隐式转换。</li>
<li>当操作数过大, 超过了 <code>Int32</code> 范围, 超过的部分会被截取，取低位 <code>32bit</code> 。</li>
</ul>
<p>位运算符：</p>
<ul>
<li>按位与（<code>a &amp; b</code>）：在 a、b 的位表示中，每一个对应的位都为 1 则返回 1，否则返回 0</li>
<li>按位或（<code>a | b</code>）：在 a、b 的位表示中，每一个对应的位，只要有一个为 1 则返回 1，否则返回 0</li>
<li>按位异或（<code>a ^ b</code>）：在 a、b 的位表示中，每一个对应的位，两个不相同则返回 1，相同则返回 0</li>
<li>按位非（<code>~a</code>）：反转被操作数的位</li>
<li>左移（<code>a &lt;&lt; b</code>）：将 a 的二进制串向左移动 b 位，右边移入 0</li>
<li>算术右移（<code>a &gt;&gt; b</code>）：把 a 的二进制表示向右移动 b 位，丢弃被移出的所有位。（注：算术右移左边空出的位是根据最高位是 0 和 1 来进行填充的）</li>
<li>无符号右移 (左边空出位用 0 填充)（<code>a &gt;&gt;&gt; b</code>）：把 a 的二进制表示向右移动 b 位，丢弃被移出的所有位，并把左边空出的位都填充为 0</li>
</ul>`,readingTime:{minutes:7.27,words:2181},title:"React 位运算",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%8E%9F%E7%90%86/Reconciler.html",{loader:()=>g(()=>import("./Reconciler.html-1tCZmXDS.js"),__vite__mapDeps([159,1])),meta:{date:1675418244e3,excerpt:`
<p>在 React v16+ 中， Reconciler 与 Renderer 不再是交替工作。</p>
<ul>
<li>当 Scheduler 将任务交给 Reconciler 后，Reconciler 会为变化的虚拟 DOM 打上代表增/删/更新的标记。</li>
<li>整个 Scheduler 与 Reconciler 的工作都在内存中进行，只有当所有组件都完成 Reconciler 的工作，才会统一交给 Renderer。</li>
</ul>
<h2>Reconciler render 阶段</h2>
<p>Reconciler <code>render</code> 阶段开始于 <code>performSyncWorkOnRoot</code> 或 <code>performConcurrentWorkOnRoot</code> 函数的调用。</p>`,readingTime:{minutes:22.24,words:6671},title:"Reconciler",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%8E%9F%E7%90%86/Scheduler.html",{loader:()=>g(()=>import("./Scheduler.html-uzoMN8kv.js"),__vite__mapDeps([160,1])),meta:{date:1675418267e3,excerpt:`
<p>对于 React v15 版本，在 Reconciler 中，<code>mount</code> 的组件会调用 <code>mountComponent</code>，<code>update</code> 的组件会调用 <code>updateComponent</code>，这两个方法都会递归更新子组件。由于递归执行，所以更新一旦开始，中途就无法中断，当层级很深时，递归更新时间超过了 16ms，用户交互就会卡顿。</p>
<p>以浏览器每一帧渲染的时间中是否有剩余时间作为任务中断的标准，可以通过 <code>window.requestIdleCallback()</code> API ，该 API 通过插入一个函数，这个函数将在浏览器空闲时期被调用。部分浏览器已实现该 API （即：<code>requestIdleCallback</code>），但是该 API 以下问题：</p>`,readingTime:{minutes:25.26,words:7579},title:"Scheduler",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%8E%9F%E7%90%86/%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F.html",{loader:()=>g(()=>import("./事件系统.html-CtTBkDhr.js"),__vite__mapDeps([161,1])),meta:{date:1672477929e3,excerpt:`
<h2>原生 DOM 事件</h2>
<h3>注册事件</h3>
<ul>
<li>
<p>设置事件目标的事件属性。事件处理属性由 <code>on</code> + 事件名组成（比如：<code>onchange</code>、<code>onload</code>、<code>onmouseover</code>等）。</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">onload</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> shippingAddressDOM</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getElementById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'shippingAddress'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  shippingAddressDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">onsubmit</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>设置 HTML 标签元素的事件属性。</p>
<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">button</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> onclick</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">alert</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'Hello World!'</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>当指定一串 JavaScript 代码作为 HTML 事件处理程序属性的值时，浏览器会把代码转换为类似如下的函数</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">form</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {}) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        /* ... 这里是编码 */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p><code>EventTarget.addEventListener()</code>：将指定的监听器注册到 <code>EventTarget</code> 上，当该对象触发指定的事件时，指定的回调函数就会被执行。事件目标可以是一个文档上的元素 <code>Element</code>、<code>Document</code> 和 <code>Window</code>，以及任何支持事件的对象（比如 <code>XMLHttpRequest</code>）。</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addEventListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">listener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">useCapture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li><code>type</code> : 监听的事件类型（名称），大小写敏感。</li>
<li><code>listener</code> : 监听函数。当所监听的事件类型触发时，会调用该监听函数。</li>
<li><code>useCapture</code> : 可选，布尔值。<code>true</code> 表示监听函数将在捕获阶段（capture）触发，默认值为 <code>false</code>（监听函数只在冒泡阶段被触发）。</li>
</ul>
</li>
</ul>`,readingTime:{minutes:30.19,words:9058},title:"事件系统",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/Context.html",{loader:()=>g(()=>import("./Context.html-CKxRUvPi.js"),__vite__mapDeps([162,1])),meta:{date:1670826928e3,excerpt:`
<p>Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。例如：首选语言，UI 主题等。</p>
<h2>React.createContext</h2>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> MyContext</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> React</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">createContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">defaultValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>`,readingTime:{minutes:5.38,words:1613},title:"Context",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/JSX.html",{loader:()=>g(()=>import("./JSX.html-B8LgvPFH.js"),__vite__mapDeps([163,1])),meta:{date:1670415442e3,excerpt:`
<p>JSX 是一种嵌入式的类似 XML 的语法。它可以被转换成合法的 JavaScript，尽管转换的语义是依据不同的实现而定的。</p>
<h2>JSX 简介</h2>
<h3>JSX 嵌入表达式</h3>
<p>在 JSX 语法中，可以在大括号（ <code>{ xxx }</code> ）内放置任何有效的 JavaScript 表达式。</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> formatName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">firstName</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ' '</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">lastName</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> user</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  firstName</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'Harper'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  lastName</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'Perez'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> element</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;Hello, </span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">formatName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">!&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:10.74,words:3221},title:"JSX",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/LifeCycle.html",{loader:()=>g(()=>import("./LifeCycle.html-DUxnerJz.js"),__vite__mapDeps([164,1])),meta:{date:1670415526e3,excerpt:`
<h2>类组件生命周期</h2>
<p></p>
<p>React 生命周期图示： <a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram" target="_blank" rel="noopener noreferrer">https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram</a></p>
<h3>constructor</h3>
<p>在 React 组件挂载之前，会调用它的构造函数。在为 <code>React.Component</code> 子类实现构造函数时，应在其他语句之前调用 <code>super(props)</code>。</p>`,readingTime:{minutes:17.74,words:5321},title:"React 生命周期",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/Props.html",{loader:()=>g(()=>import("./Props.html-t7Uq9ncp.js"),__vite__mapDeps([165,1])),meta:{date:1670415504e3,excerpt:`
<h2>Props 的使用</h2>
<p>React 中的 <code>props</code> 在标签内部的属性和方法会绑定在 <code>props</code> 对象属性上，对于组件的插槽会被绑定在 <code>props</code> 的 <code>children</code> 属性中。</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> React</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'react'</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">useState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'react'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Child</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;Child Component&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Parent</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> props</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'Parent props : '</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">messageProps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">onClickProps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">ComponentProps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">renderFnProps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> props</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">    renderPropsChildrenFn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">    renderPropsChildrenComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">    renderPropsChildrenDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  ] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">children</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> renderPropsChildren</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> childrenProps</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 遍历渲染 props.children</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">children</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">childrenItem</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'childrenItem'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> childrenItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">React</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">isValidElement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">childrenItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> React</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">cloneElement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">          childrenItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">          { </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">childrenProps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">          childrenItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">children</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">childrenItem</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> instanceof</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> childrenItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">childrenProps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">childrenItem</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> instanceof</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HTMLElement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> childrenItem</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> null</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;【props - 属性】：</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">messageProps</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;【props - 渲染函数】：</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">renderFnProps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        【props - 组件】： &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ComponentProps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;【props - 插槽 - 渲染函数】：</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">renderPropsChildrenFn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;【props - 插槽 - 渲染组件】：</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">renderPropsChildrenComponent</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;【props - 插槽 - 渲染 DOM 节点】：</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">renderPropsChildrenDOM</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;【props - 插槽 - 遍历 props.children】：&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">renderPropsChildren</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">button</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> onClick</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> onClickProps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'onClick change content'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        Parent Component - button change messageProps</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> PropsContainer</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">setMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> useState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'Hello World!'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> handleClick</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> value</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    setMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Parent</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">        messageProps</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">message</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">        onClickProps</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">handleClick</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">        ComponentProps</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">Child</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">        renderFnProps</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;Render Function&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">        {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;Parent Slot Render Function&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;Parent Slot div Dom&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &lt;/</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Parent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD"> default</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> PropsContainer</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:5.77,words:1731},title:"Props",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/React%E7%BB%84%E4%BB%B6.html",{loader:()=>g(()=>import("./React组件.html-C81wRRzv.js"),__vite__mapDeps([166,1])),meta:{date:167041547e4,excerpt:`
<p>React 组件可以定义为 <code>class</code> 组件 或 函数组件 两种形式。</p>
<p>React 组件本质上就是类和函数，与常规的类和函数不同的是，组件承载了渲染视图的 UI 和更新视图的 <code>setState</code> 、 <code>useState</code> 等方法。</p>
<p>React 在底层逻辑上会像正常实例化类和正常执行函数那样处理的组件。因此，函数与类上的特性在 React 组件上同样具有，比如原型链，继承，静态属性等。</p>
<details class="hint-container details"><summary>类组件与函数组件示例</summary>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 类组件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Welcome</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B"> React</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  state</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">message</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \`Hello World!\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  sayHelloJs</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">message</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'Hello JavaScript!'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> })</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> style</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF">={{ marginTop: '20px' }}</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> onClick</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">sayHelloJs</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">        {</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">message</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 函数组件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> FunComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">setMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> useState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'Hello World!'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> onClick</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> setMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'Hello JavaScript!'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">message</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,readingTime:{minutes:21.03,words:6308},title:"React 组件",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/Ref.html",{loader:()=>g(()=>import("./Ref.html-B0rdtjC3.js"),__vite__mapDeps([167,1])),meta:{date:1670826917e3,excerpt:`
<p>Refs 提供了一种方式，允许访问 DOM 节点或在 render 方法中创建的 React 元素。</p>
<h2>创建 Ref</h2>
<h3>类组件 React.createRef</h3>
<p><code>React.createRef</code> 创建一个能够通过 <code>ref</code> 属性附加到 React 元素的 <code>ref</code>。</p>
<p><code>React.createRef</code> 一般用于类组件创建 Ref 对象，可以将 Ref 对象绑定在类组件实例上。</p>
<p>注意：不要在函数组件中使用 <code>React.createRef</code>，否则，会造成 Ref 对象内容丢失等情况。</p>`,readingTime:{minutes:8.68,words:2604},title:"Ref",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/State.html",{loader:()=>g(()=>import("./State.html-8OAjWhn3.js"),__vite__mapDeps([168,1])),meta:{date:1670415487e3,excerpt:`
<ul>
<li><code>legacy</code> 模式</li>
<li><code>blocking</code> 模式</li>
<li><code>concurrent</code> 模式</li>
</ul>
<h2>类组件中的 state</h2>
<h3>setState</h3>
<p><code>setState()</code> 将对组件 <code>state</code> 的更改排入队列，并通知 React 需要使用更新后的 <code>state</code> 重新渲染此组件及其子组件。<code>setState()</code> 并不总是立即更新组件，它会批量推迟更新。</p>`,readingTime:{minutes:10.12,words:3035},title:"State （Legacy 模式）",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/Transition.html",{loader:()=>g(()=>import("./Transition.html-Cy1cTLb8.js"),__vite__mapDeps([169,1])),meta:{date:1677241834e3,excerpt:`
<h2>startTransition</h2>
<h3>startTransition 的使用</h3>
<p><code>startTransition(scope)</code> ：允许在不阻塞 UI 的情况下更新状态</p>
<ul>
<li><code>scope</code> ：通过调用一个或者多个 set 函数来更新某些状态的回调函数。回调函数中的更新任务会被标记为过渡更新任务，在渲染并发的场景下，更新优先级会被降级，中断更新。</li>
</ul>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">startTransition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'react'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> TabContainer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">tab</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">setTab</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> useState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'about'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> selectTab</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">nextTab</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    startTransition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">      setTab</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">nextTab</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:3.63,words:1088},title:"Transition （过渡）",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/useSyncExternalStore.html",{loader:()=>g(()=>import("./useSyncExternalStore.html-BzGcndrW.js"),__vite__mapDeps([170,1])),meta:{date:1677244961e3,excerpt:`
<h2>useSyncExternalStore 的使用</h2>
<p><code>useSyncExternalStore</code> 能够让 React 组件在 <code>concurrent</code> 模式下安全地有效地读取外接数据源，在组件渲染过程中能够检测到变化，并且在数据源发生变化的时候，能够调度更新。当读取到外部状态发生了变化，会触发一个强制更新，来保证结果的一致性。</p>
<p><code>const snapshot = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot?)</code></p>`,readingTime:{minutes:4.41,words:1324},title:"useSyncExternalStore 订阅外部数据源",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html",{loader:()=>g(()=>import("./基础知识.html-CcnnrjfZ.js"),__vite__mapDeps([171,1])),meta:{date:1667803059e3,excerpt:`
<h2>其他</h2>
<ul>
<li>
<p>JSX</p>
<ul>
<li>变量、表达式</li>
<li>class style</li>
<li>子元素和组件</li>
<li>判断条件</li>
<li>渲染列表</li>
</ul>
</li>
<li>
<p>React 事件为何 bind this</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> React</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'React'</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Home</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">    super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">state</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">      name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'zhangsan'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">      list</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">id</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'id-1'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">title</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '标题1'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">id</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'id-2'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">title</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '标题2'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">id</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'id-3'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">title</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '标题3'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      ],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">clickHandle1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">clickHandle1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">p</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> onClick</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">clickHandle1</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;点击1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">p</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> onClick</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">clickHandle2</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;点击2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"www.baidu.com"</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> onClick</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">clickHandle3</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">          点击3</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">ul</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">          {</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            return</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            ;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">li</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">              key</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{item.</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">              onClick</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{this.clickHandler4(item.</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, item.title)}</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">            &gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">              index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">title</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">title</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">            &lt;/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">li</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">          })</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">ul</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // this - 使用 bind</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  clickHandle1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'this'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// this 默认为 undefined</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">      name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '测试'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // this - 使用静态方法</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  clickHandle2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">      name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '测试'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // event</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  clickHandle3</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> event</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">preventDefault</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 阻止默认行为</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">stopPropagation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 阻止冒泡</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'target'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 指向当前元素，即当前元素触发</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'current target'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">currentTarget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 指向当前元素，假象！！！</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 注意，event 其实是 React 封装的。可以看 __proto__.constructor 是 SyntheticEvent 组合事件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'event'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 不是原生的 Event ，原生的 MouseEvent</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'event.__proto__.constructor'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">__proto__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 原生 event 如下。其 __proto__.constructor 是 MouseEvent</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'nativeEvent'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">nativeEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'nativeEvent target'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">nativeEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 指向当前元素，即当前元素触发</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'nativeEvent current target'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">nativeEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">currentTarget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 指向 document ！！！</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 1. event 是 SyntheticEvent ，模拟出来 DOM 事件所有能力</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 2. event.nativeEvent 是原生事件对象</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 3. 所有的事件，都被挂载到 document 上</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 4. 和 DOM 事件不一样，和 Vue 事件也不一样</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 传递参数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  clickHandler4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">title</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">title</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'event'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 最后追加一个参数，即可接收 event</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>React 表单</p>
<ul>
<li>受控组件：表单的值受到了 this.setState 的控制</li>
<li>input textarea select 用 value</li>
<li>checked radio 用 checked</li>
</ul>
</li>
<li>
<p>React 父子组件通讯</p>
<ul>
<li>props 传递数据</li>
<li>props 传递函数</li>
<li>props 类型检查</li>
</ul>
</li>
<li>
<p>setState</p>
<ul>
<li>
<p>不可变值：不能直接修改 state 的值</p>
<ul>
<li>state 要在构造函数中定义</li>
<li>不要直接修改 state ，使用不可变值（函数式编程，纯函数）
<ul>
<li>不可变值 - 数组。(注意，不能直接对数组进行 push pop splice 等，这样违反不可变值)</li>
<li>不可变值 - 对象。(注意，不能直接对对象进行属性设置，这样违反不可变值)</li>
</ul>
</li>
</ul>
</li>
<li>
<p>setState 可能是异步更新（有可能是同步更新）</p>
<ul>
<li>
<p>单独使用是异步的</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    count</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 联想 Vue $nextTick - DOM</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'count by callback'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 回调函数中可以拿到最新的 state</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'count'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 异步的，拿不到最新值</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>setTimeout 中 setState 是同步的</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setTimeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">  this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    count</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'count in setTimeout'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>自己定义的 DOM 事件，setState 是同步的。再 componentDidMount 中</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">bodyClickHandler</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">  this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">      count</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'count in body event'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">componentDidMount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 自己定义的 DOM 事件，setState 是同步的</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addEventListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'click'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">bodyClickHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">componentWillUnmount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 及时销毁自定义 DOM 事件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">removeEventListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'click'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">bodyClickHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // clearTimeout</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>
</li>
<li>
<p>state 异步更新的话，更新前会被合并</p>
<ul>
<li>
<p>传入对象，会被合并（类似 Object.assign ）。执行结果只一次 +1</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  count</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  count</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  count</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>传入函数，不会被合并。执行结果是 +3</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">prevState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    count</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> prevState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">prevState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    count</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> prevState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">prevState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    count</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> prevState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener noreferrer">React 生命周期</a></p>
</li>
<li>
<p>React 高级特性</p>
<ul>
<li>
<p>函数组件</p>
<ul>
<li>纯函数，输入 props，输出 JSX</li>
<li>没有实例，没有生命周期，没有 state</li>
</ul>
</li>
<li>
<p>非受控组件：不会随着 state 的改变而改变</p>
<ul>
<li>ref （React.createRef()）</li>
<li>defaultValue defaultChecked</li>
<li>手动操作 DOM 元素</li>
<li>使用场景
<ul>
<li>必须手动操作 DOM 元素，setState 实现不了</li>
<li>文件上传 <code>&lt;input type="file" /&gt;</code></li>
<li>某些富文本编辑器，需要传入 DOM 元素</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Portals 使用场景</p>
<ul>
<li>overflow: hidden</li>
<li>父组件 z-index 值太小</li>
<li>fixed 需要放在 body 第一层级</li>
</ul>
</li>
<li>
<p>context</p>
</li>
<li>
<p>异步组件</p>
<ul>
<li>import()</li>
<li>React.lazy</li>
<li>React.Suspense</li>
</ul>
</li>
<li>
<p>性能优化</p>
<ul>
<li>shouldComponentUpdate
<ul>
<li>默认返回 true，即 React 默认重新渲染所有子组件 （React 默认：父组件有更新，子组件无条件更新）</li>
<li>必须配合 “不可变值” 一起使用</li>
<li>有性能问题时再考虑使用</li>
</ul>
</li>
<li>PureComponent 和 React.memo
<ul>
<li>PureComponent - shouldComponentUpdate 中实现了浅比较</li>
<li>memo，函数组件中的 PureComponent</li>
<li>浅比较已使用大部分情况（尽量不要做深度比较）</li>
</ul>
</li>
<li>不可变值 immutable.js
<ul>
<li>彻底拥抱“不可变值”</li>
<li>基于共享数据（不是深拷贝），速度好</li>
<li>需要一定学习成本</li>
</ul>
</li>
</ul>
</li>
<li>
<p>高阶组件 HOC：不是一种功能，而是一种模式</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> HOCFactory</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> Component</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HOC</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B"> React</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 在此定义多个组件的公用逻辑</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">...</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">props</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /&gt; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 返回拼装的结果</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> HOC</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> EnhancedComponent1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> HOCFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">WrappedComponent1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> EnhancedComponent2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> HOCFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">WrappedComponent2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>redux connect 是个高阶组件</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'react-redux'</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// connect 是高阶组件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> VisibleTodoList</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  mapStateToProps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  mapDispatchToProps</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">TodoList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>Render Props</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Render Props 的核心思想</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 通过一个函数将 class 组件的 state 作为 props 传递给纯函数组件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Factory</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B"> React</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">state</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      /* state 即多个组件的公共逻辑的数据 */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  /* 修改 state */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> App</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Factory</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">    render</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      /* render 是一个函数组件 */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">      props</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">          {</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">b</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>HOC vs Render Props</p>
<ul>
<li>HOC: 模式简单，但会增加组件层级</li>
<li>Render Props：代码简洁，学习成本较高</li>
<li>按需使用</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Redux 使用</p>
<ul>
<li>基本概念</li>
<li>单项数据流</li>
<li>react-redux</li>
<li>异步 action</li>
<li>中间件</li>
</ul>
</li>
<li>
<p>React 原理</p>
<ul>
<li>
<p>函数式编程</p>
<ul>
<li>一种编程范式，概念比较多</li>
<li>纯函数</li>
<li>不可变值</li>
</ul>
</li>
<li>
<p>vdom 和 diff</p>
<ul>
<li>React.createElement 即 h 函数，返回 vnode</li>
<li>第一个参数，可能是组件，也可能是 html tag</li>
<li>组件名，首字母必须大写（React 规定）</li>
</ul>
</li>
<li>
<p>jsx 本质（jsx 可以在<a href="https://www.babeljs.cn" target="_blank" rel="noopener noreferrer">babel</a>官网查看）</p>
<ul>
<li>jsx 等同于 vue 模板</li>
<li>vue 模板不是 html</li>
<li>jsx 不是 js</li>
</ul>
</li>
<li>
<p>合成事件
</p>
<ul>
<li>所有事件挂载到 document 上</li>
<li>event 不是原生的，是 SyntheticEvent 合成事件对象</li>
<li>和 Vue 事件不同，和 DOM 事件也不同</li>
<li>为何要合成事件机制
<ul>
<li>更好的兼容性和跨平台</li>
<li>挂载到 document，减少内存消耗，避免频繁解绑</li>
<li>方便事件的统一管理（如事务机制）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>setState 和 batchUpdate</p>
<ul>
<li>
<p>有时异步（普通使用），有时同步（setTimeout、DOM 事件）</p>
</li>
<li>
<p>有时合并（对象形式），有时不合并（函数形式）</p>
</li>
<li>
<p>后者比较好理解（像 Object.assign）</p>
</li>
<li>
<p>setState 主流程
</p>
<p></p>
<p></p>
</li>
<li>
<p>batchUpdate 机制</p>
<ul>
<li>能命中 batchUpdate 机制的情况
<ul>
<li>生命周期（和它调用的函数）</li>
<li>React 中注册的事件（和它调用的函数）</li>
<li>React 可以“管理”的入口</li>
</ul>
</li>
<li>不能命中 batchUpdate 机制的情况
<ul>
<li>setTimeout setInterval 等（和它调用的函数）</li>
<li>自定义的 DOM 事件（和它调用的函数）</li>
<li>React “管不到” 的入口</li>
</ul>
</li>
</ul>
</li>
<li>
<p>transaction 事务机制
</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ListDemo</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B"> React</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  increase</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 开始：处于 batchUpdate</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // isBatchUpdates = true</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 其他任何操作</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 结束</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // isBatchingUpdates = false</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>
</li>
<li>
<p>组件渲染过程</p>
<ul>
<li>props state</li>
<li>render() 生成 vnode</li>
<li>patch(elem, vnode)</li>
</ul>
</li>
<li>
<p>组件更新过程</p>
<ul>
<li>setState(newState) --&gt; dirtyComponents(可能有子组件)</li>
<li>render() 生成 newVnode</li>
<li>patch(vnode, newVnode)
<ul>
<li>reconciliation 阶段 - 执行 diff 算法，纯 js 计算</li>
<li>commit 阶段 - 将 diff 结构渲染 DOM</li>
</ul>
</li>
</ul>
</li>
<li>
<p>patch 不拆分阶段，可能会有的性能问题</p>
<ul>
<li>js 是单线程，且和 DOM 渲染共用一个线程</li>
<li>当组件足够复杂，组件更新时计算和渲染都压力大</li>
<li>同时再有 DOM 操作需求（动画，鼠标拖拽等），将卡顿</li>
</ul>
</li>
<li>
<p>解决方案 fiber</p>
<ul>
<li>将 reconciliation 阶段进行任务拆分（commit 无法拆分）</li>
<li>DOM 需要渲染时暂停，空闲时恢复</li>
<li>window.requestIdleCallback</li>
</ul>
</li>
</ul>
</li>
<li>
<p>React 组件如何通讯</p>
<ul>
<li>父子组件 props</li>
<li>自定义事件</li>
<li>redux 和 context</li>
</ul>
</li>
<li>
<p>JSX 本质是什么（可对比 Vue 的模板编译）</p>
<ul>
<li>createElement</li>
<li>执行返回 vnode</li>
</ul>
</li>
<li>
<p>context 是什么，有何用途</p>
<ul>
<li>父组件，向其下所有子组件传递信息</li>
<li>如一些简单的公用信息：主题色、语言等</li>
<li>复杂的公用信息，请用 redux</li>
</ul>
</li>
<li>
<p>shouldComponentUpdate 的用途</p>
<ul>
<li>性能优化</li>
<li>配合“不可变值”一起使用，否则会出错</li>
</ul>
</li>
<li>
<p>描述 redux 单项数据流</p>
</li>
<li>
<p>setState 是同步还是异步
</p>
</li>
</ul>`,readingTime:{minutes:6.41,words:1922},title:"React 基础",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/%E6%A8%A1%E5%9D%97%E5%8C%96CSS.html",{loader:()=>g(()=>import("./模块化CSS.html-DBYiYc5G.js"),__vite__mapDeps([172,1])),meta:{date:1670920456e3,excerpt:`
<p>在样式开发过程中，存在以下问题：</p>
<ul>
<li>
<p>全局污染</p>
<p>CSS 使用全局选择器机制来设置样式，优点是方便重写样式。缺点是所有的样式都是全局生效，样式可能被错误覆盖，为了提高样式权重会应用 <code>!important</code> 、 <code>行内样式</code> 或者 复杂的选择器权重进行处理。Web Components 标准中的 <code>Shadow DOM</code> 能彻底解决这个问题，但它的做法有点极端，样式彻底局部化，造成外部无法重写样式，损失了灵活性。</p>
</li>
<li>
<p>命名混乱</p>
<p>多人协同开发时为了避免样式冲突，选择器越来越复杂，容易形成不同的命名风格，很难统一。样式变多后，命名将更加混乱。</p>
</li>
<li>
<p>依赖管理不彻底</p>
<p>组件应该相互独立，引入一个组件时，应该只引入它所需要的 CSS 样式。Saas/Less 很难实现对每个组件都编译出单独的 CSS，引入所有模块的 CSS 又造成浪费。使用 JS 的模块化来管理 CSS 依赖是很好的解决办法，Webpack 的 <code>css-loader</code> 提供了这种能力。</p>
</li>
<li>
<p>无法共享变量</p>
<p>复杂组件要使用 JS 和 CSS 来共同处理样式，就会造成有些变量在 JS 和 CSS 中冗余，Sass/PostCSS/CSS 等都不提供跨 JS 和 CSS 共享变量这种能力。</p>
</li>
<li>
<p>代码压缩不彻底</p>
</li>
</ul>`,readingTime:{minutes:7.65,words:2294},title:"模块化 CSS",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%AE%9A%E4%B9%89Hooks.html",{loader:()=>g(()=>import("./自定义Hooks.html-Bmwe7RmU.js"),__vite__mapDeps([173,1])),meta:{date:1677241814e3,excerpt:`
<p>通过自定义 Hook，可以将组件逻辑提取到可重用的函数中。</p>
<h2>Hooks 特性</h2>
<ul>
<li>
<p>驱动条件：自定义 Hooks 驱动本质上就是函数组件的执行</p>
<ul>
<li>
<p><code>props</code> 改变带来的函数组件执行</p>
</li>
<li>
<p><code>useState</code> 、 <code>useReducer</code> 改变 <code>state</code> 引起函数组件的更新</p>
</li>
</ul>
</li>
<li>
<p>顺序原则：不能放在条件语句中，而且要保持执行顺序的一致性</p>
</li>
<li>
<p>条件限定：没有加条件限定，就有可能造成不必要的上下文的执行，或是组件的循环渲染执行</p>
</li>
<li>
<p>考虑可变性：考虑一些状态值发生变化，是否有依赖于当前值变化的执行逻辑或执行副作用</p>
<ul>
<li>
<p>对于依赖于可变性状态的执行逻辑，可以用 <code>useMemo</code> 来处理</p>
</li>
<li>
<p>对于可变性状态的执行副作用，可以用 <code>useEffect</code> 来处理</p>
</li>
<li>
<p>对于依赖可变性状态的函数或者属性，可以用 <code>useCallback</code> 来处理</p>
</li>
</ul>
</li>
<li>
<p>闭包效应</p>
<p>函数组件更新就是函数本身执行，一次更新所有含有状态的 Hooks （<code>useState</code> 和 <code>useReducer</code>）产生的状态 <code>state</code> 是重新声明的</p>
<p>如果 <code>useEffect</code> ， <code>useMemo</code> <code>，useCallback</code> 等 Hooks 内部如果引用了 <code>state</code> 或 <code>props</code> 的值，这些状态最后保存在了函数组件对应的 <code>Fiber</code> 上，此次函数组件执行完毕后，这些状态就不会被垃圾回收机制回收释放</p>
<p>造成的影响是 Hooks 如果没有把内部使用的 <code>state</code> 或 <code>props</code> 作为依赖项，内部就一直无法使用最新的 <code>props</code> 或者 <code>state</code></p>
<p>如何确认依赖关系：</p>
<ul>
<li>
<p>分析 Hooks 内部可能发生变化的状态，这个状态可以是 <code>state</code> 或者 <code>props</code></p>
</li>
<li>
<p>分析 <code>useMemo</code> 或者 <code>useCallback</code> 内部是否使用上述状态，或者是否关联使用 <code>useMemo</code> 或者 <code>useCallback</code> 派生出来的状态。如果有使用，则添加到 <code>deps</code> 依赖项中</p>
</li>
<li>
<p>分析 <code>useEffect</code>、<code>useLayoutEffect</code>、<code>useImperativeHandle</code> 内部是否使用上述两个步骤产生的值，以及依赖这些值进行的一些副作用。如果有使用，则添加到 <code>deps</code> 依赖项中</p>
</li>
</ul>
</li>
</ul>`,readingTime:{minutes:10.49,words:3146},title:"自定义 Hooks",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6.html",{loader:()=>g(()=>import("./高阶组件.html-B2MPSyXw.js"),__vite__mapDeps([174,1])),meta:{date:167136077e4,excerpt:`
<p>高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧，它是一种基于 React 的组合特性而形成的设计模式。具体而言，<strong>高阶组件是参数为组件，返回值为新组件的函数</strong>。</p>
<h2>常见高阶组件</h2>
<h3>属性代理</h3>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> proxyPropsHOC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B"> React</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      // 过滤掉非此 HOC 额外的 props，且不要进行透传</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">extraProp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">...</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">passThroughProps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">props</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      // 将 props 注入到被包装的组件中，</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      // 通常为 state 的值或者实例方法。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> injectedProp</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> someStateOrInstanceMethod</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      // 将 props 传递给被包装组件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Component</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> injectedProp</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">injectedProp</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">passThroughProps</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:7.39,words:2218},title:"高阶组件（HOC）",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E7%94%9F%E6%80%81/react-redux.html",{loader:()=>g(()=>import("./react-redux.html-CKHYuCQZ.js"),__vite__mapDeps([175,1])),meta:{date:1676567248e3,excerpt:`
<p>Redux 是 JavaScript 应用的状态容器，提供可预测的状态管理。</p>
<p>Redux 可以作为发布订阅模式的一个具体实现。Redux 都会创建一个 <code>store</code> ，里面保存了状态信息，改变 <code>store</code> 的方法 <code>dispatch</code> ，以及订阅 <code>store</code> 变化的方法 <code>subscribe</code> 。</p>
<ul>
<li><a href="https://redux.js.org/" target="_blank" rel="noopener noreferrer">Redux</a></li>
<li><a href="https://cn.redux.js.org/" target="_blank" rel="noopener noreferrer">Redux 中文官网</a></li>
</ul>`,readingTime:{minutes:13.08,words:3923},title:"Redux",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E7%94%9F%E6%80%81/react-router.html",{loader:()=>g(()=>import("./react-router.html-DVwXp0nc.js"),__vite__mapDeps([176,1])),meta:{date:1676282742e3,excerpt:`
<p>React Router 是完整的 React 路由解决方案。</p>
<ul>
<li><a href="https://reactrouter.com/en/main" target="_blank" rel="noopener noreferrer">React Router</a></li>
<li><a href="https://runebook.dev/zh/docs/react_router/-index-" target="_blank" rel="noopener noreferrer">React Router 6.4 [中文]</a></li>
</ul>
<h2>基本使用</h2>`,readingTime:{minutes:2.5,words:749},title:"React-Router v6.x",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2/Vue2%E5%9F%BA%E7%A1%80.html",{loader:()=>g(()=>import("./Vue2基础.html-DSwl1IZe.js"),__vite__mapDeps([177,1])),meta:{date:1589560467e3,excerpt:`
<h2>MVC 与 MVVM</h2>
<p></p>
<h3>MVC 的组成</h3>
<ul>
<li><strong>模型（Model）</strong> 用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法。</li>
<li><strong>视图（View）</strong> 能够实现数据有目的的显示。</li>
<li><strong>控制器（Controller）</strong> 起到不同层面间的组织作用，用于控制应用程序的流程。它处理事件并作出响应。事件包括用户的行为和数据 Model 上的改变。</li>
</ul>
<p>MVC 架构通常是使用控制器更新模型，视图从模型中获取数据去渲染。当用户有输入时，会通过控制器去更新模型，并且通知视图进行更新。</p>`,readingTime:{minutes:19.95,words:5985},title:"Vue 2.x 基础",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2/Vue2%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html",{loader:()=>g(()=>import("./Vue2实现原理.html-BCdtpTgc.js"),__vite__mapDeps([178,179,1])),meta:{date:1597238275e3,excerpt:`
<h2>全局概览</h2>
<p></p>
<p>Vue 2.x 基于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener noreferrer"><code>Object.defineProperty</code></a> 实现<strong>响应式系统</strong>。</p>
<h2>Object.defineProperty</h2>
<p><code>Object.defineProperty(obj, prop, descriptor)</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>`,readingTime:{minutes:17.33,words:5199},title:"Vue 2.x 实现原理",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2/Vue2%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7.html",{loader:()=>g(()=>import("./Vue2实用技巧.html-iej9C3Bn.js"),__vite__mapDeps([180,1])),meta:{date:1589560467e3,excerpt:`
<h2>全局组件注册</h2>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 目录</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// src</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//  | --- components</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//  |      | --- componentsA.vue</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//  |      | --- componentsB.vue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// globalComponent.js</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> Vue</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'vue'</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 引入vue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 处理首字母大写： abc =&gt; Abc</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> changeStr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">charAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">toUpperCase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">slice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// require.context(arg1, arg2, arg3)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// &gt;&gt;&gt; arg1 - 读取文件的路径</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// &gt;&gt;&gt; arg2 - 是否遍历文件的子目录</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// &gt;&gt;&gt; arg3 - 匹配文件的正则</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> requireComponent</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'.'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75"> /</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75">vue</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">requireComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">fileName</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> config</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> requireComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">fileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> componentName</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> changeStr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // ./componentsA.vue =&gt; componentsA</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    fileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">replace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">^</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\.\\/</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">''</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">replace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75">/</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\.</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">\\w</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66">+</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">''</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  )</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 动态注册该目录下的所有.vue文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">componentName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">default</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:.74,words:223},title:"Vue 2.x 实用技巧",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2/Vue2%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0.html",{loader:()=>g(()=>import("./Vue2相关组件实现.html-CqK3c1jo.js"),__vite__mapDeps([181,1])),meta:{date:1585580797e3,excerpt:`
<h2>具有数据校验功能的表单组件</h2>
<p><code>Form组件</code> 的核心功能是数据校验，一个 <code>Form</code> 中包含了多个 <code>FormItem</code>，当点击提交按钮时，<strong>逐一对每个 <code>FormItem</code> 内的表单组件校验，而校验是由使用者发起，并通过 <code>Form</code> 来调用每一个 <code>FormItem</code> 的验证方法，再将校验结果汇总后，通过 <code>Form</code> 返回出去</strong>。</p>
<p>要在 <code>Form</code> 中逐一调用 <code>FormItem</code> 的验证方法，而 <code>Form</code> 和 <code>FormItem</code> 是独立的，<strong>需要预先将 <code>FormItem</code> 的每个实例缓存在 <code>Form</code> 中</strong>。当每个 <code>FormItem</code> 渲染时，将其自身（this）作为参数通过 dispatch 组件通信方法派发到 <code>Form</code> 组件中，然后通过一个数组缓存起来；同理当 <code>FormItem</code> 销毁时，将其从 <code>Form</code> 缓存的数组中移除。</p>`,readingTime:{minutes:3.5,words:1050},title:"Vue 2.x 相关组件实现",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2/Vue2%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F.html",{loader:()=>g(()=>import("./Vue2组件通信方式.html-AeqEeisD.js"),__vite__mapDeps([182,183,1])),meta:{date:1585553893e3,excerpt:`
<h2><code>props</code> / <code>$emit</code></h2>
<ul>
<li><strong>父组件A</strong> -&gt; <strong>子组件B</strong>: 通过 <code>props</code> 传递参数</li>
<li><strong>子组件B</strong> -&gt; <strong>父组件A</strong>: <strong>子组件B</strong> 中 <code>$emit</code> 触发事件并携带参数, 在 <strong>父组件A</strong> 中使用 <code>v-on</code> 监听</li>
</ul>`,readingTime:{minutes:5.31,words:1593},title:"Vue 2.x 组件通信方式",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2/VueRouter.html",{loader:()=>g(()=>import("./VueRouter.html-z-ZMwlHl.js"),__vite__mapDeps([184,1])),meta:{date:1596813285e3,excerpt:`
<h2>基本使用</h2>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// router/index.js</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 0. 如果使用模块化机制编程，导入Vue和VueRouter，要调用 Vue.use(VueRouter)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> Vue</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'vue'</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> VueRouter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'vue-router'</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">use</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">VueRouter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 1. 定义（路由）组件，可以从其他文件 import 进来</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> routerComponentA</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> './routerComponentA.vue'</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> routerComponentB</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> './routerComponentB.vue'</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 路由懒加载</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> routerComponentC</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#61AFEF"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'./routerComponentC.vue'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 2. 定义路由</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> routes</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 对应当前路由的路径，总是解析为绝对路径</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 路由组件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    component?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 路由懒加载</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // component：resolve =&gt; (require(['需要加载的路由的地址'])，resolve)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 命名路由：通过 &lt;router-link&gt; 的 to 属性 或者 router.push 进行路由导航是，可以传递一个对象 { name: '命令路由的名字', params: {} }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    name?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 命名视图组件</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 在界面中可以拥有多个单独命名的视图，而不是只有一个单独的出口。&lt;router-view&gt; 标签未设置名字，默认为 default</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 一个视图使用一个组件渲染，对于同个路由，多个视图就需要多个组件。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // &lt;router-view class="view one"&gt;&lt;/router-view&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // &lt;router-view class="view two" name="a"&gt;&lt;/router-view&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    components?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { [</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> },</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 重定向路由</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 如果是 Function，则接受 目标路由 作为参数，return 重定向的 字符串路径/路径对象</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 注意：导航守卫并没有应用在跳转路由上，而仅仅应用在其目标上。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    redirect?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> string</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> |</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> Location</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> |</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> Function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    props?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> boolean</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> |</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> Object</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> |</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> Function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 别名</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // /a 的别名是 /b，意味着，当用户访问 /b 时，URL 会保持为 /b，但是路由匹配则为 /a，就像用户访问 /a 一样。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    alias?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> string</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> |</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> Array</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">string</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 嵌套路由</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 注意：以 / 开头的嵌套路径会被当作根路径。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    children?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> Array</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">RouteConfig</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 路由独享守卫</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    beforeEnter?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">to</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Route</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">from</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Route</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">next</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 路由元信息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    meta?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 2.6.0+</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 匹配规则是否大小写敏感？(默认值：false)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    caseSensitive?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 编译正则的选项</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    pathToRegexpOptions?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> Object</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 3. 创建 router 实例，然后传 \`routes\` 配置</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> router</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> VueRouter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  routes</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD"> default</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> router</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// main.js</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> router</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> './router'</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 4. 创建和挂载根实例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  router</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  render</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> h</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$mount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'#app'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:10.01,words:3002},title:"Vue Router（3.x）",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2/Vuex.html",{loader:()=>g(()=>import("./Vuex.html-ConmXZ4C.js"),__vite__mapDeps([185,183,1])),meta:{date:1596813285e3,excerpt:`
<p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>
<p></p>
<h2>Vuex 基本配置</h2>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// store</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//   | --- modules</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//   |        | --- user.js</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//   | --- actions.js</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//   | --- getters.js</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//   | --- index.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// store/modules/user.js</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> user</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // namespaced: true, // 开启命名空间</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  state</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    userName</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ''</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  mutations</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    'SET_USER_NAME'</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">userName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">userName</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> userName</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  actions</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    getUserInfo</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ({</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">          getUserInfoHttp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">token</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">res</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">data</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'SET_USER_NAME'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">userName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">          }).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">err</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">          })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">          reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD"> default</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> user</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// store/actions.js</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> actions</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  setUserInfo</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ({ </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> }, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'SET_USER_NAME'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD"> default</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> getters</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// store/getters.js</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> getters</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  userName</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> state</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">userName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 可以接受其他 getter 作为第二个参数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  userNameLen</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">getters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> getters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">userName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD"> default</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> getters</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// store/index.js</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> Vue</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'vue'</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> Vuex</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'vuex'</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">use</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">Vuex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD"> default</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> Vuex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  modules</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    user</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  getters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  actions</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// main.js</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> store</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> './store'</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  el</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '#app'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  render</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> h</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:6.94,words:2083},title:"Vuex（3.x）",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/vue-router.html",{loader:()=>g(()=>import("./vue-router.html-CbEK0jXQ.js"),__vite__mapDeps([186,1])),meta:{date:1667149466e3,excerpt:`
<p>Vue.js 的设计是一个渐进式 JavaScript 框架，核心是解决视图渲染的问题，其他能通过插件的方式进行扩展。Vue Router 就是路由插件。</p>
<details class="hint-container details"><summary>使用 Vue Router</summary>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"app"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;Hello App!&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;!-- 使用 router-link 组件来导航. --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;!-- 通过传入 \`to\` 属性指定链接. --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;!-- &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">router-link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; 默认会被渲染成一个 \`&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;\` 标签 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">router-link</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> to</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/foo"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;Go to Foo&lt;/</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">router-link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">router-link</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic"> to</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/bar"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;Go to Bar&lt;/</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">router-link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;!-- 路由出口 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">router-view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">router-view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">// 0. 如果使用模块化机制编程，导入Vue和VueRouter，要调用 Vue.use(VueRouter)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">// 1. 定义 (路由) 组件。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">// 可以从其他文件 import 进来</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">const Foo = </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'&lt;div&gt;foo&lt;/div&gt;'</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">const Bar = </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'&lt;div&gt;bar&lt;/div&gt;'</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">// 2. 定义路由</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">// 每个路由应该映射一个组件。 其中"component" 可以是</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">// 通过 Vue.extend() 创建的组件构造器，</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">// 或者，只是一个组件配置对象。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">// 我们晚点再讨论嵌套路由。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">const routes = [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">  {</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'/foo'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> }</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">  {</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'/bar'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">Bar</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">// 3. 创建 router 实例，然后传 \`routes\` 配置</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">// 你还可以传别的配置参数, 不过先这么简单着吧。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">const router = new VueRouter(</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  routes</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // (缩写) 相当于 routes: routes</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">// 4. 创建和挂载根实例。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">// 记得要通过 router 配置参数注入路由，</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">// 从而让整个应用都有路由功能</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">const app = new Vue(</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  router</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).$mount('#app')</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,readingTime:{minutes:33.52,words:10055},title:"Vue Router（3.x）",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/vue-vuex.html",{loader:()=>g(()=>import("./vue-vuex.html-D_nLBUjK.js"),__vite__mapDeps([187,1])),meta:{date:1667149477e3,excerpt:`
<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>
<p>Vuex 应用的核心就是 <code>store</code>（仓库）。<code>store</code> 基本上就是一个容器，它包含着应用中大部分的状态 (<code>state</code>)。Vuex 和单纯的全局对象有以下两点不同：</p>
<ul>
<li>Vuex 的状态存储是响应式的。当 Vue 组件从 <code>store</code> 中读取状态的时候，若 <code>store</code> 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li>
<li>不能直接改变 <code>store</code> 中的状态。改变 <code>store</code> 中的状态的唯一途径就是显式地提交 <code>(commit) mutation</code>。这样可以方便地跟踪每一个状态的变化，从而让能够实现一些工具帮助更好地了解应用。</li>
</ul>`,readingTime:{minutes:27.25,words:8176},title:"Vuex（3.x）",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E5%93%8D%E5%BA%94%E5%BC%8F.html",{loader:()=>g(()=>import("./响应式.html-DoOh2LJe.js"),__vite__mapDeps([188,179,1])),meta:{date:1665415094e3,excerpt:`
<h2>响应式对象</h2>
<h3>Object.defineProperty</h3>
<p><code>Object.defineProperty(obj, prop, descriptor)</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>
<ul>
<li><strong>参数</strong>
<ul>
<li><code>obj</code> : 要定义属性的对象。</li>
<li><code>prop</code> : 需要操作的目标对象的属性名。</li>
<li><code>descriptor</code> : 要定义或修改的属性描述符。
<ul>
<li><code>enumerable</code> : 属性是否可枚举，默认 false 。</li>
<li><code>configurable</code> : 属性是否可以被修改或者删除，默认 false 。</li>
<li><code>writable</code> : 当且仅当该属性为 true 时，属性的值，才能被赋值运算符改变。属性值假如是数组时，将不受 push, splice 等方法的影响。默认为 false。</li>
<li><code>value</code> : 该属性对应的值。</li>
<li><code>get</code> : 属性的 getter 函数，如果没有 getter，则为 undefined。当访问该属性时，会调用此函数，默认为 undefined。</li>
<li><code>set</code> : 属性的 setter 函数，如果没有 setter，则为 undefined。当属性值被修改时，会调用此函数，默认为 undefined。</li>
</ul>
</li>
</ul>
</li>
<li><strong>返回值</strong> ：被传递给函数的对象。</li>
<li><strong>API 存在的缺陷</strong>
<ul>
<li>深度监听，需要递归到底，一次性计算量大</li>
<li>对于对象，无法检测到属性的添加或移除。</li>
<li>对于数组，无法检测到利用索引直接设置一个数组项和修改数组的长度。</li>
</ul>
</li>
</ul>`,readingTime:{minutes:59.88,words:17964},title:"Vue 响应式",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8.html",{loader:()=>g(()=>import("./数据驱动.html-CT7o8lRz.js"),__vite__mapDeps([189,1])),meta:{date:1664090073e3,excerpt:`
<p>数据驱动包括：</p>
<ul>
<li>视图是由数据驱动生成的，对视图的修改，不会直接操作 DOM，而是通过修改数据。</li>
<li>数据更新驱动视图变化</li>
</ul>
<h2>首次渲染 DOM 概览</h2>
<p></p>
<h2>new Vue() 初始化</h2>
<p>Vue 实际上是一个类，类在 Javascript 中是用 <code>Function</code> 来实现的。</p>
<details class="hint-container details"><summary>Vue(options) ： 实例化 Vue</summary>
<div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-typescript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// src\\core\\instance\\index.ts</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">initMixin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> './init'</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">stateMixin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> './state'</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">renderMixin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> './render'</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">eventsMixin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> './events'</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">lifecycleMixin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> './lifecycle'</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">warn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '../util/index'</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">GlobalAPI</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'types/global-api'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">__DEV__</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> !</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> instanceof</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    warn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'Vue is a constructor and should be called with the \`new\` keyword'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">  this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">_init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//@ts-expect-error Vue has function type</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">initMixin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//@ts-expect-error Vue has function type</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">stateMixin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//@ts-expect-error Vue has function type</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">eventsMixin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//@ts-expect-error Vue has function type</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">lifecycleMixin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//@ts-expect-error Vue has function type</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">renderMixin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD"> default</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> as</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B"> unknown</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> as</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> GlobalAPI</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,readingTime:{minutes:20.41,words:6123},title:"Vue 数据驱动",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E7%BB%84%E4%BB%B6%E5%8C%96.html",{loader:()=>g(()=>import("./组件化.html-BUzBgiE7.js"),__vite__mapDeps([190,1])),meta:{date:1664382067e3,excerpt:`
<h2>createComponent : 创建组件 VNode</h2>
<p>在 <code>Vue.prototype._render</code> 进行 Virtual DOM 渲染时，执行 <code>vnode = render.call(vm._renderProxy, vm.$createElement)</code>，通过 <code>vm.$createElement</code> 最终调用 <code>createElement</code> （最终调用 <code>_createElement</code>） 创建 Virtual DOM 。</p>
<p><code>_createElement(context, tag, data, children, normalizationType)</code> 方法中，会对参数 <code>tag</code> 进行判断，如果是一个普通的 html 标签，则会实例化一个普通的 VNode 节点，否则，会通过 <code>createComponent</code> 方法创建一个组件 VNode 。</p>`,readingTime:{minutes:41.85,words:12556},title:"Vue 组件化",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E7%BC%96%E8%AF%91.html",{loader:()=>g(()=>import("./编译.html-oh9yc1B-.js"),__vite__mapDeps([191,1])),meta:{date:1666630012e3,excerpt:`
<p>在 Vue 2.x 中，所有 Vue 组件的渲染都需要 <code>render</code> 方法，包括单文件组件（<code>.vue</code>）、<code>el</code> 或者 <code>template</code> 属性，最终都会转换成 <code>render</code> 方法。</p>
<p>在重写 <code>Vue.prototype.$mount</code> 方法中，通过调用 <code>compileToFunctions</code> 方法把模板 <code>template</code> 编译生成 <code>render</code> 以及 <code>staticRenderFns</code>。</p>`,readingTime:{minutes:31.22,words:9366},title:"Vue 编译",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue3/Vue3CompositionAPI.html",{loader:()=>g(()=>import("./Vue3CompositionAPI.html-BjNrgiSF.js"),__vite__mapDeps([192,1])),meta:{date:1650561981e3,excerpt:`
<h2>setup</h2>
<p><code>setup</code> 函数，接受两个参数。</p>
<ul>
<li>
<p><code>props</code> ： 父组件传递的属性。</p>
<p><code>props</code> 是响应式的，<strong>不能使用 ES6 解构</strong>，它会消除 prop 的响应式。</p>
<p>如需要解构 prop，可使用 <code>toRefs</code> 函数。如果传递的参数为 <strong>可选的 prop</strong> ， <code>toRefs</code> 函数不会为该参数创建一个 <code>ref</code> ，可使用 <code>toRef</code> 代替（eg : <code>const title = toRef(props, 'title')</code>）。</p>
</li>
<li>
<p><code>context</code> ： <code>context</code> 是一个普通 JavaScript 对象，包含三个属性</p>
<ul>
<li>
<p><code>attrs</code> ： Attribute</p>
</li>
<li>
<p><code>slots</code> ： 父组件传递过来的插槽</p>
</li>
<li>
<p><code>emit</code> ： 组件内部需要触发的自定义事件</p>
</li>
<li>
<p><code>expose</code> ： 一个将暴露在公共组件实例上的 property 列表。</p>
<p>默认情况下，通过 <code>$refs</code>、<code>$parent</code> 或 <code>$root</code> 访问到的公共实例与模板使用的组件内部实例是一样的。<code>expose</code> 选项将<strong>限制</strong>公共实例可以访问的 property。Vue 自身定义的 property，比如 <code>$el</code> 和 <code>$parent</code>，将始终可以被公共实例访问</p>
</li>
</ul>
<p>注：<code>attrs</code> 和 <code>slots</code> 是有状态的对象，它们总是会随组件本身的更新而更新。这意味着你应该避免对它们进行解构，并始终以 <code>attrs.x</code> 或 <code>slots.x</code> 的方式引用 property。</p>
</li>
</ul>`,readingTime:{minutes:11.99,words:3597},title:"Vue3 Composition API",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue3/%E5%93%8D%E5%BA%94%E5%BC%8FAPI.html",{loader:()=>g(()=>import("./响应式API.html-8hjoReG1.js"),__vite__mapDeps([193,1])),meta:{date:1752419662e3,excerpt:`
<h2>ref()</h2>
<p><code>ref()</code> 接受一个内部值，返回一个响应式的、可更改的 ref 对象，此对象只有一个指向其内部值的属性 <code>.value</code> 。</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:10.74,words:3223},title:"Vue3 响应式 API",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E4%BC%98%E5%8C%96/Webpack%E4%BC%98%E5%8C%96.html",{loader:()=>g(()=>import("./Webpack优化.html-Dg8jjVC5.js"),__vite__mapDeps([194,1])),meta:{date:1649339546e3,excerpt:`
<h2>速度优化</h2>
<h3>减少查找过程</h3>
<h4>使用 resolve.alias 减少查找过程</h4>
<p><code>resolve.alias</code> 配置项通过别名（alias）来把原导入路径映射成一个新的导入路径。</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  resolve</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 使用 alias 把导入 react 的语句换成直接使用单独完整的 react.min.js 文件</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 减少耗时的递归解析操作</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 大多数库发布到 npm 仓库中时，都会包含打包好的完整文件，对于这些库也可以配置 alias</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    alias</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">      react</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">__dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'./node_modules/react/dist/react.min.js'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      '@lib'</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">__dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'./src/lib/'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:10.48,words:3143},title:"Webpack优化",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%8E%9F%E7%90%86/Webpack%E5%8E%9F%E7%90%86.html",{loader:()=>g(()=>import("./Webpack原理.html-CpEh5FOJ.js"),__vite__mapDeps([195,1])),meta:{date:1650124793e3,excerpt:`
<p>Webpack 本质上是一种事件流机制。通过事件流将各种插件串联起来，最终完成 Webpack 的全流程。实现事件流机制的核心是 <code>Tapable</code> 模块。Webpack 负责编译的 <code>Compiler</code> 和创建 Bundle 的 <code>Compilation</code> 都是继承自 <code>Tapable</code> 。</p>
<h2>Tapable</h2>
<p><code>Tapable</code> 和 Node.js 中的 <code>EventEmitter</code> 类似，包括多种类型，通过事件的注册和监听，触发 Webpack 生命周期中的函数方法。</p>`,readingTime:{minutes:11.37,words:3412},title:"Webpack 原理",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/CSS%E6%A8%A1%E5%9D%97%E5%8C%96.html",{loader:()=>g(()=>import("./CSS模块化.html--Gb5UMFt.js"),__vite__mapDeps([196,1])),meta:{date:1648275245e3,excerpt:`
<h2>OOCSS（面向对象的CSS）</h2>
<p>两大原则：<strong>结构和设计分离，容器和内容分离</strong>。即不要把结构和设计以及内容进行强耦合，而是相互独立，所要达到的目标是更易复用和组合，可以选择使用，选择引用等。</p>
<p>优点：通过复用来减少代码量(DRY原则)</p>
<p>缺点：维护非常困难(复杂)。当你修改某一个具体的元素的样式的时候，大部分情况下，除了修改CSS本身(因为多数的CSS类是通用的)，你还不得不添加更多的标记类(markup)。</p>
<p></p>
<h2>SMACSS（可扩展和模块化结构的 CSS）</h2>
<ul>
<li><code>Base</code>（基础）：基本规则，为网址的主要元素设置样式，如<code>body</code>，<code>input</code>，<code>button</code>，<code>ul</code>，<code>ol</code>等。在这一步中，主要使用 HTML标签 和 属性选择器，在特殊情况下，使用CSS类。</li>
<li><code>Layout</code>（布局）：布局规则，主要是些全局元素，顶部，页脚，边栏等模块的大小。</li>
<li><code>Module</code>（模块）：模块规则，模块(类似于卡片布局)可以在一个页面中使用多次。对于模块CSS类，不建议使用ID和tag选择器(为了方便重用以及上下文独立)。</li>
<li><code>State</code>（状态）：状态规则，页面中的某些元素会需要响应不同的状态，比如，可用、不可用、已用、过期、警告等等。这是唯一允许使用 <code>!important</code> 的地方。</li>
</ul>`,readingTime:{minutes:3.68,words:1103},title:"CSS模块化",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/JS%E6%A8%A1%E5%9D%97%E5%8C%96.html",{loader:()=>g(()=>import("./JS模块化.html-CIk9MOzp.js"),__vite__mapDeps([197,1])),meta:{date:1648275255e3,excerpt:`
<p>随着前端项目的逻辑越来越复杂，会导致很多问题，比如：全局变量冲突、依赖关系管理麻烦等。模块化带来的好处如下：</p>
<ul>
<li>解决命名污染，全局污染，变量冲突等问题，减少全局变量污染</li>
<li>内聚私有，变量不能被外面访问到</li>
<li>控制依赖</li>
<li>增强代码的可维护性</li>
<li>增加代码的复用性</li>
<li>分治思想的实践</li>
</ul>
<h2>原生JS组织</h2>
<ul>
<li>
<p>function 模式：根据功能将代码封装为全局函数。该方案会污染全局命名空间， 容易引起命名冲突和数据不安全，同时，无法看出模块之间的依赖关系。</p>
</li>
<li>
<p>对象模式：通过对象进行封装。该方案减少了全局变量，一定程度上解决了命名冲突的问题，但是还是存在数据安全的问题，从外部可以直接修改模块内部的数据。</p>
</li>
<li>
<p>IIFE（立即调用函数表达式）模式：通过立即调用函数封装。</p>
<ul>
<li>第一部分是包围在 <code>圆括号运算符 ()</code> 里的一个匿名函数。这个匿名函数拥有独立的词法作用域。这不仅避免了外界访问此 IIFE 中的变量，而且又不会污染全局作用域。</li>
<li>第二部分再一次使用 <code>()</code> 创建了一个立即执行函数表达式，JavaScript 引擎到此将直接执行函数。</li>
</ul>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> calculator</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">calculator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  //...</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // Expose jQuery to the global object</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">jQuery</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> jQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>`,readingTime:{minutes:9.35,words:2806},title:"JS模块化",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/babel.html",{loader:()=>g(()=>import("./babel.html-BKMXU1Pe.js"),__vite__mapDeps([198,1])),meta:{date:1648275291e3,excerpt:`
<p>Babel 是一个工具链，主要用于在当前和旧的浏览器或环境中，将 ECMAScript 2015+ 代码转换为 JavaScript 向后兼容版本的代码。主要用于处理一下事情：</p>
<ul>
<li><strong>转换语法</strong>。用来把代码中的 ESNext 的新的语法、TypeScript 和 Flow 的语法转成基于目标环境支持的语法的实现。并且还可以把目标环境不支持的 API 进行 <strong>Polyfill</strong>（垫片，用来为旧浏览器提供它没有原生支持的较新的功能）。</li>
<li><strong>特定用途的代码转换</strong>。通过 Babel 暴露的 API 可以完成代码到 AST 的 解析（Parse），AST 的转换（Transform），以及目标代码的生成（Generate）。可完成一些特定用途的转换，比如：
<ul>
<li>函数插桩（函数中自动插入一些代码，例如埋点代码）</li>
<li>自动国际化</li>
<li>default import 形式 （<code>import A from './A'</code>）转 named import形式（<code>import {A} from './A'</code>）</li>
</ul>
</li>
<li><strong>代码的静态分析</strong>。对代码进行 AST 的 解析（Parse）之后，能够进行转换，是因为通过 AST 的结构能够理解代码。除了进行转换然后生成目标代码之外，同样可以用于分析代码的信息，进行一些检查：
<ul>
<li>linter 工具：分析 AST 的结构，对代码规范进行检查。</li>
<li>api 文档自动生成工具：可以提取源码中的注释，然后生成文档。</li>
<li>type checker ：根据从 AST 中提取的或者推导的类型信息，对 AST 进行类型是否一致的检查，从而减少运行时因类型导致的错误。</li>
<li>压缩混淆工具：分析代码结构，进行删除死代码、变量名混淆、常量折叠等各种编译优化，生成体积更小、性能更优的代码。</li>
<li>js 解释器：除了对 AST 进行各种信息的提取和检查以外，可以直接解释执行 AST。</li>
</ul>
</li>
</ul>`,readingTime:{minutes:7.87,words:2360},title:"Babel",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/devServer.html",{loader:()=>g(()=>import("./devServer.html-BqATRkyL.js"),__vite__mapDeps([199,1])),meta:{date:1649339546e3,excerpt:`
<p><code>webpack-dev-server</code> 是一个基于 Express 的本地开发服务器。它使用 <code>webpack-dev-middleware</code> 中间件来为通过 Webpack 打包生成的资源文件提供 Web 服务。它还有一个通过 Socket IO 连接着 <code>webpack-dev-server</code> 服务器的小型运行时程序。<code>webpack-dev-server</code> 发送关于编译状态的消息到客户端，客户端根据消息作出响应。</p>
<h2>常用配置</h2>
<h3>devServer.publicPath</h3>`,readingTime:{minutes:5.68,words:1705},title:"Webpack Dev Server 本地开发服务",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/loaders.html",{loader:()=>g(()=>import("./loaders.html-BnfsUQUv.js"),__vite__mapDeps([200,1])),meta:{date:1648573229e3,excerpt:`
<p><strong>loader</strong> 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</p>
<p>在处理模块时，将符合规则条件的模块，提交给对应的处理器来处理，通常用来配置 loader，其类型是一个数组，数组里每一项都描述了如何去处理部分文件。每一项 rule 大致可以由以下三部分组成：</p>
<ul>
<li>条件匹配：通过 <code>test</code>、<code>include</code>、<code>exclude</code> 等配置来命中可以应用规则的模块文件；</li>
<li>应用规则：对匹配条件通过后的模块，使用 <code>use</code> 配置项来应用 loader，可以应用一个 loader 或者按照<strong>从后往前的顺序</strong>应用一组 loader，还可以分别给对应 loader 传入不同参数；</li>
<li>重置顺序：一组 loader 的执行顺序默认是<strong>从后到前（或者从右到左）<strong>执行，通过 <code>enforce</code> 选项可以让其中一个 loader 的执行顺序放到</strong>最前（pre）<strong>或者是</strong>最后（post）</strong>。</li>
</ul>`,readingTime:{minutes:3.83,words:1150},title:"Loaders",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/plugins.html",{loader:()=>g(()=>import("./plugins.html-B176EO_w.js"),__vite__mapDeps([201,1])),meta:{date:1648573242e3,excerpt:`
<p><strong>Plugin（插件）</strong> 目的在于解决 loader 无法实现的其他事。参与打包整个过程、打包优化和压缩、配置编译时的变量、极其灵活。</p>
<ul>
<li>Plugin 是一个独立的模块，模块对外暴露一个 JavaScript 函数</li>
<li>函数的原型 (prototype) 上定义了一个注入 <code>compiler</code> 对象的 <code>apply</code> 方法。 <code>apply</code> 函数中，需要有通过 <code>compiler</code> 对象挂载的 webpack 事件钩子，钩子的回调中，能拿到当前编译的 <code>compilation</code> 对象，如果是异步编译插件的话可以拿到回调 <code>callback</code></li>
<li>完成自定义子编译流程并处理 <code>compilation</code> 对象的内部数据</li>
<li>如果异步编译插件的话，数据处理完成后执行 <code>callback</code> 回调</li>
</ul>`,readingTime:{minutes:7.24,words:2172},title:"Plugins",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/%E5%A4%9A%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE.html",{loader:()=>g(()=>import("./多页面配置.html-BC010HQo.js"),__vite__mapDeps([202,1])),meta:{date:1649339546e3,excerpt:`
<div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>目录结构</span></span>
<span class="line"><span></span></span>
<span class="line"><span>├── config</span></span>
<span class="line"><span>│   ├── webpack.config.js</span></span>
<span class="line"><span>│   ├── webpack-help.js</span></span>
<span class="line"><span>├── src</span></span>
<span class="line"><span>│   ├── api</span></span>
<span class="line"><span>│   ├── libs</span></span>
<span class="line"><span>│   ├── pages</span></span>
<span class="line"><span>│   ├── pages</span></span>
<span class="line"><span>│   │   ├── home</span></span>
<span class="line"><span>│   │   │   ├── home.html</span></span>
<span class="line"><span>│   │   │   ├── home.js</span></span>
<span class="line"><span>│   │   │   ├── home.css</span></span>
<span class="line"><span>│   ├── utils</span></span>
<span class="line"><span>│── package.json</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:2.26,words:678},title:"多页面配置",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5.html",{loader:()=>g(()=>import("./核心概念.html-CObl80qq.js"),__vite__mapDeps([203,1])),meta:{date:1648275278e3,excerpt:`
<p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p>
<ul>
<li><code>module</code> ：不同文件类型的模块。Webpack 就是用来对模块进行打包的工具，这些模块各种各样，比如：js 模块、css 模块、sass 模块、vue 模块等等不同文件类型的模块。这些文件都会被 loader 转换为有效的模块，然后被应用所使用并且加入到依赖关系图中。</li>
<li><code>chunk</code> ：数据块。
<ul>
<li>非初始化的数据块。例如在打包时，对于一些动态导入的异步代码，Webpack 分割出共用的代码，可以是写的代码模块，也可以是第三方库，这些被分割的代码文件就可以理解为 <code>chunk</code>。</li>
<li>初始化的的数据块。入口文件处 (entry point) 的各种文件或者说模块依赖，就是 <code>chunk</code> ，它们最终会被捆在一起打包成一个输出文件，输出文件可以理解为 <code>bundle</code>，当然它其实也是 <code>chunk</code>。</li>
</ul>
</li>
<li><code>bundle</code> ：包含一个或多个 <code>chunk</code>，是源码经过 webpack 处理后的最终版本</li>
</ul>`,readingTime:{minutes:9.07,words:2720},title:"Webpack 核心概念",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%AE%9E%E6%88%98/%E7%BC%96%E5%86%99loader.html",{loader:()=>g(()=>import("./编写loader.html-BEIun2r_.js"),__vite__mapDeps([204,1])),meta:{date:1650188576e3,excerpt:`
<p>loader 是本质上是一个函数，通过接受处理的内容，然后处理后返回结果。</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 对 content 进行处理 ...</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // return content // 返回 loader 处理之后的数据。不推荐写法</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">  this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">callback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 推荐写法</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:3.97,words:1190},title:"编写 loader",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%AE%9E%E6%88%98/%E7%BC%96%E5%86%99plugin.html",{loader:()=>g(()=>import("./编写plugin.html--un9DtuY.js"),__vite__mapDeps([205,1])),meta:{date:1650188576e3,excerpt:`
<p>plugin 通过监听 <code>compiler</code> 的 <code>hook</code> 特定时机，然后处理 <code>stats</code> （主要包含 <code>modules</code>、<code>chunks</code> 和 <code>assets</code> 三个属性值的对象）。</p>
<ul>
<li>Webpack 的插件必须要是一个类</li>
<li>该类必须包含一个 <code>apply</code> 的函数，该函数接收 <code>compiler</code> 对象参数</li>
<li>该类可以使用 Webpack 的 <code>compiler</code> 和 <code>Compilation</code> 对象的钩子</li>
<li>可自定义自己的钩子系统</li>
</ul>`,readingTime:{minutes:4.33,words:1298},title:"编写 Plugin",type:"article"}}],["/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/EMP.html",{loader:()=>g(()=>import("./EMP.html-BFAP3LCU.js"),__vite__mapDeps([206,1])),meta:{date:164933958e4,excerpt:`
`,readingTime:{minutes:0,words:1},title:"EMP",type:"article"}}],["/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/Garfish.html",{loader:()=>g(()=>import("./Garfish.html-CW69Vu5S.js"),__vite__mapDeps([207,1])),meta:{date:164933958e4,excerpt:`
<p><a href="https://garfish.top/" target="_blank" rel="noopener noreferrer">Garfish</a> 是一套微前端的解决方案，主要用于解决现代 web 应用在前端生态繁荣和 web 应用日益复杂化两大背景下带来的跨团队协作、技术体系多样化、web 应用日益复杂化等问题。</p>
`,readingTime:{minutes:.24,words:73},title:"Garfish",type:"article"}}],["/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/MicroApp.html",{loader:()=>g(()=>import("./MicroApp.html-CrYP4aEK.js"),__vite__mapDeps([208,1])),meta:{date:164933958e4,excerpt:`
<p><a href="https://zeroing.jd.com/" target="_blank" rel="noopener noreferrer">MicroApp</a> 一款轻量、高效、功能强大的微前端框架。</p>
`,readingTime:{minutes:.07,words:20},title:"MicroApp",type:"article"}}],["/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/qiankun.html",{loader:()=>g(()=>import("./qiankun.html-wwCp3Tu6.js"),__vite__mapDeps([209,1])),meta:{date:164933958e4,excerpt:`
<p><a href="https://qiankun.umijs.org/zh" target="_blank" rel="noopener noreferrer">qiankun</a> 是一个基于 single-spa 的微前端实现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。</p>
`,readingTime:{minutes:.15,words:46},title:"qiankun",type:"article"}}],["/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/single-spa.html",{loader:()=>g(()=>import("./single-spa.html-t2NE6tI2.js"),__vite__mapDeps([210,1])),meta:{date:164933958e4,excerpt:`
<p><a href="https://zh-hans.single-spa.js.org/" target="_blank" rel="noopener noreferrer">Single-spa</a> 是一个将多个单页面应用聚合为一个整体应用的 JavaScript 微前端框架</p>
`,readingTime:{minutes:.12,words:35},title:"single-spa",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E7%9B%B8%E5%85%B3%E6%89%A9%E5%B1%95/event.html",{loader:()=>g(()=>import("./event.html-XKd_-Ala.js"),__vite__mapDeps([211,1])),meta:{date:1666630012e3,excerpt:`
<h2>编译阶段</h2>
<p>在编译阶段，对事件进行处理示例如下：</p>
<details class="hint-container details"><summary>示例</summary>
<div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-typescript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> Child</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  template</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '&lt;button @click="clickHandler($event)"&gt;'</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'click me'</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '&lt;/button&gt;'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  methods</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    clickHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'Button clicked!'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">      this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$emit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'select'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> vm</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  el</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '#app'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  template</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    '&lt;div&gt;'</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    '&lt;child @select="selectHandler" @click.native.prevent="clickHandler"&gt;&lt;/child&gt;'</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    '&lt;/div&gt;'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  components</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">Child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  methods</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    clickHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'Child clicked!'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    },</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    selectHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'Child select!'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// ========================================</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 父组件事件生成 data 串</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"select"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">selectHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  nativeOn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"click"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">$event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      $event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">preventDefault</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> clickHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">$event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 子组件事件生成 data 串</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"click"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">$event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">      clickHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">$event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,readingTime:{minutes:11.69,words:3506},title:"event 事件",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E7%9B%B8%E5%85%B3%E6%89%A9%E5%B1%95/keep-alive.html",{loader:()=>g(()=>import("./keep-alive.html-BjELSzy_.js"),__vite__mapDeps([212,1])),meta:{date:1666630012e3,excerpt:`
<h2>内置组件</h2>
<details class="hint-container details"><summary>keep-alive 内置组件</summary>
<div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-typescript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// src\\core\\components\\keep-alive.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'keep-alive'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  abstract</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  props</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    include</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> patternTypes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    exclude</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> patternTypes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    max</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  methods</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    cacheVNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">vnodeToCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">keyToCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">vnodeToCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">tag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">componentInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">componentOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> vnodeToCache</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">keyToCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">          name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> _getComponentName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">componentOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">          tag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">          componentInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">        keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">keyToCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // prune oldest entry</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">max</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">length</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> parseInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">          pruneCacheEntry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">], </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">_vnode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">vnodeToCache</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> null</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  created</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">cache</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">keys</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> []</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  destroyed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> key</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> in</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">      pruneCacheEntry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  mounted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">cacheVNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$watch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'include'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">val</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">      pruneCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> matches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    })</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">$watch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'exclude'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">val</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">      pruneCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> !</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">matches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  updated</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">cacheVNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> slot</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">$slots</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">default</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> vnode</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getFirstComponentChild</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">slot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> componentOptions</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> vnode</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> vnode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">componentOptions</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">componentOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      // check pattern</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> _getComponentName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">componentOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">include</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">exclude</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // not included</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">include</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ||</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> !</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">matches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">include</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">))) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">||</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // excluded</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">exclude</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> matches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">exclude</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      ) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> vnode</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> this</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> key</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">        vnode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> null</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">          ?</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // same constructor may get registered as different local components</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">            // so cid alone is not enough (#3269)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">            componentOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Ctor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">cid</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">componentOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tag</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD"> ?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \`::</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">\${</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">componentOptions</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tag</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\`</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD"> :</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ''</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD">          :</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> vnode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">key</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">        vnode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">componentInstance</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">componentInstance</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // make current key freshest</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">        keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // delay setting the cache until update</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">vnodeToCache</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> vnode</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">keyToCache</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> key</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      // @ts-expect-error can vnode.data can be undefined</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">      vnode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">keepAlive</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> vnode</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">slot</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> slot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">])</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,readingTime:{minutes:11.08,words:3324},title:"keep-alive",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E7%9B%B8%E5%85%B3%E6%89%A9%E5%B1%95/slot.html",{loader:()=>g(()=>import("./slot.html-DewQAF6V.js"),__vite__mapDeps([213,1])),meta:{date:1666630012e3,excerpt:`
<h2>普通插槽</h2>
<p>编译发生在调用 <code>vm.$mount</code> 的时候，编译的顺序是先编译父组件再编译子组件。</p>
<p>在 <code>parse</code> 解析 <code>template</code> 模板字符串转换成 AST 树阶段，处理一元标签（例如：<code>&lt;img&gt;</code>、<code>&lt;br/&gt;</code>）和闭合标签时，会调用 <code>closeElement(element)</code> 方法，执行<code>processElement(element, options)</code> 方法，调用 <code>processSlotContent(element)</code> 和 <code>processSlotOutlet(element)</code> 方法处理 <code>slot</code>。</p>`,readingTime:{minutes:9.26,words:2778},title:"slot 插槽",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E7%9B%B8%E5%85%B3%E6%89%A9%E5%B1%95/transition.html",{loader:()=>g(()=>import("./transition.html-BgOgRUDZ.js"),__vite__mapDeps([214,1])),meta:{date:1666630012e3,excerpt:`
<h2>transition</h2>
<p>Vue.js 内置 <code>&lt;transition&gt;</code> 组件，可以利用它配合一些 CSS3 样式很方便地实现过渡动画，也可以利用它配合 JavaScript 的钩子函数实现过渡动画，在下列情形中，可以给任何元素和组件添加 <code>entering</code> / <code>leaving</code> 过渡：</p>
<ul>
<li>条件渲染 (使用 <code>v-if</code>)</li>
<li>条件展示 (使用 <code>v-show</code>)</li>
<li>动态组件</li>
<li>组件根节点</li>
</ul>`,readingTime:{minutes:16.48,words:4944},title:"transition 与 transition-group",type:"article"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E7%9B%B8%E5%85%B3%E6%89%A9%E5%B1%95/v-model.html",{loader:()=>g(()=>import("./v-model.html-CwhEfPMZ.js"),__vite__mapDeps([215,1])),meta:{date:1666630012e3,excerpt:`
<p><code>v-model</code> 即可以作用在普通表单元素上，又可以作用在组件上，它其实是一个语法糖。</p>
<h2>表单元素</h2>
<p>在 <code>parse</code> 解析 <code>template</code> 模板字符串转换成 AST 树阶段，处理一元标签（例如：<code>&lt;img&gt;</code>、<code>&lt;br/&gt;</code>）和闭合标签时，会调用 <code>closeElement(element)</code> 方法，执行<code>processElement(element, options)</code> 方法，调用 <code>processAttrs(element)</code> 方法处理标签属性。<code>v-model</code> 会被当做普通的指令解析到 <code>el.directives</code> 中。</p>`,readingTime:{minutes:8.22,words:2466},title:"v-model 双向绑定",type:"article"}}],["/404.html",{loader:()=>g(()=>import("./404.html-CMj8Np2y.js"),__vite__mapDeps([216,1])),meta:{title:""}}],["/%E7%A7%BB%E5%8A%A8%E7%AB%AF/",{loader:()=>g(()=>import("./index.html-BoIzkSHY.js"),__vite__mapDeps([217,1])),meta:{title:"移动端"}}],["/%E5%85%B6%E4%BB%96/",{loader:()=>g(()=>import("./index.html-eJssOyYZ.js"),__vite__mapDeps([218,1])),meta:{title:"其他"}}],["/%E5%89%8D%E7%AB%AF/",{loader:()=>g(()=>import("./index.html-DvmMxyv7.js"),__vite__mapDeps([219,1])),meta:{title:"前端"}}],["/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5/",{loader:()=>g(()=>import("./index.html-C6NBbRVi.js"),__vite__mapDeps([220,1])),meta:{title:"前端训练营"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/",{loader:()=>g(()=>import("./index.html-B3q6l8TA.js"),__vite__mapDeps([221,1])),meta:{title:"前端框架"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/",{loader:()=>g(()=>import("./index.html-CTJWshz2.js"),__vite__mapDeps([222,1])),meta:{title:"项目搭建"}}],["/%E6%95%B0%E6%8D%AE%E5%BA%93/MongoDB/",{loader:()=>g(()=>import("./index.html-CSFK9p9J.js"),__vite__mapDeps([223,1])),meta:{title:"Mongo DB"}}],["/%E6%9C%8D%E5%8A%A1%E7%AB%AF/",{loader:()=>g(()=>import("./index.html-DpA6v5wx.js"),__vite__mapDeps([224,1])),meta:{title:"服务端"}}],["/%E6%9E%B6%E6%9E%84/",{loader:()=>g(()=>import("./index.html-DS-IqyO0.js"),__vite__mapDeps([225,1])),meta:{title:"架构"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/",{loader:()=>g(()=>import("./index.html-Ch_xruj9.js"),__vite__mapDeps([226,1])),meta:{title:"CSS基础"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/",{loader:()=>g(()=>import("./index.html-DDbSy0z6.js"),__vite__mapDeps([227,1])),meta:{title:"CSS布局"}}],["/%E5%89%8D%E7%AB%AF/CSS/CSS%E7%9B%B8%E5%85%B3/",{loader:()=>g(()=>import("./index.html-B5SA-88L.js"),__vite__mapDeps([228,1])),meta:{title:"CSS相关"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/BOM/",{loader:()=>g(()=>import("./index.html-C_svHmlI.js"),__vite__mapDeps([229,1])),meta:{title:"BOM"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/",{loader:()=>g(()=>import("./index.html-DFuJ0_ne.js"),__vite__mapDeps([230,1])),meta:{title:"Canvas"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/DOM/",{loader:()=>g(()=>import("./index.html-B4O9eUOe.js"),__vite__mapDeps([231,1])),meta:{title:"DOM"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/SVG/",{loader:()=>g(()=>import("./index.html-DO2IpFxg.js"),__vite__mapDeps([232,1])),meta:{title:"SVG"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",{loader:()=>g(()=>import("./index.html-C8cRoyc_.js"),__vite__mapDeps([233,1])),meta:{title:"基础知识"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/",{loader:()=>g(()=>import("./index.html-CB-2fyyj.js"),__vite__mapDeps([234,1])),meta:{title:"实用技巧"}}],["/%E5%89%8D%E7%AB%AF/JavaScript/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{loader:()=>g(()=>import("./index.html-g8juHi0c.js"),__vite__mapDeps([235,1])),meta:{title:"设计模式"}}],["/%E5%89%8D%E7%AB%AF/Node/Nestjs/",{loader:()=>g(()=>import("./index.html-5rU878bl.js"),__vite__mapDeps([236,1])),meta:{title:"Nestjs"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E4%BC%98%E5%8C%96/",{loader:()=>g(()=>import("./index.html-ByJQA2eO.js"),__vite__mapDeps([237,1])),meta:{title:"React优化"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%8E%9F%E7%90%86/",{loader:()=>g(()=>import("./index.html-DRwPPAMT.js"),__vite__mapDeps([238,1])),meta:{title:"React原理"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/",{loader:()=>g(()=>import("./index.html-BM2PwHVX.js"),__vite__mapDeps([239,1])),meta:{title:"React基础"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E7%94%9F%E6%80%81/",{loader:()=>g(()=>import("./index.html-28asP6e1.js"),__vite__mapDeps([240,1])),meta:{title:"React生态"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2/",{loader:()=>g(()=>import("./index.html-CYQyW7lT.js"),__vite__mapDeps([241,1])),meta:{title:"Vue2"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/",{loader:()=>g(()=>import("./index.html-vZgv2SqR.js"),__vite__mapDeps([242,1])),meta:{title:"Vue2源码解析"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue3/",{loader:()=>g(()=>import("./index.html-CgprNCUR.js"),__vite__mapDeps([243,1])),meta:{title:"Vue3"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E4%BC%98%E5%8C%96/",{loader:()=>g(()=>import("./index.html-D2JzdnAg.js"),__vite__mapDeps([244,1])),meta:{title:"Webpack优化"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%8E%9F%E7%90%86/",{loader:()=>g(()=>import("./index.html-Xy2om61z.js"),__vite__mapDeps([245,1])),meta:{title:"Webpack原理"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/",{loader:()=>g(()=>import("./index.html-Bug49Gkb.js"),__vite__mapDeps([246,1])),meta:{title:"Webpack基础"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%AE%9E%E6%88%98/",{loader:()=>g(()=>import("./index.html-DBA2X0cu.js"),__vite__mapDeps([247,1])),meta:{title:"Webpack实战"}}],["/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/",{loader:()=>g(()=>import("./index.html-BJ-BU5dr.js"),__vite__mapDeps([248,1])),meta:{title:"实现方式"}}],["/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E7%9B%B8%E5%85%B3%E6%89%A9%E5%B1%95/",{loader:()=>g(()=>import("./index.html-CXFaSAQ5.js"),__vite__mapDeps([249,1])),meta:{title:"相关扩展"}}],["/category/",{loader:()=>g(()=>import("./index.html-D6j1iQdU.js"),__vite__mapDeps([250,1])),meta:{title:"分类",index:!1}}],["/category/%E5%8A%A8%E6%95%88/",{loader:()=>g(()=>import("./index.html-BqCzRb7A.js"),__vite__mapDeps([251,1])),meta:{title:"动效 分类",index:!1}}],["/category/css%E5%9F%BA%E7%A1%80/",{loader:()=>g(()=>import("./index.html-F5jnvKLt.js"),__vite__mapDeps([252,1])),meta:{title:"CSS基础 分类",index:!1}}],["/category/css%E5%B8%83%E5%B1%80/",{loader:()=>g(()=>import("./index.html-BM5U_FCl.js"),__vite__mapDeps([253,1])),meta:{title:"CSS布局 分类",index:!1}}],["/category/canvas/",{loader:()=>g(()=>import("./index.html-BgoLIOt7.js"),__vite__mapDeps([254,1])),meta:{title:"Canvas 分类",index:!1}}],["/category/svg/",{loader:()=>g(()=>import("./index.html-C2EKPCib.js"),__vite__mapDeps([255,1])),meta:{title:"SVG 分类",index:!1}}],["/category/javascript/",{loader:()=>g(()=>import("./index.html-DfPqWlb9.js"),__vite__mapDeps([256,1])),meta:{title:"JavaScript 分类",index:!1}}],["/tag/",{loader:()=>g(()=>import("./index.html-BQT-qKGm.js"),__vite__mapDeps([257,1])),meta:{title:"标签",index:!1}}],["/tag/%E5%8A%A8%E7%94%BB/",{loader:()=>g(()=>import("./index.html-Dw_V5fzM.js"),__vite__mapDeps([258,1])),meta:{title:"标签: 动画",index:!1}}],["/tag/css/",{loader:()=>g(()=>import("./index.html-Db0AWRW2.js"),__vite__mapDeps([259,1])),meta:{title:"标签: CSS",index:!1}}],["/tag/flex/",{loader:()=>g(()=>import("./index.html-C_DPkMyf.js"),__vite__mapDeps([260,1])),meta:{title:"标签: Flex",index:!1}}],["/tag/grid/",{loader:()=>g(()=>import("./index.html-_0vysNCD.js"),__vite__mapDeps([261,1])),meta:{title:"标签: Grid",index:!1}}],["/tag/canvas/",{loader:()=>g(()=>import("./index.html-_iXTTDLs.js"),__vite__mapDeps([262,1])),meta:{title:"标签: Canvas",index:!1}}],["/tag/svg/",{loader:()=>g(()=>import("./index.html-C05D0bgk.js"),__vite__mapDeps([263,1])),meta:{title:"标签: SVG",index:!1}}],["/tag/smil/",{loader:()=>g(()=>import("./index.html-Gbz6QlpR.js"),__vite__mapDeps([264,1])),meta:{title:"标签: SMIL",index:!1}}],["/tag/%E7%BD%91%E9%A1%B5%E6%88%AA%E5%B1%8F/",{loader:()=>g(()=>import("./index.html-DfvrODur.js"),__vite__mapDeps([265,1])),meta:{title:"标签: 网页截屏",index:!1}}],["/article/",{loader:()=>g(()=>import("./index.html-DbCrp8HA.js"),__vite__mapDeps([266,1])),meta:{title:"文章",index:!1}}],["/star/",{loader:()=>g(()=>import("./index.html-DakgtBWE.js"),__vite__mapDeps([267,1])),meta:{title:"星标",index:!1}}],["/timeline/",{loader:()=>g(()=>import("./index.html-C2YzHygn.js"),__vite__mapDeps([268,1])),meta:{title:"时间轴",index:!1}}]]);/*!
  * vue-router v4.5.1
  * (c) 2025 Eduardo San Martin Morote
  * @license MIT
  */const $a=typeof document<"u";function or(i){return typeof i=="object"||"displayName"in i||"props"in i||"__vccOpts"in i}function og(i){return i.__esModule||i[Symbol.toStringTag]==="Module"||i.default&&or(i.default)}const Bi=Object.assign;function Bt(i,s){const a={};for(const n in s){const e=s[n];a[n]=Ss(e)?e.map(i):i(e)}return a}const fn=()=>{},Ss=Array.isArray,Ar=/#/g,Ag=/&/g,gg=/\//g,Bg=/=/g,yg=/\?/g,gr=/\+/g,ug=/%5B/g,vg=/%5D/g,Br=/%5E/g,Eg=/%60/g,yr=/%7B/g,mg=/%7C/g,ur=/%7D/g,Fg=/%20/g;function xl(i){return encodeURI(""+i).replace(mg,"|").replace(ug,"[").replace(vg,"]")}function fg(i){return xl(i).replace(yr,"{").replace(ur,"}").replace(Br,"^")}function zt(i){return xl(i).replace(gr,"%2B").replace(Fg,"+").replace(Ar,"%23").replace(Ag,"%26").replace(Eg,"`").replace(yr,"{").replace(ur,"}").replace(Br,"^")}function Cg(i){return zt(i).replace(Bg,"%3D")}function bg(i){return xl(i).replace(Ar,"%23").replace(yg,"%3F")}function Dg(i){return i==null?"":bg(i).replace(gg,"%2F")}function Ln(i){try{return decodeURIComponent(""+i)}catch{}return""+i}const _g=/\/$/,Sg=i=>i.replace(_g,"");function yt(i,s,a="/"){let n,e={},t="",l="";const k=s.indexOf("#");let p=s.indexOf("?");return k<p&&k>=0&&(p=-1),p>-1&&(n=s.slice(0,p),t=s.slice(p+1,k>-1?k:s.length),e=i(t)),k>-1&&(n=n||s.slice(0,k),l=s.slice(k,s.length)),n=Rg(n??s,a),{fullPath:n+(t&&"?")+t+l,path:n,query:e,hash:Ln(l)}}function xg(i,s){const a=s.query?i(s.query):"";return s.path+(a&&"?")+a+(s.hash||"")}function qh(i,s){return!s||!i.toLowerCase().startsWith(s.toLowerCase())?i:i.slice(s.length)||"/"}function wg(i,s,a){const n=s.matched.length-1,e=a.matched.length-1;return n>-1&&n===e&&en(s.matched[n],a.matched[e])&&vr(s.params,a.params)&&i(s.query)===i(a.query)&&s.hash===a.hash}function en(i,s){return(i.aliasOf||i)===(s.aliasOf||s)}function vr(i,s){if(Object.keys(i).length!==Object.keys(s).length)return!1;for(const a in i)if(!Tg(i[a],s[a]))return!1;return!0}function Tg(i,s){return Ss(i)?Kh(i,s):Ss(s)?Kh(s,i):i===s}function Kh(i,s){return Ss(s)?i.length===s.length&&i.every((a,n)=>a===s[n]):i.length===1&&i[0]===s}function Rg(i,s){if(i.startsWith("/"))return i;if(!i)return s;const a=s.split("/"),n=i.split("/"),e=n[n.length-1];(e===".."||e===".")&&n.push("");let t=a.length-1,l,k;for(l=0;l<n.length;l++)if(k=n[l],k!==".")if(k==="..")t>1&&t--;else break;return a.slice(0,t).join("/")+"/"+n.slice(l).join("/")}const Us={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0};var On;(function(i){i.pop="pop",i.push="push"})(On||(On={}));var Cn;(function(i){i.back="back",i.forward="forward",i.unknown=""})(Cn||(Cn={}));function Lg(i){if(!i)if($a){const s=document.querySelector("base");i=s&&s.getAttribute("href")||"/",i=i.replace(/^\w+:\/\/[^\/]+/,"")}else i="/";return i[0]!=="/"&&i[0]!=="#"&&(i="/"+i),Sg(i)}const Og=/^[^#]+#/;function Pg(i,s){return i.replace(Og,"#")+s}function Ig(i,s){const a=document.documentElement.getBoundingClientRect(),n=i.getBoundingClientRect();return{behavior:s.behavior,left:n.left-a.left-(s.left||0),top:n.top-a.top-(s.top||0)}}const Ue=()=>({left:window.scrollX,top:window.scrollY});function Mg(i){let s;if("el"in i){const a=i.el,n=typeof a=="string"&&a.startsWith("#"),e=typeof a=="string"?n?document.getElementById(a.slice(1)):document.querySelector(a):a;if(!e)return;s=Ig(e,i)}else s=i;"scrollBehavior"in document.documentElement.style?window.scrollTo(s):window.scrollTo(s.left!=null?s.left:window.scrollX,s.top!=null?s.top:window.scrollY)}function Xh(i,s){return(history.state?history.state.position-s:-1)+i}const Jt=new Map;function Vg(i,s){Jt.set(i,s)}function jg(i){const s=Jt.get(i);return Jt.delete(i),s}let Ng=()=>location.protocol+"//"+location.host;function Er(i,s){const{pathname:a,search:n,hash:e}=s,t=i.indexOf("#");if(t>-1){let k=e.includes(i.slice(t))?i.slice(t).length:1,p=e.slice(k);return p[0]!=="/"&&(p="/"+p),qh(p,"")}return qh(a,i)+n+e}function $g(i,s,a,n){let e=[],t=[],l=null;const k=({state:o})=>{const A=Er(i,location),v=a.value,u=s.value;let E=0;if(o){if(a.value=A,s.value=o,l&&l===v){l=null;return}E=u?o.position-u.position:0}else n(A);e.forEach(f=>{f(a.value,v,{delta:E,type:On.pop,direction:E?E>0?Cn.forward:Cn.back:Cn.unknown})})};function p(){l=a.value}function d(o){e.push(o);const A=()=>{const v=e.indexOf(o);v>-1&&e.splice(v,1)};return t.push(A),A}function r(){const{history:o}=window;o.state&&o.replaceState(Bi({},o.state,{scroll:Ue()}),"")}function c(){for(const o of t)o();t=[],window.removeEventListener("popstate",k),window.removeEventListener("beforeunload",r)}return window.addEventListener("popstate",k),window.addEventListener("beforeunload",r,{passive:!0}),{pauseListeners:p,listen:d,destroy:c}}function Qh(i,s,a,n=!1,e=!1){return{back:i,current:s,forward:a,replaced:n,position:window.history.length,scroll:e?Ue():null}}function Hg(i){const{history:s,location:a}=window,n={value:Er(i,a)},e={value:s.state};e.value||t(n.value,{back:null,current:n.value,forward:null,position:s.length-1,replaced:!0,scroll:null},!0);function t(p,d,r){const c=i.indexOf("#"),o=c>-1?(a.host&&document.querySelector("base")?i:i.slice(c))+p:Ng()+i+p;try{s[r?"replaceState":"pushState"](d,"",o),e.value=d}catch(A){console.error(A),a[r?"replace":"assign"](o)}}function l(p,d){const r=Bi({},s.state,Qh(e.value.back,p,e.value.forward,!0),d,{position:e.value.position});t(p,r,!0),n.value=p}function k(p,d){const r=Bi({},e.value,s.state,{forward:p,scroll:Ue()});t(r.current,r,!0);const c=Bi({},Qh(n.value,p,null),{position:r.position+1},d);t(p,c,!1),n.value=p}return{location:n,state:e,push:k,replace:l}}function Wg(i){i=Lg(i);const s=Hg(i),a=$g(i,s.state,s.location,s.replace);function n(t,l=!0){l||a.pauseListeners(),history.go(t)}const e=Bi({location:"",base:i,go:n,createHref:Pg.bind(null,i)},s,a);return Object.defineProperty(e,"location",{enumerable:!0,get:()=>s.location.value}),Object.defineProperty(e,"state",{enumerable:!0,get:()=>s.state.value}),e}function Ug(i){return typeof i=="string"||i&&typeof i=="object"}function mr(i){return typeof i=="string"||typeof i=="symbol"}const Fr=Symbol("");var Yh;(function(i){i[i.aborted=4]="aborted",i[i.cancelled=8]="cancelled",i[i.duplicated=16]="duplicated"})(Yh||(Yh={}));function tn(i,s){return Bi(new Error,{type:i,[Fr]:!0},s)}function Hs(i,s){return i instanceof Error&&Fr in i&&(s==null||!!(i.type&s))}const Zh="[^/]+?",zg={sensitive:!1,strict:!1,start:!0,end:!0},Jg=/[.+*?^${}()[\]/\\]/g;function Gg(i,s){const a=Bi({},zg,s),n=[];let e=a.start?"^":"";const t=[];for(const d of i){const r=d.length?[]:[90];a.strict&&!d.length&&(e+="/");for(let c=0;c<d.length;c++){const o=d[c];let A=40+(a.sensitive?.25:0);if(o.type===0)c||(e+="/"),e+=o.value.replace(Jg,"\\$&"),A+=40;else if(o.type===1){const{value:v,repeatable:u,optional:E,regexp:f}=o;t.push({name:v,repeatable:u,optional:E});const F=f||Zh;if(F!==Zh){A+=10;try{new RegExp(`(${F})`)}catch(C){throw new Error(`Invalid custom RegExp for param "${v}" (${F}): `+C.message)}}let B=u?`((?:${F})(?:/(?:${F}))*)`:`(${F})`;c||(B=E&&d.length<2?`(?:/${B})`:"/"+B),E&&(B+="?"),e+=B,A+=20,E&&(A+=-8),u&&(A+=-20),F===".*"&&(A+=-50)}r.push(A)}n.push(r)}if(a.strict&&a.end){const d=n.length-1;n[d][n[d].length-1]+=.7000000000000001}a.strict||(e+="/?"),a.end?e+="$":a.strict&&!e.endsWith("/")&&(e+="(?:/|$)");const l=new RegExp(e,a.sensitive?"":"i");function k(d){const r=d.match(l),c={};if(!r)return null;for(let o=1;o<r.length;o++){const A=r[o]||"",v=t[o-1];c[v.name]=A&&v.repeatable?A.split("/"):A}return c}function p(d){let r="",c=!1;for(const o of i){(!c||!r.endsWith("/"))&&(r+="/"),c=!1;for(const A of o)if(A.type===0)r+=A.value;else if(A.type===1){const{value:v,repeatable:u,optional:E}=A,f=v in d?d[v]:"";if(Ss(f)&&!u)throw new Error(`Provided param "${v}" is an array but it is not repeatable (* or + modifiers)`);const F=Ss(f)?f.join("/"):f;if(!F)if(E)o.length<2&&(r.endsWith("/")?r=r.slice(0,-1):c=!0);else throw new Error(`Missing required param "${v}"`);r+=F}}return r||"/"}return{re:l,score:n,keys:t,parse:k,stringify:p}}function qg(i,s){let a=0;for(;a<i.length&&a<s.length;){const n=s[a]-i[a];if(n)return n;a++}return i.length<s.length?i.length===1&&i[0]===80?-1:1:i.length>s.length?s.length===1&&s[0]===80?1:-1:0}function fr(i,s){let a=0;const n=i.score,e=s.score;for(;a<n.length&&a<e.length;){const t=qg(n[a],e[a]);if(t)return t;a++}if(Math.abs(e.length-n.length)===1){if(ik(n))return 1;if(ik(e))return-1}return e.length-n.length}function ik(i){const s=i[i.length-1];return i.length>0&&s[s.length-1]<0}const Kg={type:0,value:""},Xg=/[a-zA-Z0-9_]/;function Qg(i){if(!i)return[[]];if(i==="/")return[[Kg]];if(!i.startsWith("/"))throw new Error(`Invalid path "${i}"`);function s(A){throw new Error(`ERR (${a})/"${d}": ${A}`)}let a=0,n=a;const e=[];let t;function l(){t&&e.push(t),t=[]}let k=0,p,d="",r="";function c(){d&&(a===0?t.push({type:0,value:d}):a===1||a===2||a===3?(t.length>1&&(p==="*"||p==="+")&&s(`A repeatable param (${d}) must be alone in its segment. eg: '/:ids+.`),t.push({type:1,value:d,regexp:r,repeatable:p==="*"||p==="+",optional:p==="*"||p==="?"})):s("Invalid state to consume buffer"),d="")}function o(){d+=p}for(;k<i.length;){if(p=i[k++],p==="\\"&&a!==2){n=a,a=4;continue}switch(a){case 0:p==="/"?(d&&c(),l()):p===":"?(c(),a=1):o();break;case 4:o(),a=n;break;case 1:p==="("?a=2:Xg.test(p)?o():(c(),a=0,p!=="*"&&p!=="?"&&p!=="+"&&k--);break;case 2:p===")"?r[r.length-1]=="\\"?r=r.slice(0,-1)+p:a=3:r+=p;break;case 3:c(),a=0,p!=="*"&&p!=="?"&&p!=="+"&&k--,r="";break;default:s("Unknown state");break}}return a===2&&s(`Unfinished custom RegExp for param "${d}"`),c(),l(),e}function Yg(i,s,a){const n=Gg(Qg(i.path),a),e=Bi(n,{record:i,parent:s,children:[],alias:[]});return s&&!e.record.aliasOf==!s.record.aliasOf&&s.children.push(e),e}function Zg(i,s){const a=[],n=new Map;s=ek({strict:!1,end:!0,sensitive:!1},s);function e(c){return n.get(c)}function t(c,o,A){const v=!A,u=ak(c);u.aliasOf=A&&A.record;const E=ek(s,c),f=[u];if("alias"in c){const C=typeof c.alias=="string"?[c.alias]:c.alias;for(const w of C)f.push(ak(Bi({},u,{components:A?A.record.components:u.components,path:w,aliasOf:A?A.record:u})))}let F,B;for(const C of f){const{path:w}=C;if(o&&w[0]!=="/"){const $=o.record.path,I=$[$.length-1]==="/"?"":"/";C.path=o.record.path+(w&&I+w)}if(F=Yg(C,o,E),A?A.alias.push(F):(B=B||F,B!==F&&B.alias.push(F),v&&c.name&&!nk(F)&&l(c.name)),Cr(F)&&p(F),u.children){const $=u.children;for(let I=0;I<$.length;I++)t($[I],F,A&&A.children[I])}A=A||F}return B?()=>{l(B)}:fn}function l(c){if(mr(c)){const o=n.get(c);o&&(n.delete(c),a.splice(a.indexOf(o),1),o.children.forEach(l),o.alias.forEach(l))}else{const o=a.indexOf(c);o>-1&&(a.splice(o,1),c.record.name&&n.delete(c.record.name),c.children.forEach(l),c.alias.forEach(l))}}function k(){return a}function p(c){const o=aB(c,a);a.splice(o,0,c),c.record.name&&!nk(c)&&n.set(c.record.name,c)}function d(c,o){let A,v={},u,E;if("name"in c&&c.name){if(A=n.get(c.name),!A)throw tn(1,{location:c});E=A.record.name,v=Bi(sk(o.params,A.keys.filter(B=>!B.optional).concat(A.parent?A.parent.keys.filter(B=>B.optional):[]).map(B=>B.name)),c.params&&sk(c.params,A.keys.map(B=>B.name))),u=A.stringify(v)}else if(c.path!=null)u=c.path,A=a.find(B=>B.re.test(u)),A&&(v=A.parse(u),E=A.record.name);else{if(A=o.name?n.get(o.name):a.find(B=>B.re.test(o.path)),!A)throw tn(1,{location:c,currentLocation:o});E=A.record.name,v=Bi({},o.params,c.params),u=A.stringify(v)}const f=[];let F=A;for(;F;)f.unshift(F.record),F=F.parent;return{name:E,path:u,params:v,matched:f,meta:sB(f)}}i.forEach(c=>t(c));function r(){a.length=0,n.clear()}return{addRoute:t,resolve:d,removeRoute:l,clearRoutes:r,getRoutes:k,getRecordMatcher:e}}function sk(i,s){const a={};for(const n of s)n in i&&(a[n]=i[n]);return a}function ak(i){const s={path:i.path,redirect:i.redirect,name:i.name,meta:i.meta||{},aliasOf:i.aliasOf,beforeEnter:i.beforeEnter,props:iB(i),children:i.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in i?i.components||null:i.component&&{default:i.component}};return Object.defineProperty(s,"mods",{value:{}}),s}function iB(i){const s={},a=i.props||!1;if("component"in i)s.default=a;else for(const n in i.components)s[n]=typeof a=="object"?a[n]:a;return s}function nk(i){for(;i;){if(i.record.aliasOf)return!0;i=i.parent}return!1}function sB(i){return i.reduce((s,a)=>Bi(s,a.meta),{})}function ek(i,s){const a={};for(const n in i)a[n]=n in s?s[n]:i[n];return a}function aB(i,s){let a=0,n=s.length;for(;a!==n;){const t=a+n>>1;fr(i,s[t])<0?n=t:a=t+1}const e=nB(i);return e&&(n=s.lastIndexOf(e,n-1)),n}function nB(i){let s=i;for(;s=s.parent;)if(Cr(s)&&fr(i,s)===0)return s}function Cr({record:i}){return!!(i.name||i.components&&Object.keys(i.components).length||i.redirect)}function eB(i){const s={};if(i===""||i==="?")return s;const n=(i[0]==="?"?i.slice(1):i).split("&");for(let e=0;e<n.length;++e){const t=n[e].replace(gr," "),l=t.indexOf("="),k=Ln(l<0?t:t.slice(0,l)),p=l<0?null:Ln(t.slice(l+1));if(k in s){let d=s[k];Ss(d)||(d=s[k]=[d]),d.push(p)}else s[k]=p}return s}function tk(i){let s="";for(let a in i){const n=i[a];if(a=Cg(a),n==null){n!==void 0&&(s+=(s.length?"&":"")+a);continue}(Ss(n)?n.map(t=>t&&zt(t)):[n&&zt(n)]).forEach(t=>{t!==void 0&&(s+=(s.length?"&":"")+a,t!=null&&(s+="="+t))})}return s}function tB(i){const s={};for(const a in i){const n=i[a];n!==void 0&&(s[a]=Ss(n)?n.map(e=>e==null?null:""+e):n==null?n:""+n)}return s}const lB=Symbol(""),lk=Symbol(""),ze=Symbol(""),wl=Symbol(""),Gt=Symbol("");function gn(){let i=[];function s(n){return i.push(n),()=>{const e=i.indexOf(n);e>-1&&i.splice(e,1)}}function a(){i=[]}return{add:s,list:()=>i.slice(),reset:a}}function ra(i,s,a,n,e,t=l=>l()){const l=n&&(n.enterCallbacks[e]=n.enterCallbacks[e]||[]);return()=>new Promise((k,p)=>{const d=o=>{o===!1?p(tn(4,{from:a,to:s})):o instanceof Error?p(o):Ug(o)?p(tn(2,{from:s,to:o})):(l&&n.enterCallbacks[e]===l&&typeof o=="function"&&l.push(o),k())},r=t(()=>i.call(n&&n.instances[e],s,a,d));let c=Promise.resolve(r);i.length<3&&(c=c.then(d)),c.catch(o=>p(o))})}function ut(i,s,a,n,e=t=>t()){const t=[];for(const l of i)for(const k in l.components){let p=l.components[k];if(!(s!=="beforeRouteEnter"&&!l.instances[k]))if(or(p)){const r=(p.__vccOpts||p)[s];r&&t.push(ra(r,a,n,l,k,e))}else{let d=p();t.push(()=>d.then(r=>{if(!r)throw new Error(`Couldn't resolve component "${k}" at "${l.path}"`);const c=og(r)?r.default:r;l.mods[k]=r,l.components[k]=c;const A=(c.__vccOpts||c)[s];return A&&ra(A,a,n,l,k,e)()}))}}return t}function hk(i){const s=bi(ze),a=bi(wl),n=b(()=>{const p=da(i.to);return s.resolve(p)}),e=b(()=>{const{matched:p}=n.value,{length:d}=p,r=p[d-1],c=a.matched;if(!r||!c.length)return-1;const o=c.findIndex(en.bind(null,r));if(o>-1)return o;const A=kk(p[d-2]);return d>1&&kk(r)===A&&c[c.length-1].path!==A?c.findIndex(en.bind(null,p[d-2])):o}),t=b(()=>e.value>-1&&dB(a.params,n.value.params)),l=b(()=>e.value>-1&&e.value===a.matched.length-1&&vr(a.params,n.value.params));function k(p={}){if(rB(p)){const d=s[da(i.replace)?"replace":"push"](da(i.to)).catch(fn);return i.viewTransition&&typeof document<"u"&&"startViewTransition"in document&&document.startViewTransition(()=>d),d}return Promise.resolve()}return{route:n,href:b(()=>n.value.href),isActive:t,isExactActive:l,navigate:k}}function hB(i){return i.length===1?i[0]:i}const kB=M({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"},viewTransition:Boolean},useLink:hk,setup(i,{slots:s}){const a=Sa(hk(i)),{options:n}=bi(ze),e=b(()=>({[pk(i.activeClass,n.linkActiveClass,"router-link-active")]:a.isActive,[pk(i.exactActiveClass,n.linkExactActiveClass,"router-link-exact-active")]:a.isExactActive}));return()=>{const t=s.default&&hB(s.default(a));return i.custom?t:h("a",{"aria-current":a.isExactActive?i.ariaCurrentValue:null,href:a.href,onClick:a.navigate,class:e.value},t)}}}),pB=kB;function rB(i){if(!(i.metaKey||i.altKey||i.ctrlKey||i.shiftKey)&&!i.defaultPrevented&&!(i.button!==void 0&&i.button!==0)){if(i.currentTarget&&i.currentTarget.getAttribute){const s=i.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(s))return}return i.preventDefault&&i.preventDefault(),!0}}function dB(i,s){for(const a in s){const n=s[a],e=i[a];if(typeof n=="string"){if(n!==e)return!1}else if(!Ss(e)||e.length!==n.length||n.some((t,l)=>t!==e[l]))return!1}return!0}function kk(i){return i?i.aliasOf?i.aliasOf.path:i.path:""}const pk=(i,s,a)=>i??s??a,cB=M({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(i,{attrs:s,slots:a}){const n=bi(Gt),e=b(()=>i.route||n.value),t=bi(lk,0),l=b(()=>{let d=da(t);const{matched:r}=e.value;let c;for(;(c=r[d])&&!c.components;)d++;return d}),k=b(()=>e.value.matched[l.value]);bs(lk,b(()=>l.value+1)),bs(lB,k),bs(Gt,e);const p=li();return Si(()=>[p.value,k.value,i.name],([d,r,c],[o,A,v])=>{r&&(r.instances[c]=d,A&&A!==r&&d&&d===o&&(r.leaveGuards.size||(r.leaveGuards=A.leaveGuards),r.updateGuards.size||(r.updateGuards=A.updateGuards))),d&&r&&(!A||!en(r,A)||!o)&&(r.enterCallbacks[c]||[]).forEach(u=>u(d))},{flush:"post"}),()=>{const d=e.value,r=i.name,c=k.value,o=c&&c.components[r];if(!o)return rk(a.default,{Component:o,route:d});const A=c.props[r],v=A?A===!0?d.params:typeof A=="function"?A(d):A:null,E=h(o,Bi({},v,s,{onVnodeUnmounted:f=>{f.component.isUnmounted&&(c.instances[r]=null)},ref:p}));return rk(a.default,{Component:E,route:d})||E}}});function rk(i,s){if(!i)return null;const a=i(s);return a.length===1?a[0]:a}const oB=cB;function AB(i){const s=Zg(i.routes,i),a=i.parseQuery||eB,n=i.stringifyQuery||tk,e=i.history,t=gn(),l=gn(),k=gn(),p=ni(Us);let d=Us;$a&&i.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const r=Bt.bind(null,S=>""+S),c=Bt.bind(null,Dg),o=Bt.bind(null,Ln);function A(S,q){let U,Q;return mr(S)?(U=s.getRecordMatcher(S),Q=q):Q=S,s.addRoute(Q,U)}function v(S){const q=s.getRecordMatcher(S);q&&s.removeRoute(q)}function u(){return s.getRoutes().map(S=>S.record)}function E(S){return!!s.getRecordMatcher(S)}function f(S,q){if(q=Bi({},q||p.value),typeof S=="string"){const m=yt(a,S,q.path),D=s.resolve({path:m.path},q),R=e.createHref(m.fullPath);return Bi(m,D,{params:o(D.params),hash:Ln(m.hash),redirectedFrom:void 0,href:R})}let U;if(S.path!=null)U=Bi({},S,{path:yt(a,S.path,q.path).path});else{const m=Bi({},S.params);for(const D in m)m[D]==null&&delete m[D];U=Bi({},S,{params:c(m)}),q.params=c(q.params)}const Q=s.resolve(U,q),oi=S.hash||"";Q.params=r(o(Q.params));const Ei=xg(n,Bi({},S,{hash:fg(oi),path:Q.path})),y=e.createHref(Ei);return Bi({fullPath:Ei,hash:oi,query:n===tk?tB(S.query):S.query||{}},Q,{redirectedFrom:void 0,href:y})}function F(S){return typeof S=="string"?yt(a,S,p.value.path):Bi({},S)}function B(S,q){if(d!==S)return tn(8,{from:q,to:S})}function C(S){return I(S)}function w(S){return C(Bi(F(S),{replace:!0}))}function $(S){const q=S.matched[S.matched.length-1];if(q&&q.redirect){const{redirect:U}=q;let Q=typeof U=="function"?U(S):U;return typeof Q=="string"&&(Q=Q.includes("?")||Q.includes("#")?Q=F(Q):{path:Q},Q.params={}),Bi({query:S.query,hash:S.hash,params:Q.path!=null?{}:S.params},Q)}}function I(S,q){const U=d=f(S),Q=p.value,oi=S.state,Ei=S.force,y=S.replace===!0,m=$(U);if(m)return I(Bi(F(m),{state:typeof m=="object"?Bi({},oi,m.state):oi,force:Ei,replace:y}),q||U);const D=U;D.redirectedFrom=q;let R;return!Ei&&wg(n,Q,U)&&(R=tn(16,{to:D,from:Q}),Ki(Q,Q,!0,!1)),(R?Promise.resolve(R):O(D,Q)).catch(x=>Hs(x)?Hs(x,2)?x:ts(x):K(x,D,Q)).then(x=>{if(x){if(Hs(x,2))return I(Bi({replace:y},F(x.to),{state:typeof x.to=="object"?Bi({},oi,x.to.state):oi,force:Ei}),q||D)}else x=T(D,Q,!0,y,oi);return W(D,Q,x),x})}function j(S,q){const U=B(S,q);return U?Promise.reject(U):Promise.resolve()}function _(S){const q=Ns.values().next().value;return q&&typeof q.runWithContext=="function"?q.runWithContext(S):S()}function O(S,q){let U;const[Q,oi,Ei]=gB(S,q);U=ut(Q.reverse(),"beforeRouteLeave",S,q);for(const m of Q)m.leaveGuards.forEach(D=>{U.push(ra(D,S,q))});const y=j.bind(null,S,q);return U.push(y),Ui(U).then(()=>{U=[];for(const m of t.list())U.push(ra(m,S,q));return U.push(y),Ui(U)}).then(()=>{U=ut(oi,"beforeRouteUpdate",S,q);for(const m of oi)m.updateGuards.forEach(D=>{U.push(ra(D,S,q))});return U.push(y),Ui(U)}).then(()=>{U=[];for(const m of Ei)if(m.beforeEnter)if(Ss(m.beforeEnter))for(const D of m.beforeEnter)U.push(ra(D,S,q));else U.push(ra(m.beforeEnter,S,q));return U.push(y),Ui(U)}).then(()=>(S.matched.forEach(m=>m.enterCallbacks={}),U=ut(Ei,"beforeRouteEnter",S,q,_),U.push(y),Ui(U))).then(()=>{U=[];for(const m of l.list())U.push(ra(m,S,q));return U.push(y),Ui(U)}).catch(m=>Hs(m,8)?m:Promise.reject(m))}function W(S,q,U){k.list().forEach(Q=>_(()=>Q(S,q,U)))}function T(S,q,U,Q,oi){const Ei=B(S,q);if(Ei)return Ei;const y=q===Us,m=$a?history.state:{};U&&(Q||y?e.replace(S.fullPath,Bi({scroll:y&&m&&m.scroll},oi)):e.push(S.fullPath,oi)),p.value=S,Ki(S,q,U,y),ts()}let X;function G(){X||(X=e.listen((S,q,U)=>{if(!Ts.listening)return;const Q=f(S),oi=$(Q);if(oi){I(Bi(oi,{replace:!0,force:!0}),Q).catch(fn);return}d=Q;const Ei=p.value;$a&&Vg(Xh(Ei.fullPath,U.delta),Ue()),O(Q,Ei).catch(y=>Hs(y,12)?y:Hs(y,2)?(I(Bi(F(y.to),{force:!0}),Q).then(m=>{Hs(m,20)&&!U.delta&&U.type===On.pop&&e.go(-1,!1)}).catch(fn),Promise.reject()):(U.delta&&e.go(-U.delta,!1),K(y,Q,Ei))).then(y=>{y=y||T(Q,Ei,!1),y&&(U.delta&&!Hs(y,8)?e.go(-U.delta,!1):U.type===On.pop&&Hs(y,20)&&e.go(-1,!1)),W(Q,Ei,y)}).catch(fn)}))}let Z=gn(),V=gn(),ai;function K(S,q,U){ts(S);const Q=V.list();return Q.length?Q.forEach(oi=>oi(S,q,U)):console.error(S),Promise.reject(S)}function hi(){return ai&&p.value!==Us?Promise.resolve():new Promise((S,q)=>{Z.add([S,q])})}function ts(S){return ai||(ai=!S,G(),Z.list().forEach(([q,U])=>S?U(S):q()),Z.reset()),S}function Ki(S,q,U,Q){const{scrollBehavior:oi}=i;if(!$a||!oi)return Promise.resolve();const Ei=!U&&jg(Xh(S.fullPath,0))||(Q||!U)&&history.state&&history.state.scroll||null;return Aa().then(()=>oi(S,q,Ei)).then(y=>y&&Mg(y)).catch(y=>K(y,S,q))}const ji=S=>e.go(S);let ls;const Ns=new Set,Ts={currentRoute:p,listening:!0,addRoute:A,removeRoute:v,clearRoutes:s.clearRoutes,hasRoute:E,getRoutes:u,resolve:f,options:i,push:C,replace:w,go:ji,back:()=>ji(-1),forward:()=>ji(1),beforeEach:t.add,beforeResolve:l.add,afterEach:k.add,onError:V.add,isReady:hi,install(S){const q=this;S.component("RouterLink",pB),S.component("RouterView",oB),S.config.globalProperties.$router=q,Object.defineProperty(S.config.globalProperties,"$route",{enumerable:!0,get:()=>da(p)}),$a&&!ls&&p.value===Us&&(ls=!0,C(e.location).catch(oi=>{}));const U={};for(const oi in Us)Object.defineProperty(U,oi,{get:()=>p.value[oi],enumerable:!0});S.provide(ze,q),S.provide(wl,kp(U)),S.provide(Gt,p);const Q=S.unmount;Ns.add(S),S.unmount=function(){Ns.delete(S),Ns.size<1&&(d=Us,X&&X(),X=null,p.value=Us,ls=!1,ai=!1),Q()}}};function Ui(S){return S.reduce((q,U)=>q.then(()=>_(U)),Promise.resolve())}return Ts}function gB(i,s){const a=[],n=[],e=[],t=Math.max(s.matched.length,i.matched.length);for(let l=0;l<t;l++){const k=s.matched[l];k&&(i.matched.find(d=>en(d,k))?n.push(k):a.push(k));const p=i.matched[l];p&&(s.matched.find(d=>en(d,p))||e.push(p))}return[a,n,e]}function ga(){return bi(ze)}function js(i){return bi(wl)}var Tl=Symbol(""),xs=()=>{const i=bi(Tl);if(!i)throw new Error("useClientData() is called without provider.");return i},BB=()=>xs().pageComponent,yB=()=>xs().pageData,br=()=>xs().pageFrontmatter,uB=()=>xs().pageHead,Dr=()=>xs().pageLang,vB=()=>xs().pageLayout,Je=()=>xs().routeLocale,EB=()=>xs().routePath,mB=()=>xs().siteData,FB=()=>xs().siteLocaleData,Ba=xs,ns=br,_r=Dr,Un=yB,fB=FB,qt=new Set,sa=i=>{qt.add(i),Zs(()=>{qt.delete(i)})},CB=Symbol(""),Kt=ni(dg),Xa=ni(cg),Sr=(i,s)=>{const a=sg(i,s);if(Xa.value[a])return a;const n=encodeURI(a);if(Xa.value[n])return n;const e=Kt.value[a]||Kt.value[n];return e||a},us=(i,s)=>{const{pathname:a,hashAndQueries:n}=rr(i),e=Sr(a,s),t=e+n;return Xa.value[e]?{...Xa.value[e],path:t,notFound:!1}:{...Xa.value["/404.html"],path:t,notFound:!0}},bB=(i,s)=>{const{pathname:a,hashAndQueries:n}=rr(i);return Sr(a,s)+n},DB=i=>{if(!(i.metaKey||i.altKey||i.ctrlKey||i.shiftKey)&&!i.defaultPrevented&&!(i.button!==void 0&&i.button!==0)){if(i.currentTarget){const s=i.currentTarget.getAttribute("target");if(s!=null&&s.match(/\b_blank\b/i))return}return i.preventDefault(),!0}},Vi=M({name:"RouteLink",props:{to:{type:String,required:!0},active:Boolean,activeClass:{type:String,default:"route-link-active"}},slots:Object,setup(i,{slots:s}){const a=ga(),n=js(),e=b(()=>i.to.startsWith("#")||i.to.startsWith("?")?i.to:`/blogs/${bB(i.to,n.path).substring(1)}`);return()=>h("a",{class:["route-link",{[i.activeClass]:i.active}],href:e.value,onClick:(t={})=>{DB(t)&&a.push(i.to).catch()}},s.default())}}),_B=M({name:"AutoLink",props:{config:{type:Object,required:!0}},slots:Object,setup(i,{slots:s}){const a=hn(i,"config"),n=js(),e=mB(),t=b(()=>Wn(a.value.link)),l=b(()=>a.value.target||(t.value?"_blank":void 0)),k=b(()=>l.value==="_blank"),p=b(()=>!t.value&&!k.value),d=b(()=>a.value.rel||(k.value?"noopener noreferrer":null)),r=b(()=>a.value.ariaLabel??a.value.text),c=b(()=>{if(a.value.exact)return!1;const A=Object.keys(e.value.locales);return A.length?A.every(v=>v!==a.value.link):a.value.link!=="/"}),o=b(()=>p.value?a.value.activeMatch?(a.value.activeMatch instanceof RegExp?a.value.activeMatch:new RegExp(a.value.activeMatch,"u")).test(n.path):c.value?n.path.startsWith(a.value.link):n.path===a.value.link:!1);return()=>{const{before:A,after:v,default:u}=s,E=(u==null?void 0:u(a.value))??[A==null?void 0:A(a.value),a.value.text,v==null?void 0:v(a.value)];return p.value?h(Vi,{class:"auto-link",to:a.value.link,active:o.value,"aria-label":r.value},()=>E):h("a",{class:"auto-link external-link",href:a.value.link,"aria-label":r.value,rel:d.value,target:l.value},E)}}}),Rl=M({name:"ClientOnly",setup(i,s){const a=li(!1);return vi(()=>{a.value=!0}),()=>{var n,e;return a.value?(e=(n=s.slots).default)==null?void 0:e.call(n):null}}}),he=i=>{qt.forEach(s=>s(i))},xr=M({name:"Content",props:{path:{type:String,required:!1,default:""}},setup(i){const s=BB(),a=b(()=>{if(!i.path)return s.value;const e=us(i.path);return fp(async()=>e.loader().then(({comp:t})=>t))}),n=br();return Si(n,()=>{he("updated")},{deep:!0,flush:"post"}),()=>h(a.value,{onVnodeMounted:()=>{he("mounted")},onVnodeUpdated:()=>{he("updated")},onVnodeBeforeUnmount:()=>{he("beforeUnmount")}})}}),SB="Layout",xB="en-US",va=Sa({resolveLayouts:i=>i.reduce((s,a)=>({...s,...a.layouts}),{}),resolvePageHead:(i,s,a)=>{const n=gi(s.description)?s.description:a.description,e=[...Array.isArray(s.head)?s.head:[],...a.head,["title",{},i],["meta",{name:"description",content:n}]];return hg(e)},resolvePageHeadTitle:(i,s)=>[i.title,s.title].filter(a=>!!a).join(" | "),resolvePageLang:(i,s)=>i.lang||s.lang||xB,resolvePageLayout:(i,s)=>{const a=gi(i.frontmatter.layout)?i.frontmatter.layout:SB;if(!s[a])throw new Error(`[vuepress] Cannot resolve layout: ${a}`);return s[a]},resolveRouteLocale:(i,s)=>ag(i,decodeURI(s)),resolveSiteLocaleData:({base:i,locales:s,...a},n)=>{var e;return{...a,...s[n],head:[...((e=s[n])==null?void 0:e.head)??[],...a.head]}}}),Es=(i={})=>i,Ci=i=>Ta(i)?i:`/blogs/${cr(i)}`,wB=Object.defineProperty,TB=(i,s)=>{for(var a in s)wB(i,a,{get:s[a],enumerable:!0})},RB={};TB(RB,{COMPONENT_STATE_TYPE:()=>LB,INSPECTOR_ID:()=>OB,INSPECTOR_LABEL:()=>PB,INSPECTOR_NODES:()=>IB,INSPECTOR_STATE_SECTION_NAME:()=>MB,PLUGIN_ID:()=>wr,PLUGIN_LABEL:()=>Ll});var wr="org.vuejs.vuepress",Ll="VuePress",LB=Ll,OB=wr,PB=Ll,dk={id:"INTERNAL",label:"Internal",keys:["layouts","routes","redirects"]},ck={id:"SITE",label:"Site",keys:["siteData","siteLocaleData"]},ok={id:"ROUTE",label:"Route",keys:["routePath","routeLocale"]},Ak={id:"PAGE",label:"Page",keys:["pageData","pageFrontmatter","pageLang","pageHead","pageHeadTitle","pageLayout","pageComponent"]},IB={[dk.id]:dk,[ck.id]:ck,[ok.id]:ok,[Ak.id]:Ak},MB="State";const gk=i=>typeof i=="number"?`${i}px`:i,Ol=({size:i=48,stroke:s=4,wrapper:a=!0,height:n=2*i})=>{const e=h("span",{style:`--loading-icon: url("data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='xMidYMid' viewBox='25 25 50 50'%3E%3CanimateTransform attributeName='transform' type='rotate' dur='2s' keyTimes='0;1' repeatCount='indefinite' values='0;360'%3E%3C/animateTransform%3E%3Ccircle cx='50' cy='50' r='20' fill='none' stroke='currentColor' stroke-width='${s}' stroke-linecap='round'%3E%3Canimate attributeName='stroke-dasharray' dur='1.5s' keyTimes='0;0.5;1' repeatCount='indefinite' values='1,200;90,200;1,200'%3E%3C/animate%3E%3Canimate attributeName='stroke-dashoffset' dur='1.5s' keyTimes='0;0.5;1' repeatCount='indefinite' values='0;-35px;-125px'%3E%3C/animate%3E%3C/circle%3E%3C/svg%3E");--icon-size: ${gk(i)};display: inline-block;width: var(--icon-size);height: var(--icon-size);background-color: currentcolor;-webkit-mask-image: var(--loading-icon);mask-image: var(--loading-icon)`});return a?h("div",{style:`display: flex;align-items: center;justify-content: center;height: ${gk(n)}`},e):e};Ol.displayName="LoadingIcon";const Pl=(i,{slots:s})=>s.default();function Ra(i){return zk()?(Rc(i),!0):!1}const vt=new WeakMap,VB=(...i)=>{var s;const a=i[0],n=(s=ia())==null?void 0:s.proxy;if(n==null&&!wp())throw new Error("injectLocal must be called in setup");return n&&vt.has(n)&&a in vt.get(n)?vt.get(n)[a]:bi(...i)},zn=typeof window<"u"&&typeof document<"u";typeof WorkerGlobalScope<"u"&&globalThis instanceof WorkerGlobalScope;const jB=i=>i!=null,NB=Object.prototype.toString,$B=i=>NB.call(i)==="[object Object]",Yi=()=>{},Xt=HB();function HB(){var i,s;return zn&&((i=window==null?void 0:window.navigator)==null?void 0:i.userAgent)&&(/iP(?:ad|hone|od)/.test(window.navigator.userAgent)||((s=window==null?void 0:window.navigator)==null?void 0:s.maxTouchPoints)>2&&/iPad|Macintosh/.test(window==null?void 0:window.navigator.userAgent))}function Tr(...i){if(i.length!==1)return hn(...i);const s=i[0];return typeof s=="function"?wa(El(()=>({get:s,set:Yi}))):li(s)}function Il(i,s){function a(...n){return new Promise((e,t)=>{Promise.resolve(i(()=>s.apply(this,n),{fn:s,thisArg:this,args:n})).then(e).catch(t)})}return a}const Rr=i=>i();function WB(i,s={}){let a,n,e=Yi;const t=p=>{clearTimeout(p),e(),e=Yi};let l;return p=>{const d=ki(i),r=ki(s.maxWait);return a&&t(a),d<=0||r!==void 0&&r<=0?(n&&(t(n),n=void 0),Promise.resolve(p())):new Promise((c,o)=>{e=s.rejectOnCancel?o:c,l=p,r&&!n&&(n=setTimeout(()=>{a&&t(a),n=void 0,c(l())},r)),a=setTimeout(()=>{n&&t(n),n=void 0,c(p())},d)})}}function UB(...i){let s=0,a,n=!0,e=Yi,t,l,k,p,d;!Li(i[0])&&typeof i[0]=="object"?{delay:l,trailing:k=!0,leading:p=!0,rejectOnCancel:d=!1}=i[0]:[l,k=!0,p=!0,d=!1]=i;const r=()=>{a&&(clearTimeout(a),a=void 0,e(),e=Yi)};return o=>{const A=ki(l),v=Date.now()-s,u=()=>t=o();return r(),A<=0?(s=Date.now(),u()):(v>A&&(p||!n)?(s=Date.now(),u()):k&&(t=new Promise((E,f)=>{e=d?f:E,a=setTimeout(()=>{s=Date.now(),n=!0,E(u()),r()},Math.max(0,A-v))})),!p&&!a&&(a=setTimeout(()=>n=!0,A)),n=!1,t)}}function zB(i=Rr,s={}){const{initialState:a="active"}=s,n=Tr(a==="active");function e(){n.value=!1}function t(){n.value=!0}const l=(...k)=>{n.value&&i(...k)};return{isActive:wa(n),pause:e,resume:t,eventFilter:l}}function JB(i){let s;function a(){return s||(s=i()),s}return a.reset=async()=>{const n=s;s=void 0,n&&await n},a}function Bk(i){return i.endsWith("rem")?Number.parseFloat(i)*16:Number.parseFloat(i)}function bn(i){return Array.isArray(i)?i:[i]}function Lr(i){return ia()}function Ml(i,s=200,a={}){return Il(WB(s,a),i)}function Or(i,s=200,a=!1,n=!0,e=!1){return Il(UB(s,a,n,e),i)}function GB(i,s,a={}){const{eventFilter:n=Rr,...e}=a;return Si(i,Il(n,s),e)}function qB(i,s,a={}){const{eventFilter:n,initialState:e="active",...t}=a,{eventFilter:l,pause:k,resume:p,isActive:d}=zB(n,{initialState:e});return{stop:GB(i,s,{...t,eventFilter:l}),pause:k,resume:p,isActive:d}}function kn(i,s=!0,a){Lr()?vi(i,a):s?i():Aa(i)}function KB(i,s){Lr()&&Zs(i,s)}function XB(i,s,a={}){const{immediate:n=!0,immediateCallback:e=!1}=a,t=ni(!1);let l;function k(){l&&(clearTimeout(l),l=void 0)}function p(){t.value=!1,k()}function d(...r){e&&i(),k(),t.value=!0,l=setTimeout(()=>{t.value=!1,l=void 0,i(...r)},ki(s))}return n&&(t.value=!0,zn&&d()),Ra(p),{isPending:Yc(t),start:d,stop:p}}function ln(i=!1,s={}){const{truthyValue:a=!0,falsyValue:n=!1}=s,e=Li(i),t=ni(i);function l(k){if(arguments.length)return t.value=k,t.value;{const p=ki(a);return t.value=t.value===p?ki(n):p,t.value}}return e?l:[t,l]}function vs(i,s,a){return Si(i,s,{...a,immediate:!0})}const qi=zn?window:void 0,Pr=zn?window.document:void 0,Ir=zn?window.navigator:void 0;function Wi(i){var s;const a=ki(i);return(s=a==null?void 0:a.$el)!=null?s:a}function pi(...i){const s=[],a=()=>{s.forEach(k=>k()),s.length=0},n=(k,p,d,r)=>(k.addEventListener(p,d,r),()=>k.removeEventListener(p,d,r)),e=b(()=>{const k=bn(ki(i[0])).filter(p=>p!=null);return k.every(p=>typeof p!="string")?k:void 0}),t=vs(()=>{var k,p;return[(p=(k=e.value)==null?void 0:k.map(d=>Wi(d)))!=null?p:[qi].filter(d=>d!=null),bn(ki(e.value?i[1]:i[0])),bn(da(e.value?i[2]:i[1])),ki(e.value?i[3]:i[2])]},([k,p,d,r])=>{if(a(),!(k!=null&&k.length)||!(p!=null&&p.length)||!(d!=null&&d.length))return;const c=$B(r)?{...r}:r;s.push(...k.flatMap(o=>p.flatMap(A=>d.map(v=>n(o,A,v,c)))))},{flush:"post"}),l=()=>{t(),a()};return Ra(a),l}let yk=!1;function QB(i,s,a={}){const{window:n=qi,ignore:e=[],capture:t=!0,detectIframe:l=!1,controls:k=!1}=a;if(!n)return k?{stop:Yi,cancel:Yi,trigger:Yi}:Yi;if(Xt&&!yk){yk=!0;const E={passive:!0};Array.from(n.document.body.children).forEach(f=>f.addEventListener("click",Yi,E)),n.document.documentElement.addEventListener("click",Yi,E)}let p=!0;const d=E=>ki(e).some(f=>{if(typeof f=="string")return Array.from(n.document.querySelectorAll(f)).some(F=>F===E.target||E.composedPath().includes(F));{const F=Wi(f);return F&&(E.target===F||E.composedPath().includes(F))}});function r(E){const f=ki(E);return f&&f.$.subTree.shapeFlag===16}function c(E,f){const F=ki(E),B=F.$.subTree&&F.$.subTree.children;return B==null||!Array.isArray(B)?!1:B.some(C=>C.el===f.target||f.composedPath().includes(C.el))}const o=E=>{const f=Wi(i);if(E.target!=null&&!(!(f instanceof Element)&&r(i)&&c(i,E))&&!(!f||f===E.target||E.composedPath().includes(f))){if("detail"in E&&E.detail===0&&(p=!d(E)),!p){p=!0;return}s(E)}};let A=!1;const v=[pi(n,"click",E=>{A||(A=!0,setTimeout(()=>{A=!1},0),o(E))},{passive:!0,capture:t}),pi(n,"pointerdown",E=>{const f=Wi(i);p=!d(E)&&!!(f&&!E.composedPath().includes(f))},{passive:!0}),l&&pi(n,"blur",E=>{setTimeout(()=>{var f;const F=Wi(i);((f=n.document.activeElement)==null?void 0:f.tagName)==="IFRAME"&&!(F!=null&&F.contains(n.document.activeElement))&&s(E)},0)},{passive:!0})].filter(Boolean),u=()=>v.forEach(E=>E());return k?{stop:u,cancel:()=>{p=!1},trigger:E=>{p=!0,o(E),p=!1}}:u}function YB(){const i=ni(!1),s=ia();return s&&vi(()=>{i.value=!0},s),i}function La(i){const s=YB();return b(()=>(s.value,!!i()))}function Mr(i,s,a={}){const{window:n=qi,...e}=a;let t;const l=La(()=>n&&"MutationObserver"in n),k=()=>{t&&(t.disconnect(),t=void 0)},p=b(()=>{const o=ki(i),A=bn(o).map(Wi).filter(jB);return new Set(A)}),d=Si(()=>p.value,o=>{k(),l.value&&o.size&&(t=new MutationObserver(s),o.forEach(A=>t.observe(A,e)))},{immediate:!0,flush:"post"}),r=()=>t==null?void 0:t.takeRecords(),c=()=>{d(),k()};return Ra(c),{isSupported:l,stop:c,takeRecords:r}}function ZB(i,s,a={}){const{window:n=qi,document:e=n==null?void 0:n.document,flush:t="sync"}=a;if(!n||!e)return Yi;let l;const k=r=>{l==null||l(),l=r},p=je(()=>{const r=Wi(i);if(r){const{stop:c}=Mr(e,o=>{o.map(v=>[...v.removedNodes]).flat().some(v=>v===r||v.contains(r))&&s(o)},{window:n,childList:!0,subtree:!0});k(c)}},{flush:t}),d=()=>{p(),k()};return Ra(d),d}const i8=Symbol("vueuse-ssr-width");function s8(){const i=wp()?VB(i8,null):null;return typeof i=="number"?i:void 0}function Vl(i,s={}){const{window:a=qi,ssrWidth:n=s8()}=s,e=La(()=>a&&"matchMedia"in a&&typeof a.matchMedia=="function"),t=ni(typeof n=="number"),l=ni(),k=ni(!1),p=d=>{k.value=d.matches};return je(()=>{if(t.value){t.value=!e.value;const d=ki(i).split(",");k.value=d.some(r=>{const c=r.includes("not all"),o=r.match(/\(\s*min-width:\s*(-?\d+(?:\.\d*)?[a-z]+\s*)\)/),A=r.match(/\(\s*max-width:\s*(-?\d+(?:\.\d*)?[a-z]+\s*)\)/);let v=!!(o||A);return o&&v&&(v=n>=Bk(o[1])),A&&v&&(v=n<=Bk(A[1])),c?!v:v});return}e.value&&(l.value=a.matchMedia(ki(i)),k.value=l.value.matches)}),pi(l,"change",p,{passive:!0}),b(()=>k.value)}function uk(i,s={}){const{controls:a=!1,navigator:n=Ir}=s,e=La(()=>n&&"permissions"in n),t=ni(),l=typeof i=="string"?{name:i}:i,k=ni(),p=()=>{var r,c;k.value=(c=(r=t.value)==null?void 0:r.state)!=null?c:"prompt"};pi(t,"change",p,{passive:!0});const d=JB(async()=>{if(e.value){if(!t.value)try{t.value=await n.permissions.query(l)}catch{t.value=void 0}finally{p()}if(a)return ci(t.value)}});return d(),a?{state:k,isSupported:e,query:d}:k}function a8(i={}){const{navigator:s=Ir,read:a=!1,source:n,copiedDuring:e=1500,legacy:t=!1}=i,l=La(()=>s&&"clipboard"in s),k=uk("clipboard-read"),p=uk("clipboard-write"),d=b(()=>l.value||t),r=ni(""),c=ni(!1),o=XB(()=>c.value=!1,e,{immediate:!1});async function A(){let F=!(l.value&&f(k.value));if(!F)try{r.value=await s.clipboard.readText()}catch{F=!0}F&&(r.value=E())}d.value&&a&&pi(["copy","cut"],A,{passive:!0});async function v(F=ki(n)){if(d.value&&F!=null){let B=!(l.value&&f(p.value));if(!B)try{await s.clipboard.writeText(F)}catch{B=!0}B&&u(F),r.value=F,c.value=!0,o.start()}}function u(F){const B=document.createElement("textarea");B.value=F??"",B.style.position="absolute",B.style.opacity="0",document.body.appendChild(B),B.select(),document.execCommand("copy"),B.remove()}function E(){var F,B,C;return(C=(B=(F=document==null?void 0:document.getSelection)==null?void 0:F.call(document))==null?void 0:B.toString())!=null?C:""}function f(F){return F==="granted"||F==="prompt"}return{isSupported:d,text:r,copied:c,copy:v}}const ke=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},pe="__vueuse_ssr_handlers__",n8=e8();function e8(){return pe in ke||(ke[pe]=ke[pe]||{}),ke[pe]}function t8(i,s){return n8[i]||s}function l8(i){return Vl("(prefers-color-scheme: dark)",i)}function h8(i){return i==null?"any":i instanceof Set?"set":i instanceof Map?"map":i instanceof Date?"date":typeof i=="boolean"?"boolean":typeof i=="string"?"string":typeof i=="object"?"object":Number.isNaN(i)?"any":"number"}const k8={boolean:{read:i=>i==="true",write:i=>String(i)},object:{read:i=>JSON.parse(i),write:i=>JSON.stringify(i)},number:{read:i=>Number.parseFloat(i),write:i=>String(i)},any:{read:i=>i,write:i=>String(i)},string:{read:i=>i,write:i=>String(i)},map:{read:i=>new Map(JSON.parse(i)),write:i=>JSON.stringify(Array.from(i.entries()))},set:{read:i=>new Set(JSON.parse(i)),write:i=>JSON.stringify(Array.from(i))},date:{read:i=>new Date(i),write:i=>i.toISOString()}},vk="vueuse-storage";function Jn(i,s,a,n={}){var e;const{flush:t="pre",deep:l=!0,listenToStorageChanges:k=!0,writeDefaults:p=!0,mergeDefaults:d=!1,shallow:r,window:c=qi,eventFilter:o,onError:A=G=>{console.error(G)},initOnMounted:v}=n,u=(r?ni:li)(typeof s=="function"?s():s),E=b(()=>ki(i));if(!a)try{a=t8("getDefaultStorage",()=>{var G;return(G=qi)==null?void 0:G.localStorage})()}catch(G){A(G)}if(!a)return u;const f=ki(s),F=h8(f),B=(e=n.serializer)!=null?e:k8[F],{pause:C,resume:w}=qB(u,()=>O(u.value),{flush:t,deep:l,eventFilter:o});Si(E,()=>T(),{flush:t});let $=!1;const I=G=>{v&&!$||T(G)},j=G=>{v&&!$||X(G)};c&&k&&(a instanceof Storage?pi(c,"storage",I,{passive:!0}):pi(c,vk,j)),v?kn(()=>{$=!0,T()}):T();function _(G,Z){if(c){const V={key:E.value,oldValue:G,newValue:Z,storageArea:a};c.dispatchEvent(a instanceof Storage?new StorageEvent("storage",V):new CustomEvent(vk,{detail:V}))}}function O(G){try{const Z=a.getItem(E.value);if(G==null)_(Z,null),a.removeItem(E.value);else{const V=B.write(G);Z!==V&&(a.setItem(E.value,V),_(Z,V))}}catch(Z){A(Z)}}function W(G){const Z=G?G.newValue:a.getItem(E.value);if(Z==null)return p&&f!=null&&a.setItem(E.value,B.write(f)),f;if(!G&&d){const V=B.read(Z);return typeof d=="function"?d(V,f):F==="object"&&!Array.isArray(V)?{...f,...V}:V}else return typeof Z!="string"?Z:B.read(Z)}function T(G){if(!(G&&G.storageArea!==a)){if(G&&G.key==null){u.value=f;return}if(!(G&&G.key!==E.value)){C();try{(G==null?void 0:G.newValue)!==B.write(u.value)&&(u.value=W(G))}catch(Z){A(Z)}finally{G?Aa(w):w()}}}}function X(G){T(G.detail)}return u}function jl(i,s,a={}){const{window:n=qi,...e}=a;let t;const l=La(()=>n&&"ResizeObserver"in n),k=()=>{t&&(t.disconnect(),t=void 0)},p=b(()=>{const c=ki(i);return Array.isArray(c)?c.map(o=>Wi(o)):[Wi(c)]}),d=Si(p,c=>{if(k(),l.value&&n){t=new ResizeObserver(s);for(const o of c)o&&t.observe(o,e)}},{immediate:!0,flush:"post"}),r=()=>{k(),d()};return Ra(r),{isSupported:l,stop:r}}function p8(i,s={}){const{delayEnter:a=0,delayLeave:n=0,triggerOnRemoval:e=!1,window:t=qi}=s,l=ni(!1);let k;const p=d=>{const r=d?a:n;k&&(clearTimeout(k),k=void 0),r?k=setTimeout(()=>l.value=d,r):l.value=d};return t&&(pi(i,"mouseenter",()=>p(!0),{passive:!0}),pi(i,"mouseleave",()=>p(!1),{passive:!0}),e&&ZB(b(()=>Wi(i)),()=>p(!1))),l}function r8(i,s={width:0,height:0},a={}){const{window:n=qi,box:e="content-box"}=a,t=b(()=>{var c,o;return(o=(c=Wi(i))==null?void 0:c.namespaceURI)==null?void 0:o.includes("svg")}),l=ni(s.width),k=ni(s.height),{stop:p}=jl(i,([c])=>{const o=e==="border-box"?c.borderBoxSize:e==="content-box"?c.contentBoxSize:c.devicePixelContentBoxSize;if(n&&t.value){const A=Wi(i);if(A){const v=A.getBoundingClientRect();l.value=v.width,k.value=v.height}}else if(o){const A=bn(o);l.value=A.reduce((v,{inlineSize:u})=>v+u,0),k.value=A.reduce((v,{blockSize:u})=>v+u,0)}else l.value=c.contentRect.width,k.value=c.contentRect.height},a);kn(()=>{const c=Wi(i);c&&(l.value="offsetWidth"in c?c.offsetWidth:s.width,k.value="offsetHeight"in c?c.offsetHeight:s.height)});const d=Si(()=>Wi(i),c=>{l.value=c?s.width:0,k.value=c?s.height:0});function r(){p(),d()}return{width:l,height:k,stop:r}}const Ek=["fullscreenchange","webkitfullscreenchange","webkitendfullscreen","mozfullscreenchange","MSFullscreenChange"];function Ge(i,s={}){const{document:a=Pr,autoExit:n=!1}=s,e=b(()=>{var F;return(F=Wi(i))!=null?F:a==null?void 0:a.documentElement}),t=ni(!1),l=b(()=>["requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","webkitEnterFullScreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullscreen"].find(F=>a&&F in a||e.value&&F in e.value)),k=b(()=>["exitFullscreen","webkitExitFullscreen","webkitExitFullScreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen"].find(F=>a&&F in a||e.value&&F in e.value)),p=b(()=>["fullScreen","webkitIsFullScreen","webkitDisplayingFullscreen","mozFullScreen","msFullscreenElement"].find(F=>a&&F in a||e.value&&F in e.value)),d=["fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement"].find(F=>a&&F in a),r=La(()=>e.value&&a&&l.value!==void 0&&k.value!==void 0&&p.value!==void 0),c=()=>d?(a==null?void 0:a[d])===e.value:!1,o=()=>{if(p.value){if(a&&a[p.value]!=null)return a[p.value];{const F=e.value;if((F==null?void 0:F[p.value])!=null)return!!F[p.value]}}return!1};async function A(){if(!(!r.value||!t.value)){if(k.value)if((a==null?void 0:a[k.value])!=null)await a[k.value]();else{const F=e.value;(F==null?void 0:F[k.value])!=null&&await F[k.value]()}t.value=!1}}async function v(){if(!r.value||t.value)return;o()&&await A();const F=e.value;l.value&&(F==null?void 0:F[l.value])!=null&&(await F[l.value](),t.value=!0)}async function u(){await(t.value?A():v())}const E=()=>{const F=o();(!F||F&&c())&&(t.value=F)},f={capture:!1,passive:!0};return pi(a,Ek,E,f),pi(()=>Wi(e),Ek,E,f),kn(E,!1),n&&Ra(A),{isSupported:r,isFullscreen:t,enter:v,exit:A,toggle:u}}function Et(i){return typeof Window<"u"&&i instanceof Window?i.document.documentElement:typeof Document<"u"&&i instanceof Document?i.documentElement:i}const mk=1;function d8(i,s={}){const{throttle:a=0,idle:n=200,onStop:e=Yi,onScroll:t=Yi,offset:l={left:0,right:0,top:0,bottom:0},observe:k={mutation:!1},eventListenerOptions:p={capture:!1,passive:!0},behavior:d="auto",window:r=qi,onError:c=_=>{console.error(_)}}=s,o=typeof k=="boolean"?{mutation:k}:k,A=ni(0),v=ni(0),u=b({get(){return A.value},set(_){f(_,void 0)}}),E=b({get(){return v.value},set(_){f(void 0,_)}});function f(_,O){var W,T,X,G;if(!r)return;const Z=ki(i);if(!Z)return;(X=Z instanceof Document?r.document.body:Z)==null||X.scrollTo({top:(W=ki(O))!=null?W:E.value,left:(T=ki(_))!=null?T:u.value,behavior:ki(d)});const V=((G=Z==null?void 0:Z.document)==null?void 0:G.documentElement)||(Z==null?void 0:Z.documentElement)||Z;u!=null&&(A.value=V.scrollLeft),E!=null&&(v.value=V.scrollTop)}const F=ni(!1),B=Sa({left:!0,right:!1,top:!0,bottom:!1}),C=Sa({left:!1,right:!1,top:!1,bottom:!1}),w=_=>{F.value&&(F.value=!1,C.left=!1,C.right=!1,C.top=!1,C.bottom=!1,e(_))},$=Ml(w,a+n),I=_=>{var O;if(!r)return;const W=((O=_==null?void 0:_.document)==null?void 0:O.documentElement)||(_==null?void 0:_.documentElement)||Wi(_),{display:T,flexDirection:X,direction:G}=getComputedStyle(W),Z=G==="rtl"?-1:1,V=W.scrollLeft;C.left=V<A.value,C.right=V>A.value;const ai=Math.abs(V*Z)<=(l.left||0),K=Math.abs(V*Z)+W.clientWidth>=W.scrollWidth-(l.right||0)-mk;T==="flex"&&X==="row-reverse"?(B.left=K,B.right=ai):(B.left=ai,B.right=K),A.value=V;let hi=W.scrollTop;_===r.document&&!hi&&(hi=r.document.body.scrollTop),C.top=hi<v.value,C.bottom=hi>v.value;const ts=Math.abs(hi)<=(l.top||0),Ki=Math.abs(hi)+W.clientHeight>=W.scrollHeight-(l.bottom||0)-mk;T==="flex"&&X==="column-reverse"?(B.top=Ki,B.bottom=ts):(B.top=ts,B.bottom=Ki),v.value=hi},j=_=>{var O;if(!r)return;const W=(O=_.target.documentElement)!=null?O:_.target;I(W),F.value=!0,$(_),t(_)};return pi(i,"scroll",a?Or(j,a,!0,!1):j,p),kn(()=>{try{const _=ki(i);if(!_)return;I(_)}catch(_){c(_)}}),o!=null&&o.mutation&&i!=null&&i!==r&&i!==document&&Mr(i,()=>{const _=ki(i);_&&I(_)},{attributes:!0,childList:!0,subtree:!0}),pi(i,"scrollend",w,p),{x:u,y:E,isScrolling:F,arrivedState:B,directions:C,measure(){const _=ki(i);r&&_&&I(_)}}}function c8(i,s,a={}){const{window:n=qi}=a;return Jn(i,s,n==null?void 0:n.localStorage,a)}function o8(i={}){const{window:s=qi}=i;if(!s)return li(["en"]);const a=s.navigator,n=li(a.languages);return pi(s,"languagechange",()=>{n.value=a.languages},{passive:!0}),n}function A8(i,s=Yi,a={}){const{immediate:n=!0,manual:e=!1,type:t="text/javascript",async:l=!0,crossOrigin:k,referrerPolicy:p,noModule:d,defer:r,document:c=Pr,attrs:o={},nonce:A=void 0}=a,v=ni(null);let u=null;const E=B=>new Promise((C,w)=>{const $=O=>(v.value=O,C(O),O);if(!c){C(!1);return}let I=!1,j=c.querySelector(`script[src="${ki(i)}"]`);j?j.hasAttribute("data-loaded")&&$(j):(j=c.createElement("script"),j.type=t,j.async=l,j.src=ki(i),r&&(j.defer=r),k&&(j.crossOrigin=k),d&&(j.noModule=d),p&&(j.referrerPolicy=p),A&&(j.nonce=A),Object.entries(o).forEach(([O,W])=>j==null?void 0:j.setAttribute(O,W)),I=!0);const _={passive:!0};pi(j,"error",O=>w(O),_),pi(j,"abort",O=>w(O),_),pi(j,"load",()=>{j.setAttribute("data-loaded","true"),s(j),$(j)},_),I&&(j=c.head.appendChild(j)),B||$(j)}),f=(B=!0)=>(u||(u=E(B)),u),F=()=>{if(!c)return;u=null,v.value&&(v.value=null);const B=c.querySelector(`script[src="${ki(i)}"]`);B&&c.head.removeChild(B)};return n&&!e&&kn(f),e||KB(F),{scriptTag:v,load:f,unload:F}}function Vr(i){const s=window.getComputedStyle(i);if(s.overflowX==="scroll"||s.overflowY==="scroll"||s.overflowX==="auto"&&i.clientWidth<i.scrollWidth||s.overflowY==="auto"&&i.clientHeight<i.scrollHeight)return!0;{const a=i.parentNode;return!a||a.tagName==="BODY"?!1:Vr(a)}}function g8(i){const s=i||window.event,a=s.target;return Vr(a)?!1:s.touches.length>1?!0:(s.preventDefault&&s.preventDefault(),!1)}const mt=new WeakMap;function qe(i,s=!1){const a=ni(s);let n=null,e="";Si(Tr(i),k=>{const p=Et(ki(k));if(p){const d=p;if(mt.get(d)||mt.set(d,d.style.overflow),d.style.overflow!=="hidden"&&(e=d.style.overflow),d.style.overflow==="hidden")return a.value=!0;if(a.value)return d.style.overflow="hidden"}},{immediate:!0});const t=()=>{const k=Et(ki(i));!k||a.value||(Xt&&(n=pi(k,"touchmove",p=>{g8(p)},{passive:!1})),k.style.overflow="hidden",a.value=!0)},l=()=>{const k=Et(ki(i));!k||!a.value||(Xt&&(n==null||n()),k.style.overflow=e,mt.delete(k),a.value=!1)};return Ra(l),b({get(){return a.value},set(k){k?t():l()}})}function B8(i,s,a={}){const{window:n=qi}=a;return Jn(i,s,n==null?void 0:n.sessionStorage,a)}function y8(i={}){const{window:s=qi,...a}=i;return d8(s,a)}function u8(i={}){const{window:s=qi,initialWidth:a=Number.POSITIVE_INFINITY,initialHeight:n=Number.POSITIVE_INFINITY,listenOrientation:e=!0,includeScrollbar:t=!0,type:l="inner"}=i,k=ni(a),p=ni(n),d=()=>{if(s)if(l==="outer")k.value=s.outerWidth,p.value=s.outerHeight;else if(l==="visual"&&s.visualViewport){const{width:c,height:o,scale:A}=s.visualViewport;k.value=Math.round(c*A),p.value=Math.round(o*A)}else t?(k.value=s.innerWidth,p.value=s.innerHeight):(k.value=s.document.documentElement.clientWidth,p.value=s.document.documentElement.clientHeight)};d(),kn(d);const r={passive:!0};if(pi("resize",d,r),s&&l==="visual"&&s.visualViewport&&pi(s.visualViewport,"resize",d,r),e){const c=Vl("(orientation: portrait)");Si(c,()=>d())}return{width:k,height:p}}var rs=Uint8Array,Ua=Uint16Array,v8=Int32Array,jr=new rs([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),Nr=new rs([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),E8=new rs([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),$r=function(i,s){for(var a=new Ua(31),n=0;n<31;++n)a[n]=s+=1<<i[n-1];for(var e=new v8(a[30]),n=1;n<30;++n)for(var t=a[n];t<a[n+1];++t)e[t]=t-a[n]<<5|n;return{b:a,r:e}},Hr=$r(jr,2),Wr=Hr.b,m8=Hr.r;Wr[28]=258,m8[258]=28;var F8=$r(Nr,0),f8=F8.b,Qt=new Ua(32768);for(var _i=0;_i<32768;++_i){var ta=(_i&43690)>>1|(_i&21845)<<1;ta=(ta&52428)>>2|(ta&13107)<<2,ta=(ta&61680)>>4|(ta&3855)<<4,Qt[_i]=((ta&65280)>>8|(ta&255)<<8)>>1}var Dn=function(i,s,a){for(var n=i.length,e=0,t=new Ua(s);e<n;++e)i[e]&&++t[i[e]-1];var l=new Ua(s);for(e=1;e<s;++e)l[e]=l[e-1]+t[e-1]<<1;var k;if(a){k=new Ua(1<<s);var p=15-s;for(e=0;e<n;++e)if(i[e])for(var d=e<<4|i[e],r=s-i[e],c=l[i[e]-1]++<<r,o=c|(1<<r)-1;c<=o;++c)k[Qt[c]>>p]=d}else for(k=new Ua(n),e=0;e<n;++e)i[e]&&(k[e]=Qt[l[i[e]-1]++]>>15-i[e]);return k},Gn=new rs(288);for(var _i=0;_i<144;++_i)Gn[_i]=8;for(var _i=144;_i<256;++_i)Gn[_i]=9;for(var _i=256;_i<280;++_i)Gn[_i]=7;for(var _i=280;_i<288;++_i)Gn[_i]=8;var Ur=new rs(32);for(var _i=0;_i<32;++_i)Ur[_i]=5;var C8=Dn(Gn,9,1),b8=Dn(Ur,5,1),Ft=function(i){for(var s=i[0],a=1;a<i.length;++a)i[a]>s&&(s=i[a]);return s},fs=function(i,s,a){var n=s/8|0;return(i[n]|i[n+1]<<8)>>(s&7)&a},ft=function(i,s){var a=s/8|0;return(i[a]|i[a+1]<<8|i[a+2]<<16)>>(s&7)},D8=function(i){return(i+7)/8|0},zr=function(i,s,a){return(s==null||s<0)&&(s=0),(a==null||a>i.length)&&(a=i.length),new rs(i.subarray(s,a))},_8=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],gs=function(i,s,a){var n=new Error(s||_8[i]);if(n.code=i,Error.captureStackTrace&&Error.captureStackTrace(n,gs),!a)throw n;return n},S8=function(i,s,a,n){var e=i.length,t=0;if(!e||s.f&&!s.l)return a||new rs(0);var l=!a,k=l||s.i!=2,p=s.i;l&&(a=new rs(e*3));var d=function(oi){var Ei=a.length;if(oi>Ei){var y=new rs(Math.max(Ei*2,oi));y.set(a),a=y}},r=s.f||0,c=s.p||0,o=s.b||0,A=s.l,v=s.d,u=s.m,E=s.n,f=e*8;do{if(!A){r=fs(i,c,1);var F=fs(i,c+1,3);if(c+=3,F)if(F==1)A=C8,v=b8,u=9,E=5;else if(F==2){var $=fs(i,c,31)+257,I=fs(i,c+10,15)+4,j=$+fs(i,c+5,31)+1;c+=14;for(var _=new rs(j),O=new rs(19),W=0;W<I;++W)O[E8[W]]=fs(i,c+W*3,7);c+=I*3;for(var T=Ft(O),X=(1<<T)-1,G=Dn(O,T,1),W=0;W<j;){var Z=G[fs(i,c,X)];c+=Z&15;var B=Z>>4;if(B<16)_[W++]=B;else{var V=0,ai=0;for(B==16?(ai=3+fs(i,c,3),c+=2,V=_[W-1]):B==17?(ai=3+fs(i,c,7),c+=3):B==18&&(ai=11+fs(i,c,127),c+=7);ai--;)_[W++]=V}}var K=_.subarray(0,$),hi=_.subarray($);u=Ft(K),E=Ft(hi),A=Dn(K,u,1),v=Dn(hi,E,1)}else gs(1);else{var B=D8(c)+4,C=i[B-4]|i[B-3]<<8,w=B+C;if(w>e){p&&gs(0);break}k&&d(o+C),a.set(i.subarray(B,w),o),s.b=o+=C,s.p=c=w*8,s.f=r;continue}if(c>f){p&&gs(0);break}}k&&d(o+131072);for(var ts=(1<<u)-1,Ki=(1<<E)-1,ji=c;;ji=c){var V=A[ft(i,c)&ts],ls=V>>4;if(c+=V&15,c>f){p&&gs(0);break}if(V||gs(2),ls<256)a[o++]=ls;else if(ls==256){ji=c,A=null;break}else{var Ns=ls-254;if(ls>264){var W=ls-257,Ts=jr[W];Ns=fs(i,c,(1<<Ts)-1)+Wr[W],c+=Ts}var Ui=v[ft(i,c)&Ki],S=Ui>>4;Ui||gs(3),c+=Ui&15;var hi=f8[S];if(S>3){var Ts=Nr[S];hi+=ft(i,c)&(1<<Ts)-1,c+=Ts}if(c>f){p&&gs(0);break}k&&d(o+131072);var q=o+Ns;if(o<hi){var U=t-hi,Q=Math.min(hi,q);for(U+o<0&&gs(3);o<Q;++o)a[o]=n[U+o]}for(;o<q;++o)a[o]=a[o-hi]}}s.l=A,s.p=ji,s.b=o,s.f=r,A&&(r=1,s.m=u,s.d=v,s.n=E)}while(!r);return o!=a.length&&l?zr(a,0,o):a.subarray(0,o)},x8=new rs(0),w8=function(i,s){return((i[0]&15)!=8||i[0]>>4>7||(i[0]<<8|i[1])%31)&&gs(6,"invalid zlib data"),(i[1]>>5&1)==1&&gs(6,"invalid zlib data: "+(i[1]&32?"need":"unexpected")+" dictionary"),(i[1]>>3&4)+2};function T8(i,s){return S8(i.subarray(w8(i),-4),{i:2},s,s)}var Yt=typeof TextDecoder<"u"&&new TextDecoder,R8=0;try{Yt.decode(x8,{stream:!0}),R8=1}catch{}var L8=function(i){for(var s="",a=0;;){var n=i[a++],e=(n>127)+(n>223)+(n>239);if(a+e>i.length)return{s,r:zr(i,a-1)};e?e==3?(n=((n&15)<<18|(i[a++]&63)<<12|(i[a++]&63)<<6|i[a++]&63)-65536,s+=String.fromCharCode(55296|n>>10,56320|n&1023)):e&1?s+=String.fromCharCode((n&31)<<6|i[a++]&63):s+=String.fromCharCode((n&15)<<12|(i[a++]&63)<<6|i[a++]&63):s+=String.fromCharCode(n)}};function O8(i,s){{for(var a=new rs(i.length),n=0;n<i.length;++n)a[n]=i.charCodeAt(n);return a}for(var e=i.length,n=0;n<e;++n);}function P8(i,s){var a;if(Yt)return Yt.decode(i);var n=L8(i),e=n.s,a=n.r;return a.length&&gs(8),e}const Fk=i=>{const s=atob(i);return P8(T8(O8(s)))},Jr=[...new Array(6)].map((i,s)=>`[vp-content] h${s+1}`).join(","),I8=(i,s=2)=>{if(s===!1)return[];const[a,n]=typeof s=="number"?[s,s]:s==="deep"?[2,6]:s,e=i.filter(l=>l.level>=a&&l.level<=n),t=[];i:for(let l=0;l<e.length;l++){const k=e[l];if(l===0)t.push(k);else{for(let p=l-1;p>=0;p--){const d=e[p];if(d.level<k.level){d.children.push(k);continue i}}t.push(k)}}return t},M8=(i,s=[])=>{let a;if(s.length){const n=i.cloneNode(!0);n.querySelectorAll(s.join(",")).forEach(e=>{e.remove()}),a=n.textContent||""}else a=i.textContent||"";return a.trim()},V8=(i=Jr,s=[])=>Array.from(document.querySelectorAll(i)).filter(a=>a.id&&a.hasChildNodes()).map(a=>({element:a,title:M8(a,s),link:`#${a.id}`,slug:a.id,level:Number(a.tagName[1]),children:[]})),j8=({selector:i=Jr,levels:s=2,ignore:a=[]}={})=>I8(V8(i,a),s),Nl=i=>typeof i<"u",Be=i=>typeof i=="number",{isArray:Ms}=Array,xe=(i,s)=>gi(i)&&i.startsWith(s),N8=(i,s)=>gi(i)&&i.endsWith(s),{entries:Oa}=Object,{keys:Vs}=Object,Zt=(i,...s)=>{if(s.length===0)return i;const a=s.shift();return a&&Oa(a).forEach(([n,e])=>{n==="__proto__"||n==="constructor"||(Ds(i[n])&&Ds(e)?Zt(i[n],e):Ms(e)?i[n]=[...e]:Ds(e)?i[n]={...e}:i[n]=a[n])}),Zt(i,...s)},$l=i=>{if(i){if(typeof i=="number")return new Date(i);const s=Date.parse(i.toString());if(!Number.isNaN(s))return new Date(s)}return null},Ke=i=>xe(i,"/")&&i[1]!=="/",Gr=i=>i.every(s=>s.type===Ni?!0:s.type===Hi?s.children==null||Ms(s.children)&&Gr(s.children):!1),Qa=i=>i==null?!0:Ms(i)?Gr(i):!1,cs=(i,s)=>{var n;const a=(n=(s==null?void 0:s._instance)??ia())==null?void 0:n.appContext.components;return a?i in a||is(i)in a||Vn(is(i))in a:!1},Ct="message-container";class Hl{constructor(){ph(this,"elements");this.elements={}}static get containerElement(){let s=document.getElementById(Ct);return s||(s=document.createElement("div"),s.id=Ct,document.body.appendChild(s),s)}getElement(s){return this.elements[s]}pop(s,a=2e3,n=!0){const e=Date.now(),t=document.createElement("div");return t.className="message-item move-in",t.innerHTML=s,Hl.containerElement.appendChild(t),this.elements[e]=t,n&&t.addEventListener("click",()=>{this.close(e)}),a>0&&setTimeout(()=>{this.close(e)},a),e}close(s){if(s){const a=this.elements[s];a.classList.remove("move-in"),a.classList.add("move-out"),a.addEventListener("animationend",()=>{a.remove(),delete this.elements[s]})}else Vs(this.elements).forEach(a=>{this.close(Number(a))})}destroy(){const s=document.getElementById(Ct);s&&document.body.removeChild(s),this.elements={}}}const $8=(i={})=>{const s=li([]);return sa(a=>{s.value=a==="beforeUnmount"?[]:j8(ki(i))}),s},H8=i=>{const s=Je();return b(()=>ki(i)[s.value]??{})},Pa=H8,qr=(i=!0)=>{const{frontmatter:s,page:a}=Ba();return b(()=>s.value.contributors===!1||!ki(i)?[]:a.value.git.contributors??[])};var fk={"/":{contributors:"贡献者",changelog:"更新日志",timeOn:"于",viewChangelog:"查看所有更新日志",latestUpdateAt:"最近更新"}};const W8=typeof fk>"u"?{}:fk,Kr=()=>Pa(W8),U8=(i=!0)=>{const{lang:s,page:a}=Ba(),n=Kr();return b(()=>{var k,p,d;if(!ki(i))return null;const e=((k=a.value.git)==null?void 0:k.updatedTime)??((d=(p=a.value.git)==null?void 0:p.changelog)==null?void 0:d[0].time);if(!e)return null;const t=new Date(e),l=new Intl.DateTimeFormat(s.value,{dateStyle:"short",timeStyle:"short"}).format(e);return{date:t,text:l,iso:t.toISOString(),locale:n.value.latestUpdateAt}})},z8=({level:i=2,text:s,anchor:a})=>h(`h${i||2}`,{id:a,tabindex:"-1"},h("a",{href:`#${a}`,class:"header-anchor"},h("span",s))),J8=({name:i,url:s,avatar:a})=>h(s?"a":"span",{href:s,target:"_blank",rel:"noreferrer",class:"vp-contributor"},[a?h("img",{src:a,alt:"",class:"vp-contributor-avatar"}):null,h("span",{class:"vp-contributor-name"},i)]),G8=M({name:"GitContributors",props:{title:String,headerLevel:{type:Number,default:2}},setup(i){const s=qr(),a=Kr();return()=>s.value.length?[h(z8,{level:i.headerLevel,anchor:"doc-contributors",text:i.title||a.value.contributors}),h("div",{class:"vp-contributors"},s.value.map(n=>h(J8,n)))]:null}}),q8={enhance:({app:i})=>{i.component("GitContributors",G8)}},K8=Object.freeze(Object.defineProperty({__proto__:null,default:q8},Symbol.toStringTag,{value:"Module"})),X8=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"})),Q8=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"})),Y8=Es({enhance:({app:i})=>{}}),Z8=Object.freeze(Object.defineProperty({__proto__:null,default:Y8},Symbol.toStringTag,{value:"Module"})),iy=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"})),sy=Es({setup(){pi("beforeprint",()=>{document.querySelectorAll("details").forEach(i=>{i.open=!0})},{passive:!0})}}),ay=Object.freeze(Object.defineProperty({__proto__:null,default:sy},Symbol.toStringTag,{value:"Module"})),ny="VUEPRESS_CODE_TAB_STORE",re=Jn(ny,{}),ey=M({name:"CodeTabs",props:{active:{type:Number,default:0},data:{type:Array,required:!0},tabId:String},slots:Object,setup(i,{slots:s}){let a=i.data.map(()=>Fp());const n=li(i.active),e=ni([]),t=()=>{i.tabId&&(re.value[i.tabId]=i.data[n.value].id)},l=(r=n.value)=>{n.value=r<e.value.length-1?r+1:0,e.value[n.value].focus()},k=(r=n.value)=>{n.value=r>0?r-1:e.value.length-1,e.value[n.value].focus()},p=(r,c)=>{r.key===" "||r.key==="Enter"?(r.preventDefault(),n.value=c):r.key==="ArrowRight"?(r.preventDefault(),l()):r.key==="ArrowLeft"&&(r.preventDefault(),k()),i.tabId&&(re.value[i.tabId]=i.data[n.value].id)},d=()=>{if(i.tabId){const r=i.data.findIndex(({id:c})=>re.value[i.tabId]===c);if(r!==-1)return r}return i.active};return vi(()=>{n.value=d(),Si(()=>i.tabId&&re.value[i.tabId],(r,c)=>{if(i.tabId&&r!==c){const o=i.data.findIndex(({id:A})=>A===r);o!==-1&&(n.value=o)}})}),()=>i.data.length?h("div",{class:"vp-code-tabs"},[h("div",{class:"vp-code-tabs-nav",role:"tablist"},i.data.map(({id:r},c)=>{const o=c===n.value;return h("button",{type:"button",ref:A=>{A&&(e.value[c]=A)},class:["vp-code-tab-nav",{active:o}],role:"tab","aria-controls":a[c],"aria-selected":o,onClick:()=>{n.value=c,t()},onKeydown:A=>{p(A,c)}},s[`title${c}`]({value:r,isActive:o}))})),i.data.map(({id:r},c)=>{const o=c===n.value;return h("div",{class:["vp-code-tab",{active:o}],id:a[c],role:"tabpanel","aria-expanded":o},[h("div",{class:"vp-code-tab-title"},s[`title${c}`]({value:r,isActive:o})),s[`tab${c}`]({value:r,isActive:o})])})]):null}}),ty="VUEPRESS_TAB_STORE",bt=Jn(ty,{}),ly=M({name:"Tabs",props:{active:{type:Number,default:0},data:{type:Array,required:!0},tabId:String},slots:Object,setup(i,{slots:s}){let a=i.data.map(()=>Fp());const n=li(i.active),e=ni([]),t=()=>{i.tabId&&(bt.value[i.tabId]=i.data[n.value].id)},l=(r=n.value)=>{n.value=r<e.value.length-1?r+1:0,e.value[n.value].focus()},k=(r=n.value)=>{n.value=r>0?r-1:e.value.length-1,e.value[n.value].focus()},p=(r,c)=>{r.key===" "||r.key==="Enter"?(r.preventDefault(),n.value=c):r.key==="ArrowRight"?(r.preventDefault(),l()):r.key==="ArrowLeft"&&(r.preventDefault(),k()),t()},d=()=>{if(i.tabId){const r=i.data.findIndex(({id:c})=>bt.value[i.tabId]===c);if(r!==-1)return r}return i.active};return vi(()=>{n.value=d(),Si(()=>i.tabId&&bt.value[i.tabId],(r,c)=>{if(i.tabId&&r!==c){const o=i.data.findIndex(({id:A})=>A===r);o!==-1&&(n.value=o)}})}),()=>i.data.length?h("div",{class:"vp-tabs"},[h("div",{class:"vp-tabs-nav",role:"tablist"},i.data.map(({id:r},c)=>{const o=c===n.value;return h("button",{type:"button",ref:A=>{A&&(e.value[c]=A)},class:["vp-tab-nav",{active:o}],role:"tab","aria-controls":a[c],"aria-selected":o,onClick:()=>{n.value=c,t()},onKeydown:A=>{p(A,c)}},s[`title${c}`]({value:r,isActive:o}))})),i.data.map(({id:r},c)=>{const o=c===n.value;return h("div",{class:["vp-tab",{active:o}],id:a[c],role:"tabpanel","aria-expanded":o},[h("div",{class:"vp-tab-title"},s[`title${c}`]({value:r,isActive:o})),s[`tab${c}`]({value:r,isActive:o})])})]):null}}),hy={enhance:({app:i})=>{i.component("CodeTabs",ey),i.component("Tabs",ly)}},ky=Object.freeze(Object.defineProperty({__proto__:null,default:hy},Symbol.toStringTag,{value:"Module"})),py='<svg class="codepen-icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M123.429 668L468 897.714V692.571L277.143 565.143zM88 585.714L198.286 512 88 438.286v147.428zm468 312L900.571 668 746.857 565.143 556 692.57v205.143zM512 616l155.429-104L512 408 356.571 512zM277.143 458.857L468 331.43V126.286L123.429 356zM825.714 512L936 585.714V438.286zm-78.857-53.143L900.571 356 556 126.286v205.143zM1024 356v312q0 23.429-19.429 36.571l-468 312Q524.571 1024 512 1024t-24.571-7.429l-468-312Q0 691.43 0 668V356q0-23.429 19.429-36.571l468-312Q499.429 0 512 0t24.571 7.429l468 312Q1024 332.57 1024 356z"/></svg>',ry='<svg class="jsfiddle-icon" viewBox="0 0 1170 1024" xmlns="http://www.w3.org/2000/svg"><path d="M1028.571 441.143q63.429 26.286 102.572 83.143t39.143 126.571q0 93.714-67.429 160.286T940 877.714q-2.286 0-6.571-.285t-6-.286H232q-97.143-5.714-164.571-71.714T0 645.143q0-62.857 31.429-116t84-84q-6.858-22.286-6.858-46.857 0-65.715 46.858-112T269.143 240q54.286 0 98.286 33.143 42.857-88 127.142-141.714t186.572-53.715q94.857 0 174.857 46t126.571 124.857 46.572 172q0 3.429-.286 10.286t-.286 10.286zm-761.142 152q0 69.714 48 110.286T434.286 744q78.285 0 137.143-56.571-9.143-11.429-27.143-32.286t-24.857-28.857q-38.286 37.143-82.286 37.143-31.429 0-53.429-19.143t-22-50q0-30.286 22-49.715T436 525.143q25.143 0 48.286 12T526 568.57t37.143 42.858 39.428 46.857 44 42.857T702 732.57t69.429 12q69.142 0 116.857-40.857T936 594.857q0-69.143-48-109.714T769.714 444.57Q688 444.571 632 500l53.143 61.714q37.714-36.571 81.143-36.571 29.714 0 52.571 18.857t22.857 48q0 32.571-21.143 52.286T766.857 664q-24.571 0-47.143-12t-41.143-31.429-37.428-42.857-39.714-46.857T557.143 488 502 456.571t-67.714-12q-69.715 0-118.286 40.286t-48.571 108.286z"/></svg>',dy='<svg class="icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M512 74.667C270.933 74.667 74.667 270.933 74.667 512S270.933 949.333 512 949.333 949.333 753.067 949.333 512 753.067 74.667 512 74.667zm0 810.666C307.2 885.333 138.667 716.8 138.667 512S307.2 138.667 512 138.667 885.333 307.2 885.333 512 716.8 885.333 512 885.333z"/><path d="M708.267 465.067 473.6 330.667c-8.533-4.267-17.067-6.4-25.6-6.4-29.867 0-53.333 23.466-53.333 53.333v268.8c0 8.533 2.133 19.2 6.4 25.6 10.666 17.067 27.733 27.733 46.933 27.733 8.533 0 17.067-2.133 25.6-6.4l234.667-134.4c8.533-4.266 14.933-10.666 19.2-19.2 6.4-12.8 8.533-27.733 4.266-40.533-2.133-14.933-10.666-25.6-23.466-34.133zM458.667 627.2V396.8L661.333 512 458.667 627.2z"/></svg>';var cy={useBabel:!1,jsLib:[],cssLib:[],codepenLayout:"left",codepenEditors:"101",babel:"https://unpkg.com/@babel/standalone/babel.min.js",vue:"https://unpkg.com/vue/dist/vue.global.prod.js",react:"https://unpkg.com/react/umd/react.production.min.js",reactDOM:"https://unpkg.com/react-dom/umd/react-dom.production.min.js",jsfiddle:!1,codepen:!1};const Dt=cy,Ck={html:{types:["html","slim","haml","md","markdown","vue"],map:{html:"none",vue:"none",md:"markdown"}},js:{types:["js","javascript","coffee","coffeescript","ts","typescript","ls","livescript"],map:{js:"none",javascript:"none",coffee:"coffeescript",ls:"livescript",ts:"typescript"}},css:{types:["css","less","sass","scss","stylus","styl"],map:{css:"none",styl:"stylus"}}},oy=(i,s,a)=>{const n=document.createElement(i);return Ds(s)&&Vs(s).forEach(e=>{if(e.indexOf("data"))n[e]=s[e];else{const t=e.replace("data","");n.dataset[t]=s[e]}}),n},Wl=i=>({...Dt,...i,jsLib:Array.from(new Set([Dt.jsLib,i.jsLib??[]].flat())),cssLib:Array.from(new Set([Dt.cssLib,i.cssLib??[]].flat()))}),Ya=(i,s)=>{if(Nl(i[s]))return i[s];const a=new Promise(n=>{var t;const e=document.createElement("script");e.src=s,(t=document.querySelector("body"))==null||t.appendChild(e),e.onload=()=>{n()}});return i[s]=a,a},Ay=(i,s)=>{if(s.css&&Array.from(i.childNodes).every(a=>a.nodeName!=="STYLE")){const a=oy("style",{innerHTML:s.css});i.appendChild(a)}},gy=(i,s,a)=>{const n=a.getScript();if(n&&Array.from(s.childNodes).every(e=>e.nodeName!=="SCRIPT")){const e=document.createElement("script");e.appendChild(document.createTextNode(`{const document=window.document.querySelector('#${i} .vp-code-demo-display').shadowRoot;
${n}}`)),s.appendChild(e)}},By=["html","js","css"],yy=i=>{const s=Vs(i),a={html:[],js:[],css:[],isLegal:!1};return By.forEach(n=>{const e=s.filter(t=>Ck[n].types.includes(t));if(e.length){const t=e[0];a[n]=[i[t].replace(/^\n|\n$/g,""),Ck[n].map[t]??t]}}),a.isLegal=(!a.html.length||a.html[1]==="none")&&(!a.js.length||a.js[1]==="none")&&(!a.css.length||a.css[1]==="none"),a},Xr=i=>i.replace(/<br \/>/g,"<br>").replace(/<((\S+)[^<]*?)\s+\/>/g,"<$1></$2>"),Qr=i=>`<div id="app">
${Xr(i)}
</div>`,uy=i=>`${i.replace("export default ","const $reactApp = ").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,"")};
ReactDOM.createRoot(document.getElementById("app")).render(React.createElement($reactApp))`,vy=i=>i.replace(/export\s+default\s*\{(\n*[\s\S]*)\n*\}\s*;?$/u,"Vue.createApp({$1}).mount('#app')").replace(/export\s+default\s*define(Async)?Component\s*\(\s*\{(\n*[\s\S]*)\n*\}\s*\)\s*;?$/u,"Vue.createApp({$1}).mount('#app')").trim(),Yr=i=>`(function(exports){var module={};module.exports=exports;${i};return module.exports.__esModule?exports.default:module.exports;})({})`,Ey=(i,s)=>{const a=Wl(s),n=i.js[0]??"";return{...a,html:Xr(i.html[0]??""),js:n,css:i.css[0]??"",isLegal:i.isLegal,getScript:()=>{var e,t;return a.useBabel?((t=(e=window.Babel)==null?void 0:e.transform(n,{presets:["es2015"]}))==null?void 0:t.code)??"":n}}},my=/<template>([\s\S]+)<\/template>/u,Fy=/<script(\s*lang=(['"])(.*?)\2)?>([\s\S]+)<\/script>/u,fy=/<style(\s*lang=(['"])(.*?)\2)?\s*(?:scoped)?>([\s\S]+)<\/style>/u,Cy=(i,s)=>{const a=Wl(s),n=i.html[0]??"",e=my.exec(n),t=Fy.exec(n),l=fy.exec(n),k=(e==null?void 0:e[1].replace(/^\n|\n$/g,""))??"",[p="",d=""]=t?[t[4].replace(/^\n|\n$/g,""),t[3]]:[],[r="",c=""]=l?[l[4].replace(/^\n|\n$/g,""),l[3]]:[],o=d===""&&(c===""||c==="css");return{...a,html:Qr(k),js:vy(p),css:r,isLegal:o,jsLib:[a.vue,...a.jsLib],getScript:()=>{var v,u;const A=s.useBabel?((u=(v=window.Babel)==null?void 0:v.transform(p,{presets:["es2015"]}))==null?void 0:u.code)??"":p.replace(/export\s+default/u,"return");return`const app=window.document.createElement('div');document.firstElementChild.appendChild(app);const appOptions=${Yr(A)};appOptions.template=\`${k.replace("`",'\\`"')}\`;window.Vue.createApp(appOptions).mount(app);`}}},by=(i,s)=>{var e;const a=Wl(s),n=i.js[0]??"";return{...a,html:Qr(""),js:uy(n),css:i.css[0]??((e=i.js[0])==null?void 0:e.replace(/App\.__style__(?:\s*)=(?:\s*)`([\s\S]*)?`/,"$1").trim())??"",isLegal:i.isLegal,jsLib:[a.react,a.reactDOM,...a.jsLib],jsx:!0,getScript:()=>{var l,k;const t=((k=(l=window.Babel)==null?void 0:l.transform(n,{presets:["es2015","react"]}))==null?void 0:k.code)??"";return`window.ReactDOM.createRoot(document.firstElementChild).render(window.React.createElement(${Yr(t)}))`}}},Za={},Dy=i=>Promise.all([Ya(Za,i.babel),Ya(Za,i.react),Ya(Za,i.reactDOM)]),_y=i=>{const s=[Ya(Za,i.vue)];return i.useBabel&&s.push(Ya(Za,i.babel)),Promise.all(s)},Sy=i=>i.useBabel?Ya(Za,i.babel):Promise.resolve();var xy=M({name:"CodeDemo",props:{id:{type:String,required:!0},type:{type:String,default:"normal"},title:String,config:String,code:{type:String,required:!0}},slots:Object,setup(i,{slots:s}){const[a,n]=ln(!1),e=ni(),t=ni(),l=li("0"),k=li(!1),p=b(()=>JSON.parse(i.config?Fk(i.config):"{}")),d=b(()=>{const u=JSON.parse(Fk(i.code));return yy(u)}),r=b(()=>i.type==="react"?by(d.value,p.value):i.type==="vue"?Cy(d.value,p.value):Ey(d.value,p.value)),c=b(()=>r.value.isLegal),o=(u=!1)=>{const E=e.value.attachShadow({mode:"open"}),f=document.createElement("div");f.classList.add("code-demo-app"),E.appendChild(f),c.value?(u&&(f.innerHTML=r.value.html),Ay(E,r.value),gy(i.id,E,r.value),l.value="0"):l.value="auto",k.value=!0},A=()=>{switch(i.type){case"react":return Dy(r.value).then(()=>{o()});case"vue":return _y(r.value).then(()=>{o()});default:return Sy(r.value).then(()=>{o(!0)})}};let v=null;return pi("beforeprint",()=>{n(!0)}),pi("afterprint",()=>{v!==null&&n(v),v=null}),jl(t,()=>{a.value&&(l.value=`${t.value.clientHeight+14}px`)}),vi(async()=>{await A()}),()=>h("div",{class:"vp-container vp-code-demo",id:i.id},[h("div",{class:"vp-container-header"},[r.value.isLegal?h("button",{type:"button",title:"toggle",class:["vp-code-demo-toggle-button",a.value?"down":"end"],onClick:()=>{l.value=a.value?"0":`${t.value.clientHeight+14}px`,n()}}):null,i.title?h("span",{class:"vp-container-title"},decodeURIComponent(i.title)):null,r.value.isLegal&&(r.value.jsfiddle??!0)?h("form",{class:"code-demo-jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[h("input",{type:"hidden",name:"html",value:r.value.html}),h("input",{type:"hidden",name:"js",value:r.value.js}),h("input",{type:"hidden",name:"css",value:r.value.css}),h("input",{type:"hidden",name:"wrap",value:"1"}),h("input",{type:"hidden",name:"panel_js",value:"3"}),h("input",{type:"hidden",name:"resources",value:[...r.value.cssLib,...r.value.jsLib].join(",")}),h("button",{type:"submit",class:"jsfiddle-button",innerHTML:ry,"aria-label":"JSFiddle","data-balloon-pos":"down"})]):null,!r.value.isLegal||(r.value.codepen??!0)?h("form",{class:"code-demo-codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[h("input",{type:"hidden",name:"data",value:JSON.stringify({html:r.value.html,js:r.value.js,css:r.value.css,js_external:r.value.jsLib.join(";"),css_external:r.value.cssLib.join(";"),layout:r.value.codepenLayout,html_pre_processor:d.value.html[1]??"none",js_pre_processor:d.value.js[1]??(r.value.jsx?"babel":"none"),css_pre_processor:d.value.css[1]??"none",editors:r.value.codepenEditors})}),h("button",{type:"submit",innerHTML:py,class:"codepen-button","aria-label":"Codepen","data-balloon-pos":"down"})]):null]),k.value?null:h(Ol,{class:"vp-code-demo-loading"}),h("div",{ref:e,class:"vp-code-demo-display",style:{display:c.value&&k.value?"block":"none"}}),h("div",{class:"vp-code-demo-code-wrapper",style:{height:l.value}},h("div",{ref:t,class:"vp-code-demo-codes"},s.default()))])}}),wy=M({name:"MdDemo",props:{id:{type:String,required:!0},title:String},slots:Object,setup(i,{slots:s}){const[a,n]=ln(!1),e=ni(),t=li("0");let l=null;return pi("beforeprint",()=>{n(!0)}),pi("afterprint",()=>{l!==null&&n(l),l=null}),jl(e,()=>{a.value&&(t.value=`${e.value.clientHeight+14}px`)}),()=>h("div",{class:"vp-container vp-md-demo",id:i.id},[h("div",{class:"vp-container-header"},[h("button",{type:"button",title:"toggle",class:["vp-md-demo-toggle-button",a.value?"down":"end"],onClick:()=>{t.value=a.value?"0":`${e.value.clientHeight+14}px`,n()}}),i.title?h("div",{class:"vp-container-title"},decodeURIComponent(i.title)):null]),h("div",{class:"vp-md-demo-display"},s.default()),h("div",{class:"vp-md-demo-code-wrapper",style:{height:t.value}},h("div",{ref:e,class:"vp-md-demo-codes"},s.code()))])}});const Zr=({title:i="",link:s})=>h("div",{class:"vp-container vp-playground"},[h("div",{class:"vp-container-header"},[i?h("div",{class:"vp-container-title"},decodeURIComponent(i)):null,h("div",{class:"vp-playground-actions"},[h("a",{class:"vp-playground-action no-external-link-icon",href:decodeURIComponent(s),target:"_blank",innerHTML:dy})])]),h("div",{class:"vp-playground-container"},h("iframe",{src:decodeURIComponent(s)}))]);Zr.displayName="Playground";const Ty={autoResize:!0,showCompileOutput:!1,clearConsole:!1,layout:"horizontal",ssr:!1};let Ry=Ty;const Ly=()=>Ry,Oy=i=>JSON.parse(decodeURIComponent(i));var Py=M({name:"VuePlayground",props:{files:{type:String,required:!0},title:String,settings:String},setup(i){const{vueVersion:s=ir,vueRuntimeDevUrl:a=`https://unpkg.com/@vue/runtime-dom@${s}/dist/runtime-dom.esm-browser.js`,vueRuntimeProdUrl:n=`https://unpkg.com/@vue/runtime-dom@${s}/dist/runtime-dom.esm-browser.prod.js`,vueServerRendererUrl:e=`https://unpkg.com/@vue/server-renderer@${s}/dist/server-renderer.esm-browser.js`,...t}=Ly(),l=li(!0),k=ni(),p=ni(),d=ni(),r=b(()=>Zt({},t,Oy(i.settings??"{}"))),c=async()=>{const[{useStore:o,useVueImportMap:A,Repl:v},{default:u}]=await Promise.all([g(()=>import("./vue-repl-Cn0nh1uY.js"),__vite__mapDeps([269,270])),g(()=>import("./codemirror-editor-DYWzM_4b.js"),__vite__mapDeps([271,270]))]);k.value=v,d.value=u;const{importMap:E,vueVersion:f}=A({runtimeDev:a,runtimeProd:n,serverRenderer:e});p.value=o({builtinImportMap:E,vueVersion:f},decodeURIComponent(i.files))};return vi(async()=>{await c(),l.value=!1}),()=>[h("div",{class:"vp-container vue-playground-wrapper"},[i.title?h("div",{class:"vp-container-header"},h("div",{class:"vp-container-title"},decodeURIComponent(i.title))):null,h("div",{class:"repl-container"},[l.value?h(Ol,{class:"vue-preview-loading",height:192}):null,k.value?h(k.value,{...r.value,editor:d.value,store:p.value}):null])])]}});const Iy={enhance:({app:i})=>{i.component("CodeDemo",xy),i.component("MdDemo",wy),i.component("Playground",Zr),i.component("VuePlayground",Py)}},My=Object.freeze(Object.defineProperty({__proto__:null,default:Iy},Symbol.toStringTag,{value:"Module"})),Vy=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"})),jy=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"})),Ny=JSON.parse('{"encrypt":{},"author":{"name":"Mr.LRH","url":"https://lrh21g.github.io/blogs/"},"darkmode":"switch","themeColor":true,"fullscreen":false,"pure":false,"logo":"/hero.png","logoDark":"","repo":"https://github.com/lrh21g/blogs","repoDisplay":true,"repoLabel":"GitHub","breadcrumb":true,"breadcrumbIcon":true,"prevLink":true,"nextLink":true,"titleIcon":true,"pageInfo":["Author","Original","Date","Category","Tag","ReadingTime"],"lastUpdated":true,"contributors":true,"editLink":false,"docsDir":"docs","footer":"知足且上进，温柔而坚定","displayFooter":true,"blog":{"name":"Mr.LRH","description":"知足且上进，温柔而坚定。","intro":"/intro.html","medias":{},"timeline":"昨日不在","articlePerPage":10,"articleInfo":["Author","Original","Date","PageView","Category","Tag","ReadingTime"]},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","contributors":"贡献者","editLink":"编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"routerLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家"},"navbar":[{"text":"前端","children":[{"text":"H5","link":"/前端/H5/"},{"text":"CSS","link":"/前端/CSS/"},{"text":"JavaScript","link":"/前端/JavaScript/"},{"text":"动画效果","link":"/前端/动画效果/"},{"text":"TypeScript","link":"/前端/TypeScript/"},{"text":"Node","link":"/前端/Node/"}]},{"text":"前端框架","children":[{"text":"项目搭建","link":"/前端框架/项目搭建/"},{"text":"Vue","link":"/前端框架/Vue/"},{"text":"React","link":"/前端框架/React/"},{"text":"Electron","link":"/前端框架/Electron/"},{"text":"Webpack","link":"/前端框架/Webpack/"}]},{"text":"移动端","children":[{"text":"ReactNative","link":"/移动端/ReactNative/"},{"text":"Flutter","link":"/移动端/Flutter/"},{"text":"混合开发","link":"/移动端/混合开发"}]},{"text":"架构","children":[{"text":"微前端","link":"/架构/微前端/"}]},{"text":"服务端","children":[{"text":"Linux","link":"/服务端/Linux/"}]},{"text":"数据库","children":[{"text":"SQL","link":"/数据库/SQL语言/"},{"text":"MongoDB","link":"/数据库/MongoDB/"}]},{"text":"其他","children":[{"text":"代码规范","link":"/代码规范/"},{"text":"Git","link":"/其他/Git/"},{"text":"工具","link":"/其他/工具/"}]},{"text":"书签","link":"/书签"}],"sidebar":{"/前端/CSS/":[{"text":"CSS基础","prefix":"CSS基础/","collapsible":true,"children":["CSS选择器与权重","流与元素","BFC","盒模型","line-height-and-vertical-align","float","position","元素的显隐","CSS动画","媒体查询与容器查询","font","text","background","css-shapes","scroll-bar"]},{"text":"CSS布局","prefix":"CSS布局/","collapsible":true,"children":["Flex布局","Grid布局","水平垂直居中","多列布局","栅格布局","全屏布局","自适应布局","页面等比适配","StickyFooter"]},{"text":"CSS相关","prefix":"CSS相关/","collapsible":true,"children":["CSS常用封装","CSS实现长宽比"]}],"/前端/JavaScript/":[{"text":"Javascript","icon":"fluent:javascript-24-regular","prefix":"基础知识/","collapsible":true,"children":[{"text":"类型概述","link":"类型概述","icon":"material-symbols:file-copy-outline-rounded"},{"text":"基础类型","link":"基础类型","icon":"material-symbols:file-copy-outline-rounded"},{"text":"Object","icon":"material-symbols:data-object-rounded","collapsible":true,"children":["对象","原型与继承","Reflect"]},{"text":"Class","link":"Class","icon":"material-symbols:file-copy-outline-rounded"},{"text":"Array","icon":"material-symbols:data-array-rounded","collapsible":true,"children":["数组","ArrayBuffer"]},{"text":"Set和Map","link":"Set和Map","icon":"material-symbols:file-copy-outline-rounded"},{"text":"函数","icon":"material-symbols:function","collapsible":true,"children":["函数","作用域与闭包"]},{"text":"异步编程","icon":"material-symbols:update-rounded","collapsible":true,"children":["异步","EventLoop","Promise","Generator","async"]},{"text":"正则表达式","link":"RegExp","icon":"material-symbols:regular-expression-rounded"},{"text":"Math和Date","link":"Math和Date","icon":"material-symbols:calculate-outline-rounded"},{"text":"JavaScript API","link":"API","icon":"material-symbols:api-rounded"},{"text":"JSON","link":"JSON","icon":"material-symbols:data-object-rounded"},{"text":"网络请求","link":"网络请求","icon":"material-symbols:network-node"}]},{"text":"BOM","icon":"material-symbols:select-window","prefix":"BOM/","collapsible":true,"children":["window","URL","navigator","storage","file"]},{"text":"DOM","icon":"material-symbols:network-node","prefix":"DOM/","collapsible":true,"children":["node","document","element","other","css","MutationObserver","event","WebComponents"]},{"text":"实用技巧","prefix":"实用技巧/","icon":"material-symbols:settings-applications-outline-rounded","collapsible":true,"children":["工具函数","手写代码","网页截屏"]},{"text":"设计模式","icon":"material-symbols:design-services","prefix":"设计模式/","collapsible":true,"children":["SOLID","创建型设计模式","结构型设计模式","行为型设计模式"]},{"text":"Canvas","prefix":"Canvas/","icon":"material-symbols:drive-file-move-outline-rounded","collapsible":true,"children":["canvas基础","canvas绘制形状","canvas添加样式","canvas绘制文本","canvas使用图像","canvas变形","canvas合成与裁剪","canvas基本动画","canvas像素操作","canvas优化"]},{"text":"SVG","prefix":"SVG/","icon":"material-symbols:drive-file-move-outline-rounded","collapsible":true,"children":["svg基础","svg动画","svgSMIL动画","基于anime.js的svg动画"]}],"/前端/H5/":[{"text":"移动端H5","prefix":"","collapsible":true,"children":["移动端基本概念","移动端适配","移动端常见问题"]}],"/前端/动画效果/":[{"text":"动画效果","prefix":"","collapsible":true,"children":["H5直播点赞动画"]}],"/前端/TypeScript/":[{"text":"TypeScript 类型系统","prefix":"","collapsible":true,"children":["TypeScript基础类型","TypeScript其他类型","TypeScript装饰器","TypeScript控制反转和依赖注入"]},{"text":"TypeScript 项目配置","prefix":"","collapsible":true,"children":["TypeScript声明文件","tsconfig配置"]},{"text":"TypeScript 实战","prefix":"","collapsible":true,"children":["TypeScript实现Promise","TypeScript实现Vuex"]}],"/前端/Node/":[{"text":"基础","prefix":"","collapsible":true,"children":["基础知识"]},{"text":"Nestjs","prefix":"Nestjs/","collapsible":true,"children":["基础知识"]}],"/前端框架/项目搭建/":[{"text":"编程规范","icon":"material-symbols:warning-outline-rounded","prefix":"","link":"编程规范"},{"text":"脚手架","icon":"material-symbols:rule-settings-rounded","prefix":"","link":"脚手架"}],"/前端框架/Vue/":[{"text":"Vue2.x","prefix":"Vue2/","collapsible":true,"children":["Vue2基础","Vue2组件通信方式","Vue2相关组件实现","Vue2实用技巧","Vue2实现原理","VueRouter","Vuex"]},{"text":"Vue2.x 源码解析","prefix":"Vue2源码解析/","collapsible":true,"children":["数据驱动","组件化","响应式","编译",{"text":"Vue 相关扩展","prefix":"相关扩展/","collapsible":true,"children":["event","v-model","slot","keep-alive","transition"]},"vue-router","vue-vuex"]},{"text":"Vue3.x","prefix":"Vue3/","collapsible":true,"children":["响应式API","Vue3CompositionAPI"]}],"/前端框架/React/":[{"text":"React 基础","prefix":"React基础/","collapsible":true,"children":["JSX","React组件","State","Props","LifeCycle","Ref","Context","模块化CSS","高阶组件","自定义Hooks","Transition","useSyncExternalStore"]},{"text":"React 优化","prefix":"React优化/","collapsible":true,"children":["渲染控制","渲染调优","处理海量数据","其他优化"]},{"text":"React 原理","prefix":"React原理/","collapsible":true,"children":["Fiber","Scheduler","Reconciler","事件系统","React位运算","Hooks","Context"]},{"text":"React 生态","prefix":"React生态/","collapsible":true,"children":["react-router","react-redux"]}],"/前端框架/Webpack/":[{"text":"Webpack","prefix":"Webpack基础/","collapsible":true,"children":["JS模块化","CSS模块化","核心概念","babel","loaders","plugins","多页面配置","devServer"]},{"text":"Webpack优化","prefix":"Webpack优化/","collapsible":true,"children":["Webpack优化"]},{"text":"Webpack实战","prefix":"Webpack实战/","collapsible":true,"children":["编写loader","编写plugin"]},{"text":"Webpack原理","prefix":"Webpack原理/","collapsible":true,"children":["Webpack原理"]},{"text":"Webpack Q&A","prefix":"","collapsible":true,"children":["Q_A"]}],"/架构/微前端/":[{"text":"微前端简介","link":"/架构/微前端/"},{"text":"实现方式","prefix":"实现方式/","collapsible":true,"children":["qiankun","single-spa","Garfish","EMP"]},{"text":"基础模块实现","link":"/架构/微前端/基础模块实现.md"}],"/服务端/Linux/":[{"text":"Linux基础","prefix":"","collapsible":true,"children":["基础知识"]}],"/数据库/SQL语言/":[{"text":"基础","prefix":"","collapsible":true,"children":["SQL基础"]}],"/数据库/MongoDB/":[{"text":"基础","prefix":"","collapsible":true,"children":["基础知识"]}],"/其他/Git/":[{"text":"Git","collapsible":true,"children":["git基础","git命令","git_head","git技巧","git对象","git忽略提交","git相关问题"]}],"/其他/工具/":[{"text":"工具相关","collapsible":true,"children":["VSCode插件","whistle"]}],"/代码规范/":[{"text":"代码规范","collapsible":true,"children":["BEM"]}]}}}}'),$y=li(Ny),id=()=>$y,sd=Symbol(""),Hy=()=>{const i=bi(sd);if(!i)throw new Error("useThemeLocaleData() is called without provider.");return i},Wy=(i,s)=>{const{locales:a,...n}=i;return{...n,...a==null?void 0:a[s]}},Uy=Es({enhance({app:i}){const s=id(),a=i._context.provides[Tl],n=b(()=>Wy(s.value,a.routeLocale.value));i.provide(sd,n),Object.defineProperties(i.config.globalProperties,{$theme:{get(){return s.value}},$themeLocale:{get(){return n.value}}})}}),zy=Object.freeze(Object.defineProperty({__proto__:null,default:Uy},Symbol.toStringTag,{value:"Module"}));var Jy={"/":{backToTop:"返回顶部"}};const Gy=M({name:"BackToTop",setup(){const i=ns(),s=Pa(Jy),a=ni(),{height:n}=r8(a),{height:e}=u8(),{y:t}=y8(),l=b(()=>(i.value.backToTop??!0)&&t.value>100),k=b(()=>t.value/(n.value-e.value)*100);return vi(()=>{a.value=document.body}),()=>h(nn,{name:"fade-in"},()=>l.value?h("button",{type:"button",class:"vp-back-to-top-button","aria-label":s.value.backToTop,onClick:()=>{window.scrollTo({top:0,behavior:"smooth"})}},[h("span",{class:"vp-scroll-progress",role:"progressbar","aria-labelledby":"loadinglabel","aria-valuenow":k.value},h("svg",h("circle",{cx:"26",cy:"26",r:"24",fill:"none",stroke:"currentColor","stroke-width":"4","stroke-dasharray":`${Math.PI*k.value*.48} ${Math.PI*(100-k.value)*.48}`}))),h("div",{class:"back-to-top-icon"})]):null)}}),qy=Es({rootComponents:[Gy]}),Ky=Object.freeze(Object.defineProperty({__proto__:null,default:qy},Symbol.toStringTag,{value:"Module"})),Xy=/language-(shellscript|shell|bash|sh|zsh)/,Qy=({selector:i,ignoreSelector:s,inlineSelector:a,duration:n=2e3,locales:e,showInMobile:t,transform:l})=>{const k=Vl("(max-width: 419px)"),p=b(()=>!k.value||t),d=Pa(e),r=u=>{var f;if(u.hasAttribute("copy-code"))return;const E=document.createElement("button");E.type="button",E.classList.add("vp-copy-code-button"),E.setAttribute("aria-label",d.value.copy),E.setAttribute("data-copied",d.value.copied),(f=u.parentElement)==null||f.insertBefore(E,u),u.setAttribute("copy-code","")},c=()=>{document.body.classList.toggle("no-copy-code",!p.value),p.value&&document.querySelectorAll(i).forEach(r)};vs(p,()=>Aa(c),{flush:"post"}),sa(u=>{u!=="beforeUnmount"&&c()});const{copy:o}=a8({legacy:!0}),A=new WeakMap,v=async(u,E,f)=>{const F=E.cloneNode(!0);l&&l(F);let B=F.textContent||"";if(Xy.test(u.className)&&(B=B.replace(/^ *(\$|>) /gm,"")),await o(B),n<=0)return;f.classList.add("copied"),clearTimeout(A.get(f));const C=setTimeout(()=>{f.classList.remove("copied"),f.blur(),A.delete(f)},n);A.set(f,C)};pi("click",u=>{const E=u.target;if(p.value&&E.matches('div[class*="language-"] > button.vp-copy-code-button')){const f=E.parentElement,F=E.nextElementSibling;if(!f||!F)return;v(f,F,E)}},{passive:!0})};var Yy={"/":{copy:"复制代码",copied:"已复制"}};const Zy=Es({setup:()=>{Qy({selector:'[vp-content] div[class*="language-"] pre',ignoreSelector:"",inlineSelector:"",locales:Yy,duration:2e3,showInMobile:!1})}}),i2=Object.freeze(Object.defineProperty({__proto__:null,default:Zy},Symbol.toStringTag,{value:"Module"})),s2=M({name:"VPIcon",props:{type:{type:String,default:"unknown"},prefix:String,icon:String,color:String,size:[String,Number],verticalAlign:String,sizing:{type:String,default:"height"}},setup(i){const s=b(()=>i.icon?Ta(i.icon)?i.icon:Ke(i.icon)?Ci(i.icon):null:null),a=b(()=>{const e={},{type:t,verticalAlign:l,size:k,sizing:p}=i,d={sizing:p};return i.color&&(e.color=i.color),k&&(e["--icon-size"]=Number.isNaN(Number(k))?k:`${k}px`),l&&(e["--icon-vertical-align"]=l),t==="iconify"&&(p!=="height"&&(d.width=i.size||"1em"),p!=="width"&&(d.height=i.size||"1em")),Vs(e).length&&(d.style=e),d}),n=e=>e.includes("fa-")||/^fa.$/.test(e)?e:`fa-${e}`;return()=>{const{type:e,icon:t,prefix:l="",sizing:k}=i;if(!t)return null;if(s.value)return h("img",{class:"vp-icon",src:s.value,alt:"","aria-hidden":"","no-view":"",...a.value});if(e==="iconify")return h("iconify-icon",{key:t,class:"vp-icon",icon:t.includes(":")?t:`${l}${t}`,...a.value});if(e==="fontawesome"){const[p,d]=t.includes(":")?t.split(":",2):["fas",t];return h("i",{key:t,class:["vp-icon",p.length===1?`fa${p}`:n(p),...d.split(" ").map(n),k==="height"?"":"fa-fw"],...a.value})}return h("i",{key:t,class:["vp-icon",t.includes(" ")?t:`${l}${t}`],...a.value})}}}),a2={enhance:({app:i})=>{cs("VPIcon")||i.component("VPIcon",s=>h(s2,{type:"iconify",prefix:"",...s}))},setup:()=>{A8("https://cdn.jsdelivr.net/npm/iconify-icon@2")}},n2=Object.freeze(Object.defineProperty({__proto__:null,default:a2},Symbol.toStringTag,{value:"Module"})),e2=li({}),ad=Symbol(""),t2=()=>bi(ad),l2=i=>{i.provide(ad,e2)},nd=i=>new Promise((s,a)=>{i.complete?s({type:"image",element:i,src:i.src,width:i.naturalWidth,height:i.naturalHeight,alt:i.alt,msrc:i.src}):(i.onload=()=>{s(nd(i))},i.onerror=()=>{a()})}),h2='<div class="photo-swipe-loading"><svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" preserveAspectRatio="xMidYMid" viewBox="25 25 50 50"><animateTransform attributeName="transform" type="rotate" dur="2s" keyTimes="0;1" repeatCount="indefinite" values="0;360"></animateTransform><circle cx="50" cy="50" r="20" fill="none" stroke="currentColor" stroke-width="4" stroke-linecap="round"><animate attributeName="stroke-dasharray" dur="1.5s" keyTimes="0;0.5;1" repeatCount="indefinite" values="1,200;90,200;1,200"></animate><animate attributeName="stroke-dashoffset" dur="1.5s" keyTimes="0;0.5;1" repeatCount="indefinite" values="0;-35px;-125px"></animate></circle></svg></div>',k2=(i,{download:s=!0,fullscreen:a=!0}={})=>{i.on("uiRegister",()=>{if(i.ui.registerElement({name:"bulletsIndicator",className:"photo-swipe-bullets-indicator",appendTo:"wrapper",onInit:n=>{const e=[];let t=-1;for(let l=0;l<i.getNumItems();l++){const k=document.createElement("div");k.className="photo-swipe-bullet",k.onclick=p=>{i.goTo(e.indexOf(p.target))},e.push(k),n.appendChild(k)}i.on("change",()=>{t>=0&&e[t].classList.remove("active"),e[i.currIndex].classList.add("active"),t=i.currIndex})}}),a){const{isSupported:n,toggle:e}=Ge();n.value&&i.ui.registerElement({name:"fullscreen",order:7,isButton:!0,html:'<svg class="pswp__icn" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M249.5 270.833H437v-75H212a37.5 37.5 0 0 0-37.5 37.5v225h75v-187.5zm-37.5 600h225v-75H249.5v-187.5h-75v225a37.5 37.5 0 0 0 37.5 37.5zm637.5-37.5v-225h-75v187.5H587v75h225a37.5 37.5 0 0 0 37.5-37.5zM587 270.833h187.5v187.5h75v-225a37.5 37.5 0 0 0-37.5-37.5H587v75z"/></svg>',onClick:()=>{e()}})}s&&i.ui.registerElement({name:"download",order:8,isButton:!0,tagName:"a",html:{isCustomSVG:!0,inner:'<path d="M20.5 14.3 17.1 18V10h-2.2v7.9l-3.4-3.6L10 16l6 6.1 6-6.1-1.5-1.6ZM23 23H9v2h14" id="pswp__icn-download"/>',outlineID:"pswp__icn-download"},onInit:n=>{n.setAttribute("download",""),n.setAttribute("target","_blank"),n.setAttribute("rel","noopener"),i.on("change",()=>{n.setAttribute("href",i.currSlide.data.src)})}})})},p2=({selector:i,locales:s,download:a=!0,fullscreen:n=!0,scrollToClose:e=!0})=>{const t=t2(),l=Pa(s),k=ns(),p=b(()=>{const{photoSwipe:A}=k.value;return A===!1?null:gi(A)?A:Ms(i)?i.join(", "):i}),d=b(()=>({...t.value,...l.value,download:a,fullscreen:n,scrollToClose:e}));let r=null,c=0,o=null;pi("click",async A=>{const v=A.target;if(!p.value||!r||!v.matches(p.value))return;c!==0&&o.destroy();const u=Date.now(),E=await r,f=Array.from(document.querySelectorAll(p.value)),F=f.map(C=>({html:h2,element:C,msrc:C.src})),B=f.findIndex(C=>C===v);o=new E({preloaderDelay:0,showHideAnimationType:"zoom",...d.value,dataSource:F,index:B,...e?{closeOnVerticalDrag:!0,wheelToZoom:!1}:{}}),c=u,k2(o,{download:a,fullscreen:n}),o.init(),o.on("destroy",()=>{o=null,c=0}),f.map((C,w)=>nd(C).then($=>{c===u&&(F.splice(w,1,$),o==null||o.refreshSlideContent(w))}))},{passive:!0}),pi("wheel",()=>{d.value.scrollToClose&&(o==null||o.close())}),vi(()=>{("requestIdleCallback"in window?window.requestIdleCallback:setTimeout)(()=>{r=g(async()=>{const{default:A}=await import("./photoswipe.esm-D2Nf-uDI.js");return{default:A}},[]).then(({default:A})=>A)})}),Zs(()=>{o==null||o.destroy()})};var r2={"/":{closeTitle:"关闭",downloadTitle:"下载图片",fullscreenTitle:"切换全屏",zoomTitle:"缩放",arrowPrevTitle:"上一个 (左箭头)",arrowNextTitle:"下一个 (右箭头)"}};const d2="[vp-content] :not(a) > img:not([no-view])",c2=r2,o2=!0,A2=!0,g2=!0;var B2=Es({enhance:({app:i})=>{l2(i)},setup:()=>{p2({selector:d2,locales:c2,download:o2,fullscreen:A2,scrollToClose:g2})}});const y2=Object.freeze(Object.defineProperty({__proto__:null,default:B2},Symbol.toStringTag,{value:"Module"})),ed=({type:i="info",text:s="",vertical:a,color:n,bgColor:e},{slots:t})=>{var l;return h("span",{class:["vp-badge",i,{diy:!!(n||e)}],style:{backgroundColor:e??!1,color:n??!1,verticalAlign:a??!1}},((l=t.default)==null?void 0:l.call(t))??s)};ed.displayName="Badge";const u2={enhance:({app:i})=>{cs("Badge")||i.component("Badge",ed)},setup:()=>{},rootComponents:[]},v2=Object.freeze(Object.defineProperty({__proto__:null,default:u2},Symbol.toStringTag,{value:"Module"})),bk=async(i,s)=>{const{path:a,query:n}=i.currentRoute.value,{scrollBehavior:e}=i.options;i.options.scrollBehavior=void 0,await i.replace({path:a,query:n,hash:s}),i.options.scrollBehavior=e},E2=({headerLinkSelector:i,headerAnchorSelector:s,delay:a,offset:n=5})=>{const e=ga();pi("scroll",Ml(()=>{var v,u;const l=Math.max(window.scrollY,document.documentElement.scrollTop,document.body.scrollTop);if(Math.abs(l)<n){bk(e,"");return}const p=window.innerHeight+l,d=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),r=Math.abs(d-p)<n,c=Array.from(document.querySelectorAll(i)),A=Array.from(document.querySelectorAll(s)).filter(E=>c.some(f=>f.hash===E.hash));for(let E=0;E<A.length;E++){const f=A[E],F=A[E+1],B=l>=(((v=f.parentElement)==null?void 0:v.offsetTop)??0)-n,C=!F||l<(((u=F.parentElement)==null?void 0:u.offsetTop)??0)-n;if(!(B&&C))continue;const $=decodeURIComponent(e.currentRoute.value.hash),I=decodeURIComponent(f.hash);if($===I)return;if(r){for(let j=E+1;j<A.length;j++)if($===decodeURIComponent(A[j].hash))return}bk(e,I);return}},a))},m2=".vp-sidebar-link, .vp-toc-link",F2=".header-anchor",f2=200,C2=5,b2=Es({setup(){E2({headerLinkSelector:m2,headerAnchorSelector:F2,delay:f2,offset:C2})}}),D2=Object.freeze(Object.defineProperty({__proto__:null,default:b2},Symbol.toStringTag,{value:"Module"}));let td=i=>gi(i.title)?{title:i.title}:null;const ld=Symbol(""),_2=i=>{td=i},S2=()=>bi(ld),x2=i=>{i.provide(ld,td)};var w2={"/":{title:"目录",empty:"暂无目录"}},T2=M({name:"Catalog",props:{base:String,level:{type:Number,default:3},index:Boolean,hideHeading:Boolean},setup(i){const{page:s,routes:a,site:n}=Ba(),e=S2(),t=Pa(w2),l=ni(Oa(a.value).map(([p,{meta:d}])=>{const r=e(d);if(!r)return null;const c=p.split("/").length;return{level:N8(p,"/")?c-2:c-1,base:p.replace(/\/[^/]+\/?$/,"/"),path:p,...r}}).filter(p=>Ds(p)&&gi(p.title))),k=b(()=>{const p=i.base?kg(dr(i.base)):s.value.path.replace(/\/[^/]+$/,"/"),d=p.split("/").length-2,r=[];return l.value.filter(({level:c,path:o})=>{if(!xe(o,p)||o===p)return!1;if(p==="/"){const A=Vs(n.value.locales).filter(v=>v!=="/");if(o==="/404.html"||A.some(v=>xe(o,v)))return!1}return c-d<=i.level}).sort(({title:c,level:o,order:A},{title:v,level:u,order:E})=>o-u||(Be(A)?Be(E)?A>0?E>0?A-E:-1:E<0?A-E:1:A:Be(E)?E:c.localeCompare(v))).forEach(c=>{var v;const{base:o,level:A}=c;switch(A-d){case 1:{r.push(c);break}case 2:{const u=r.find(E=>E.path===o);u&&(u.children??(u.children=[])).push(c);break}default:{const u=r.find(E=>E.path===o.replace(/\/[^/]+\/$/,"/"));if(u){const E=(v=u.children)==null?void 0:v.find(f=>f.path===o);E&&(E.children??(E.children=[])).push(c)}}}}),r});return()=>{const p=k.value.some(d=>d.children);return h("div",{class:["vp-catalog",{index:i.index}]},[i.hideHeading?null:h("h2",{class:"vp-catalog-main-title"},t.value.title),k.value.length?h(i.index?"ol":"ul",{class:["vp-catalog-list",{deep:p}]},k.value.map(({children:d=[],title:r,path:c,content:o})=>{const A=h(Vi,{class:"vp-catalog-title",to:c},()=>o?h(o):r);return h("li",{class:"vp-catalog-item"},p?[h("h3",{id:r,class:["vp-catalog-child-title",{"has-children":d.length}]},[h("a",{href:`#${r}`,class:"vp-catalog-header-anchor","aria-hidden":!0}),A]),d.length?h(i.index?"ol":"ul",{class:"vp-child-catalogs"},d.map(({children:v=[],content:u,path:E,title:f})=>h("li",{class:"vp-child-catalog"},[h("div",{class:["vp-catalog-sub-title",{"has-children":v.length}]},[h("a",{href:`#${f}`,class:"vp-catalog-header-anchor"}),h(Vi,{class:"vp-catalog-title",to:E},()=>u?h(u):f)]),v.length?h(i.index?"ol":"div",{class:i.index?"vp-sub-catalogs":"vp-sub-catalogs-wrapper"},v.map(({content:F,path:B,title:C})=>i.index?h("li",{class:"vp-sub-catalog"},h(Vi,{to:B},()=>F?h(F):C)):h(Vi,{class:"vp-sub-catalog-link",to:B},()=>F?h(F):C))):null]))):null]:h("div",{class:"vp-catalog-child-title"},A))})):h("p",{class:"vp-empty-catalog"},t.value.empty)])}}}),R2=Es({enhance:({app:i})=>{x2(i),cs("Catalog",i)||i.component("Catalog",T2)}});const L2=Object.freeze(Object.defineProperty({__proto__:null,default:R2},Symbol.toStringTag,{value:"Module"}));/**
 * NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT
 */const Dk=(i,s)=>{i.classList.add(s)},_k=(i,s)=>{i.classList.remove(s)},O2=i=>{var s;(s=i==null?void 0:i.parentNode)==null||s.removeChild(i)},_t=(i,s,a)=>i<s?s:i>a?a:i,Sk=i=>(-1+i)*100,P2=(()=>{const i=[],s=()=>{const a=i.shift();a&&a(s)};return a=>{i.push(a),i.length===1&&s()}})(),I2=i=>i.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(s,a)=>a.toUpperCase()),de=(()=>{const i=["Webkit","O","Moz","ms"],s={},a=t=>{const{style:l}=document.body;if(t in l)return t;const k=t.charAt(0).toUpperCase()+t.slice(1);let p=i.length;for(;p--;){const d=`${i[p]}${k}`;if(d in l)return d}return t},n=t=>{const l=I2(t);return s[l]??(s[l]=a(l))},e=(t,l,k)=>{t.style[n(l)]=k};return(t,l)=>{for(const k in l){const p=l[k];Object.hasOwn(l,k)&&Nl(p)&&e(t,k,p)}}})(),Ws={minimum:.08,easing:"ease",speed:200,trickleRate:.02,trickleSpeed:800,barSelector:'[role="bar"]',parent:"body",template:'<div class="bar" role="bar"></div>'},wi={percent:null,isRendered:()=>!!document.getElementById("nprogress"),set:i=>{const{speed:s,easing:a}=Ws,n=wi.isStarted(),e=_t(i,Ws.minimum,1);wi.percent=e===1?null:e;const t=wi.render(!n),l=t.querySelector(Ws.barSelector);return t.offsetWidth,P2(k=>{de(l,{transform:`translate3d(${Sk(e)}%,0,0)`,transition:`all ${s}ms ${a}`}),e===1?(de(t,{transition:"none",opacity:"1"}),t.offsetWidth,setTimeout(()=>{de(t,{transition:`all ${s}ms linear`,opacity:"0"}),setTimeout(()=>{wi.remove(),k()},s)},s)):setTimeout(()=>{k()},s)}),wi},isStarted:()=>typeof wi.percent=="number",start:()=>{wi.percent||wi.set(0);const i=()=>{setTimeout(()=>{wi.percent&&(wi.trickle(),i())},Ws.trickleSpeed)};return i(),wi},done:i=>!i&&!wi.percent?wi:wi.increase(.3+.5*Math.random()).set(1),increase:i=>{let{percent:s}=wi;return s?(s=_t(s+(typeof i=="number"?i:(1-s)*_t(Math.random()*s,.1,.95)),0,.994),wi.set(s)):wi.start()},trickle:()=>wi.increase(Math.random()*Ws.trickleRate),render:i=>{if(wi.isRendered())return document.getElementById("nprogress");Dk(document.documentElement,"nprogress-busy");const s=document.createElement("div");s.id="nprogress",s.innerHTML=Ws.template;const a=s.querySelector(Ws.barSelector),n=document.querySelector(Ws.parent),e=i?"-100":Sk(wi.percent??0);return de(a,{transition:"all 0 linear",transform:`translate3d(${e}%,0,0)`}),n&&(n!==document.body&&Dk(n,"nprogress-custom-parent"),n.appendChild(s)),s},remove:()=>{_k(document.documentElement,"nprogress-busy"),_k(document.querySelector(Ws.parent),"nprogress-custom-parent"),O2(document.getElementById("nprogress"))}},M2=()=>{vi(()=>{const i=ga(),s=new Set;s.add(i.currentRoute.value.path),i.beforeEach(a=>{s.has(a.path)||wi.start()}),i.afterEach(a=>{s.add(a.path),wi.done()})})},V2=Es({setup(){M2()}}),j2=Object.freeze(Object.defineProperty({__proto__:null,default:V2},Symbol.toStringTag,{value:"Module"})),N2=(i,s)=>{const a=Pa(s),n=ns(),e=Un(),t=b(()=>!!n.value.copy||n.value.copy!==!1&&i.global),l=b(()=>Ds(n.value.copy)?n.value.copy:null),k=b(()=>{var u;return((u=l.value)==null?void 0:u.disableCopy)??i.disableCopy??!1}),p=b(()=>{var u;return t.value?((u=l.value)==null?void 0:u.disableSelection)??i.disableSelection??!1:!1}),d=b(()=>{var u;return t.value?((u=l.value)==null?void 0:u.maxLength)??i.maxLength??0:0}),r=b(()=>{var u;return((u=l.value)==null?void 0:u.triggerLength)??i.triggerLength??100}),c=u=>u?`${We(Ta(u)?u:`https://${u}`)}${e.value.path}`:window.location.href,o=(u,E)=>{const{author:f,license:F,link:B}=a.value;return[u?f.replace(":author",u):"",E?F.replace(":license",E):"",B.replace(":link",c(i.canonical))].filter(C=>C).join(`
`)},A=()=>{if(gi(e.value.copyright))return e.value.copyright.replace(":link",c());const{author:u,license:E}=e.value.copyright??{};return o(u??i.author,E??i.license)},v=u=>{const E=getSelection();if(E){const f=E.getRangeAt(0);if(t.value){const F=f.toString().length;if(k.value||d.value&&F>d.value){u.preventDefault();return}if(F>=r.value){u.preventDefault();const B=A(),C=document.createElement("div");C.appendChild(E.getRangeAt(0).cloneContents()),u.clipboardData&&(u.clipboardData.setData("text/html",`${C.innerHTML}<hr><div class="copyright">${B.replace(/\\n/g,"<br>")}</div>`),u.clipboardData.setData("text/plain",`${E.getRangeAt(0).cloneContents().textContent||""}
------
${B}`))}}}};vi(()=>{const u=document.querySelector("#app");pi(u,"copy",v),je(()=>{u.style.userSelect=p.value?"none":"auto"})})};var $2={"/":{author:"著作权归:author所有",license:"基于:license协议",link:"原文链接：:link"}},H2={canonical:"https://lrh21g.github.io",author:"Mr.LRH",license:"",global:!0,disableCopy:!1,disableSelection:!1,triggerLength:100,maxLength:0},W2=Es({setup:()=>{N2(H2,$2)}});const U2=Object.freeze(Object.defineProperty({__proto__:null,default:W2},Symbol.toStringTag,{value:"Module"})),z2=i=>[/\((ipad);[-\w),; ]+apple/i,/applecoremedia\/[\w.]+ \((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i].some(s=>s.test(i)),J2=i=>[/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,/cfnetwork\/.+darwin/i].some(s=>s.test(i)),G2=i=>[/(mac os x) ?([\w. ]*)/i,/(macintosh|mac_powerpc\b)(?!.+haiku)/i].some(s=>s.test(i)),q2=i=>i instanceof Element?document.activeElement===i&&(["TEXTAREA","SELECT","INPUT"].includes(i.tagName)||i.hasAttribute("contenteditable")):!1,K2=(i,s)=>gi(i)&&i.startsWith(s),{values:X2}=Object,Q2=(i,s)=>s.some(a=>{if(gi(a))return a===i.key;const{key:n,ctrl:e=!1,shift:t=!1,alt:l=!1}=a;return n===i.key&&e===i.ctrlKey&&t===i.shiftKey&&l===i.altKey}),Y2=i=>{const s=Je();return b(()=>ki(i)[s.value]??{})},Xe=Y2,Z2=(i,s)=>{pi("keydown",n=>{const e=ki(i);e!=null&&e.length&&Q2(n,e)&&!q2(n.target)&&(n.preventDefault(),s())})};var iu={0:{"/":{0:"分",1:"类",2:":",3:" ",4:"$",5:"c",6:"o",7:"n",8:"t",9:"e",10:"n",11:"t"}},1:{"/":{0:"标",1:"签",2:":",3:" ",4:"$",5:"c",6:"o",7:"n",8:"t",9:"e",10:"n",11:"t"}}},su={"/":{cancel:"取消",placeholder:"搜索",search:"搜索",clear:"清除搜索文字",remove:"删除当前项目",searching:"搜索中",defaultTitle:"文档",select:"选择",navigate:"切换",autocomplete:"自动补全",exit:"关闭",queryHistory:"搜索历史",resultHistory:"历史结果",emptyHistory:"无搜索历史",emptyResult:"没有找到结果",loading:"正在加载搜索索引..."}},au={searchDelay:150,suggestDelay:0,queryHistoryCount:5,resultHistoryCount:5,hotKeys:[{key:"k",ctrl:!0},{key:"/",ctrl:!0}],worker:"slimsearch.worker.js"};const q4=iu,Pn=au,Qe=su,St="Canceled because of new search request.",nu=()=>{const i=new Worker(`/blogs/${Pn.worker}`,{}),s={suggest:null,search:null,all:null};return i.addEventListener("message",({data:a})=>{const[n,e,t]=a,l=s[n];(l==null?void 0:l.id)===e&&l.resolve(t)}),i.addEventListener("error",a=>{console.warn("Search Worker error:",a)}),{suggest:(a,n,e)=>new Promise((t,l)=>{var p;(p=s.suggest)==null||p.reject(new Error(St));const k=Date.now();i.postMessage({type:"suggest",id:k,query:a,locale:n,options:e}),s.suggest={id:k,resolve:t,reject:l}}),search:(a,n,e)=>new Promise((t,l)=>{var p;(p=s.search)==null||p.reject(new Error(St));const k=Date.now();i.postMessage({type:"search",id:k,query:a,locale:n,options:e}),s.search={id:k,resolve:t,reject:l}}),all:(a,n,e)=>new Promise((t,l)=>{var p;(p=s.all)==null||p.reject(new Error(St));const k=Date.now();i.postMessage({type:"all",id:k,query:a,locale:n,options:e}),s.all={id:k,resolve:t,reject:l}}),terminate:()=>{i.terminate(),X2(s).forEach(a=>{a==null||a.reject(new Error("Worker has been terminated."))})}}},eu=li({}),hd=Symbol(""),kd=()=>{const i=Je(),s=bi(hd);return b(()=>{const{locales:a={},...n}=s.value;return{...n,...a[i.value]}})},tu=i=>{i.provide(hd,wa(eu))},lu='<svg width="20" height="20" viewBox="0 0 20 20"><path d="M10 10l5.09-5.09L10 10l5.09 5.09L10 10zm0 0L4.91 4.91 10 10l-5.09 5.09L10 10z" stroke="currentColor" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"></path></svg>',pd=({class:i,hint:s})=>h("div",{class:[i,"loading"]},[h("svg",{xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32",preserveAspectRatio:"xMidYMid",viewBox:"0 0 100 100"},[h("circle",{cx:"28",cy:"75",r:"11",fill:"currentColor"},h("animate",{attributeName:"fill-opacity",begin:"0s",dur:"1s",keyTimes:"0;0.2;1",repeatCount:"indefinite",values:"0;1;1"})),h("path",{fill:"none",stroke:"#88baf0","stroke-width":"10",d:"M28 47a28 28 0 0 1 28 28"},h("animate",{attributeName:"stroke-opacity",begin:"0.1s",dur:"1s",keyTimes:"0;0.2;1",repeatCount:"indefinite",values:"0;1;1"})),h("path",{fill:"none",stroke:"#88baf0","stroke-width":"10",d:"M28 25a50 50 0 0 1 50 50"},h("animate",{attributeName:"stroke-opacity",begin:"0.2s",dur:"1s",keyTimes:"0;0.2;1",repeatCount:"indefinite",values:"0;1;1"}))]),s]);pd.displayName="SearchLoading";const pn=({name:i="",color:s="currentColor"},{slots:a})=>h("svg",{xmlns:"http://www.w3.org/2000/svg",class:["icon",`${i}-icon`],viewBox:"0 0 1024 1024",fill:s,"aria-label":`${i} icon`},a.default());pn.displayName="SVGWrapper";const hu=()=>h(pn,{name:"heading"},()=>h("path",{d:"M250.4 704.6H64V595.4h202.4l26.2-166.6H94V319.6h214.4L352 64h127.8l-43.6 255.4h211.2L691 64h126.2l-43.6 255.4H960v109.2H756.2l-24.6 166.6H930v109.2H717L672 960H545.8l43.6-255.4H376.6L333 960H206.8l43.6-255.4zm168.4-276L394 595.4h211.2l24.6-166.6h-211z"}));hu.displayName="HeadingIcon";const ku=()=>h(pn,{name:"heart"},()=>h("path",{d:"M1024 358.156C1024 195.698 892.3 64 729.844 64c-86.362 0-164.03 37.218-217.844 96.49C458.186 101.218 380.518 64 294.156 64 131.698 64 0 195.698 0 358.156 0 444.518 37.218 522.186 96.49 576H96l320 320c32 32 64 64 96 64s64-32 96-64l320-320h-.49c59.272-53.814 96.49-131.482 96.49-217.844zM841.468 481.232 517.49 805.49a2981.962 2981.962 0 0 1-5.49 5.48c-1.96-1.95-3.814-3.802-5.49-5.48L182.532 481.234C147.366 449.306 128 405.596 128 358.156 128 266.538 202.538 192 294.156 192c47.44 0 91.15 19.366 123.076 54.532L512 350.912l94.768-104.378C638.696 211.366 682.404 192 729.844 192 821.462 192 896 266.538 896 358.156c0 47.44-19.368 91.15-54.532 123.076z"}));ku.displayName="HeartIcon";const pu=()=>h(pn,{name:"history"},()=>h("path",{d:"M512 1024a512 512 0 1 1 512-512 512 512 0 0 1-512 512zm0-896a384 384 0 1 0 384 384 384 384 0 0 0-384-384zm192 448H512a64 64 0 0 1-64-64V320a64 64 0 0 1 128 0v128h128a64 64 0 0 1 0 128z"}));pu.displayName="HistoryIcon";const ru=()=>h(pn,{name:"title"},()=>h("path",{d:"M512 256c70.656 0 134.656 28.672 180.992 75.008A254.933 254.933 0 0 1 768 512c0 83.968-41.024 157.888-103.488 204.48C688.96 748.736 704 788.48 704 832c0 105.984-86.016 192-192 192-106.048 0-192-86.016-192-192h128a64 64 0 1 0 128 0 64 64 0 0 0-64-64 255.19 255.19 0 0 1-181.056-75.008A255.403 255.403 0 0 1 256 512c0-83.968 41.024-157.824 103.488-204.544C335.04 275.264 320 235.584 320 192A192 192 0 0 1 512 0c105.984 0 192 85.952 192 192H576a64.021 64.021 0 0 0-128 0c0 35.328 28.672 64 64 64zM384 512c0 70.656 57.344 128 128 128s128-57.344 128-128-57.344-128-128-128-128 57.344-128 128z"}));ru.displayName="TitleIcon";const Ul=()=>h(pn,{name:"search"},()=>h("path",{d:"M192 480a256 256 0 1 1 512 0 256 256 0 0 1-512 0m631.776 362.496-143.2-143.168A318.464 318.464 0 0 0 768 480c0-176.736-143.264-320-320-320S128 303.264 128 480s143.264 320 320 320a318.016 318.016 0 0 0 184.16-58.592l146.336 146.368c12.512 12.48 32.768 12.48 45.28 0 12.48-12.512 12.48-32.768 0-45.28"}));Ul.displayName="SearchIcon";let du=null;const rd=()=>du??(du=ln()),cu=(i,s=!1)=>{const a=li(0),n=b(()=>i.value[a.value]),e=()=>{a.value=a.value>0?a.value-1:i.value.length-1},t=()=>{a.value=a.value<i.value.length-1?a.value+1:0};return Si(i,()=>{s||(a.value=0)}),{index:a,item:n,prev:e,next:t}},ou=()=>{const i=La(()=>typeof window<"u"&&"userAgent"in window.navigator);return b(()=>i.value&&/\b(?:Android|iPhone)/i.test(navigator.userAgent))},Au=/[\u4e00-\u9fff\u3400-\u4dbf\u3040-\u309f\u30a0-\u30ff\uac00-\ud7af]/,gu=(i="")=>i.split(/\s+/).map(s=>{if(s.length>3){const a=s.split("");if(a.every(n=>Au.test(n)))return a}return s}).flat(),Bu=i=>{const s=li([]);{const{page:a,routeLocale:n}=Ba(),e=kd();vi(()=>{const{suggest:t,terminate:l}=nu(),k=p=>{const{resultsFilter:d,querySplitter:r,suggestionsFilter:c=A=>A,...o}=e.value;p.length>=3?t(p,n.value,o).then(A=>c(A,p,n.value,a.value)).then(A=>{s.value=A.length?K2(A[0],p)&&!A[0].slice(p.length).includes(" ")?A:[p,...A]:[]}).catch(A=>{console.error(A)}):s.value=[]};vs([i,n],([p])=>{k(p.join(" "))}),Zs(()=>{l()})})}return{enabled:!0,suggestions:s}},yu='<svg width="15" height="15" aria-label="Enter key" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M12 3.53088v3c0 1-1 2-2 2H4M7 11.53088l-3-3 3-3"></path></g></svg>',uu='<svg width="15" height="15" aria-label="Arrow down" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M7.5 3.5v8M10.5 8.5l-3 3-3-3"></path></g></svg>',vu='<svg width="15" height="15" aria-label="Arrow up" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M7.5 11.5v-8M10.5 6.5l-3-3-3 3"></path></g></svg>',Eu='<svg width="15" height="15" aria-label="Escape key" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M13.6167 8.936c-.1065.3583-.6883.962-1.4875.962-.7993 0-1.653-.9165-1.653-2.1258v-.5678c0-1.2548.7896-2.1016 1.653-2.1016.8634 0 1.3601.4778 1.4875 1.0724M9 6c-.1352-.4735-.7506-.9219-1.46-.8972-.7092.0246-1.344.57-1.344 1.2166s.4198.8812 1.3445.9805C8.465 7.3992 8.968 7.9337 9 8.5c.032.5663-.454 1.398-1.4595 1.398C6.6593 9.898 6 9 5.963 8.4851m-1.4748.5368c-.2635.5941-.8099.876-1.5443.876s-1.7073-.6248-1.7073-2.204v-.4603c0-1.0416.721-2.131 1.7073-2.131.9864 0 1.6425 1.031 1.5443 2.2492h-2.956"></path></g></svg>',xt=Pn.hotKeys[0];var mu=M({name:"SearchBox",setup(){const i=Xe(Qe),[s,a]=rd(),n=li(!1);Z2(Pn.hotKeys,()=>{s.value||a()});const e=b(()=>xt?[...(n.value?["⌃","⇧","⌥","⌘"]:["Ctrl","Shift","Alt","Win"]).filter((t,l)=>xt[["ctrl","shift","alt","meta"][l]]),xt.key.toUpperCase()]:null);return vi(()=>{const{userAgent:t}=navigator;n.value=G2(t)||J2(t)||z2(t)}),()=>[h("button",{type:"button",class:"slimsearch-button","aria-label":i.value.search,onClick:()=>{a(!0)}},[h(Ul),h("div",{class:"slimsearch-placeholder"},i.value.search),e.value?h("div",{class:"slimsearch-key-hints"},e.value.map(t=>h("kbd",{class:"slimsearch-key"},t))):null])]}}),Fu=M({name:"SearchKeyHints",setup(){const i=Xe(Qe),s=ou();return()=>s.value?null:h("div",{class:"slimsearch-hints"},[h("span",{class:"slimsearch-hint"},[h("kbd",{innerHTML:yu}),i.value.select]),h("span",{class:"slimsearch-hint"},[h("kbd",{innerHTML:vu}),h("kbd",{innerHTML:uu}),i.value.navigate]),h("span",{class:"slimsearch-hint"},[h("kbd",{innerHTML:Eu}),i.value.exit])])}});const fu=fp({loader:()=>g(()=>import("./SearchResult-DPIoceYc.js"),[]),loadingComponent:()=>{const i=Xe(Qe);return h(pd,{class:"slimsearch-result-wrapper",hint:i.value.loading})}}),Cu=["ArrowDown","ArrowUp","Escape","Tab","Enter"];var bu=M({name:"SearchModal",setup(){const i=Xe(Qe),s=fB(),a=kd(),[n,e]=rd(),t=li(""),l=li([]),{suggestions:k}=Bu(l),p=li(!1),{index:d,prev:r,next:c}=cu(k),o=ni(),A=ni(),v=ni(),u=qe(v.value),E=b(()=>p.value&&k.value.length),f=(F=d.value)=>{t.value=k.value[F],p.value=!1};return pi("keydown",F=>{E.value?F.key==="ArrowUp"?r():F.key==="ArrowDown"?c():F.key==="Tab"?f():(F.key==="Enter"||F.key==="Escape")&&(p.value=!1):F.key==="Escape"&&e(!1)},{passive:!0}),QB(A,()=>{p.value=!1}),vs(t,Ml(()=>{var F,B;return(((B=(F=a.value).querySplitter)==null?void 0:B.call(F,t.value))??Promise.resolve(gu(t.value))).then(C=>{l.value=C.filter(w=>w.length)})},Math.min(Pn.searchDelay,Pn.suggestDelay))),vi(()=>{v.value=document.body,Si(n,F=>{var B;F&&((B=o.value)==null||B.focus())},{flush:"post"})}),Zs(()=>{u.value=!1}),()=>n.value?h("div",{class:"slimsearch-modal-wrapper"},[h("div",{class:"slimsearch-mask",onClick:()=>{e(!1),t.value=""}}),h("div",{class:"slimsearch-modal"},[h("div",{class:"slimsearch-box"},[h("form",[h("label",{id:"slimsearch-label",for:"slimsearch-input","aria-label":i.value.search},h(Ul)),h("input",{ref:o,type:"search",class:"slimsearch-input",id:"slimsearch-input",placeholder:i.value.placeholder,spellcheck:"false",autocapitalize:"off",autocomplete:"off",autocorrect:"off",name:`${s.value.title}-search`,value:t.value,"aria-controls":"slimsearch-results",onKeydown:F=>{E.value&&Cu.includes(F.key)&&F.preventDefault()},onInput:({target:F})=>{t.value=F.value,p.value=!0,d.value=0}}),t.value?h("button",{type:"reset",class:"slimsearch-clear-button",title:i.value.clear,"aria-label":i.value.clear,innerHTML:lu,onClick:()=>{t.value=""}}):null,E.value?h("ul",{class:"slimsearch-suggestions",ref:A},k.value.map((F,B)=>h("li",{class:["slimsearch-suggestion",{active:B===d.value}],onClick:()=>{f(B)}},[h("kbd",{class:"slimsearch-auto-complete",title:`Tab ${i.value.autocomplete}`},"Tab"),F]))):null]),h("button",{type:"button",class:"slimsearch-close-button",onClick:()=>{e(!1),t.value=""}},i.value.cancel)]),h(fu,{queries:l.value,isFocusing:!E.value,onClose:()=>{e(!1)},onUpdateQuery:F=>{t.value=F}}),h(Fu)])]):null}}),Du=Es({enhance({app:i}){tu(i),i.component("SearchBox",mu)},rootComponents:[bu]});const _u=Object.freeze(Object.defineProperty({__proto__:null,default:Du},Symbol.toStringTag,{value:"Module"})),dd="VUEPRESS_REDIRECT_STATUS",xk=c8(dd,{}),wk=B8(dd,{}),Su=i=>{const s=o8(),a=Je(),n=Oa(i.config);return b(()=>{if(n.some(([e])=>a.value===e)){for(const e of s.value)for(const[t,l]of n)if(l.includes(e))return t===a.value?null:{lang:e,localePath:t}}return null})};var xu=M({name:"RedirectModal",props:{config:{type:Object,required:!0},locales:{type:Object,required:!0}},setup(i){const s=ga(),{routeLocale:a,routePath:n}=Ba(),e=Su(i.config),t=li(),l=qe(t),k=li(!1),p=b(()=>{if(!e.value)return null;const{lang:r,localePath:c}=e.value,o=[i.locales[c],i.locales[a.value]];return{hint:o.map(({hint:A})=>A.replace("$1",r)),switch:o.map(({switch:A})=>A.replace("$1",r)).join(" / "),cancel:o.map(({cancel:A})=>A).join(" / "),remember:o.map(({remember:A})=>A).join(" / ")}}),d=()=>{wk.value[a.value]=!0,k.value&&(xk.value[a.value]=!0),l.value=!1};return Si(n,()=>{l.value=!1}),vi(async()=>{t.value=document.body,await Aa(),e.value&&!wk.value[a.value]&&!xk.value[a.value]&&(l.value=!0)}),Cl(()=>{l.value=!1}),()=>h(pr,{name:"fade-in-scale-up"},()=>{var r,c,o,A;return l.value?h("div",{key:"mask",class:"redirect-modal-mask"},h("div",{key:"popup",class:"redirect-modal-wrapper"},[h("div",{class:"redirect-modal-content"},(r=p.value)==null?void 0:r.hint.map(v=>h("p",v))),h("div",{class:"redirect-modal-hint"},[h("input",{id:"remember-redirect",type:"checkbox",value:k.value,onChange:()=>{k.value=!k.value}}),h("label",{for:"remember-redirect"},(c=p.value)==null?void 0:c.remember)]),h("button",{type:"button",class:"redirect-modal-action primary",onClick:()=>{d(),s.replace(n.value.replace(a.value,e.value.localePath))}},(o=p.value)==null?void 0:o.switch),h("button",{type:"button",class:"redirect-modal-action",onClick:()=>{d()}},(A=p.value)==null?void 0:A.cancel)])):null})}}),wu={config:{},autoLocale:!1,localeFallback:!0,defaultBehavior:"defaultLocale"},Tu={"/":{name:"简体中文",hint:"你的首选语言是 $1，是否切换到该语言？",switch:"切换到 $1",cancel:"取消",remember:"记住我的选择"}};const cd=wu;var Ru=Es({setup(){},rootComponents:[()=>h(xu,{config:cd,locales:Tu})]});const Lu=Object.freeze(Object.defineProperty({__proto__:null,config:cd,default:Ru},Symbol.toStringTag,{value:"Module"}));var Tk={"/":{word:"约 $word 字",less1Minute:"小于 1 分钟",time:"大约 $time 分钟"}};const od=()=>{const i=Un();return b(()=>i.value.readingTime??null)},Ad=(i,s)=>{const{minutes:a,words:n}=i,{less1Minute:e,word:t,time:l}=s;return{time:a<1?e:l.replace("$time",Math.round(a).toString()),words:t.replace("$word",n.toString())}},Rk={words:"",time:""},il=typeof Tk>"u"?null:Tk,gd=()=>il?Pa(il):b(()=>null),Ou=()=>{if(il===null)return b(()=>Rk);const i=od(),s=gd();return b(()=>i.value&&s.value?Ad(i.value,s.value):Rk)},ye=()=>null,mi=({name:i="",color:s="currentColor",ariaLabel:a},{attrs:n,slots:e})=>h("svg",{xmlns:"http://www.w3.org/2000/svg",class:["icon",`${i}-icon`],viewBox:"0 0 1024 1024",fill:s,"aria-label":a??`${i} icon`,...n},e.default());mi.displayName="IconBase";const Pu=i=>Ta(i)?i:`https://github.com/${i}`,zl=(i="")=>!Ta(i)||i.includes("github.com")?"GitHub":i.includes("bitbucket.org")?"Bitbucket":i.includes("gitlab.com")?"GitLab":i.includes("gitee.com")?"Gitee":null,Bd=()=>h(mi,{name:"github"},()=>h("path",{d:"M511.957 21.333C241.024 21.333 21.333 240.981 21.333 512c0 216.832 140.544 400.725 335.574 465.664 24.49 4.395 32.256-10.07 32.256-23.083 0-11.69.256-44.245 0-85.205-136.448 29.61-164.736-64.64-164.736-64.64-22.315-56.704-54.4-71.765-54.4-71.765-44.587-30.464 3.285-29.824 3.285-29.824 49.195 3.413 75.179 50.517 75.179 50.517 43.776 75.008 114.816 53.333 142.762 40.79 4.523-31.66 17.152-53.377 31.19-65.537-108.971-12.458-223.488-54.485-223.488-242.602 0-53.547 19.114-97.323 50.517-131.67-5.035-12.33-21.93-62.293 4.779-129.834 0 0 41.258-13.184 134.912 50.346a469.803 469.803 0 0 1 122.88-16.554c41.642.213 83.626 5.632 122.88 16.554 93.653-63.488 134.784-50.346 134.784-50.346 26.752 67.541 9.898 117.504 4.864 129.834 31.402 34.347 50.474 78.123 50.474 131.67 0 188.586-114.73 230.016-224.042 242.09 17.578 15.232 33.578 44.672 33.578 90.454v135.85c0 13.142 7.936 27.606 32.854 22.87C862.25 912.597 1002.667 728.747 1002.667 512c0-271.019-219.648-490.667-490.71-490.667z"}));Bd.displayName="GitHubIcon";const yd=()=>h(mi,{name:"gitee"},()=>h("path",{d:"M512 992C246.92 992 32 777.08 32 512S246.92 32 512 32s480 214.92 480 480-214.92 480-480 480zm242.97-533.34H482.39a23.7 23.7 0 0 0-23.7 23.7l-.03 59.28c0 13.08 10.59 23.7 23.7 23.7h165.96a23.7 23.7 0 0 1 23.7 23.7v11.85a71.1 71.1 0 0 1-71.1 71.1H375.71a23.7 23.7 0 0 1-23.7-23.7V423.11a71.1 71.1 0 0 1 71.1-71.1h331.8a23.7 23.7 0 0 0 23.7-23.7l.06-59.25a23.73 23.73 0 0 0-23.7-23.73H423.11a177.78 177.78 0 0 0-177.78 177.75v331.83c0 13.08 10.62 23.7 23.7 23.7h349.62a159.99 159.99 0 0 0 159.99-159.99V482.33a23.7 23.7 0 0 0-23.7-23.7z"}));yd.displayName="GiteeIcon";const ud=()=>h(mi,{name:"bitbucket"},()=>h("path",{d:"M575.256 490.862c6.29 47.981-52.005 85.723-92.563 61.147-45.714-20.004-45.714-92.562-1.133-113.152 38.29-23.442 93.696 7.424 93.696 52.005zm63.451-11.996c-10.276-81.152-102.29-134.839-177.152-101.156-47.433 21.138-79.433 71.424-77.129 124.562 2.853 69.705 69.157 126.866 138.862 120.576S647.3 548.571 638.708 478.83zm136.558-309.723c-25.161-33.134-67.986-38.839-105.728-45.13-106.862-17.151-216.576-17.7-323.438 1.134-35.438 5.706-75.447 11.996-97.719 43.996 36.572 34.304 88.576 39.424 135.424 45.129 84.553 10.862 171.447 11.447 256 .585 47.433-5.705 99.987-10.276 135.424-45.714zm32.585 591.433c-16.018 55.99-6.839 131.438-66.304 163.986-102.29 56.576-226.304 62.867-338.87 42.862-59.43-10.862-129.135-29.696-161.72-85.723-14.3-54.858-23.442-110.848-32.585-166.84l3.438-9.142 10.276-5.157c170.277 112.567 408.576 112.567 579.438 0 26.844 8.01 6.84 40.558 6.29 60.014zm103.424-549.157c-19.42 125.148-41.728 249.71-63.415 374.272-6.29 36.572-41.728 57.162-71.424 72.558-106.862 53.724-231.424 62.866-348.562 50.286-79.433-8.558-160.585-29.696-225.134-79.433-30.28-23.443-30.28-63.415-35.986-97.134-20.005-117.138-42.862-234.277-57.161-352.585 6.839-51.42 64.585-73.728 107.447-89.71 57.16-21.138 118.272-30.866 178.87-36.571 129.134-12.58 261.157-8.01 386.304 28.562 44.581 13.13 92.563 31.415 122.844 69.705 13.714 17.7 9.143 40.01 6.29 60.014z"}));ud.displayName="BitbucketIcon";const vd=()=>h(mi,{name:"source"},()=>h("path",{d:"M601.92 475.2c0 76.428-8.91 83.754-28.512 99.594-14.652 11.88-43.956 14.058-78.012 16.434-18.81 1.386-40.392 2.97-62.172 6.534-18.612 2.97-36.432 9.306-53.064 17.424V299.772c37.818-21.978 63.36-62.766 63.36-109.692 0-69.894-56.826-126.72-126.72-126.72S190.08 120.186 190.08 190.08c0 46.926 25.542 87.714 63.36 109.692v414.216c-37.818 21.978-63.36 62.766-63.36 109.692 0 69.894 56.826 126.72 126.72 126.72s126.72-56.826 126.72-126.72c0-31.086-11.286-59.598-29.7-81.576 13.266-9.504 27.522-17.226 39.996-19.206 16.038-2.574 32.868-3.762 50.688-5.148 48.312-3.366 103.158-7.326 148.896-44.55 61.182-49.698 74.25-103.158 75.24-187.902V475.2h-126.72zM316.8 126.72c34.848 0 63.36 28.512 63.36 63.36s-28.512 63.36-63.36 63.36-63.36-28.512-63.36-63.36 28.512-63.36 63.36-63.36zm0 760.32c-34.848 0-63.36-28.512-63.36-63.36s28.512-63.36 63.36-63.36 63.36 28.512 63.36 63.36-28.512 63.36-63.36 63.36zM823.68 158.4h-95.04V63.36h-126.72v95.04h-95.04v126.72h95.04v95.04h126.72v-95.04h95.04z"}));vd.displayName="SourceIcon";const Iu=({link:i,type:s=zl(i??"")})=>{if(!s)return null;const a=s.toLowerCase();return h(a==="bitbucket"?ud:a==="github"?Bd:a==="gitlab"?"GitLab":a==="gitee"?yd:vd)},Mu=(i,s=0)=>{let a=3735928559^s,n=1103547991^s;for(let e=0,t;e<i.length;e++)t=i.charCodeAt(e),a=Math.imul(a^t,2654435761),n=Math.imul(n^t,1597334677);return a=Math.imul(a^a>>>16,2246822507),a^=Math.imul(n^n>>>13,3266489909),n=Math.imul(n^n>>>16,2246822507),n^=Math.imul(a^a>>>13,3266489909),4294967296*(2097151&n)+(a>>>0)},qn=(i,s)=>Mu(i)%s,Ed=/#.*$/u,Vu=i=>{const s=Ed.exec(i);return s?s[0]:""},Lk=i=>decodeURI(i).replace(Ed,"").replace(/\/index\.html$/iu,"/").replace(/\/(README|index)\.md$/iu,"/").replace(/\.(?:html|md)$/iu,""),md=(i,s)=>{if(!Nl(s))return!1;const a=Lk(i.path),n=Lk(s),e=Vu(s);return e?e===i.hash&&(!n||a===n):a===n},ju="719px",Nu="1440px",$u="9",rn={mobileBreakPoint:ju,pcBreakPoint:Nu,colorNumber:$u},Ia=()=>id(),ws=()=>Hy(),Pi=()=>({...Ba(),theme:Ia(),themeLocale:ws()}),es=()=>{const i=Ia();return b(()=>!!i.value.pure)},Fd=()=>{const i=ws();return b(()=>i.value.author)},Ok=i=>Ds(i)&&gi(i.name),In=(i,s=!1)=>i?Ms(i)?i.map(a=>gi(a)?{name:a}:Ok(a)?a:null).filter(a=>a!==null):gi(i)?[{name:i}]:Ok(i)?[i]:(console.error(`Expect "author" to be \`AuthorInfo[] | AuthorInfo | string[] | string ${s?"":"| false"} | undefined\`, but got`,i),[]):[],fd=(i,s)=>{if(i){if(Ms(i)&&i.every(gi))return i;if(gi(i))return[i];console.error(`Expect ${s} to be \`string[] | string | undefined\`, but got`,i)}return[]},Cd=i=>fd(i,"category"),bd=i=>fd(i,"tag"),Dd=()=>{const i=ns(),s=Fd();return b(()=>{const{author:a}=i.value;return a?In(a):a===!1?[]:In(s.value,!1)})},Hu=()=>{const i=ns(),s=bi(Symbol.for("categoryMap"),null);return b(()=>Cd(i.value.category??i.value.categories).map(a=>{var n;return{name:a,path:((n=s==null?void 0:s.value.map[a])==null?void 0:n.path)??""}}))},Wu=()=>{const i=ns(),s=bi(Symbol.for("tagMap"),null);return b(()=>bd(i.value.tag??i.value.tags).map(a=>{var n;return{name:a,path:((n=s==null?void 0:s.value.map[a])==null?void 0:n.path)??""}}))},Uu=()=>{const{frontmatter:i,page:s}=Pi();return b(()=>{const a=$l(i.value.date);if(a)return a;const{createdTime:n}=s.value.git??{};return n?new Date(n):null})},zu=()=>{const{frontmatter:i,themeLocale:s}=Pi(),a=Dd(),n=Hu(),e=Wu(),t=Uu(),l=od(),k=Ou(),p=b(()=>({author:a.value,category:n.value,date:t.value,tag:e.value,isOriginal:i.value.isOriginal??!1,readingTime:l.value,readingTimeLocale:k.value,pageview:i.value.pageview??!0})),d=b(()=>i.value.pageInfo??s.value.pageInfo??null);return{info:p,items:d}},ms=()=>{const i=ws();return b(()=>i.value.metaLocales)},Ju="http://.",aa=()=>{const i=ga(),s=js();return a=>{if(!a)return;if(Wn(a))return window.open(a);if(Ke(a))return s.fullPath===a?void 0:void i.push(a);const n=s.path.slice(0,s.path.lastIndexOf("/"));return void i.push(new URL(`${n}/${encodeURI(a)}`,Ju).pathname)}},_d=()=>h(mi,{name:"author"},()=>h("path",{d:"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z"}));_d.displayName="AuthorIcon";const Sd=()=>h(mi,{name:"calendar"},()=>h("path",{d:"M716.4 110.137c0-18.753-14.72-33.473-33.472-33.473-18.753 0-33.473 14.72-33.473 33.473v33.473h66.993v-33.473zm-334.87 0c0-18.753-14.72-33.473-33.473-33.473s-33.52 14.72-33.52 33.473v33.473h66.993v-33.473zm468.81 33.52H716.4v100.465c0 18.753-14.72 33.473-33.472 33.473a33.145 33.145 0 01-33.473-33.473V143.657H381.53v100.465c0 18.753-14.72 33.473-33.473 33.473a33.145 33.145 0 01-33.473-33.473V143.657H180.6A134.314 134.314 0 0046.66 277.595v535.756A134.314 134.314 0 00180.6 947.289h669.74a134.36 134.36 0 00133.94-133.938V277.595a134.314 134.314 0 00-133.94-133.938zm33.473 267.877H147.126a33.145 33.145 0 01-33.473-33.473c0-18.752 14.72-33.473 33.473-33.473h736.687c18.752 0 33.472 14.72 33.472 33.473a33.145 33.145 0 01-33.472 33.473z"}));Sd.displayName="CalendarIcon";const xd=()=>h(mi,{name:"category"},()=>h("path",{d:"M148.41 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H148.41c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.311-40.31zM147.556 553.478H429.73c22.263 0 40.311 18.048 40.311 40.31v282.176c0 22.263-18.048 40.312-40.31 40.312H147.555c-22.263 0-40.311-18.049-40.311-40.312V593.79c0-22.263 18.048-40.311 40.31-40.311zM593.927 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H593.927c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.31-40.31zM730.22 920.502H623.926c-40.925 0-74.22-33.388-74.22-74.425V623.992c0-41.038 33.387-74.424 74.425-74.424h222.085c41.038 0 74.424 33.226 74.424 74.067v114.233c0 10.244-8.304 18.548-18.547 18.548s-18.548-8.304-18.548-18.548V623.635c0-20.388-16.746-36.974-37.33-36.974H624.13c-20.585 0-37.331 16.747-37.331 37.33v222.086c0 20.585 16.654 37.331 37.126 37.331H730.22c10.243 0 18.547 8.304 18.547 18.547 0 10.244-8.304 18.547-18.547 18.547z"}));xd.displayName="CategoryIcon";const wd=()=>h(mi,{name:"print"},()=>h("path",{d:"M819.2 364.8h-44.8V128c0-17.067-14.933-32-32-32H281.6c-17.067 0-32 14.933-32 32v236.8h-44.8C145.067 364.8 96 413.867 96 473.6v192c0 59.733 49.067 108.8 108.8 108.8h44.8V896c0 17.067 14.933 32 32 32h460.8c17.067 0 32-14.933 32-32V774.4h44.8c59.733 0 108.8-49.067 108.8-108.8v-192c0-59.733-49.067-108.8-108.8-108.8zM313.6 160h396.8v204.8H313.6V160zm396.8 704H313.6V620.8h396.8V864zM864 665.6c0 25.6-19.2 44.8-44.8 44.8h-44.8V588.8c0-17.067-14.933-32-32-32H281.6c-17.067 0-32 14.933-32 32v121.6h-44.8c-25.6 0-44.8-19.2-44.8-44.8v-192c0-25.6 19.2-44.8 44.8-44.8h614.4c25.6 0 44.8 19.2 44.8 44.8v192z"}));wd.displayName="PrintIcon";const Td=()=>h(mi,{name:"tag"},()=>h("path",{d:"M939.902 458.563L910.17 144.567c-1.507-16.272-14.465-29.13-30.737-30.737L565.438 84.098h-.402c-3.215 0-5.726 1.005-7.634 2.913l-470.39 470.39a10.004 10.004 0 000 14.164l365.423 365.424c1.909 1.908 4.42 2.913 7.132 2.913s5.223-1.005 7.132-2.913l470.39-470.39c2.01-2.11 3.014-5.023 2.813-8.036zm-240.067-72.121c-35.458 0-64.286-28.828-64.286-64.286s28.828-64.285 64.286-64.285 64.286 28.828 64.286 64.285-28.829 64.286-64.286 64.286z"}));Td.displayName="TagIcon";const Rd=()=>h(mi,{name:"timer"},()=>h("path",{d:"M799.387 122.15c4.402-2.978 7.38-7.897 7.38-13.463v-1.165c0-8.933-7.38-16.312-16.312-16.312H256.33c-8.933 0-16.311 7.38-16.311 16.312v1.165c0 5.825 2.977 10.874 7.637 13.592 4.143 194.44 97.22 354.963 220.201 392.763-122.204 37.542-214.893 196.511-220.2 389.397-4.661 5.049-7.638 11.651-7.638 19.03v5.825h566.49v-5.825c0-7.379-2.849-13.981-7.509-18.9-5.049-193.016-97.867-351.985-220.2-389.527 123.24-37.67 216.446-198.453 220.588-392.892zM531.16 450.445v352.632c117.674 1.553 211.787 40.778 211.787 88.676H304.097c0-48.286 95.149-87.382 213.728-88.676V450.445c-93.077-3.107-167.901-81.297-167.901-177.093 0-8.803 6.99-15.793 15.793-15.793 8.803 0 15.794 6.99 15.794 15.793 0 80.261 63.69 145.635 142.01 145.635s142.011-65.374 142.011-145.635c0-8.803 6.99-15.793 15.794-15.793s15.793 6.99 15.793 15.793c0 95.019-73.789 172.82-165.96 177.093z"}));Rd.displayName="TimerIcon";const Ld=()=>h(mi,{name:"word"},()=>[h("path",{d:"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z"}),h("path",{d:"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z"})]);Ld.displayName="WordIcon";var Gu=M({name:"AuthorInfo",inheritAttrs:!1,props:{author:{type:Array,required:!0}},setup(i){const s=ms(),a=es();return()=>i.author.length?h("span",{class:"page-author-info","aria-label":`${s.value.author}${a.value?"":"🖊"}`,...a.value?{}:{"data-balloon-pos":"up"}},[h(_d),h("span",i.author.map(n=>n.url?h("a",{class:"page-author-item",href:n.url,target:"_blank",rel:"noopener noreferrer"},n.name):h("span",{class:"page-author-item"},n.name))),h("span",{property:"author",content:i.author.map(n=>n.name).join(", ")})]):null}}),qu=M({name:"CategoryInfo",inheritAttrs:!1,props:{category:{type:Array,required:!0}},setup(i){const s=ms(),a=aa(),n=es();return()=>i.category.length?h("span",{class:"page-category-info","aria-label":`${s.value.category}${n.value?"":"🌈"}`,...n.value?{}:{"data-balloon-pos":"up"}},[h(xd),i.category.map(({name:e,path:t})=>h("span",{class:["page-category-item",{[`color${qn(e,Number(rn.colorNumber))}`]:!n.value,clickable:t}],role:t?"navigation":"",onClick:()=>{t&&a(t)}},e)),h("meta",{property:"articleSection",content:i.category.map(({name:e})=>e).join(",")})]):null}}),Ku=M({name:"DateInfo",inheritAttrs:!1,props:{date:Object},setup(i){const s=_r(),a=ms(),n=es(),e=b(()=>new Intl.DateTimeFormat(s.value,{dateStyle:"short"})),t=b(()=>i.date?e.value.format(i.date):null);return()=>i.date?h("span",{class:"page-date-info","aria-label":`${a.value.date}${n.value?"":"📅"}`,...n.value?{}:{"data-balloon-pos":"up"}},[h(Sd),h("span",{"data-allow-mismatch":"text"},t.value),h("meta",{property:"datePublished",content:i.date.toISOString()||""})]):null}}),Xu=M({name:"OriginalInfo",inheritAttrs:!1,props:{isOriginal:Boolean},setup(i){const s=ms();return()=>i.isOriginal?h("span",{class:"page-original-info"},s.value.origin):null}}),Qu=M({name:"ReadingTimeInfo",inheritAttrs:!1,props:{readingTime:Object,readingTimeLocale:Object},setup(i){const s=ms(),a=es(),n=b(()=>{if(!i.readingTime)return null;const{minutes:e}=i.readingTime;return e<1?"PT1M":`PT${Math.round(e)}M`});return()=>{var e;return(e=i.readingTimeLocale)!=null&&e.time?h("span",{class:"page-reading-time-info","aria-label":`${s.value.readingTime}${a.value?"":"⌛"}`,...a.value?{}:{"data-balloon-pos":"up"}},[h(Rd),h("span",i.readingTimeLocale.time),h("meta",{property:"timeRequired",content:n.value})]):null}}}),Yu=M({name:"TagInfo",inheritAttrs:!1,props:{tag:Array},setup(i){const s=ms(),a=aa(),n=es();return()=>{var e;return(e=i.tag)!=null&&e.length?h("span",{class:"page-tag-info","aria-label":`${s.value.tag}${n.value?"":"🏷"}`,...n.value?{}:{"data-balloon-pos":"up"}},[h(Td),i.tag.map(({name:t,path:l})=>h("span",{class:["page-tag-item",{[`color${qn(t,Number(rn.colorNumber))}`]:!n.value,clickable:l}],role:l?"navigation":"",onClick:()=>{l&&a(l)}},t)),h("meta",{property:"keywords",content:i.tag.map(({name:t})=>t).join(",")})]):null}}}),Zu=M({name:"ReadTimeInfo",inheritAttrs:!1,props:{readingTime:Object,readingTimeLocale:Object},setup(i){const s=ms(),a=es();return()=>{var n,e;return(n=i.readingTimeLocale)!=null&&n.words?h("span",{class:"page-word-info","aria-label":`${s.value.words}${a.value?"":"🔠"}`,...a.value?{}:{"data-balloon-pos":"up"}},[h(Ld),h("span",i.readingTimeLocale.words),h("meta",{property:"wordCount",content:(e=i.readingTime)==null?void 0:e.words})]):null}}}),Od=M({name:"PageInfo",components:{AuthorInfo:Gu,CategoryInfo:qu,DateInfo:Ku,OriginalInfo:Xu,PageViewInfo:ye,ReadingTimeInfo:Qu,TagInfo:Yu,WordInfo:Zu},props:{items:[Boolean,Array],info:{type:Object,required:!0}},setup(i){const s=es();return()=>{const a=i.items??["Author","Original","Date","PageView","ReadingTime","Category","Tag"];return a?h("div",{class:"page-info"},a.map(n=>h(xi(`${n}Info`),{...i.info,isPure:s.value}))):null}}});const Jl={},Pd=Symbol(""),Kn=()=>{const i=bi(Pd);if(!i)throw new Error("useDarkMode() is called without provider.");return i},i3=i=>{const s=l8(),a=Ia(),n=b(()=>a.value.darkmode??"switch"),e=Jn("vuepress-theme-hope-scheme","auto"),t=b(()=>{const k=n.value;return k==="disable"?!1:k==="enable"?!0:k==="auto"?s.value:k==="toggle"?e.value==="dark":e.value==="dark"||e.value==="auto"&&s.value}),l=b(()=>{const k=n.value;return k==="switch"||k==="toggle"});i.provide(Pd,{canToggle:l,config:n,isDarkMode:t,status:e}),Object.defineProperties(i.config.globalProperties,{$isDarkMode:{get:()=>t.value}})},s3=()=>{const{config:i,isDarkMode:s,status:a}=Kn();je(()=>{i.value==="disable"?a.value="light":i.value==="enable"?a.value="dark":i.value==="toggle"&&a.value==="auto"&&(a.value="light")}),pi("beforeprint",()=>{s.value&&document.documentElement.setAttribute("data-theme","light")}),pi("afterprint",()=>{s.value&&document.documentElement.setAttribute("data-theme","dark")}),vi(()=>{vs(s,n=>{document.documentElement.setAttribute("data-theme",n?"dark":"light")})})},sl=i=>!Wn(i)&&!Sl(i),we=(i,s=!1,a)=>{const{meta:n,path:e,notFound:t}=us(i,a);return t?{text:e,link:e}:{text:!s&&n.shortTitle?n.shortTitle:n.title||e,link:e,icon:n.icon}},Fa=(i="",s="")=>Wn(s)||Ke(s)?s:`${dr(i)}${s}`,Id=(i,s)=>{const a=gi(i)?we(Fa(s,i)):gi(i.link)?{...i,link:sl(i.link)?us(Fa(s,i.link)).path:i.link}:i;if("children"in a){const n=Fa(s,a.prefix),e=a.children==="structure"?Jl[n]:a.children;return{...a,prefix:n,children:e.map(t=>Id(t,n))}}return{...a}},al=({config:i,prefix:s=""})=>i.map(a=>Id(a,s)),a3=({config:i,routePath:s})=>{const a=Vs(i).sort((n,e)=>e.length-n.length);for(const n of a)if(xe(decodeURI(s),n)){const e=i[n];return al({config:e==="structure"?Jl[n]:e||[],prefix:n})}return console.warn(`${decodeURI(s)} is missing it's sidebar config.`),[]},n3=({config:i,routeLocale:s,routePath:a})=>i==="structure"?al({config:Jl[s],prefix:s}):Ms(i)?al({config:i}):Ds(i)?a3({config:i,routePath:a}):[],Md=Symbol(""),e3=()=>{const{frontmatter:i,routeLocale:s,routePath:a,themeLocale:n}=Pi(),e=b(()=>i.value.home?!1:i.value.sidebar??n.value.sidebar??"structure"),t=b(()=>n3({config:e.value,routeLocale:s.value,routePath:a.value}));bs(Md,t)},Gl=()=>{const i=bi(Md);if(!i)throw new Error("useSidebarItems() is called without provider.");return i};var t3=M({name:"PageFooter",setup(){const{frontmatter:i,theme:s,themeLocale:a}=Pi(),n=Dd(),e=b(()=>{const{copyright:d,footer:r}=i.value;return r!==!1&&!!(d||r||a.value.displayFooter)}),t=b(()=>{const{footer:d}=i.value;return gi(d)?d:a.value.footer??""}),l=b(()=>n.value.map(({name:d})=>d).join(", ")),k=d=>`Copyright © ${new Date().getFullYear()} ${l.value} ${d?`${d} Licensed`:""}`,p=b(()=>{const{copyright:d,license:r=""}=i.value,{license:c}=s.value,{copyright:o}=a.value;return d??(r?k(r):o??(l.value||c?k(c):!1))});return()=>e.value?h("footer",{class:"vp-footer-wrapper","vp-footer":""},[t.value?h("div",{class:"vp-footer",innerHTML:t.value}):null,p.value?h("div",{class:"vp-copyright",innerHTML:p.value}):null]):null}});const Vd=()=>h(mi,{name:"outlook"},()=>[h("path",{d:"M224 800c0 9.6 3.2 44.8 6.4 54.4 6.4 48-48 76.8-48 76.8s80 41.6 147.2 0 134.4-134.4 38.4-195.2c-22.4-12.8-41.6-19.2-57.6-19.2C259.2 716.8 227.2 761.6 224 800zM560 675.2l-32 51.2c-51.2 51.2-83.2 32-83.2 32 25.6 67.2 0 112-12.8 128 25.6 6.4 51.2 9.6 80 9.6 54.4 0 102.4-9.6 150.4-32l0 0c3.2 0 3.2-3.2 3.2-3.2 22.4-16 12.8-35.2 6.4-44.8-9.6-12.8-12.8-25.6-12.8-41.6 0-54.4 60.8-99.2 137.6-99.2 6.4 0 12.8 0 22.4 0 12.8 0 38.4 9.6 48-25.6 0-3.2 0-3.2 3.2-6.4 0-3.2 3.2-6.4 3.2-6.4 6.4-16 6.4-16 6.4-19.2 9.6-35.2 16-73.6 16-115.2 0-105.6-41.6-198.4-108.8-268.8C704 396.8 560 675.2 560 675.2zM224 419.2c0-28.8 22.4-51.2 51.2-51.2 28.8 0 51.2 22.4 51.2 51.2 0 28.8-22.4 51.2-51.2 51.2C246.4 470.4 224 448 224 419.2zM320 284.8c0-22.4 19.2-41.6 41.6-41.6 22.4 0 41.6 19.2 41.6 41.6 0 22.4-19.2 41.6-41.6 41.6C339.2 326.4 320 307.2 320 284.8zM457.6 208c0-12.8 12.8-25.6 25.6-25.6 12.8 0 25.6 12.8 25.6 25.6 0 12.8-12.8 25.6-25.6 25.6C470.4 233.6 457.6 220.8 457.6 208zM128 505.6C128 592 153.6 672 201.6 736c28.8-60.8 112-60.8 124.8-60.8-16-51.2 16-99.2 16-99.2l316.8-422.4c-48-19.2-99.2-32-150.4-32C297.6 118.4 128 291.2 128 505.6zM764.8 86.4c-22.4 19.2-390.4 518.4-390.4 518.4-22.4 28.8-12.8 76.8 22.4 99.2l9.6 6.4c35.2 22.4 80 12.8 99.2-25.6 0 0 6.4-12.8 9.6-19.2 54.4-105.6 275.2-524.8 288-553.6 6.4-19.2-3.2-32-19.2-32C777.6 76.8 771.2 80 764.8 86.4z"})]);Vd.displayName="AppearanceIcon";const jd=()=>h(mi,{name:"auto"},()=>h("path",{d:"M512 992C246.92 992 32 777.08 32 512S246.92 32 512 32s480 214.92 480 480-214.92 480-480 480zm0-840c-198.78 0-360 161.22-360 360 0 198.84 161.22 360 360 360s360-161.16 360-360c0-198.78-161.22-360-360-360zm0 660V212c165.72 0 300 134.34 300 300 0 165.72-134.28 300-300 300z"}));jd.displayName="AutoColorModeIcon";const Nd=()=>h(mi,{name:"light"},()=>h("path",{d:"M952 552h-80a40 40 0 0 1 0-80h80a40 40 0 0 1 0 80zM801.88 280.08a41 41 0 0 1-57.96-57.96l57.96-58a41.04 41.04 0 0 1 58 58l-58 57.96zM512 752a240 240 0 1 1 0-480 240 240 0 0 1 0 480zm0-560a40 40 0 0 1-40-40V72a40 40 0 0 1 80 0v80a40 40 0 0 1-40 40zm-289.88 88.08-58-57.96a41.04 41.04 0 0 1 58-58l57.96 58a41 41 0 0 1-57.96 57.96zM192 512a40 40 0 0 1-40 40H72a40 40 0 0 1 0-80h80a40 40 0 0 1 40 40zm30.12 231.92a41 41 0 0 1 57.96 57.96l-57.96 58a41.04 41.04 0 0 1-58-58l58-57.96zM512 832a40 40 0 0 1 40 40v80a40 40 0 0 1-80 0v-80a40 40 0 0 1 40-40zm289.88-88.08 58 57.96a41.04 41.04 0 0 1-58 58l-57.96-58a41 41 0 0 1 57.96-57.96z"}));Nd.displayName="LightColorModeIcon";const $d=()=>h(mi,{name:"dark"},()=>h("path",{d:"M524.8 938.667h-4.267a439.893 439.893 0 0 1-313.173-134.4 446.293 446.293 0 0 1-11.093-597.334A432.213 432.213 0 0 1 366.933 90.027a42.667 42.667 0 0 1 45.227 9.386 42.667 42.667 0 0 1 10.24 42.667 358.4 358.4 0 0 0 82.773 375.893 361.387 361.387 0 0 0 376.747 82.774 42.667 42.667 0 0 1 54.187 55.04 433.493 433.493 0 0 1-99.84 154.88 438.613 438.613 0 0 1-311.467 128z"}));$d.displayName="DarkColorModeIcon";var Hd=M({name:"ColorModeSwitch",setup(){const{config:i,isDarkMode:s,status:a}=Kn(),n=es(),e=()=>{i.value==="switch"?a.value={light:"dark",dark:"auto",auto:"light"}[a.value]:a.value=a.value==="light"?"dark":"light"},t=async l=>{if(!(document.startViewTransition&&!window.matchMedia("(prefers-reduced-motion: reduce)").matches&&!n.value)){e();return}const k=l.clientX,p=l.clientY,d=Math.hypot(Math.max(k,innerWidth-k),Math.max(p,innerHeight-p)),r=s.value;await document.startViewTransition(async()=>{e(),await Aa()}).ready,s.value!==r&&document.documentElement.animate({clipPath:s.value?[`circle(${d}px at ${k}px ${p}px)`,`circle(0px at ${k}px ${p}px)`]:[`circle(0px at ${k}px ${p}px)`,`circle(${d}px at ${k}px ${p}px)`]},{duration:400,pseudoElement:s.value?"::view-transition-old(root)":"::view-transition-new(root)"})};return()=>h("button",{type:"button",class:"vp-color-mode-switch",id:"color-mode-switch",onClick:t},[h(jd,{style:{display:a.value==="auto"?"block":"none"}}),h($d,{style:{display:a.value==="dark"?"block":"none"}}),h(Nd,{style:{display:a.value==="light"?"block":"none"}})])}});const Wd=()=>{const i=ws();return b(()=>i.value.outlookLocales)};var l3=M({name:"ColorMode",setup(){const i=Wd(),{canToggle:s}=Kn();return()=>s.value?h("div",{class:"vp-color-mode"},[h("label",{class:"vp-color-mode-title",for:"color-mode-switch"},i.value.darkmode),h(Hd)]):null}});const Ud=()=>h(mi,{name:"cancel-fullscreen"},()=>h("path",{d:"M778.468 78.62H247.922c-102.514 0-186.027 83.513-186.027 186.027V795.08c0 102.514 83.513 186.027 186.027 186.027h530.432c102.514 0 186.71-83.513 186.026-186.027V264.647C964.494 162.02 880.981 78.62 778.468 78.62zM250.88 574.35h171.122c23.324 0 43.122 19.115 43.804 43.805v171.121c0 24.008-19.114 43.122-43.122 43.122-12.06 0-22.641-5.006-30.378-12.743s-12.743-19.115-12.743-30.379V722.83L224.597 877.91c-16.953 16.952-44.6 16.952-61.553 0-16.953-16.954-16.953-44.602 0-61.554L318.009 661.39h-66.446c-24.007 0-43.122-19.114-43.122-43.122 0-24.12 18.432-43.918 42.439-43.918zm521.899-98.873H601.657c-23.325 0-43.122-19.114-43.805-43.804V260.55c0-24.007 19.115-43.122 43.122-43.122 12.06 0 22.642 5.007 30.379 12.743s12.743 19.115 12.743 30.38v66.445l154.965-154.965c16.953-16.953 44.601-16.953 61.554 0 16.953 16.953 16.953 44.6 0 61.554L705.536 388.55h66.446c24.007 0 43.122 19.115 43.122 43.122.114 24.007-18.318 43.804-42.325 43.804z"}));Ud.displayName="CancelFullScreenIcon";const zd=()=>h(mi,{name:"enter-fullscreen"},()=>h("path",{d:"M762.773 90.24h-497.28c-96.106 0-174.4 78.293-174.4 174.4v497.28c0 96.107 78.294 174.4 174.4 174.4h497.28c96.107 0 175.04-78.293 174.4-174.4V264.64c0-96.213-78.186-174.4-174.4-174.4zm-387.2 761.173H215.04c-21.867 0-40.427-17.92-41.067-41.066V649.92c0-22.507 17.92-40.427 40.427-40.427 11.307 0 21.227 4.694 28.48 11.947 7.253 7.253 11.947 17.92 11.947 28.48v62.293l145.28-145.28c15.893-15.893 41.813-15.893 57.706 0 15.894 15.894 15.894 41.814 0 57.707l-145.28 145.28h62.294c22.506 0 40.426 17.92 40.426 40.427s-17.173 41.066-39.68 41.066zM650.24 165.76h160.427c21.866 0 40.426 17.92 41.066 41.067v160.426c0 22.507-17.92 40.427-40.426 40.427-11.307 0-21.227-4.693-28.48-11.947-7.254-7.253-11.947-17.92-11.947-28.48v-62.186L625.6 450.347c-15.893 15.893-41.813 15.893-57.707 0-15.893-15.894-15.893-41.814 0-57.707l145.28-145.28H650.88c-22.507 0-40.427-17.92-40.427-40.427s17.174-41.173 39.787-41.173z"}));zd.displayName="EnterFullScreenIcon";var Jd=M({name:"ToggleFullScreenButton",setup(){const{isSupported:i,isFullscreen:s,toggle:a}=Ge();return()=>i.value?h("button",{type:"button",id:"full-screen-switch",class:"full-screen",ariaPressed:s.value,onClick:()=>a()},s.value?h(Ud):h(zd)):null}}),h3=M({name:"ToggleFullScreenButton",setup(){const i=Wd(),{isSupported:s}=Ge();return()=>s.value?h("div",{class:"full-screen-wrapper"},[h("label",{class:"full-screen-title",for:"full-screen-switch"},i.value.fullscreen),h(Jd)]):null}}),Gd=M({name:"AppearanceSettings",setup(){const i=Ia(),s=es(),a=b(()=>!s.value&&i.value.fullscreen);return()=>h(Rl,()=>[null,h(l3),a.value?h(h3):null])}}),k3=M({name:"AppearanceButton",setup(){const i=Ia(),{canToggle:s}=Kn(),{isSupported:a}=Ge(),n=es(),e=li(!1),t=b(()=>!n.value&&i.value.fullscreen&&a),l=b(()=>s.value||t.value);return sa(()=>{e.value=!1}),()=>l.value?h("div",{class:"vp-nav-item hide-in-mobile"},s.value&&!t.value?h(Hd):t.value&&!s.value?h(Jd):h("button",{type:"button",class:["vp-appearance-button",{open:e.value}],tabindex:"-1","aria-hidden":!0},[h(Vd),h("div",{class:"vp-appearance-dropdown"},h(Gd))])):null}});const Zi=({config:i,iconSizing:s="both"},{emit:a,slots:n})=>{const{icon:e}=i;return h(_B,{config:i,onFocusout:()=>{a("focusout")}},{...n,before:n.before??(e?()=>h(xi("VPIcon"),{icon:e,sizing:s}):null)})};Zi.displayName="AutoLink";var p3=M({name:"NavbarDropdown",props:{config:{type:Object,required:!0}},slots:Object,setup(i,{slots:s}){const a=hn(i,"config"),n=b(()=>a.value.ariaLabel??a.value.text),e=li(!1),t=l=>{l.detail===0&&(e.value=!e.value)};return sa(()=>{e.value=!1}),()=>{var l;return h("div",{class:["vp-dropdown-wrapper",{open:e.value}]},[h("button",{type:"button",class:"vp-dropdown-title","aria-label":n.value,onClick:t},[((l=s.title)==null?void 0:l.call(s))??[h(xi("VPIcon"),{icon:a.value.icon}),i.config.text],h("span",{class:"arrow"}),h("ul",{class:"vp-dropdown"},a.value.children.map((k,p)=>{const d=p===a.value.children.length-1;return h("li",{class:"vp-dropdown-item"},"children"in k?[h("h4",{class:"vp-dropdown-subtitle"},k.link?h(Zi,{config:k,onFocusout:()=>{k.children.length===0&&d&&(e.value=!1)}}):k.text),h("ul",{class:"vp-dropdown-subitems"},k.children.map((r,c)=>h("li",{class:"vp-dropdown-subitem"},h(Zi,{config:r,onFocusout:()=>{c===k.children.length-1&&d&&(e.value=!1)}}))))]:h(Zi,{config:k,onFocusout:()=>{d&&(e.value=!1)}}))}))])])}}}),r3=M({name:"NavScreenMenu",props:{config:{type:Object,required:!0}},setup(i){const s=hn(i,"config"),a=js(),n=b(()=>s.value.ariaLabel??s.value.text),e=li(!1),t=(l,k)=>k[k.length-1]===l;return sa(()=>{e.value=!1}),Si(()=>a.fullPath,()=>{e.value=!1}),()=>[h("button",{type:"button",class:["vp-nav-screen-menu-title",{active:e.value}],"aria-label":n.value,onClick:()=>{e.value=!e.value}},[h("span",{class:"text"},[h(xi("VPIcon"),{icon:s.value.icon,sizing:"both"}),i.config.text]),h("span",{class:["arrow",e.value?"down":"end"]})]),h("ul",{class:["vp-nav-screen-menu",{hide:!e.value}]},s.value.children.map(l=>h("li",{class:"vp-nav-screen-menu-item"},"children"in l?[h("h4",{class:"vp-nav-screen-menu-subtitle"},l.link?h(Zi,{config:l,onFocusout:()=>{t(l,s.value.children)&&l.children.length===0&&(e.value=!1)}}):l.text),h("ul",{class:"vp-nav-screen-menu-subitems"},l.children.map(k=>h("li",{class:"vp-nav-screen-menu-subitem"},h(Zi,{config:k,onFocusout:()=>{t(k,l.children)&&t(l,s.value.children)&&(e.value=!1)}}))))]:h(Zi,{config:l,onFocusout:()=>{t(l,s.value.children)&&(e.value=!1)}}))))]}});const qd=(i,s="")=>gi(i)?we(Fa(s,i)):"children"in i?{...i,...i.link&&sl(i.link)?{link:us(Fa(s,i.link)).path}:{},children:i.children.map(a=>qd(a,Fa(s,i.prefix)))}:{...i,link:sl(i.link)?us(Fa(s,i.link)).path:i.link},Kd=()=>{const i=ws();return b(()=>(i.value.navbar||[]).map(s=>qd(s)))};var d3=M({name:"NavScreenLinks",setup(){const i=Kd();return()=>i.value.length?h("nav",{class:"nav-screen-links"},i.value.map(s=>h("div",{class:"navbar-links-item"},"children"in s?h(r3,{config:s}):h(Zi,{config:s})))):null}});const{mobileBreakPoint:c3,pcBreakPoint:o3}=rn,Pk=i=>i.endsWith("px")?Number(i.slice(0,-2)):null,Ye=()=>{const i=li(!1),s=li(!1),a=()=>{i.value=window.innerWidth<=(Pk(c3)??719),s.value=window.innerWidth>=(Pk(o3)??1440)};return pi("resize",a,!1),pi("orientationchange",a,!1),vi(()=>{a()}),{isMobile:i,isPC:s}};var A3=M({name:"NavScreen",props:{show:Boolean},slots:Object,setup(i,{slots:s}){const{isMobile:a}=Ye(),n=ni(),e=qe(n);return sa(()=>{e.value=!1}),Si(a,t=>{!t&&i.show&&(e.value=!1)}),vi(()=>{n.value=document.body}),Zs(()=>{e.value=!1}),()=>h(nn,{name:"fade-in-down",onEnter:()=>{e.value=!0},onAfterLeave:()=>{e.value=!1}},()=>{var t,l;return i.show?h("div",{id:"nav-screen",class:"vp-nav-screen"},h("div",{class:"vp-nav-screen-container"},[(t=s.navScreenTop)==null?void 0:t.call(s),h(d3),h("div",{class:"vp-appearance-wrapper"},h(Gd)),(l=s.navScreenBottom)==null?void 0:l.call(s)])):null})}}),g3=M({name:"NavbarBrand",setup(){const{routeLocale:i,siteLocale:s,themeLocale:a}=Pi(),n=b(()=>a.value.home??i.value),e=b(()=>s.value.title),t=b(()=>a.value.navbarTitle??e.value),l=b(()=>a.value.logo?Ci(a.value.logo):null),k=b(()=>a.value.logoDark?Ci(a.value.logoDark):null);return()=>h(Vi,{to:n.value,class:"vp-brand","aria-label":a.value.routerLocales.home},()=>[l.value?h("img",{class:["vp-nav-logo",{light:!!k.value}],src:l.value,alt:""}):null,k.value?h("img",{class:["vp-nav-logo dark"],src:k.value,alt:""}):null,t.value?h("span",{class:["vp-site-name",{"hide-in-pad":l.value&&(a.value.hideSiteNameOnMobile??!0)}]},t.value):null])}}),B3=M({name:"NavbarLinks",setup(){const i=Kd();return()=>i.value.length?h("nav",{class:"vp-nav-links"},i.value.map(s=>h("div",{class:"vp-nav-item hide-in-mobile"},"children"in s?h(p3,{config:s}):h(Zi,{config:s,iconSizing:"height"})))):null}});const y3=()=>{const i=ws(),s=b(()=>i.value.repo),a=b(()=>s.value?Pu(s.value):null),n=b(()=>s.value?zl(s.value):null),e=b(()=>a.value?i.value.repoLabel??n.value??"Source":null);return b(()=>!a.value||!e.value||i.value.repoDisplay===!1?null:{type:n.value??"Source",label:e.value,link:a.value})};var u3=M({name:"RepoLink",setup(){const i=y3();return()=>i.value?h("div",{class:"vp-nav-item vp-action"},h("a",{class:"vp-action-link",href:i.value.link,target:"_blank",rel:"noopener noreferrer","aria-label":i.value.label},h(Iu,{type:i.value.type,style:{width:"1.25rem",height:"1.25rem",verticalAlign:"middle"}}))):null}});const Xd=({active:i=!1},{emit:s})=>h("button",{type:"button",class:["vp-toggle-navbar-button",{"is-active":i}],"aria-label":"Toggle Navbar","aria-expanded":i,"aria-controls":"nav-screen",onClick:()=>{s("toggle")}},h("span",[h("span",{class:"vp-top"}),h("span",{class:"vp-middle"}),h("span",{class:"vp-bottom"})]));Xd.displayName="ToggleNavbarButton";const nl=(i,{emit:s})=>h("button",{type:"button",class:"vp-toggle-sidebar-button",title:"Toggle Sidebar",onClick:()=>{s("toggle")}},h("span",{class:"icon"}));nl.displayName="ToggleSidebarButton",nl.emits=["toggle"];var v3=M({name:"NavBar",emits:["toggleSidebar"],slots:Object,setup(i,{emit:s,slots:a}){const n=ws(),{isMobile:e}=Ye(),t=li(!1),l=b(()=>{const{navbarAutoHide:r="mobile"}=n.value;return r!=="none"&&(r==="always"||e.value)}),k=b(()=>n.value.navbarLayout??{start:["Brand"],center:["Links"],end:["Language","Repo","Outlook","Search"]}),p={Brand:g3,Language:ye,Links:B3,Repo:u3,Outlook:k3,Search:cs("SearchBox")?xi("SearchBox"):ye},d=r=>p[r]??(cs(r)?xi(r):ye);return sa(()=>{t.value=!1}),Si(e,r=>{r||(t.value=!1)}),()=>{var r,c,o;return[h("header",{key:"navbar",id:"navbar",class:["vp-navbar",{"auto-hide":l.value}],"vp-navbar":""},[h("div",{class:"vp-navbar-start"},[h(nl,{onToggle:()=>{t.value&&(t.value=!1),s("toggleSidebar")}}),(r=k.value.start)==null?void 0:r.map(A=>h(d(A)))]),h("div",{class:"vp-navbar-center"},[(c=k.value.center)==null?void 0:c.map(A=>h(d(A)))]),h("div",{class:"vp-navbar-end"},[(o=k.value.end)==null?void 0:o.map(A=>h(d(A))),h(Xd,{active:t.value,onToggle:()=>{t.value=!t.value}})])]),h(A3,{show:t.value},a)]}}});const ql=(i,s)=>s.activeMatch?new RegExp(s.activeMatch,"u").test(i.path):md(i,s.link);var E3=M({name:"SidebarChild",props:{config:{type:Object,required:!0}},setup(i){const s=js();return()=>gi(i.config.link)?h(Zi,{class:["vp-sidebar-link",{active:ql(s,i.config)}],config:{...i.config,exact:!0}}):h("p",i,[h(xi("VPIcon"),{icon:i.config.icon,sizing:"both"}),i.config.text])}});const Kl=(i,s)=>"children"in s?!!s.prefix&&md(i,s.prefix)||s.children.some(a=>Kl(i,a)):ql(i,s);var m3=M({name:"SidebarGroup",props:{config:{type:Object,required:!0},open:{type:Boolean,required:!0}},emits:["toggle"],setup(i,{emit:s}){const a=js(),n=li(!1),e=b(()=>Kl(a,i.config)),t=b(()=>ql(a,i.config)),l=b(()=>i.open||i.config.expanded&&!n.value);return()=>{const{collapsible:k,children:p=[],icon:d,prefix:r,link:c,text:o}=i.config;return h("section",{class:"vp-sidebar-group"},[h(k?"button":"p",{class:["vp-sidebar-header",{clickable:k||c,exact:t.value,active:e.value}],...k?{type:"button",onClick:()=>{n.value=!0,s("toggle")}}:{}},[h(xi("VPIcon"),{icon:d,sizing:"both"}),c?h(Zi,{class:"vp-sidebar-title no-external-link-icon",config:{text:o,link:c}}):h("span",{class:"vp-sidebar-title"},o),k?h("span",{class:["vp-arrow",l.value?"down":"end"]}):null]),l.value||!k?h(Qd,{key:r,config:p}):null])}}}),Qd=M({name:"SidebarLinks",props:{config:{type:Array,required:!0}},setup(i){const s=js(),a=EB(),n=li(-1),e=t=>{n.value=t===n.value?-1:t};return vs(a,()=>{const t=i.config.findIndex(l=>Kl(s,l));n.value=t},{flush:"post"}),()=>h("ul",{class:"vp-sidebar-links"},i.config.map((t,l)=>h("li","children"in t?h(m3,{config:t,open:l===n.value,onToggle:()=>{e(l)}}):h(E3,{config:t}))))}}),F3=M({name:"SideBar",slots:Object,setup(i,{slots:s}){const a=js(),n=Gl(),e=ni();return vi(()=>{vs(()=>a.hash,t=>{const l=document.querySelector(`.vp-sidebar a.vp-sidebar-link[href="${a.path}${t}"]`);if(!l)return;const{top:k,height:p}=e.value.getBoundingClientRect(),{top:d,height:r}=l.getBoundingClientRect();d<k?l.scrollIntoView(!0):d+r>k+p&&l.scrollIntoView(!1)})}),()=>{var t,l,k;return h("aside",{ref:e,key:"sidebar",id:"sidebar",class:"vp-sidebar","vp-sidebar":""},[(t=s.sidebarTop)==null?void 0:t.call(s),((l=s.sidebarItems)==null?void 0:l.call(s,n.value))??h(Qd,{config:n.value}),(k=s.sidebarBottom)==null?void 0:k.call(s)])}}}),Xl=M({name:"MainLayout",props:{containerClass:String,noNavbar:Boolean,noSidebar:Boolean,noToc:Boolean},slots:Object,setup(i,{slots:s}){const{frontmatter:a,theme:n,themeLocale:e}=Pi(),{isMobile:t,isPC:l}=Ye(),k=es(),[p,d]=ln(!1),[r,c]=ln(!1),o=Gl(),A=ni(),v=qe(A),u=li(!1),E=b(()=>i.noNavbar||a.value.navbar===!1||e.value.navbar===!1?!1:!!(e.value.logo??e.value.repo??e.value.navbar)),f=b(()=>a.value.externalLinkIcon??n.value.externalLinkIcon??!0),F=b(()=>!i.noToc&&!a.value.home&&!!(a.value.toc??e.value.toc??!0)),B={x:0,y:0},C=I=>{B.x=I.changedTouches[0].clientX,B.y=I.changedTouches[0].clientY},w=I=>{const j=I.changedTouches[0].clientX-B.x,_=I.changedTouches[0].clientY-B.y;Math.abs(j)>Math.abs(_)*1.5&&Math.abs(j)>40&&(j>0&&B.x<=80?d(!0):d(!1))};let $=0;return pi("scroll",Or(()=>{const I=window.scrollY;I<=58||I<$?u.value=!1:$+200<I&&!p.value&&(u.value=!0),$=I},300,!0)),Si(t,I=>{I||d(!1)}),Si(p,I=>{v.value=I}),sa(()=>{d(!1)}),vi(()=>{A.value=document.body}),Zs(()=>{v.value=!1}),()=>{var T,X,G;const I=(T=s.sidebarTop)==null?void 0:T.call(s),j=(X=s.sidebarItems)==null?void 0:X.call(s,o.value),_=(G=s.sidebarBottom)==null?void 0:G.call(s),O=Qa(I)&&Qa(j)&&Qa(_),W=i.noSidebar||a.value.sidebar===!1||(a.value.home||o.value.length===0)&&O;return h(cs("GlobalEncrypt")?xi("GlobalEncrypt"):Pl,()=>h("div",{class:["theme-container",{"hide-navbar":u.value,"no-navbar":!E.value,"sidebar-collapsed":!t.value&&!l.value&&r.value,"sidebar-open":t.value&&p.value,"no-sidebar":W,"external-link-icon":f.value,pure:k.value,"has-toc":F.value},i.containerClass??"",a.value.containerClass??""],"vp-container":"",onTouchStart:C,onTouchEnd:w},[E.value?h(v3,{onToggleSidebar:()=>d()},s):null,h(nn,{name:"fade-in"},()=>p.value?h("div",{class:"vp-sidebar-mask",onClick:()=>d(!1)}):null),h(nn,{name:"fade-in"},()=>t.value?null:h("div",{class:"toggle-sidebar-wrapper",onClick:()=>c()},h("span",{class:["arrow",r.value?"end":"start"]}))),h(F3,null,s),s.default(),h(t3)]))}}});const Yd=()=>{const{frontmatter:i,themeLocale:s}=Pi(),a=b(()=>i.value.changelog??((s.value.changelog??!1)&&!i.value.home)),n=b(()=>{const{contributors:t,home:l}=i.value;return Ms(t)?l?!1:s.value.contributors??!0:t??(l?!1:s.value.contributors??!0)}),e=b(()=>i.value.lastUpdated??s.value.lastUpdated??!0);return{changelog:a,contributors:n,lastUpdated:e}};var Ze=M({name:"MarkdownContent",props:{custom:Boolean},slots:Object,setup(i,{slots:s}){const a=Ia(),{changelog:n,contributors:e}=Yd(),t=li(),l=p8(t,{delayEnter:Be(a.value.focus)?a.value.focus:1500,delayLeave:0}),k=b(()=>!!(a.value.focus??a.value.pure)&&l.value);return vi(()=>{const p=document.documentElement;vs(k,d=>{d?p.classList.add("is-focusing"):p.classList.remove("is-focusing")})}),()=>{var p,d;return h("div",{class:{custom:i.custom},"vp-content":""},[(p=s.contentBefore)==null?void 0:p.call(s),h(xr,{ref:t,id:"markdown-content"}),(d=s.contentAfter)==null?void 0:d.call(s),n.value&&cs("GitChangelog")?h(xi("GitChangelog")):null,e.value==="content"&&cs("GitContributors")?h(xi("GitContributors")):null])}}}),Ql=M({name:"SkipLink",props:{content:{type:String,default:"main-content"}},setup(i){const s=ws(),a=ni(),n=({target:e})=>{const t=document.querySelector(e.hash);if(t){const l=()=>{t.removeAttribute("tabindex"),t.removeEventListener("blur",l)};t.setAttribute("tabindex","-1"),t.addEventListener("blur",l),t.focus(),window.scrollTo(0,0)}};return sa(()=>{var e;(e=a.value)==null||e.focus()}),()=>[h("span",{ref:a,tabindex:"-1"}),h("a",{href:`#${i.content}`,class:"vp-skip-link sr-only",onClick:n},s.value.routerLocales.skipToContent)]}});const el=()=>h(mi,{name:"slide-down"},()=>h("path",{d:"M108.775 312.23c13.553 0 27.106 3.734 39.153 11.806l375.205 250.338 363.641-252.808c32.587-21.624 76.499-12.83 98.123 19.757 21.685 32.467 12.95 76.56-19.576 98.184l-402.854 278.89c-23.733 15.901-54.694 15.962-78.547.12L69.501 442.097c-32.647-21.685-41.441-65.777-19.817-98.304 13.734-20.54 36.201-31.563 59.09-31.563Z"}));el.displayName="SlideDownIcon";const Yl=(i,{emit:s})=>h("button",{type:"button",class:"vp-hero-slide-down-button",onClick:()=>s("click")},[h(el),h(el)]);Yl.displayName="HeroSlideDownButton";var ri=M({name:"DropTransition",props:{delay:{type:Number,default:0},duration:{type:Number,default:.25},group:Boolean,appear:Boolean},slots:Object,setup(i,{slots:s}){const a=e=>{e.style.transition=`transform ${i.duration}s ease-in-out ${i.delay}s, opacity ${i.duration}s ease-in-out ${i.delay}s`,e.style.transform="translateY(-20px)",e.style.opacity="0"},n=e=>{e.style.transform="translateY(0)",e.style.opacity="1"};return()=>{const e={name:"drop",appear:i.appear,onAppear:a,onAfterAppear:n,onEnter:a,onAfterEnter:n,onBeforeLeave:a};return i.group?h(pr,e,s.default):h(nn,e,s.default)}}});let wt=null,Bn=null;const tl={wait:()=>wt,pending:()=>{wt=new Promise(i=>{Bn=i})},resolve:()=>{Bn==null||Bn(),wt=null,Bn=null}};var f3=M({name:"MainFadeInUpTransition",slots:Object,setup(i,{slots:s}){const a=es();return()=>a.value?h(Pl,s.default):h(nn,{name:"fade-in-up",mode:"out-in",onBeforeEnter:tl.resolve,onBeforeLeave:tl.pending},s.default)}}),C3=M({name:"PageTitle",setup(){const{frontmatter:i,page:s,themeLocale:a}=Pi(),{info:n,items:e}=zu();return()=>h("div",{class:"vp-page-title"},[h("h1",[a.value.titleIcon===!1?null:h(xi("VPIcon"),{icon:i.value.icon}),s.value.title]),h(Od,{info:n.value,items:e.value}),h("hr")])}});const b3=(i,s)=>{const a=i.replace(s,"/").split("/"),n=[];let e=We(s);return a.forEach((t,l)=>{l!==a.length-1?(e+=`${t}/`,n.push({link:e,name:t||"Home"})):t!==""&&(e+=t,n.push({link:e,name:t}))}),n};var D3=M({name:"BreadCrumb",setup(){const{frontmatter:i,page:s,routeLocale:a,routePath:n,themeLocale:e}=Pi(),t=ni([]),l=b(()=>(i.value.breadcrumb??e.value.breadcrumb??!0)&&t.value.length>1),k=b(()=>i.value.breadcrumbIcon??e.value.breadcrumbIcon??!0),p=()=>{const d=b3(s.value.path,a.value).map(({link:r,name:c})=>{const{path:o,meta:A,notFound:v}=us(r);return v||A.breadcrumbExclude?null:{title:A.shortTitle||A.title||c,icon:A.icon,path:o}}).filter(r=>r!==null);d.length>1&&(t.value=d)};return vi(()=>{vs(n,p)}),()=>h("nav",{class:["vp-breadcrumb",{disable:!l.value}]},l.value?h("ol",{vocab:"https://schema.org/",typeof:"BreadcrumbList"},t.value.map((d,r)=>h("li",{class:{"is-active":t.value.length-1===r},property:"itemListElement",typeof:"ListItem"},[h(Vi,{to:d.path,property:"item",typeof:"WebPage"},()=>[k.value?h(xi("VPIcon"),{icon:d.icon}):null,h("span",{property:"name"},d.title||"Unknown")]),h("meta",{property:"position",content:r+1})]))):[])}});const Ik=(i,s)=>i===!1?i:Ds(i)?{...i,link:we(i.link,!0,s).link}:gi(i)?we(i,!0,s):null,ll=(i,s,a)=>{const n=i.findIndex(t=>t.link===s);if(n!==-1){if(!i[n+a])return null;const t=i[n+a];return t.link?t:"prefix"in t&&!us(t.prefix).notFound?{...t,link:t.prefix}:null}for(const t of i)if("children"in t){const l=ll(t.children,s,a);if(l)return l}const e=i.findIndex(t=>"prefix"in t&&t.prefix===s);if(e!==-1){if(!i[e+a])return null;const t=i[e+a];return t.link?t:"prefix"in t&&!us(t.prefix).notFound?{...t,link:t.prefix}:null}return null},_3=()=>{const{frontmatter:i,routePath:s,themeLocale:a}=Pi(),n=Gl(),e=b(()=>{const l=Ik(i.value.prev,s.value);return l===!1?null:l??(a.value.prevLink===!1?null:ll(n.value,s.value,-1))}),t=b(()=>{const l=Ik(i.value.next,s.value);return l===!1?null:l??(a.value.nextLink===!1?null:ll(n.value,s.value,1))});return{prevLink:e,nextLink:t}};var S3=M({name:"PageNav",setup(){const i=ms(),s=aa(),{prevLink:a,nextLink:n}=_3();return pi("keydown",e=>{e.altKey&&(e.key==="ArrowRight"?n.value&&(s(n.value.link),e.preventDefault()):e.key==="ArrowLeft"&&a.value&&(s(a.value.link),e.preventDefault()))}),()=>a.value||n.value?h("nav",{class:"vp-page-nav"},[a.value?h(Zi,{class:"prev",config:a.value},()=>{var e,t;return[h("div",{class:"hint"},[h("span",{class:"arrow start"}),i.value.prev]),h("div",{class:"link"},[h(xi("VPIcon"),{icon:(e=a.value)==null?void 0:e.icon}),(t=a.value)==null?void 0:t.text])]}):null,n.value?h(Zi,{class:"next",config:n.value},()=>{var e,t;return[h("div",{class:"hint"},[i.value.next,h("span",{class:"arrow end"})]),h("div",{class:"link"},[(e=n.value)==null?void 0:e.text,h(xi("VPIcon"),{icon:(t=n.value)==null?void 0:t.icon})])]}):null]):null}}),x3=M({name:"PrintButton",setup(){const i=ms(),s=Ia();return()=>s.value.print===!1?null:h("button",{type:"button",class:"print-button",title:i.value.print,onClick:()=>{window.print()}},h(wd))}});const Mk={selector:[...Array.from({length:6}).map((i,s)=>`#markdown-content > h${s+1}`),"[vp-content] > h2"].join(", "),levels:"deep",ignore:[".vp-badge",".vp-icon"]};var w3=M({name:"TOC",props:{items:Array},slots:Object,setup(i,{slots:s}){const{frontmatter:a,themeLocale:n}=Pi(),e=b(()=>{const E=a.value.toc??n.value.toc;return Ds(E)?{...Mk,...E}:E??!0?Mk:void 0}),t=$8(e),l=js(),k=ms(),[p,d]=ln(),r=ni(),c=li("-2rem"),o=E=>{var f;(f=r.value)==null||f.scrollTo({top:E,behavior:"smooth"})},A=()=>{if(r.value){const E=document.querySelector(".vp-toc-item.active");E?c.value=`${E.getBoundingClientRect().top-r.value.getBoundingClientRect().top+r.value.scrollTop}px`:c.value="-2rem"}else c.value="-2rem"};vi(()=>{vs(()=>l.hash,E=>{if(r.value){const f=document.querySelector(`#toc a.vp-toc-link[href$="${E}"]`);if(!f)return;const{top:F,height:B}=r.value.getBoundingClientRect(),{top:C,height:w}=f.getBoundingClientRect();C<F?o(r.value.scrollTop+C-F):C+w>F+B&&o(r.value.scrollTop+C+w-F-B)}},{flush:"post"}),vs(()=>l.fullPath,A,{flush:"post"})});const v=({title:E,level:f,slug:F})=>h(Vi,{to:`#${F}`,class:["vp-toc-link",`level${f}`],onClick:()=>{d()}},()=>E),u=E=>E.length?h("ul",{class:"vp-toc-list"},E.map(f=>{const F=u(f.children);return[h("li",{class:["vp-toc-item",{active:l.hash===`#${f.slug}`}]},v(f)),F?h("li",F):null]})):null;return()=>{var E;return e.value||(E=i.items)!=null&&E.length?h(Rl,()=>{var w,$,I,j;const f=(w=i.items)!=null&&w.length?u(i.items):u(t.value),F=(($=s.toc)==null?void 0:$.call(s,t.value))??(f?[h("div",{class:"vp-toc-header",onClick:()=>{d()}},[k.value.toc,h(x3),h("div",{class:["arrow",p.value?"down":"end"]})]),h("div",{class:["vp-toc-wrapper",p.value?"open":""],ref:r},[f,h("div",{class:"vp-toc-marker",style:{top:c.value}})])]:null),B=(I=s.tocBefore)==null?void 0:I.call(s),C=(j=s.tocAfter)==null?void 0:j.call(s);return Qa(F)&&Qa(B)&&Qa(C)?null:h("div",{class:"vp-toc-placeholder"},[h("aside",{id:"toc","vp-toc":""},[B,F,C])])}):null}}});const Zd=()=>h(mi,{name:"edit"},()=>[h("path",{d:"M430.818 653.65a60.46 60.46 0 0 1-50.96-93.281l71.69-114.012 7.773-10.365L816.038 80.138A60.46 60.46 0 0 1 859.225 62a60.46 60.46 0 0 1 43.186 18.138l43.186 43.186a60.46 60.46 0 0 1 0 86.373L588.879 565.55l-8.637 8.637-117.466 68.234a60.46 60.46 0 0 1-31.958 11.229z"}),h("path",{d:"M728.802 962H252.891A190.883 190.883 0 0 1 62.008 771.98V296.934a190.883 190.883 0 0 1 190.883-192.61h267.754a60.46 60.46 0 0 1 0 120.92H252.891a69.962 69.962 0 0 0-69.098 69.099V771.98a69.962 69.962 0 0 0 69.098 69.098h475.911A69.962 69.962 0 0 0 797.9 771.98V503.363a60.46 60.46 0 1 1 120.922 0V771.98A190.883 190.883 0 0 1 728.802 962z"})]);Zd.displayName="EditIcon";const T3={GitHub:":repo/edit/:branch/:path",GitLab:":repo/-/edit/:branch/:path",Gitee:":repo/edit/:branch/:path",Bitbucket:":repo/src/:branch/:path?mode=edit&spa=0&at=:branch&fileviewer=file-view-default"},R3=({docsRepo:i,docsBranch:s,docsDir:a,filePathRelative:n,editLinkPattern:e})=>{if(!n)return null;const t=zl(i);let l;return e?l=e:t!==null&&(l=T3[t]),l?l.replace(/:repo/u,Ta(i)?i:`https://github.com/${i}`).replace(/:branch/u,s).replace(/:path/u,cr(`${We(a)}/${n}`)):null},L3=()=>{const{frontmatter:i,page:s,themeLocale:a}=Pi(),n=ms();return b(()=>{const{repo:e,docsRepo:t=e,docsBranch:l="main",docsDir:k="",editLink:p,editLinkPattern:d=""}=a.value;if(!(i.value.editLink??p??!0)||!t)return null;const r=R3({docsRepo:t,docsBranch:l,docsDir:k,editLinkPattern:d,filePathRelative:s.value.filePathRelative});return r?{text:n.value.editLink,link:r}:null})};var O3=M({name:"PageMeta",setup(){const i=Yd(),s=qr(),a=L3(),n=U8(i.lastUpdated),e=ms();return()=>h("footer",{class:"vp-page-meta"},[a.value?h("div",{class:"vp-meta-item edit-link"},h(Zi,{class:"vp-meta-label",config:a.value},{before:()=>h(Zd)})):null,h("div",{class:"vp-meta-item git-info"},[(!i.changelog.value||!cs("GitChangelog"))&&n.value?h("div",{class:"update-time"},[h("span",{class:"vp-meta-label"},n.value.locale),h("time",{class:"vp-meta-info",datetime:n.value.iso,"data-allow-mismatch":""},n.value.text)]):null,i.contributors.value&&i.contributors.value!=="content"&&s.value.length?h("div",{class:"contributors"},[h("span",{class:"vp-meta-label"},`${e.value.contributors}: `),s.value.map(({email:t,name:l},k,p)=>[h("span",{class:"vp-meta-info",title:`email: ${t}`},l),k!==p.length-1?",":""])]):null])])}}),P3=M({name:"PageContent",slots:Object,setup(i,{slots:s}){const{frontmatter:a}=Pi(),{isDarkMode:n}=Kn();return()=>h("main",{id:"main-content",class:"vp-page"},h(cs("LocalEncrypt")?xi("LocalEncrypt"):Pl,()=>{var e,t,l;return[(e=s.pageTop)==null?void 0:e.call(s),a.value.cover?h("div",{class:"page-cover"},h("img",{src:Ci(a.value.cover),alt:"","no-view":""})):null,h(D3),h(C3),h(w3,null,s),((t=s.content)==null?void 0:t.call(s))??h(Ze,null,s),h(O3),h(S3),cs("CommentService")?h(xi("CommentService"),{darkmode:n.value}):null,(l=s.pageBottom)==null?void 0:l.call(s)]}))}});const hl=(i,{slots:s})=>{var c,o;const{bgImage:a,bgImageDark:n,bgImageStyle:e,color:t,description:l,image:k,imageDark:p,header:d,features:r=[]}=i;return h("div",{class:"vp-feature-wrapper"},[a?h("div",{class:["vp-feature-bg",{light:n}],style:[{"background-image":`url(${a})`},e]}):null,n?h("div",{class:"vp-feature-bg dark",style:[{"background-image":`url(${n})`},e]}):null,h("div",{class:"vp-feature",style:t?{color:t}:{}},[((c=s.image)==null?void 0:c.call(s,i))??[k?h("img",{class:["vp-feature-image",{light:p}],src:Ci(k),alt:""}):null,p?h("img",{class:"vp-feature-image dark",src:Ci(p),alt:""}):null],((o=s.info)==null?void 0:o.call(s,i))??[d?h("h2",{class:"vp-feature-header"},d):null,l?h("div",{class:"vp-feature-description",innerHTML:l}):null],r.length?h("div",{class:"vp-features"},r.map(({icon:A,title:v,details:u,link:E})=>{const f=[h("h3",{class:"vp-feature-title"},[h(xi("VPIcon"),{icon:A}),h("span",{innerHTML:v})]),h("div",{class:"vp-feature-details",innerHTML:u})];return E?Sl(E)?h("a",{class:"vp-feature-item link",href:E,"aria-label":v,target:"_blank"},f):h(Vi,{class:"vp-feature-item link",to:E,"aria-label":v},()=>f):h("div",{class:"vp-feature-item"},f)})):null])])};hl.displayName="FeaturePanel";var I3=M({name:"HeroInfo",slots:Object,setup(i,{slots:s}){const{frontmatter:a,siteLocale:n}=Pi(),e=b(()=>{const{heroText:p,tagline:d,heroStyle:r,heroFullScreen:c=!1}=a.value;return{text:p??(n.value.title||"Hello"),tagline:d??n.value.description,style:r??null,isFullScreen:c}}),t=b(()=>{const{heroImage:p,heroImageDark:d,heroAlt:r,heroImageStyle:c}=a.value;return{image:p?Ci(p):null,imageDark:d?Ci(d):null,style:c??null,alt:r??""}}),l=b(()=>{const{bgImage:p,bgImageDark:d,bgImageStyle:r}=a.value;return{image:gi(p)?Ci(p):null,imageDark:gi(d)?Ci(d):null,style:r??null}}),k=b(()=>a.value.actions??[]);return()=>{var p,d,r;return h("header",{class:["vp-hero-info-wrapper",{"hero-fullscreen":e.value.isFullScreen}],style:e.value.style},[((p=s.heroBg)==null?void 0:p.call(s,l.value))??[l.value.image?h("div",{class:["vp-hero-mask",{light:l.value.imageDark}],style:[{"background-image":`url(${l.value.image})`},l.value.style]}):null,l.value.imageDark?h("div",{class:"vp-hero-mask dark",style:[{"background-image":`url(${l.value.imageDark})`},l.value.style]}):null],h("div",{class:"vp-hero-info"},[((d=s.heroLogo)==null?void 0:d.call(s,t.value))??h(ri,{appear:!0,group:!0},()=>{const{image:c,imageDark:o,style:A,alt:v}=t.value;return[c?h("img",{key:"light",class:["vp-hero-image",{light:o}],style:A,src:c,alt:v}):null,o?h("img",{key:"dark",class:"vp-hero-image dark",style:A,src:o,alt:v}):null]}),((r=s.heroInfo)==null?void 0:r.call(s,e.value))??h("div",{class:"vp-hero-infos"},[e.value.text?h(ri,{appear:!0,delay:.04},()=>h("h1",{id:"main-title",class:"vp-hero-title"},e.value.text)):null,e.value.tagline?h(ri,{appear:!0,delay:.08},()=>h("div",{id:"main-description",innerHTML:e.value.tagline})):null,k.value.length?h(ri,{appear:!0,delay:.12},()=>h("p",{class:"vp-hero-actions"},k.value.map(c=>h(Zi,{class:["vp-hero-action",c.type??"default","no-external-link-icon"],config:c})))):null])]),e.value.isFullScreen?h(Yl,{onClick:()=>{var c;return window.scrollTo({top:window.innerHeight-(((c=document.querySelector("[vp-navbar]"))==null?void 0:c.clientHeight)??0),behavior:"smooth"})}}):null])}}});const ic=(i,{slots:s})=>{var o,A,v;const{bgImage:a,bgImageDark:n,bgImageStyle:e,color:t,description:l,image:k,imageDark:p,header:d,highlights:r=[],type:c="un-order"}=i;return h("div",{class:"vp-highlight-wrapper",style:t?{color:t}:{}},[a?h("div",{class:["vp-highlight-bg",{light:n}],style:[{"background-image":`url(${a})`},e]}):null,n?h("div",{class:"vp-highlight-bg dark",style:[{"background-image":`url(${n})`},e]}):null,h("div",{class:"vp-highlight"},[((o=s.image)==null?void 0:o.call(s,i))??[k?h("img",{class:["vp-highlight-image",{light:p}],src:Ci(k),alt:""}):null,p?h("img",{class:"vp-highlight-image dark",src:Ci(p),alt:""}):null],((A=s.info)==null?void 0:A.call(s,i))??[h("div",{class:"vp-highlight-info-wrapper"},h("div",{class:"vp-highlight-info"},[d?h("h2",{class:"vp-highlight-header",innerHTML:d}):null,l?h("div",{class:"vp-highlight-description",innerHTML:l}):null,((v=s.highlights)==null?void 0:v.call(s,r))??h(c==="order"?"ol":c==="no-order"?"dl":"ul",{class:"vp-highlights"},r.map(({icon:u,title:E,details:f,link:F})=>{const B=[h(c==="no-order"?"dt":"h3",{class:"vp-highlight-title"},[u?h(xi("VPIcon"),{class:"vp-highlight-icon",icon:u}):null,h("span",{innerHTML:E})]),f?h(c==="no-order"?"dd":"div",{class:"vp-highlight-details",innerHTML:f}):null];return h(c==="no-order"?"div":"li",{class:["vp-highlight-item-wrapper",{link:F}]},F?Sl(F)?h("a",{class:"vp-highlight-item link",href:F,"aria-label":E,target:"_blank"},B):h(Vi,{class:"vp-highlight-item link",to:F,"aria-label":E},()=>B):h("div",{class:"vp-highlight-item"},B))}))]))]])])};ic.displayName="HighlightSection";var M3=M({name:"HomePage",slots:Object,setup(i,{slots:s}){const a=ns();return()=>{var t,l,k;const{features:n,highlights:e}=a.value;return h("main",{id:"main-content",class:"vp-page vp-project-home","aria-labelledby":a.value.heroText===""?"":"main-title"},[(t=s.heroBefore)==null?void 0:t.call(s),h(I3,null,s),(l=s.heroAfter)==null?void 0:l.call(s),Ms(e)?e.map(p=>"features"in p?h(hl,p):h(ic,p)):Ms(n)?h(ri,{appear:!0,delay:.24},()=>h(hl,{features:n})):null,((k=s.content)==null?void 0:k.call(s))??h(ri,{appear:!0,delay:.32},()=>h(Ze,null,s))])}}}),V3=M({name:"PortfolioHero",slots:Object,setup(i,{slots:s}){const a=Fd(),n=ns(),e=li(0),t=b(()=>{var o;return((o=n.value.titles)==null?void 0:o[e.value])??""}),l=li(""),k=b(()=>{const{name:o,avatar:A,avatarDark:v,avatarAlt:u,avatarStyle:E}=n.value;return{name:o??a.value.name,avatar:A?Ci(A):null,avatarDark:v?Ci(v):null,alt:(u||o)??"",style:E??null}}),p=b(()=>{const{bgImage:o,bgImageDark:A,bgImageStyle:v}=n.value;return{image:gi(o)?Ci(o):null,imageDark:gi(A)?Ci(A):null,style:v??null}}),d=b(()=>{const{welcome:o,name:A,titles:v=[],medias:u}=n.value;return{name:A??a.value.name,welcome:o??"👋 Hi There, I'm",title:l.value,titles:v,medias:u??null}}),r=()=>{l.value="";let o=0,A=!1;const v=async()=>{if(!A)if(l.value+=t.value[o],o+=1,await Aa(),o<t.value.length)setTimeout(()=>{v()},150);else{const u=d.value.titles.length;setTimeout(()=>{e.value=u<=1||e.value===d.value.titles.length-1?0:e.value+1},1e3)}};return v(),()=>{A=!0}};let c;return vi(()=>{vs(t,()=>{c==null||c(),c=r()})}),()=>{var o,A,v;return h("section",{id:"portfolio",class:["vp-portfolio",{bg:p.value.image}]},[((o=s.portfolioBg)==null?void 0:o.call(s,p.value))??[p.value.image?h("div",{class:["vp-portfolio-mask",{light:p.value.imageDark}],style:[{background:`url(${p.value.image}) center/cover no-repeat`},p.value.style]}):null,p.value.imageDark?h("div",{class:"vp-portfolio-mask dark",style:[{background:`url(${p.value.imageDark}) center/cover no-repeat`},p.value.style]}):null],((A=s.portfolioAvatar)==null?void 0:A.call(s,k.value))??h("div",{class:"vp-portfolio-avatar"},[h(ri,{delay:.04},()=>{const{avatar:u,avatarDark:E,name:f,alt:F,style:B}=k.value;return[u?h("img",{key:"light",class:{light:E},src:u,title:f,alt:F,style:B}):null,E?h("img",{key:"dark",class:"dark",src:E,title:f,alt:F,style:B}):null]})]),h("div",{class:"vp-portfolio-container"},((v=s.portfolioInfo)==null?void 0:v.call(s,d.value))??h("div",{class:"vp-portfolio-info"},[h(ri,{appear:!0,delay:.08},()=>h("h6",{class:"vp-portfolio-welcome"},d.value.welcome)),h(ri,{appear:!0,delay:.12},()=>h("h1",{class:"vp-portfolio-name",id:"main-title"},d.value.name)),h(ri,{appear:!0,delay:.16},()=>h("h2",{class:"vp-portfolio-title"},l.value)),h(ri,{appear:!0,delay:.2},()=>d.value.medias?h("div",{class:"vp-portfolio-medias"},d.value.medias.map(({name:u,url:E,icon:f})=>h("a",{class:"vp-portfolio-media",href:E,rel:"noopener noreferrer",target:"_blank",title:u},h(xi("VPIcon"),{icon:f,sizing:"both"})))):cs("SocialMedias")?h(xi("SocialMedias")):null)]))])}}}),j3=M({name:"PortfolioHome",slots:Object,setup(i,{slots:s}){const a=ns();return()=>{var e;const n=a.value.content??"portfolio";return h("main",{id:"main-content",class:"vp-page vp-portfolio-home","aria-labelledby":"main-title"},[h(V3,null,s),n==="none"?null:((e=s.content)==null?void 0:e.call(s))??h("div",h(ri,{appear:!0,delay:.24},()=>h(Ze,{class:{"vp-portfolio-content":n==="portfolio"}},s)))])}}}),N3=M({name:"Layout",slots:Object,setup(i,{slots:s}){const{frontmatter:a,page:n}=Pi();return()=>[h(Ql),h(Xl,null,{...s,default:s.default??(()=>a.value.portfolio?h(j3,null,s):a.value.home?h(M3,null,s):h(f3,()=>h(P3,{key:n.value.path},s))),navScreenBottom:s.navScreenBottom??(cs("BloggerInfo")?()=>h(xi("BloggerInfo")):null)})]}}),$3=M({name:"NotFound",slots:Object,setup(i,{slots:s}){const{routeLocale:a,theme:n,themeLocale:e}=Pi(),t=ga(),l=li(!1),k=b(()=>n.value.locales[l.value?a.value:"/"].routerLocales),p=()=>{if(!l.value)return k.value.notFoundMsg[0];const d=k.value.notFoundMsg;return d[Math.floor(Math.random()*d.length)]};return vi(()=>{l.value=!0}),()=>[h(Ql),h(Xl,{noSidebar:!0},{...s,default:()=>{var d;return h("main",{id:"main-content",class:"vp-page not-found"},((d=s.default)==null?void 0:d.call(s))??[h("div",{class:"not-found-hint"},[h("p",{class:"error-code"},"404"),h("h1",{class:"error-title"},k.value.notFoundTitle),h("p",{class:"error-hint"},p())]),h("div",{class:"actions"},[h("button",{type:"button",class:"action-button",onClick:()=>{window.history.go(-1)}},k.value.back),h("button",{type:"button",class:"action-button",onClick:()=>{t.push(e.value.home??a.value)}},k.value.home)])])}})]}});const sc=()=>h(mi,{name:"lock"},()=>h("path",{d:"M787.168 952.268H236.832c-30.395 0-55.033-24.638-55.033-55.033V429.45c0-30.395 24.638-55.034 55.033-55.034h82.55V264.35c0-106.38 86.238-192.618 192.618-192.618S704.618 157.97 704.618 264.35v110.066h82.55c30.395 0 55.033 24.639 55.033 55.034v467.785c0 30.395-24.639 55.033-55.033 55.033zM484.483 672.046v115.122h55.034V672.046c31.99-11.373 55.033-41.605 55.033-77.496 0-45.592-36.958-82.55-82.55-82.55s-82.55 36.958-82.55 82.55c0 35.89 23.042 66.123 55.033 77.496zM622.067 264.35c0-60.788-49.28-110.067-110.067-110.067s-110.067 49.28-110.067 110.067v110.066h220.135V264.35z"}));sc.displayName="LockIcon";const H3=JSON.parse('{"category":{"/":{"path":"/category/","map":{"动效":{"path":"/category/%E5%8A%A8%E6%95%88/","indexes":[0]},"CSS基础":{"path":"/category/css%E5%9F%BA%E7%A1%80/","indexes":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]},"CSS布局":{"path":"/category/css%E5%B8%83%E5%B1%80/","indexes":[16,17,18,19,20,21,22,23]},"Canvas":{"path":"/category/canvas/","indexes":[24,25,26,27,28,29,30,31,32,33]},"SVG":{"path":"/category/svg/","indexes":[34,35,36,37]},"JavaScript":{"path":"/category/javascript/","indexes":[38]}}}},"tag":{"/":{"path":"/tag/","map":{"动画":{"path":"/tag/%E5%8A%A8%E7%94%BB/","indexes":[0,36,26,37]},"CSS":{"path":"/tag/css/","indexes":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]},"Flex":{"path":"/tag/flex/","indexes":[16]},"Grid":{"path":"/tag/grid/","indexes":[17]},"Canvas":{"path":"/tag/canvas/","indexes":[24,25,26,27,28,29,30,31,32,33]},"SVG":{"path":"/tag/svg/","indexes":[34,35,36,37]},"SMIL":{"path":"/tag/smil/","indexes":[35]},"网页截屏":{"path":"/tag/%E7%BD%91%E9%A1%B5%E6%88%AA%E5%B1%8F/","indexes":[38]}}}}}'),ac=JSON.parse('["/%E5%89%8D%E7%AB%AF/%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/H5%E7%9B%B4%E6%92%AD%E7%82%B9%E8%B5%9E%E5%8A%A8%E7%94%BB.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/CSS%E5%8A%A8%E7%94%BB.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/position.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/stacking.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/%E5%85%83%E7%B4%A0%E7%9A%84%E6%98%BE%E9%9A%90.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/%E7%9B%92%E6%A8%A1%E5%9E%8B.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/line-height-and-vertical-align.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/%E6%B5%81%E4%B8%8E%E5%85%83%E7%B4%A0.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/css-shapes.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/scroll-bar.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E6%9D%83%E9%87%8D.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/background.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/font.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/text.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/BFC.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/float.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/Flex%E5%B8%83%E5%B1%80.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/Grid%E5%B8%83%E5%B1%80.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/%E5%85%A8%E5%B1%8F%E5%B8%83%E5%B1%80.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/%E5%A4%9A%E5%88%97%E5%B8%83%E5%B1%80.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/%E6%A0%85%E6%A0%BC%E5%B8%83%E5%B1%80.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/StickyFooter.html","/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E4%BC%98%E5%8C%96.html","/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E5%83%8F%E7%B4%A0%E6%93%8D%E4%BD%9C.html","/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E5%9F%BA%E6%9C%AC%E5%8A%A8%E7%94%BB.html","/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E5%90%88%E6%88%90%E4%B8%8E%E8%A3%81%E5%89%AA.html","/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E5%8F%98%E5%BD%A2.html","/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%83%8F.html","/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E7%BB%98%E5%88%B6%E6%96%87%E6%9C%AC.html","/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E6%B7%BB%E5%8A%A0%E6%A0%B7%E5%BC%8F.html","/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E7%BB%98%E5%88%B6%E5%BD%A2%E7%8A%B6.html","/%E5%89%8D%E7%AB%AF/JavaScript/Canvas/canvas%E5%9F%BA%E7%A1%80.html","/%E5%89%8D%E7%AB%AF/JavaScript/SVG/%E5%9F%BA%E4%BA%8Eanime.js%E7%9A%84svg%E5%8A%A8%E7%94%BB.html","/%E5%89%8D%E7%AB%AF/JavaScript/SVG/svgSMIL%E5%8A%A8%E7%94%BB.html","/%E5%89%8D%E7%AB%AF/JavaScript/SVG/svg%E5%8A%A8%E7%94%BB.html","/%E5%89%8D%E7%AB%AF/JavaScript/SVG/svg%E5%9F%BA%E7%A1%80.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/%E7%BD%91%E9%A1%B5%E6%88%AA%E5%B1%8F.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue3/%E5%93%8D%E5%BA%94%E5%BC%8FAPI.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E4%B8%8E%E5%AE%B9%E5%99%A8%E6%9F%A5%E8%AF%A2.html","/%E5%89%8D%E7%AB%AF/Node/Nestjs/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/%E8%84%9A%E6%89%8B%E6%9E%B6.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/SOLID.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/JSON.html","/%E5%89%8D%E7%AB%AF/JavaScript/DOM/WebComponents.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/API.html","/%E5%89%8D%E7%AB%AF/JavaScript/DOM/event.html","/%E5%89%8D%E7%AB%AF/JavaScript/DOM/MutationObserver.html","/%E5%89%8D%E7%AB%AF/JavaScript/DOM/css.html","/%E5%89%8D%E7%AB%AF/JavaScript/DOM/element.html","/%E5%89%8D%E7%AB%AF/JavaScript/DOM/other.html","/%E5%89%8D%E7%AB%AF/JavaScript/DOM/document.html","/%E5%89%8D%E7%AB%AF/JavaScript/DOM/node.html","/%E5%89%8D%E7%AB%AF/JavaScript/BOM/file.html","/%E5%89%8D%E7%AB%AF/JavaScript/BOM/storage.html","/%E5%89%8D%E7%AB%AF/JavaScript/BOM/URL.html","/%E5%89%8D%E7%AB%AF/JavaScript/BOM/navigator.html","/%E5%89%8D%E7%AB%AF/JavaScript/BOM/window.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Math%E5%92%8CDate.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/RegExp.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/ArrayBuffer.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Set%E5%92%8CMap.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/EventLoop.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Generator.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Promise.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/async.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%87%BD%E6%95%B0.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Reflect.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Class.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%AF%B9%E8%B1%A1.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%B1%BB%E5%9E%8B%E6%A6%82%E8%BF%B0.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/useSyncExternalStore.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/Transition.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%AE%9A%E4%B9%89Hooks.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%8E%9F%E7%90%86/Context.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E7%94%9F%E6%80%81/react-redux.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E7%94%9F%E6%80%81/react-router.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%8E%9F%E7%90%86/Hooks.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%8E%9F%E7%90%86/React%E4%BD%8D%E8%BF%90%E7%AE%97.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%8E%9F%E7%90%86/Scheduler.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%8E%9F%E7%90%86/Reconciler.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%8E%9F%E7%90%86/Fiber.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%8E%9F%E7%90%86/%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E4%BC%98%E5%8C%96/%E5%85%B6%E4%BB%96%E4%BC%98%E5%8C%96.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E4%BC%98%E5%8C%96/%E5%A4%84%E7%90%86%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E4%BC%98%E5%8C%96/%E6%B8%B2%E6%9F%93%E8%B0%83%E4%BC%98.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E4%BC%98%E5%8C%96/%E6%B8%B2%E6%9F%93%E6%8E%A7%E5%88%B6.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/%E6%A8%A1%E5%9D%97%E5%8C%96CSS.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/Context.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/Ref.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/LifeCycle.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/Props.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/State.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/React%E7%BB%84%E4%BB%B6.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/JSX.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E5%9F%BA%E7%A1%80/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/vue-vuex.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/vue-router.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E7%BC%96%E8%AF%91.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E7%9B%B8%E5%85%B3%E6%89%A9%E5%B1%95/event.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E7%9B%B8%E5%85%B3%E6%89%A9%E5%B1%95/keep-alive.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E7%9B%B8%E5%85%B3%E6%89%A9%E5%B1%95/slot.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E7%9B%B8%E5%85%B3%E6%89%A9%E5%B1%95/transition.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E7%9B%B8%E5%85%B3%E6%89%A9%E5%B1%95/v-model.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E5%93%8D%E5%BA%94%E5%BC%8F.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E7%BB%84%E4%BB%B6%E5%8C%96.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8.html","/%E4%B9%A6%E7%AD%BE.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue3/Vue3CompositionAPI.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%AE%9E%E6%88%98/%E7%BC%96%E5%86%99loader.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%AE%9E%E6%88%98/%E7%BC%96%E5%86%99plugin.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%8E%9F%E7%90%86/Webpack%E5%8E%9F%E7%90%86.html","/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0.html","/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/EMP.html","/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/Garfish.html","/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/MicroApp.html","/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/qiankun.html","/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/single-spa.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Q_A.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E4%BC%98%E5%8C%96/Webpack%E4%BC%98%E5%8C%96.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/devServer.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/%E5%A4%9A%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/plugins.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/loaders.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/babel.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/JS%E6%A8%A1%E5%9D%97%E5%8C%96.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/CSS%E6%A8%A1%E5%9D%97%E5%8C%96.html","/%E5%89%8D%E7%AB%AF/TypeScript/TypeScriptTips.html","/%E5%89%8D%E7%AB%AF/TypeScript/TypeScript%E5%85%B6%E4%BB%96%E7%B1%BB%E5%9E%8B.html","/%E5%89%8D%E7%AB%AF/TypeScript/TypeScript%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B.html","/%E5%89%8D%E7%AB%AF/TypeScript/TypeScript%E5%AE%9E%E7%8E%B0Promise.html","/%E5%89%8D%E7%AB%AF/TypeScript/TypeScript%E5%AE%9E%E7%8E%B0Vuex.html","/%E5%89%8D%E7%AB%AF/TypeScript/TypeScript%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html","/%E5%89%8D%E7%AB%AF/TypeScript/TypeScript%E8%A3%85%E9%A5%B0%E5%99%A8.html","/%E5%89%8D%E7%AB%AF/TypeScript/demo.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/uni-app/","/%E6%9E%B6%E6%9E%84/%E5%9F%BA%E7%A1%80/","/%E5%85%B6%E4%BB%96/%E5%B7%A5%E5%85%B7/whistle.html","/%E5%85%B6%E4%BB%96/%E5%8A%A0%E5%AF%86/","/%E5%85%B6%E4%BB%96/%E5%8A%A0%E5%AF%86/%E5%8A%A0%E5%AF%86.html","/intro.html","/%E6%95%B0%E6%8D%AE%E5%BA%93/","/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E8%AF%AD%E8%A8%80/","/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E8%AF%AD%E8%A8%80/SQL%E5%9F%BA%E7%A1%80.html","/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/BEM.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83.html","/%E5%85%B6%E4%BB%96/Git/git_head.html","/%E5%85%B6%E4%BB%96/Git/git%E5%91%BD%E4%BB%A4.html","/%E5%85%B6%E4%BB%96/Git/git%E5%9F%BA%E7%A1%80.html","/%E5%85%B6%E4%BB%96/Git/git%E5%AF%B9%E8%B1%A1.html","/%E5%85%B6%E4%BB%96/Git/git%E5%BF%BD%E7%95%A5%E6%8F%90%E4%BA%A4.html","/%E5%85%B6%E4%BB%96/Git/git%E6%8A%80%E5%B7%A7.html","/%E5%85%B6%E4%BB%96/Git/git%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98.html","/%E5%89%8D%E7%AB%AF/CSS/","/%E5%89%8D%E7%AB%AF/H5/","/%E5%89%8D%E7%AB%AF/CSS/CSS%E7%9B%B8%E5%85%B3/CSS%E5%AE%9E%E7%8E%B0%E9%95%BF%E5%AE%BD%E6%AF%94.html","/%E5%85%B6%E4%BB%96/%E5%B7%A5%E5%85%B7/VSCode%E6%8F%92%E4%BB%B6.html","/%E5%89%8D%E7%AB%AF/H5/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B8%83%E5%B1%80/%E9%A1%B5%E9%9D%A2%E7%AD%89%E6%AF%94%E9%80%82%E9%85%8D.html","/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5/04.%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%AF%B9%E8%B1%A1.html","/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5/03.%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html","/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5/01.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E9%80%9A%E8%AF%86.html","/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5/02.JavaScript%E8%AF%8D%E6%B3%95%E5%92%8C%E7%B1%BB%E5%9E%8B.html","/%E5%85%B6%E4%BB%96/Git/","/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/","/%E5%85%B6%E4%BB%96/%E5%B7%A5%E5%85%B7/","/%E5%89%8D%E7%AB%AF/JavaScript/","/%E5%89%8D%E7%AB%AF/Node/","/%E5%89%8D%E7%AB%AF/TypeScript/","/%E5%89%8D%E7%AB%AF/%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Electron/","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/","/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Linux/","/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Nginx/","/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E5%89%8D%E7%AB%AF/","/%E7%A7%BB%E5%8A%A8%E7%AB%AF/Flutter/","/%E7%A7%BB%E5%8A%A8%E7%AB%AF/ReactNative/","/%E5%89%8D%E7%AB%AF/JavaScript/%E7%AE%97%E6%B3%95/","/%E5%89%8D%E7%AB%AF/H5/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html","/%E6%95%B0%E6%8D%AE%E5%BA%93/MongoDB/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html","/%E5%89%8D%E7%AB%AF/TypeScript/TypeScript%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6.html","/%E5%89%8D%E7%AB%AF/TypeScript/tsconfig%E9%85%8D%E7%BD%AE.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2/Vue2%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2/VueRouter.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2/Vuex.html","/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Linux/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%95%B0%E7%BB%84.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81.html","/%E5%89%8D%E7%AB%AF/H5/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D.html","/%E5%89%8D%E7%AB%AF/Node/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2/Vue2%E5%9F%BA%E7%A1%80.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2/Vue2%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%BC%82%E6%AD%A5.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%97%AD%E5%8C%85.html","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E7%BB%A7%E6%89%BF.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2/Vue2%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0.html","/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue2/Vue2%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F.html","/%E7%AE%80%E4%BB%8B/","/%E5%89%8D%E7%AB%AF/JavaScript/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0.html","/%E7%A7%BB%E5%8A%A8%E7%AB%AF/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91.html","/%E5%89%8D%E7%AB%AF/CSS/CSS%E7%9B%B8%E5%85%B3/CSS%E5%B8%B8%E7%94%A8%E5%B0%81%E8%A3%85.html"]'),W3=JSON.parse('{"article":{"/":{"path":"/article/","indexes":[39,40,41,1,2,3,4,5,6,7,8,9,10,11,12,13,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,38,0,34,35,36,24,25,26,27,28,29,30,31,32,33,37,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,14,15,163,164,165,166,16,17,18,19,20,21,22,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,23,198,199,200,201,202,203,204,205,206,207,208,209,210]}},"star":{"/":{"path":"/star/","indexes":[]}},"timeline":{"/":{"path":"/timeline/","indexes":[39,40,41,1,2,3,4,5,6,7,8,9,10,11,12,13,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,38,0,34,35,36,24,25,26,27,28,29,30,31,32,33,37,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,14,15,163,164,165,166,16,17,18,19,20,21,22,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,23,198,199,200,201,202,203,204,205,206,207,208,209,210]}}}'),kl=ni(H3);wa(kl);const nc=i=>{const{frontmatter:s,page:a,routeLocale:n}=Ba();return b(()=>{var k;const e=i??((k=s.value.blog)==null?void 0:k.key)??"";if(!e)return console.warn("useBlogCategory: key not found"),{path:"/",map:{}};if(!(e in kl.value))throw new Error(`useBlogCategory: key ${e} is invalid`);const t=kl.value[e][n.value],l={path:t.path,map:{}};for(const p in t.map){const d=t.map[p];l.map[p]={path:d.path,items:[]};for(const r of d.indexes){const{path:c,meta:o}=us(ac[r]);l.map[p].items.push({path:c,info:o})}a.value.path===d.path&&(l.currentItems=l.map[p].items)}return l})},pl=ni(W3);wa(pl);const it=i=>{const{frontmatter:s,routeLocale:a}=Ba();return b(()=>{var l;const n=i??((l=s.value.blog)==null?void 0:l.key)??"";if(!n)return console.warn("useBlogType: key not found"),{path:"/",items:[]};if(!(n in pl.value))throw new Error(`useBlogType: key ${i} is invalid`);const e=pl.value[n][a.value],t={path:e.path,items:[]};for(const k of e.indexes){const{path:p,meta:d}=us(ac[k]);t.items.push({path:p,info:d})}return t})},U3={};var z3=[];const Xn=()=>{const{theme:i,themeLocale:s}=Pi();return b(()=>({...i.value.blog,...s.value.blog}))};var ec=M({name:"SocialMedias",setup(){const i=Xn(),s=es(),a=b(()=>Oa(i.value.medias??{}).map(([n,e])=>typeof e=="string"?{name:n,icon:U3[n],link:e}:{name:n,...e}));return()=>a.value.length?h("div",{class:"vp-social-medias"},a.value.map(({name:n,icon:e,link:t})=>h("a",{class:"vp-social-media",href:t,rel:"noopener noreferrer",target:"_blank","aria-label":n||"",...s.value?{}:{"data-balloon-pos":"up"},innerHTML:Ta(e)?`<img class="vp-social-media-icon ${n}-icon" src="${e}">`:e}))):null}});const tc=Symbol(""),Qn=()=>{const i=bi(tc);if(!i)throw new Error("useArticles() is called without provider.");return i},J3=()=>{const i=it("article");bs(tc,i)},na=()=>{const i=ws();return b(()=>i.value.blogLocales)},lc=Symbol.for("categoryMap"),Yn=()=>{const i=bi(lc);if(!i)throw new Error("useCategoryMap() is called without provider.");return i},G3=()=>{const i=nc("category");bs(lc,i)},hc=Symbol.for("tagMap"),Zn=()=>{const i=bi(hc);if(!i)throw new Error("useTagMap() is called without provider.");return i},q3=()=>{const i=nc("tag");bs(hc,i)},kc=Symbol(""),Zl=()=>{const i=bi(kc);if(!i)throw new Error("useTimeline() is called without provider.");return i},K3=()=>{const i=it("timeline"),s=_r(),a=b(()=>{const n=[];return i.value.items.forEach(({info:e,path:t})=>{const l=$l(e.date);if(l){const k=l.getFullYear();(!n[0]||n[0].year!==k)&&n.unshift({year:k,items:[]}),n[0].items.push({date:l.toLocaleDateString(s.value,{month:"numeric",day:"numeric"}),info:e,path:t})}}),{...i.value,config:n.reverse()}});bs(kc,a)};var ih=M({name:"BloggerInfo",slots:Object,setup(i,{slots:s}){const a=na(),n=Xn(),{siteLocale:e,themeLocale:t}=Pi(),l=Qn(),k=Yn(),p=Zn(),d=Zl(),r=aa(),c=b(()=>{var A;return{name:n.value.name??((A=In(t.value.author)[0])==null?void 0:A.name)??e.value.title,avatar:n.value.avatar??t.value.logo??null,description:n.value.description??null}}),o=b(()=>n.value.intro);return()=>{var F;const{article:A,category:v,tag:u,timeline:E}=a.value,f=[[l.value.path,l.value.items.length,A],[k.value.path,Vs(k.value.map).length,v],[p.value.path,Vs(p.value.map).length,u],[d.value.path,d.value.items.length,E]];return h("div",{class:"vp-blogger-info",vocab:"https://schema.org/",typeof:"Person"},((F=s.bloggerInfo)==null?void 0:F.call(s,c.value))??[h("div",{class:"vp-blogger",...o.value?{"aria-label":a.value.intro,"data-balloon-pos":"down",role:"link",onClick:()=>{r(o.value)}}:{}},[c.value.avatar?h("img",{class:"vp-blogger-avatar",src:Ci(c.value.avatar),property:"image",alt:"Blogger Avatar",loading:"lazy"}):null,c.value.name?h("div",{class:"vp-blogger-name",property:"name"},c.value.name):null,c.value.description?h("div",{class:"vp-blogger-description",innerHTML:c.value.description}):null,o.value?h("meta",{property:"url",content:Ci(o.value)}):null]),h("div",{class:"vp-blog-counts"},f.map(([B,C,w])=>h(Vi,{class:"vp-blog-count",to:B},()=>[h("div",{class:"count"},C),h("div",w)]))),h(ec)])}}});const pc=Symbol(""),sh=()=>{const i=bi(pc);if(!i)throw new Error("useStars() is called without provider.");return i},X3=()=>{const i=it("star");bs(pc,i)},ah=()=>h(mi,{name:"category"},()=>h("path",{d:"M148.41 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H148.41c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.311-40.31zM147.556 553.478H429.73c22.263 0 40.311 18.048 40.311 40.31v282.176c0 22.263-18.048 40.312-40.31 40.312H147.555c-22.263 0-40.311-18.049-40.311-40.312V593.79c0-22.263 18.048-40.311 40.31-40.311zM593.927 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H593.927c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.31-40.31zM730.22 920.502H623.926c-40.925 0-74.22-33.388-74.22-74.425V623.992c0-41.038 33.387-74.424 74.425-74.424h222.085c41.038 0 74.424 33.226 74.424 74.067v114.233c0 10.244-8.304 18.548-18.547 18.548s-18.548-8.304-18.548-18.548V623.635c0-20.388-16.746-36.974-37.33-36.974H624.13c-20.585 0-37.331 16.747-37.331 37.33v222.086c0 20.585 16.654 37.331 37.126 37.331H730.22c10.243 0 18.547 8.304 18.547 18.547 0 10.244-8.304 18.547-18.547 18.547z"}));ah.displayName="CategoryIcon";const nh=()=>h(mi,{name:"tag"},()=>h("path",{d:"M939.902 458.563L910.17 144.567c-1.507-16.272-14.465-29.13-30.737-30.737L565.438 84.098h-.402c-3.215 0-5.726 1.005-7.634 2.913l-470.39 470.39a10.004 10.004 0 000 14.164l365.423 365.424c1.909 1.908 4.42 2.913 7.132 2.913s5.223-1.005 7.132-2.913l470.39-470.39c2.01-2.11 3.014-5.023 2.813-8.036zm-240.067-72.121c-35.458 0-64.286-28.828-64.286-64.286s28.828-64.285 64.286-64.285 64.286 28.828 64.286 64.285-28.829 64.286-64.286 64.286z"}));nh.displayName="TagIcon";const eh=()=>h(mi,{name:"timeline"},()=>h("path",{d:"M511.997 70.568c-243.797 0-441.429 197.633-441.429 441.435 0 243.797 197.632 441.429 441.43 441.429S953.431 755.8 953.431 512.002c0-243.796-197.637-441.434-441.435-441.434zm150.158 609.093-15.605 15.61c-8.621 8.615-22.596 8.615-31.215 0L472.197 552.126c-4.95-4.944-4.34-14.888-4.34-24.677V247.14c0-12.19 9.882-22.07 22.07-22.07h22.07c12.19 0 22.07 9.882 22.07 22.07v273.218l128.088 128.088c8.62 8.62 8.62 22.595 0 31.215zm0 0"}));eh.displayName="TimelineIcon";const rc=()=>h(mi,{name:"slides"},()=>h("path",{d:"M896 170.667v426.666a85.333 85.333 0 0 1-85.333 85.334h-256v61.184l192.597 115.584-43.861 73.13-148.736-89.173v95.275h-85.334v-95.318l-148.736 89.216-43.861-73.13 192.597-115.627v-61.141h-256A85.333 85.333 0 0 1 128 597.333V170.667H85.333V85.333h853.334v85.334H896zm-682.667 0v426.666h597.334V170.667H213.333zM426.667 512h-85.334V341.333h85.334V512zm128 0h-85.334V256h85.334v256zm128 0h-85.334V384h85.334v128z"}));rc.displayName="SlideIcon";const dc=()=>h(mi,{name:"sticky"},()=>[h("path",{d:"m381.3 733.8l-161.9 118c-5.9 4.5-13.2 6.6-20.1 6.6-8.7 0-17.7-3.4-24.3-10-12.2-12.2-13.9-31.3-3.5-45.2l144.5-195.5-113.6-112.9c-11.1-11.1-13.2-28.4-5.5-42 5.5-8.7 52.1-76.4 155.5-51 1.8 0.3 3.5 0.3 5.6 0.7 4.2 0.3 9 0.7 14.2 1.7 21.9 3.5 60.8-13.9 94.5-42.7 32.3-27.5 53.1-59.4 53.1-81.6 0-5.2 0-10.8-0.3-16-0.7-20.8-2.1-52.8 21.5-76.4 28.1-28.1 72.9-30.6 103.9-5.2 0.6 0.3 1 1 1.7 1.7 16.7 16.3 187.5 187.2 189.3 188.9 14.5 14.6 22.9 34.4 22.9 55.3 0 20.8-8 40.2-22.9 54.8-23.7 23.6-56 22.6-77.1 21.6-4.9 0-10.5-0.4-15.7-0.4-20.8 0-45.8 14.6-70.5 41.3-34.3 37.5-55.5 85.8-53.8 107.7 0.7 6.9 2.1 19.1 2.4 20.8 25 101.4-42.7 147.6-50.7 152.8-13.9 8.4-31.6 6.3-42.7-4.8l-112.1-112.2z"})]);dc.displayName="StickyIcon";const th=()=>h(mi,{name:"article"},()=>h("path",{d:"M853.333 938.667H170.667A42.667 42.667 0 0 1 128 896V128a42.667 42.667 0 0 1 42.667-42.667h682.666A42.667 42.667 0 0 1 896 128v768a42.667 42.667 0 0 1-42.667 42.667zm-42.666-85.334V170.667H213.333v682.666h597.334zM298.667 256h170.666v170.667H298.667V256zm0 256h426.666v85.333H298.667V512zm0 170.667h426.666V768H298.667v-85.333zm256-384h170.666V384H554.667v-85.333z"}));th.displayName="ArticleIcon";const Q3=i=>{const s=ws();return b(()=>{const{["author"]:a}=i.value;return a?In(a):a===!1?[]:In(s.value.author,!1)})},Y3=i=>{const s=Yn();return b(()=>Cd(i.value.category).map(a=>({name:a,path:s.value.map[a].path})))},Z3=i=>{const s=Zn();return b(()=>bd(i.value.tag).map(a=>({name:a,path:s.value.map[a].path})))},i4=i=>b(()=>{const{["date"]:s}=i.value;return $l(s)}),s4=i=>{const s=hn(i,"info"),a=Xn(),n=Q3(s),e=Y3(s),t=Z3(s),l=i4(s),k=gd(),p=b(()=>({author:n.value,category:e.value,date:l.value,tag:t.value,isOriginal:s.value.isOriginal??!1,readingTime:s.value.readingTime??null,readingTimeLocale:s.value.readingTime&&k.value?Ad(s.value.readingTime,k.value):null,pageview:i.path})),d=b(()=>a.value.articleInfo??null);return{info:p,items:d}};var a4=M({name:"ArticleItem",props:{info:{type:Object,required:!0},path:{type:String,required:!0}},slots:Object,setup(i,{slots:s}){const a=hn(i,"info"),{info:n,items:e}=s4(i),t=ga();return()=>{var A,v,u;const{title:l,type:k,isEncrypted:p=!1,cover:d=null,excerpt:r=null,sticky:c}=a.value,o=n.value;return h("div",{class:"vp-article-wrapper",onClick:E=>{var f;(f=E.target)!=null&&f.matches("summary")||(E.preventDefault(),t.push(i.path))}},h("article",{class:"vp-article-item",vocab:"https://schema.org/",typeof:"Article"},[((A=s.articleCover)==null?void 0:A.call(s,{cover:d}))??(d?[h("img",{class:"vp-article-cover",src:Ci(d),alt:"",loading:"lazy"}),h("meta",{property:"image",content:Ci(d)})]:[]),c?h(dc):null,h(Vi,{to:i.path},()=>{var E;return((E=s.articleTitle)==null?void 0:E.call(s,{title:l,isEncrypted:p,type:k}))??h("header",{class:"vp-article-title"},[p?h(sc):null,k==="slide"?h(rc):null,h("span",{property:"headline"},l)])}),((v=s.articleExcerpt)==null?void 0:v.call(s,{excerpt:r}))??(r?h("div",{class:"vp-article-excerpt",innerHTML:r}):null),h("hr",{class:"vp-article-hr"}),((u=s.articleInfo)==null?void 0:u.call(s,o))??h(Od,{info:o,items:e.value,onClick:E=>{E.stopPropagation()}})]))}}});const n4='<svg viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" width="16" height="16"><path d="M64 512a448 448 0 1 0 896 0 448 448 0 1 0-896 0Z" fill="#FA5151"/><path d="m557.3 512 113.1-113.1c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L512 466.7 398.9 353.6c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L466.7 512 353.6 625.1c-12.5 12.5-12.5 32.8 0 45.3 6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4L512 557.3l113.1 113.1c6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4c12.5-12.5 12.5-32.8 0-45.3L557.3 512z" fill="#FFF"/></svg>';var e4=M({name:"Pagination",props:{total:{type:Number,default:10},perPage:{type:Number,default:10},current:{type:Number,default:1}},emits:["updateCurrentPage"],setup(i,{emit:s}){const a=new Hl,n=ws(),e=li(""),t=b(()=>n.value.paginationLocales),l=b(()=>Math.ceil(i.total/i.perPage)),k=b(()=>!!l.value&&l.value!==1),p=b(()=>l.value<7?!1:i.current>4),d=b(()=>l.value<7?!1:i.current<l.value-3),r=b(()=>{const{current:A}=i;let v=1,u=l.value;const E=[];l.value>=7&&(A<=4&&A<l.value-3?(v=1,u=5):A>4&&A>=l.value-3?(u=l.value,v=l.value-4):l.value>7&&(v=A-2,u=A+2));for(let f=v;f<=u;f++)E.push(f);return E}),c=A=>{s("updateCurrentPage",A)},o=A=>{const v=parseInt(A,10);v<=l.value&&v>0?c(v):a.pop(`${n4}${t.value.errorText.replace(/\$page/gu,l.value.toString())}`)};return()=>h("div",{class:"vp-pagination"},k.value?h("nav",{class:"vp-pagination-list"},[h("div",{class:"vp-pagination-number "},[i.current>1?h("div",{class:"prev",role:"navigation",unselectable:"on",onClick:()=>{c(i.current-1)}},t.value.prev):null,p.value?[h("div",{role:"navigation",onClick:()=>{c(1)}},1),h("div",{class:"ellipsis"},"...")]:null,r.value.map(A=>h("div",{key:A,class:{active:i.current===A},role:"navigation",onClick:()=>{c(A)}},A)),d.value?[h("div",{class:"ellipsis"},"..."),h("div",{role:"navigation",onClick:()=>{c(l.value)}},l.value)]:null,i.current<l.value?h("div",{class:"next",role:"navigation",unselectable:"on",onClick:()=>{c(i.current+1)}},t.value.next):null]),h("div",{class:"vp-pagination-nav"},[h("label",{for:"navigation-text"},`${t.value.navigate}: `),h("input",{id:"navigation-text",value:e.value,onInput:({target:A})=>{e.value=A.value},onKeydown:A=>{A.key==="Enter"&&(A.preventDefault(),o(e.value))}}),h("button",{class:"vp-pagination-button",type:"button",role:"navigation",title:t.value.action,onClick:()=>{o(e.value)}},t.value.action)])]):[])}}),lh=M({name:"ArticleList",props:{items:{type:Array,required:!0}},slots:Object,setup(i,{slots:s}){const a=js(),n=ga(),e=na(),t=Xn(),l=li(1),k=b(()=>t.value.articlePerPage??10),p=b(()=>i.items.slice((l.value-1)*k.value,l.value*k.value)),d=async r=>{l.value=r;const c={...a.query};!(c.page===r.toString()||r===1&&!c.page)&&(r===1?delete c.page:c.page=r.toString(),await n.push({path:a.path,query:c}))};return vi(()=>{const{page:r}=a.query;d(r?Number(r):1),Si(l,()=>{const c=document.querySelector("#article-list").getBoundingClientRect().top+window.scrollY;setTimeout(()=>{window.scrollTo(0,c)},100)})}),()=>h("div",{id:"article-list",class:"vp-article-list",role:"feed"},p.value.length?[...p.value.map(({info:r,path:c},o)=>h(ri,{appear:!0,delay:o*.04},()=>h(a4,{key:c,info:r,path:c},s))),h(e4,{current:l.value,perPage:k.value,total:i.items.length,onUpdateCurrentPage:d})]:h("h2",{class:"vp-empty-hint"},e.value.empty))}});const t4="//theme-hope-assets.vuejs.press/hero/default.jpg";var l4=M({name:"BlogHero",slots:Object,setup(i,{slots:s}){const{frontmatter:a,siteLocale:n}=Pi(),e=b(()=>{const{heroText:k,heroStyle:p,tagline:d,heroFullScreen:r=!1}=a.value;return{text:k??(n.value.title||"Hello"),tagline:d??"",style:p??null,isFullScreen:r}}),t=b(()=>{const{heroImage:k,heroImageDark:p,heroAlt:d,heroImageStyle:r}=a.value;return{image:k?Ci(k):null,imageDark:p?Ci(p):null,style:r??null,alt:d??""}}),l=b(()=>{const{bgImage:k,bgImageDark:p,bgImageStyle:d}=a.value;return{image:gi(k)?Ci(k):k===!1?null:t4,imageDark:gi(p)?Ci(p):null,style:d??null}});return()=>{var k,p,d;return a.value.hero===!1?null:h("div",{class:["vp-blog-hero",{"hero-fullscreen":a.value.heroFullScreen,"no-bg":!l.value.image}]},[((k=s.heroBg)==null?void 0:k.call(s,l.value))??[l.value.image?h("div",{class:["vp-blog-mask",{light:l.value.imageDark}],style:[{background:`url(${l.value.image}) center/cover no-repeat`},l.value.style]}):null,l.value.imageDark?h("div",{class:"vp-blog-mask dark",style:[{background:`url(${l.value.imageDark}) center/cover no-repeat`},l.value.style]}):null],((p=s.heroLogo)==null?void 0:p.call(s,t.value))??h(ri,{appear:!0,group:!0,delay:.04},()=>{const{image:r,imageDark:c,style:o,alt:A}=t.value;return[r?h("img",{key:"light",class:["vp-blog-hero-image",{light:c}],style:o,src:r,alt:A}):null,c?h("img",{key:"dark",class:"vp-blog-hero-image dark",style:o,src:c,alt:A}):null]}),((d=s.heroInfo)==null?void 0:d.call(s,e.value))??h("div",{class:"vp-blog-hero-info"},[h(ri,{appear:!0,delay:.08},()=>e.value.text?h("h1",{class:"vp-blog-hero-title"},e.value.text):null),h(ri,{appear:!0,delay:.12},()=>e.value.tagline?h("div",{class:"vp-blog-hero-description",innerHTML:e.value.tagline}):null)]),a.value.heroFullScreen?h(Yl,{onClick:()=>{var r;return window.scrollTo({top:window.innerHeight-(((r=document.querySelector("[vp-navbar]"))==null?void 0:r.clientHeight)??0),behavior:"smooth"})}}):null])}}}),h4=M({name:"ArticlesInfo",setup(){const i=Qn(),s=na(),a=sh(),n=aa(),e=b(()=>i.value.items.length),t=b(()=>a.value.items);return()=>h(ri,()=>h("div",{class:"vp-star-article-wrapper"},[h("div",{class:"title",onClick:()=>{n(i.value.path)}},[h(th),h("span",{class:"num"},e.value),s.value.article]),h("hr"),t.value.length?h("ul",{class:"vp-star-articles"},t.value.map(({info:l,path:k},p)=>h(ri,{appear:!0,delay:.08*(p+1)},()=>h("li",{class:"vp-star-article"},h(Vi,{to:k},()=>l.title))))):h("div",{class:"vp-star-article-empty"},s.value.empty.replace("$text",s.value.star))]))}}),cc=M({name:"CategoryList",setup(){const i=Un(),s=Yn();return()=>h("ul",{class:"vp-category-list"},Oa(s.value.map).sort(([,a],[,n])=>n.items.length-a.items.length).map(([a,{path:n,items:e}])=>h("li",{class:"vp-category-item"},h(Vi,{class:["vp-category",`color${qn(a,Number(rn.colorNumber))}`,{active:n===i.value.path}],to:n},()=>[a,h("span",{class:"vp-category-count"},e.length)]))))}}),k4=M({name:"CategoriesInfo",setup(){const i=na(),s=Yn(),a=aa(),n=b(()=>Vs(s.value.map).length);return()=>h("div",{class:"vp-category-wrapper"},[n.value?[h("div",{class:"title",onClick:()=>{a(s.value.path)}},[h(ah),h("span",{class:"num"},n.value),i.value.category]),h("hr"),h(ri,{delay:.04},()=>h(cc))]:h("div",{class:"vp-category-empty"},i.value.empty.replace("$text",i.value.category))])}}),oc=M({name:"TagList",setup(){const i=ns(),s=Zn(),a=n=>{var e;return n===((e=i.value.blog)==null?void 0:e.name)};return()=>h("ul",{class:"vp-tag-list"},Oa(s.value.map).sort(([,n],[,e])=>e.items.length-n.items.length).map(([n,{path:e,items:t}])=>h("li",{class:"vp-tag-item"},h(Vi,{class:["vp-tag",`color${qn(n,Number(rn.colorNumber))}`,{active:a(n)}],to:e},()=>[n,h("span",{class:"vp-tag-count"},t.length)]))))}}),p4=M({name:"TagsInfo",setup(){const i=na(),s=Zn(),a=aa(),n=b(()=>Vs(s.value.map).length);return()=>h("div",{class:"vp-tag-wrapper"},[n.value?[h("div",{class:"title",onClick:()=>{a(s.value.path)}},[h(nh),h("span",{class:"num"},n.value),i.value.tag]),h("hr"),h(ri,{delay:.04},()=>h(oc))]:h("div",{class:"vp-tag-empty"},i.value.empty.replace("$text",i.value.tag))])}}),r4=M({name:"TimelineList",setup(){const i=na(),s=Zl(),a=aa();return()=>h("div",{class:"timeline-list-wrapper"},[h("div",{class:"title",onClick:()=>{a(s.value.path)}},[h(eh),h("span",{class:"num"},s.value.items.length),i.value.timeline]),h("hr"),h("div",{class:"timeline-content"},h("ul",{class:"timeline-list"},s.value.config.map(({year:n,items:e},t)=>h(ri,{appear:!0,delay:.08*(t+1)},()=>h("li",[h("h3",{class:"timeline-year"},n),h("ul",{class:"timeline-year-wrapper"},e.map(({date:l,info:k,path:p})=>h("li",{class:"timeline-item"},[h("span",{class:"timeline-date"},l),h(Vi,{class:"timeline-title",to:p},()=>k.title)])))])))))])}});const d4={article:th,category:ah,tag:nh,timeline:eh};var Ac=M({name:"InfoList",setup(){const i=na(),s=li("article");return()=>h("div",{class:"vp-blog-infos"},[h("div",{class:"vp-blog-type-switcher"},Oa(d4).map(([a,n])=>h("button",{type:"button",class:"vp-blog-type-button",onClick:()=>{s.value=a}},h("div",{class:["vp-blog-type-icon-wrapper",{active:s.value===a}],"aria-label":i.value[a],"data-balloon-pos":"down"},h(n))))),h(ri,()=>s.value==="article"?h(h4):s.value==="category"?h(k4):s.value==="tag"?h(p4):h(r4))])}});const ie=(i,{slots:s})=>{var a,n;return h("aside",{class:"vp-blog-info-wrapper"},[(a=s.infoBefore)==null?void 0:a.call(s),h(ri,()=>h(ih,{},s)),h(ri,{delay:.04},()=>h(Ac)),(n=s.infoAfter)==null?void 0:n.call(s)])};ie.displayName="InfoPanel";var c4=M({name:"ProjectPanel",props:{items:{type:Array,required:!0}},setup(i){const s=es(),a=aa();return()=>h("div",{class:"vp-project-panel"},i.items.map(({icon:n,link:e,name:t,desc:l,background:k})=>h("a",{class:["vp-project-card",{[`color${qn(t,Number(rn.colorNumber))}`]:!s.value&&!k}],...k?{style:k}:{},href:Ke(e)?Ci(e):e,onClick:p=>{a(e),p.preventDefault()}},[n?h(xi("VPIcon"),{class:"vp-project-icon",icon:n}):null,h("div",{class:"vp-project-name"},t),h("div",{class:"vp-project-desc"},l)])))}}),o4=M({name:"BlogHome",slots:Object,setup(i,{slots:s}){const a=Qn(),n=ns(),e=b(()=>n.value.projects??[]);return()=>{var t,l,k,p,d;return h("div",{class:"vp-page vp-blog-home"},[(t=s.heroBefore)==null?void 0:t.call(s),h(l4,{},s),(l=s.heroAfter)==null?void 0:l.call(s),h("div",{class:"blog-page-wrapper"},[h("main",{id:"main-content",class:"vp-blog-main"},[((k=s.articlesBefore)==null?void 0:k.call(s))??(e.value.length?h(ri,{appear:!0,delay:.16},()=>h(c4,{items:e.value})):null),h(ri,{appear:!0,delay:.24},()=>h(lh,{items:a.value.items},s)),(p=s.articlesAfter)==null?void 0:p.call(s)]),h(ri,{appear:!0,delay:.16},()=>h(ie,{key:"blog"},s))]),((d=s.content)==null?void 0:d.call(s))??h(ri,{appear:!0,delay:.28},()=>h(Ze,{},s))])}}}),A4=M({name:"BlogMainLayout",slots:Object,setup(i,{slots:s}){const{isMobile:a}=Ye();return()=>[h(Ql),h(Xl,{noToc:!0},{...s,navScreenBottom:()=>{var n;return((n=s.navScreenBottom)==null?void 0:n.call(s))??h(ih,{},s)},sidebarItems:n=>{var e;return((e=s.sidebarItems)==null?void 0:e.call(s,n))??(a.value?h(Ac):null)}})]}}),g4=M({name:"CategoryPage",slots:Object,setup(i,{slots:s}){const a=Un(),n=ns(),e=Yn(),t=Zn(),l=b(()=>{const k=n.value.blog;if((k==null?void 0:k.type)!=="category")return null;const{name:p,key:d}=k;return d==="category"?{component:cc,items:p?e.value.map[p].items:null}:d==="tag"?{component:oc,items:p?t.value.map[p].items:null}:null});return()=>{var k,p,d,r;return h("div",{class:"vp-page vp-blog"},h("div",{class:"blog-page-wrapper"},[h("main",{id:"main-content",class:"vp-blog-main"},((k=s.default)==null?void 0:k.call(s))??[h(ri,{appear:!0},()=>l.value?h(l.value.component):null),(p=s.articlesBefore)==null?void 0:p.call(s),(d=l.value)!=null&&d.items?h(ri,{appear:!0,delay:.08},()=>[h(lh,{key:a.value.path,items:l.value.items},s)]):null,(r=s.articlesAfter)==null?void 0:r.call(s)]),h(ri,{delay:.16},()=>h(ie,{key:"blog"},s))]))}}}),B4=M({name:"TimelineItems",setup(){const i=Xn(),s=na(),a=Zl(),n=b(()=>i.value.timeline??s.value.timelineTitle);return()=>h("div",{class:"timeline-wrapper"},h("ul",{class:"timeline-content"},[h(ri,()=>h("li",{class:"motto"},n.value)),a.value.config.map(({year:e,items:t},l)=>h(ri,{appear:!0,delay:.08*(l+1),group:!0},()=>[h("h3",{key:"title",id:e,class:"timeline-year-title"},h("span",e)),h("li",{key:"content",class:"timeline-year-list"},[h("ul",{class:"timeline-year-wrapper"},t.map(({date:k,info:p,path:d})=>h("li",{class:"timeline-item"},[h("span",{class:"timeline-date"},k),h(Vi,{class:"timeline-title",to:d},()=>p.title)])))])]))]))}});const gc=(i,{slots:s})=>{var a,n;return h("div",{class:"vp-page vp-blog"},h("div",{class:"blog-page-wrapper"},[h("main",{id:"main-content",class:"vp-blog-main"},[(a=s.articlesBefore)==null?void 0:a.call(s),h(ri,{appear:!0},()=>h(B4)),(n=s.articlesAfter)==null?void 0:n.call(s)]),h(ri,{appear:!0},()=>h(ie,{key:"blog"},s))]))};gc.displayName="TimelinePage";var y4=M({name:"ArticleType",setup(){const{page:i,routeLocale:s}=Pi(),a=Qn(),n=sh(),e=na(),t=b(()=>[{text:e.value.all,path:a.value.path},{text:e.value.star,path:n.value.path},...z3.map(({key:l,path:k})=>{const p=k.replace(/^\//,s.value);return{text:e.value[l]??us(p).meta.title??l,path:p}})]);return()=>h("ul",{class:"vp-article-type-wrapper"},t.value.map(l=>h("li",{class:["vp-article-type",{active:l.path===i.value.path}]},h(Vi,{to:l.path},()=>l.text))))}}),u4=M({name:"TypePage",slots:Object,setup(i,{slots:s}){const a=it(),n=ns(),e=Un(),t=Qn(),l=sh(),k=b(()=>{const p=n.value.blog;return(p==null?void 0:p.type)!=="type"||!p.key?t.value.items:p.key==="star"?l.value.items:a.value.items});return()=>{var p,d,r;return h("div",{class:"vp-page vp-blog"},h("div",{class:"blog-page-wrapper"},[h("main",{id:"main-content",class:"vp-blog-main"},((p=s.default)==null?void 0:p.call(s))??[h(ri,()=>h(y4)),(d=s.articlesBefore)==null?void 0:d.call(s),h(ri,{appear:!0,delay:.08},()=>h(lh,{key:e.value.path,items:k.value})),(r=s.articlesAfter)==null?void 0:r.call(s)]),h(ri,{appear:!0,delay:.08},()=>h(ie,{key:"blog"},s))]))}}}),v4=M({name:"Blog",slots:Object,setup(i,{slots:s}){const a=ns();return()=>{const{type:n,key:e}=a.value.blog??{};return h(A4,null,{...s,default:()=>{var t;return((t=s.default)==null?void 0:t.call(s))??h(n==="category"?g4:n==="type"?e==="timeline"?gc:u4:o4,null,s)}})}}});const E4=()=>{J3(),G3(),X3(),q3(),K3()};_2(i=>{const s=i.title,a=i.index??!0,n=i.icon;return a?{title:s,content:n?()=>[h(xi("VPIcon"),{icon:n,sizing:"both"}),s]:null,order:i.order,index:i.index}:null});const m4={enhance:({app:i,router:s})=>{const{scrollBehavior:a}=s.options;s.options.scrollBehavior=async(...n)=>(await tl.wait(),a(...n)),i3(i),i.component("BloggerInfo",ih),i.component("SocialMedias",ec)},setup:()=>{s3(),e3(),E4()},layouts:{Layout:N3,NotFound:$3,Blog:v4}},F4=Object.freeze(Object.defineProperty({__proto__:null,default:m4},Symbol.toStringTag,{value:"Module"})),ce=[K8,X8,Q8,Z8,iy,ay,ky,My,Vy,jy,zy,Ky,i2,n2,y2,v2,D2,L2,j2,U2,_u,Lu,F4].map(i=>i.default).filter(Boolean),f4=JSON.parse('{"base":"/blogs/","lang":"zh-CN","title":"Mr.LRH 博客","description":"学习笔记，使用 VuePress + vuepress-theme-hope 搭建。","head":[["link",{"rel":"icon","href":"/blogs/favicon.ico"}]],"locales":{}}');var Ha=ni(f4),C4=Wg,b4=()=>{const i=AB({history:C4(We("/blogs/")),routes:[{name:"vuepress-route",path:"/:catchAll(.*)",components:{}}],scrollBehavior:(s,a,n)=>n||(s.hash?{el:s.hash}:{top:0})});return i.beforeResolve(async(s,a)=>{if(s.path!==a.path||a===Us){const n=us(s.fullPath);if(n.path!==s.fullPath)return n.path;const e=await n.loader();s.meta={...n.meta,_pageChunk:e}}else s.path===a.path&&(s.meta=a.meta)}),i},D4=i=>{i.component("ClientOnly",Rl),i.component("Content",xr),i.component("RouteLink",Vi)},_4=(i,s,a)=>{const n=b(()=>s.currentRoute.value.path),e=El((E,f)=>({get(){return E(),s.currentRoute.value.meta._pageChunk},set(F){s.currentRoute.value.meta._pageChunk=F,f()}})),t=b(()=>va.resolveLayouts(a)),l=b(()=>va.resolveRouteLocale(Ha.value.locales,n.value)),k=b(()=>va.resolveSiteLocaleData(Ha.value,l.value)),p=b(()=>e.value.comp),d=b(()=>e.value.data),r=b(()=>d.value.frontmatter),c=b(()=>va.resolvePageHeadTitle(d.value,k.value)),o=b(()=>va.resolvePageHead(c.value,r.value,k.value)),A=b(()=>va.resolvePageLang(d.value,k.value)),v=b(()=>va.resolvePageLayout(d.value,t.value)),u={layouts:t,pageData:d,pageComponent:p,pageFrontmatter:r,pageHead:o,pageHeadTitle:c,pageLang:A,pageLayout:v,redirects:Kt,routeLocale:l,routePath:n,routes:Xa,siteData:Ha,siteLocaleData:k,frontmatter:r,head:o,headTitle:c,lang:A,page:d,site:Ha,siteLocale:k};return i.provide(Tl,u),Object.defineProperties(i.config.globalProperties,{$pageFrontmatter:{get:()=>r.value},$pageHead:{get:()=>o.value},$pageHeadTitle:{get:()=>c.value},$pageLang:{get:()=>A.value},$pageData:{get:()=>d.value},$routeLocale:{get:()=>l.value},$withBase:{get:()=>Ci},$frontmatter:{get:()=>r.value},$head:{get:()=>o.value},$headTitle:{get:()=>c.value},$lang:{get:()=>A.value},$page:{get:()=>d.value},$site:{get:()=>Ha.value},$siteLocale:{get:()=>k.value}}),u},S4=([i,s,a=""])=>{const n=Object.entries(s).map(([k,p])=>gi(p)?`[${k}=${JSON.stringify(p)}]`:p?`[${k}]`:"").join(""),e=`head > ${i}${n}`;return Array.from(document.querySelectorAll(e)).find(k=>k.innerText===a)??null},x4=([i,s,a])=>{if(!gi(i))return null;const n=document.createElement(i);return Ds(s)&&Object.entries(s).forEach(([e,t])=>{gi(t)?n.setAttribute(e,t):t&&n.setAttribute(e,"")}),gi(a)&&n.appendChild(document.createTextNode(a)),n},w4=()=>{const i=uB(),s=Dr();let a=[];const n=()=>{i.value.forEach(l=>{const k=S4(l);k&&a.push(k)})},e=()=>{const l=[];return i.value.forEach(k=>{const p=x4(k);p&&l.push(p)}),l},t=()=>{document.documentElement.lang=s.value;const l=e();a.forEach((k,p)=>{const d=l.findIndex(r=>k.isEqualNode(r));d===-1?(k.remove(),delete a[p]):l.splice(d,1)}),l.forEach(k=>document.head.appendChild(k)),a=[...a.filter(k=>!!k),...l]};bs(CB,t),vi(()=>{n(),Si(i,t,{immediate:!1})})},T4=XA,R4=async()=>{var a;const i=T4({name:"Vuepress",setup(){var t;w4();for(const l of ce)(t=l.setup)==null||t.call(l);const n=ce.flatMap(({rootComponents:l=[]})=>l.map(k=>h(k))),e=vB();return()=>[h(e.value),n]}}),s=b4();D4(i),_4(i,s,ce);for(const n of ce)await((a=n.enhance)==null?void 0:a.call(n,{app:i,router:s,siteData:Ha}));return i.use(s),{app:i,router:s}};R4().then(({app:i,router:s})=>{s.isReady().then(()=>{i.mount("#app")})});export{bs as $,ku as A,q4 as B,Ds as C,pu as D,lu as E,Hi as F,Ba as G,kd as H,ni as I,vi as J,vs as K,nu as L,Ml as M,Zs as N,c8 as O,gi as P,Pn as Q,Vi as R,ir as S,je as T,bi as U,I4 as V,$t as W,da as X,j4 as Y,N4 as Z,g as _,Xp as a,O4 as a0,P4 as a1,U4 as a2,Li as a3,V4 as a4,J4 as a5,Al as a6,wc as a7,z4 as a8,G4 as a9,nn as aa,ho as ab,Qp as b,$4 as c,R4 as createVueApp,H4 as d,Ti as e,M4 as f,W4 as g,M as h,Je as i,Xe as j,Qe as k,Sa as l,li as m,gl as n,Nt as o,b as p,h as q,xi as r,pi as s,hn as t,ga as u,Si as v,oo as w,pd as x,ru as y,hu as z};
