import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as l}from"./app-CwERxs91.js";const t="/blogs/assets/file.drawio-GIFetYOi.png",n={};function h(d,i){return l(),a("div",null,i[0]||(i[0]=[e('<h1 id="blob、file、filelist、filereader、base64" tabindex="-1"><a class="header-anchor" href="#blob、file、filelist、filereader、base64"><span>Blob、File、FileList、FileReader、Base64</span></a></h1><p><img src="'+t+`" alt="file"></p><h2 id="blob" tabindex="-1"><a class="header-anchor" href="#blob"><span>Blob</span></a></h2><p><code>Blob</code> 对象（Binary Large Object，二进制大型对象）表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 <code>ReadableStream</code> 来用于数据操作。</p><h3 id="blob-构造函数" tabindex="-1"><a class="header-anchor" href="#blob-构造函数"><span>Blob 构造函数</span></a></h3><p><code>new Blob(array, options)</code> ： 返回一个新的 <code>Blob</code> 对象。</p><ul><li><p><code>array</code> 参数 ： 是一个由 <code>ArrayBuffer</code>, <code>ArrayBufferView</code>, <code>Blob</code>, <code>DOMString</code> 等对象构成的 <code>Array</code> ，或者其他类似对象的混合体，它将会被放进 <code>Blob</code>。<code>DOMStrings</code> 会被编码为 UTF-8 。</p></li><li><p><code>options</code> 参数 ： 是一个可选的 <code>BlobPropertyBag</code> 字典，它可能会指定如下两个属性：</p><ul><li><p><code>type</code> ： 默认值为 <code>&quot;&quot;</code> 。表示将会被放入到 <code>Blob</code> 中的数组内容的 <code>MIME</code> 类型（媒体类型，用来表示文档、文件或一组数据的性质和格式）。</p><table><thead><tr><th style="text-align:left;">MIME 类型</th><th style="text-align:left;">扩展名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">text/plain</td><td style="text-align:left;">.txt</td><td style="text-align:left;">纯文本</td></tr><tr><td style="text-align:left;">text/html</td><td style="text-align:left;">.html</td><td style="text-align:left;">HTML 文档</td></tr><tr><td style="text-align:left;">text/css</td><td style="text-align:left;">.css</td><td style="text-align:left;">CSS 文件</td></tr><tr><td style="text-align:left;">text/javascript</td><td style="text-align:left;">.js</td><td style="text-align:left;">JavaScript 文件</td></tr><tr><td style="text-align:left;">text/csv</td><td style="text-align:left;">.csv</td><td style="text-align:left;">CSV 文件</td></tr><tr><td style="text-align:left;">application/json</td><td style="text-align:left;">.json</td><td style="text-align:left;">JSON 文件</td></tr><tr><td style="text-align:left;">application/pdf</td><td style="text-align:left;">.pdf</td><td style="text-align:left;">PDF 文件</td></tr><tr><td style="text-align:left;">application/xml</td><td style="text-align:left;">.xml</td><td style="text-align:left;">XML 文件</td></tr><tr><td style="text-align:left;">image/jpeg</td><td style="text-align:left;">.jpeg / .jpg</td><td style="text-align:left;">JPEG 图像</td></tr><tr><td style="text-align:left;">image/png</td><td style="text-align:left;">.png</td><td style="text-align:left;">PNG 图像</td></tr><tr><td style="text-align:left;">image/gif</td><td style="text-align:left;">.gif</td><td style="text-align:left;">GIF 图像</td></tr><tr><td style="text-align:left;">image/svg+xml</td><td style="text-align:left;">.svg</td><td style="text-align:left;">SVG 图像</td></tr><tr><td style="text-align:left;">audio/mpeg</td><td style="text-align:left;">.mp3</td><td style="text-align:left;">MP3 文件</td></tr><tr><td style="text-align:left;">video/mpeg</td><td style="text-align:left;">.mpeg</td><td style="text-align:left;">MP4 文件</td></tr></tbody></table></li><li><p><code>endings</code> ： 非标准。默认值为 <code>&quot;transparent&quot;</code> 。用于指定包含行结束符 <code>\\n</code> 的字符串如何被写入。</p><ul><li><code>&quot;native&quot;</code> ： 代表行结束符会被更改为适合宿主操作系统文件系统的换行符。</li><li><code>&quot;transparent&quot;</code> ： 代表会保持 <code>Blob</code> 中保存的结束符不变。</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> blob</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Blob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Hello World&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;text/plain&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> })</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="blob-实例属性和方法" tabindex="-1"><a class="header-anchor" href="#blob-实例属性和方法"><span>Blob 实例属性和方法</span></a></h3><ul><li><p><code>Blob</code> 实例属性</p><ul><li><code>size</code> ： 返回 <code>Blob</code> 或 <code>File</code> 的字节数。</li><li><code>type</code> ： 返回文件的 <code>MIME</code> 类型（媒体类型，用来表示文档、文件或一组数据的性质和格式）。如果无法确定类型则返回空字符串。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> blob</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Blob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Hello World&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;text/plain&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">blob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">size</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 11</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">blob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &#39;text/plain&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>Blob</code> 实例方法</p><ul><li><p><code>arrayBuffer()</code> ：返回一个 <code>Promise</code> 对象，包含 <code>Blob</code> 中的数据，并在 <code>ArrayBuffer</code> 中以二进制数据的形式呈现。</p></li><li><p><code>slice([start [, end [, contentType]]])</code> ：用于创建一个包含源 <code>Blob</code> 的指定字节范围内的数据的新 <code>Blob</code> 对象。</p><ul><li><code>start</code> 参数 ： 表示拷贝进新的 <code>Blob</code> 的字节的起始位置，默认值为 <code>0</code>。</li><li><code>end</code> 参数 ： 表示拷贝进新的 <code>Blob</code> 的最后一个字节（不包含），默认值为 <code>blob.size</code>。</li><li><code>contentType</code> 参数 ：给新的 <code>Blob</code> 赋予一个新的文档类型，默认值为 <code>&#39;&#39;</code>。</li></ul></li><li><p><code>stream()</code> ： 返回一个 <code>ReadableStream</code> 对象，读取它将返回包含在 <code>Blob</code> 中的数据。</p></li><li><p><code>text()</code> ： 返回一个 <code>Promise</code> 对象，包含 <code>Blob</code> 中的内容，使用 UTF-8 格式编码。</p></li></ul></li></ul><h3 id="下载文件" tabindex="-1"><a class="header-anchor" href="#下载文件"><span>下载文件</span></a></h3><p>AJAX 请求时，指定 <code>responseType</code> 属性为 <code>blob</code> ，下载下来的是一个 <code>Blob</code> 对象。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getBlob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">callback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> xhr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> XMLHttpRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;GET&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">responseType</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;blob&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onload</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    callback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="file-对象" tabindex="-1"><a class="header-anchor" href="#file-对象"><span>File 对象</span></a></h2><p><code>File</code> 对象提供有关文件的信息，并允许访问其内容。</p><p><code>File</code> 对象是特殊类型的 <code>Blob</code>，且可以用在任意的 <code>Blob</code> 类型的 <code>context</code> 中。比如 <code>FileReader</code>, <code>URL.createObjectURL()</code>, <code>createImageBitmap()</code> 及 <code>XMLHttpRequest.send()</code> 都能处理 <code>Blob</code> 和 <code>File</code> 。</p><h3 id="file-构造函数" tabindex="-1"><a class="header-anchor" href="#file-构造函数"><span>File 构造函数</span></a></h3><p><code>new File(bits, name[, options])</code> ： 创建新的 <code>File</code> 对象实例。</p><ul><li><code>bits</code> 参数 ： 一个包含 <code>ArrayBuffer</code>，<code>ArrayBufferView</code>，<code>Blob</code>，或者 <code>DOMString</code> 对象的 <code>Array</code> ，或者任何这些对象的组合。UTF-8 编码的文件内容。</li><li><code>name</code> 参数 ： 字符串。表示文件名称，或者文件路径。</li><li><code>options</code> 参数 ：可选值。选项对象，包含文件的可选属性。 <ul><li><code>type</code> ： 字符串，表示将要放到文件中的内容的 MIME 类型。默认值为 <code>&quot;&quot;</code> 。</li><li><code>lastModified</code> ： 数值，表示文件最后修改时间的 Unix 时间戳（毫秒）。默认值为 <code>Date.now()</code> 。</li></ul></li></ul><h3 id="file-实例属性和方法" tabindex="-1"><a class="header-anchor" href="#file-实例属性和方法"><span>File 实例属性和方法</span></a></h3><ul><li><p><code>File</code> 实例属性</p><ul><li><p><code>File.lastModified</code> ： 只读。返回当前 <code>File</code> 对象所引用文件最后修改时间，自 UNIX 时间起始值（1970 年 1 月 1 日 00:00:00 UTC）以来的毫秒数。</p></li><li><p><code>File.name</code> ： 只读。返回当前 <code>File</code> 对象所引用文件的名字。</p></li><li><p><code>File.size</code> ： 只读。返回文件大小的字节数。</p></li><li><p><code>File.type</code> ： 只读。返回文件的 <code>MIME</code> 类型（媒体类型，用来表示文档、文件或一组数据的性质和格式）。如果无法确定类型则返回空字符串。</p></li><li><p><code>File.webkitRelativePath</code> ： 只读，非标准。返回 <code>File</code> 相关的 <code>path</code> 或 <code>URL</code>。</p></li></ul></li><li><p><code>File</code> 实例方法 ： <code>File</code> 对象没有定义任何方法，由于继承了 <code>Blob</code> 对象，可以使用 <code>Blob</code> 的实例方法 <code>slice()</code> 。</p></li></ul><h2 id="filelist" tabindex="-1"><a class="header-anchor" href="#filelist"><span>FileList</span></a></h2><p><code>FileList</code> 对象是一个类似数组的对象，代表一组选中的文件，每个成员都是一个 <code>File</code> 实例。主要来源于：</p><ul><li>文件控件节点（<code>&lt;input type=&quot;file&quot;&gt;</code>）的 <code>files</code> 属性，返回一个 <code>FileList</code> 实例。</li><li>拖放一组文件操作时，目标区的 <code>DataTransfer.files</code> 属性，返回一个 <code>FileList</code> 实例。</li></ul><p><code>FileList</code> 实例属性和方法：</p><ul><li><code>length</code> 属性 ： 只读的整数值，用来返回列表中的文件数量。</li><li><code>item(index)</code> 方法 ： 根据给定的索引值 <code>index</code>，返回 <code>FileList</code> 对象中对应的 <code>File</code> 对象。</li></ul><h2 id="filereader" tabindex="-1"><a class="header-anchor" href="#filereader"><span>FileReader</span></a></h2><p><code>FileReader</code> 对象用于读取 <code>File</code> 对象或 <code>Blob</code> 对象所包含的文件内容。</p><p>使用 <code>new FileReader()</code> 构造器可以创建一个新的 <code>FileReader</code> 。</p><ul><li><p><code>FileReader</code> 实例属性</p><ul><li><p><code>FileReader.error</code> ： 只读。读取文件时发生的错误对象。</p></li><li><p><code>FileReader.readyState</code> ： 只读。表示读取文件时的当前状态。状态值如下：</p><ul><li><code>EMPTY</code> （值为 <code>0</code>） ： 表示尚未加载任何数据。</li><li><code>LOADING</code> （值为 <code>1</code>） ： 表示数据正在被加载。</li><li><code>DONE</code> （值为 <code>2</code>） ： 表示数据加载完成。</li></ul></li><li><p><code>FileReader.result</code> ： 只读。读取完成后的文件内容，有可能是字符串，也可能是一个 ArrayBuffer 实例。</p></li></ul></li><li><p><code>FileReader</code> 事件处理</p><ul><li><p><code>FileReader.onabort</code> ： <code>abort</code> 事件（用户终止读取操作）的监听函数。</p></li><li><p><code>FileReader.onerror</code> ： <code>error</code> 事件（读取错误）的监听函数。</p></li><li><p><code>FileReader.onload</code> ： <code>load</code> 事件（读取操作完成）的监听函数，通常函数中使用 <code>result</code> 属性，获取文件内容。</p></li><li><p><code>FileReader.onloadstart</code> ： <code>loadstart</code> 事件（读取操作开始）的监听函数。</p></li><li><p><code>FileReader.onloadend</code> ： <code>loadend</code> 事件（读取操作结束）的监听函数。</p></li><li><p><code>FileReader.onprogress</code> ： <code>progress</code> 事件（读取操作进行中）的监听函数。</p></li></ul></li><li><p><code>FileReader</code> 方法</p><ul><li><p><code>FileReader.abort()</code> ： 中止读取操作。 <code>readyState</code> 属性为 <code>DONE</code> （值为 <code>2</code>）。</p></li><li><p><code>FileReader.readAsArrayBuffer(blob)</code> ：读取完成文件内容后，<code>result</code> 属性返回一个 <code>ArrayBuffer</code> 对象以表示所读取文件的数据。</p></li><li><p><code>FileReader.readAsDataURL(blob)</code> ： 读取完成文件内容后，<code>result</code> 属性返回一个 <code>data:URL</code> 格式的字符串（Base64 编码）以表示所读取文件的内容。</p><p>注：返回 Base64 字符串不能直接进行 Base64 解码，必须把前缀 <code>data:*/*;base64,</code> 从字符串里删除后，再进行解码。</p></li><li><p><code>FileReader.readAsText(blob[, encoding])</code> ： 读取完成文件内容后，<code>result</code> 属性返回根据特殊的编码格式 <code>encoding</code> （默认为 utf-8 类型） 转化为内容 (字符串形式)。</p><ul><li><code>readAsText()</code> 方法是异步的，只有当执行完成后才能够查看到结果，如果直接查看是无结果的，并返回 <code>undefined</code> 。</li><li>必须要挂载实例下的 <code>onload</code> 或 <code>onloadend</code> 的方法处理转化后的结果。</li></ul></li><li><p><code>FileReader.readAsBinaryString(blob)</code> ： 非标准。读取完成文件内容后，<code>result</code> 属性返回读取文件原始二进制格式。</p></li></ul><p>注： 当读取操作完成时，<code>readyState</code> 属性为 <code>DONE</code> （值为 <code>2</code>），并触发 <code>loadend</code> 事件。</p></li></ul><h2 id="base64" tabindex="-1"><a class="header-anchor" href="#base64"><span>Base64</span></a></h2><p>Base64 编码方案通常用于需要对二进制数据进行编码的情况，这些数据需要通过设计用于处理 ASCII 的媒体进行存储和传输。为了保证数据的完整并且不用在传输过程中修改这些数据。</p><p>Base64 被一些应用（包括使用 MIME 的电子邮件）和在 XML 中储存复杂数据时使用。</p><p>解码和编码 Base64 字符串：</p><ul><li><code>btoa()</code> ： binary to ASCII，从二进制数据“字符串”创建一个 Base-64 编码的 ASCII 字符串。</li><li><code>atob()</code> ： ASCII to binary，解码通过 Base-64 编码的字符串数据。</li></ul><p>编码尺寸增加原因</p><ul><li>每一个 Base64 字符实际上代表着 6 比特位。因此，3 字节（一字节是 8 比特，3 字节是 24 比特）的字符串/二进制文件可以转换成 4 个 Base64 字符（4x6 = 24 比特）。</li><li>Base64 格式的字符串或文件的尺寸约是原始尺寸的 133%（增加了大约 33%）。如果编码的数据很少，增加的比例可能会更高。例如：长度为 1 的字符串 &quot;a&quot; 进行 Base64 编码后是 &quot;YQ==&quot;，长度为 4，尺寸增加了 3 倍。</li></ul><p>JavaScript 字符串是 16 位编码的字符串，如果一个字符超过了 8 位 ASCII 编码字符的范围，就会引起 Character Out Of Range 异常。解决方案如下：</p><ul><li>第一种：先对整个字符串转义，然后进行编码；</li><li>第二种：将 UTF-16 字符串转换为 UTF-8 字符数组，然后进行编码。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> utf8_to_b64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">btoa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">unescape</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">encodeURIComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> b64_to_utf8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> decodeURIComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">escape</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">atob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">utf8_to_b64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;✓ à la mode&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;4pyTIMOgIGxhIG1vZGU=&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">b64_to_utf8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;4pyTIMOgIGxhIG1vZGU=&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;✓ à la mode&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="格式转换" tabindex="-1"><a class="header-anchor" href="#格式转换"><span>格式转换</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ArrayBuffer --&gt; blob</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> blob</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Blob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Uint8Array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">byteOffset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ArrayBuffer --&gt; base64</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> base64</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> btoa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">fromCharCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">apply</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Uint8Array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">arrayBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// base64 --&gt; blob</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> base64toBlob</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">base64Data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">contentType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">sliceSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> byteCharacters</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> atob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">base64Data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> byteArrays</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> offset</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">offset</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> byteCharacters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">offset</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> sliceSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> slice</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> byteCharacters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">slice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">offset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">offset</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> sliceSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> byteNumbers</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">slice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> slice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      byteNumbers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> slice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">charCodeAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> byteArray</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Uint8Array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">byteNumbers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    byteArrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">byteArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> blob</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Blob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">byteArrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> contentType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> })</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> blob</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// blob --&gt; ArrayBuffer</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> blobToArrayBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">blob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> reader</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FileReader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    reader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onload</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">reader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    reader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onerror</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> reject</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    reader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">readAsArrayBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">blob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// blob --&gt; base64</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> blobToBase64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">blob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> reader</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FileReader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    reader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onloadend</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">reader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    reader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">readAsDataURL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">blob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// blob --&gt; Object URL</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> objectUrl</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> URL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createObjectURL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">blob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://juejin.cn/post/7148254347401363463?searchId=20231024001544F192FD621CC0858FFCD8" target="_blank" rel="noopener noreferrer">谈谈 JS 二进制：File、Blob、FileReader、ArrayBuffer、Base64</a></li></ul>`,44)]))}const r=s(n,[["render",h]]),o=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/JavaScript/BOM/file.html","title":"Blob、File、FileList、FileReader、Base64","lang":"zh-CN","frontmatter":{"description":"Blob、File、FileList、FileReader、Base64 file Blob Blob 对象（Binary Large Object，二进制大型对象）表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作。 Blob 构造函数 new Blob(arra...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Blob、File、FileList、FileReader、Base64\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-28T08:18:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF/JavaScript/BOM/file.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"Blob、File、FileList、FileReader、Base64"}],["meta",{"property":"og:description","content":"Blob、File、FileList、FileReader、Base64 file Blob Blob 对象（Binary Large Object，二进制大型对象）表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作。 Blob 构造函数 new Blob(arra..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-28T08:18:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-28T08:18:46.000Z"}]]},"git":{"createdTime":1698290835000,"updatedTime":1740730726000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh21g"},{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":7.75,"words":2324},"filePathRelative":"前端/JavaScript/BOM/file.md","excerpt":"\\n<p></p>\\n<h2>Blob</h2>\\n<p><code>Blob</code> 对象（Binary Large Object，二进制大型对象）表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 <code>ReadableStream</code> 来用于数据操作。</p>\\n<h3>Blob 构造函数</h3>\\n<p><code>new Blob(array, options)</code> ： 返回一个新的 <code>Blob</code> 对象。</p>\\n<ul>\\n<li>\\n<p><code>array</code> 参数 ： 是一个由 <code>ArrayBuffer</code>, <code>ArrayBufferView</code>, <code>Blob</code>, <code>DOMString</code> 等对象构成的 <code>Array</code> ，或者其他类似对象的混合体，它将会被放进 <code>Blob</code>。<code>DOMStrings</code> 会被编码为 UTF-8 。</p>\\n</li>\\n<li>\\n<p><code>options</code> 参数 ： 是一个可选的 <code>BlobPropertyBag</code> 字典，它可能会指定如下两个属性：</p>\\n<ul>\\n<li>\\n<p><code>type</code> ： 默认值为 <code>\\"\\"</code> 。表示将会被放入到 <code>Blob</code> 中的数组内容的 <code>MIME</code> 类型（媒体类型，用来表示文档、文件或一组数据的性质和格式）。</p>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:left\\">MIME 类型</th>\\n<th style=\\"text-align:left\\">扩展名</th>\\n<th style=\\"text-align:left\\">说明</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:left\\">text/plain</td>\\n<td style=\\"text-align:left\\">.txt</td>\\n<td style=\\"text-align:left\\">纯文本</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">text/html</td>\\n<td style=\\"text-align:left\\">.html</td>\\n<td style=\\"text-align:left\\">HTML 文档</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">text/css</td>\\n<td style=\\"text-align:left\\">.css</td>\\n<td style=\\"text-align:left\\">CSS 文件</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">text/javascript</td>\\n<td style=\\"text-align:left\\">.js</td>\\n<td style=\\"text-align:left\\">JavaScript 文件</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">text/csv</td>\\n<td style=\\"text-align:left\\">.csv</td>\\n<td style=\\"text-align:left\\">CSV 文件</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">application/json</td>\\n<td style=\\"text-align:left\\">.json</td>\\n<td style=\\"text-align:left\\">JSON 文件</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">application/pdf</td>\\n<td style=\\"text-align:left\\">.pdf</td>\\n<td style=\\"text-align:left\\">PDF 文件</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">application/xml</td>\\n<td style=\\"text-align:left\\">.xml</td>\\n<td style=\\"text-align:left\\">XML 文件</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">image/jpeg</td>\\n<td style=\\"text-align:left\\">.jpeg / .jpg</td>\\n<td style=\\"text-align:left\\">JPEG 图像</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">image/png</td>\\n<td style=\\"text-align:left\\">.png</td>\\n<td style=\\"text-align:left\\">PNG 图像</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">image/gif</td>\\n<td style=\\"text-align:left\\">.gif</td>\\n<td style=\\"text-align:left\\">GIF 图像</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">image/svg+xml</td>\\n<td style=\\"text-align:left\\">.svg</td>\\n<td style=\\"text-align:left\\">SVG 图像</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">audio/mpeg</td>\\n<td style=\\"text-align:left\\">.mp3</td>\\n<td style=\\"text-align:left\\">MP3 文件</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">video/mpeg</td>\\n<td style=\\"text-align:left\\">.mpeg</td>\\n<td style=\\"text-align:left\\">MP4 文件</td>\\n</tr>\\n</tbody>\\n</table>\\n</li>\\n<li>\\n<p><code>endings</code> ： 非标准。默认值为 <code>\\"transparent\\"</code> 。用于指定包含行结束符 <code>\\\\n</code> 的字符串如何被写入。</p>\\n<ul>\\n<li><code>\\"native\\"</code> ： 代表行结束符会被更改为适合宿主操作系统文件系统的换行符。</li>\\n<li><code>\\"transparent\\"</code> ： 代表会保持 <code>Blob</code> 中保存的结束符不变。</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{r as comp,o as data};
