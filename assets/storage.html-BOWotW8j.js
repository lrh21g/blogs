import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as n}from"./app-CwERxs91.js";const l={};function t(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="storage" tabindex="-1"><a class="header-anchor" href="#storage"><span>Storage</span></a></h1><h2 id="sessionstorage-和-localstorage" tabindex="-1"><a class="header-anchor" href="#sessionstorage-和-localstorage"><span>sessionStorage 和 localStorage</span></a></h2><p>Storage 提供了访问特定域名下的会话存储或本地存储的功能，数据存储大小为 5M 。例如，可以添加、修改或删除存储的数据项。</p><ul><li><p><code>window.sessionStorage</code> ： 操作一个域名的会话存储。当会话结束（通常是窗口关闭），数据会被清空。</p></li><li><p><code>window.localStorage</code> ： 操作一个域名的本地存储，数据长期存储。</p></li></ul><h3 id="storage-属性" tabindex="-1"><a class="header-anchor" href="#storage-属性"><span>Storage 属性</span></a></h3><ul><li><code>Storage.length</code> ： 只读。返回一个整数，表示存储在 Storage 对象中的数据项数量。</li></ul><h3 id="storage-方法" tabindex="-1"><a class="header-anchor" href="#storage-方法"><span>Storage 方法</span></a></h3><ul><li><p><code>Storage.key(index)</code> ： 该方法接受一个数值 <code>index</code> 作为参数，并返回存储中的第 <code>index</code> 个键名。</p></li><li><p><code>Storage.getItem(keyName)</code> ： 该方法接受一个键名 <code>keyName</code> 作为参数，返回键名对应的值。如果不存在，则返回 <code>null</code> 。</p></li><li><p><code>Storage.setItem(keyName, keyValue)</code> ： 该方法接受一个键名 <code>keyName</code> 和值 <code>keyValue</code> 作为参数，将会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p></li><li><p><code>Storage.removeItem(keyName)</code> ： 该方法接受一个键名 <code>keyName</code> 作为参数，并把该键名从存储中删除。</p></li><li><p><code>Storage.clear()</code> ： 调用该方法会清空存储中的所有键名。</p></li></ul><h3 id="storageevent-事件" tabindex="-1"><a class="header-anchor" href="#storageevent-事件"><span>StorageEvent 事件</span></a></h3><p>Storage 储存的数据发生变化时，会触发 <code>storage</code> 事件，可以指定这个事件的监听函数。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addEventListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;storage&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">onStorageChange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>storage</code> 事件监听函数接受一个 <code>event</code> 实例对象作为参数，该对象继承了 StorageEvent 接口。特有属性（只读）如下：</p><ul><li><p><code>StorageEvent.key</code> ：字符串，被修改的键名。如果 <code>storage</code> 事件是由 <code>clear()</code> 方法引起，该属性返回 <code>null</code> 。</p></li><li><p><code>StorageEvent.newValue</code> ：字符串，修改后的新值。如果 <code>storage</code> 事件是由 <code>clear()</code> 方法或删除该键值对引发的，该属性返回 <code>null</code> 。</p></li><li><p><code>StorageEvent.oldValue</code> ：字符串，在修改前的旧值。如果该键值对是新增的，该属性返回 <code>null</code> 。</p></li><li><p><code>StorageEvent.storageArea</code> ：对象，被操作的 Storage 对象。可以从该属性上面获取当前域名储存的所有键值对。</p></li><li><p><code>StorageEvent.url</code> ：字符串，key 发生改变的对象所在文档的 URL 地址。</p></li></ul><h2 id="indexeddb" tabindex="-1"><a class="header-anchor" href="#indexeddb"><span>IndexedDB</span></a></h2><p>IndexedDB 是一个事务型数据库系统，基于 JavaScript 的面向对象数据库。可用于在客户端存储大量的结构化数据（包括文件/二进制大型对象（blobs））。</p><p>IndexedDB 具有以下特点：</p><ul><li><strong>键值对存储</strong>。IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以“键值对”的形式保存，每个记录都有一个对应的主键，主键是独一无二的，不能重复。</li><li><strong>异步</strong>。IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作。防止大量数据的读写，拖慢网页的表现。</li><li><strong>支持事务</strong>。IndexedDB 支持事务（transaction），一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况。</li><li><strong>同源限制</strong>。IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库。</li><li><strong>储存空间大</strong>。一般来说不少于 250MB，甚至没有上限。</li><li><strong>支持二进制存储</strong>。IndexedDB 不仅可以储存字符串，还可以储存二进制数据（<code>ArrayBuffer</code> 对象和 <code>Blob</code> 对象）。</li></ul><p>IndexedDB 库：</p><ul><li><code>localForage</code> ：一个简单的 Polyfill，提供了简单的客户端数据存储的值语法。它在后台使用 IndexedDB，并在不支持 IndexedDB 的浏览器中回退到 WebSQL 或 localStorage。</li><li><code>Dexie.js</code> ：IndexedDB 的包装，通过简单的语法，可以更快地进行代码开发。</li><li><code>ZangoDB</code> ：类似 MongoDB 的 IndexedDB 接口，支持 MongoDB 的大多数熟悉的过滤、投影、排序、更新和聚合功能。</li><li><code>JsStore</code> ：一个带有 SQL 语法的 IndexedDB 包装器。</li><li><code>MiniMongo</code> ：由 localstorage 支持的客户端内存中的 mongodb，通过 http 进行服务器同步。MeteorJS 使用 MiniMongo。</li><li><code>PouchDB</code> ：使用 IndexedDB 在浏览器中实现 CouchDB 的客户端。</li><li><code>idb</code> ：一个微小的（〜1.15k）库，大多 API 与 IndexedDB 类似，但做了一些小的改进，让数据库的可用性得到了大大的提升。</li><li><code>idb-keyval</code> ：使用 IndexedDB 实现的超级简单且小巧的（~600B）基于 Promise 的键值对存储。</li><li><code>sifrr-storage</code> ：一个非常小的（~2kB）基于 Promise 的客户端键值数据库。基于 IndexedDB、localStorage、WebSQL 和 Cookies 实现。它可以自动选择上述支持的数据库，并按照优先顺序使用。</li><li><code>lovefield</code> ：Lovefield 是一个用于 Web App 的关系型数据库，使用 JavaScript 编写，可以在不同的浏览器环境中运行，提供了类似 SQL 的 API，速度快、安全且易用。</li></ul><h3 id="操作流程" tabindex="-1"><a class="header-anchor" href="#操作流程"><span>操作流程</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> db</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// indexedDB.open(databaseName, version) 方法返回一个 IDBRequest 对象。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &gt; databaseName ： 数据库名称</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &gt; version ： 数据库版本号</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 通过 IDBRequest 对象的 error 、 success 、 upgradeneeded 事件处理打开数据库的操作结果。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> request</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">indexedDB</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;MyTestDatabase&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 通过 IDBRequest 对象的 error 事件处理数据库打开失败的情况。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onerror</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;数据库打开报错&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 通过 IDBRequest 对象的 success 事件处理数据库打开成功的情况。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onsuccess</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 通过 IDBRequest 对象的 result 属性获取 IDBDatabase 对象。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  db</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">result</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;数据库打开成功&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 通过 IDBRequest 对象的 upgradeneeded 事件处理数据库版本升级的情况。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 新建数据库与打开数据库时同一个操作。如果指定数据库不存在，则会新建。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 数据库后续的操作主要在 upgradeneeded 事件监听函数中完成。因为版本从无到有，所以会触发该事件。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onupgradeneeded</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 通过 IDBRequest 对象的 result 属性获取 IDBDatabase 对象。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  db</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">result</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> objectStore</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 如果数据库中没有 person 对象仓库则创建该对象仓库。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">objectStoreNames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">contains</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;person&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // IDBDatabase.createObjectStore(name, options) 方法创建一个对象仓库并返回一个 IDBObjectStore 对象。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &gt; name ： 对象仓库名称</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &gt; options ： 对象仓库选项。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &gt; &gt; options.keyPath 属性表示对象仓库的键路径。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &gt; &gt; options.autoIncrement 属性表示对象仓库的键是否自增。默认为 false 。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    objectStore</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createObjectStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;person&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">keyPath</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;id&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // IDBObjectStore.createIndex(indexName, keyPath, options) 方法创建一个索引并返回一个 IDBIndex 对象。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &gt; indexName ： 索引名称</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &gt; keyPath ： 索引属性</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &gt; options ： 索引选项。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &gt; &gt; options.unique 属性表示索引是否包含重复的值。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &gt; &gt; options.multiEntry 属性表示索引属性是否包含数组。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    objectStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createIndex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;name&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;name&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">unique</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    objectStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createIndex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;email&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;email&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">unique</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 新增数据</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 通过 IDBDatabase.transaction(storeNames, mode) 方法创建一个事务并返回一个 IDBTransaction 对象。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &gt; storeNames ： 对象仓库名称或名称数组。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &gt; mode ： 事务模式。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 通过 IDBTransaction.objectStore(storeName) 方法获取一个 IDBObjectStore 对象。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &gt; storeName ： 对象仓库名称。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 通过 IDBObjectStore.add(value, key) 方法向对象仓库添加一条记录，并返回 IDBRequest 对象。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &gt; value ： 记录值。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &gt; key ： 可选值，记录键。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> request</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> db</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;person&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;readwrite&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">objectStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;person&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;张三&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">age</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 24</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">email</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;zhangsan@example.com&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 通过 IDBRequest 对象的 success 事件处理添加数据成功的情况。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onsuccess</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;数据写入成功&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 通过 IDBRequest 对象的 error 事件处理添加数据失败的情况。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onerror</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;数据写入失败&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 读取数据</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> transaction</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;person&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> objectStore</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">objectStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;person&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 通过 IDBObjectStore.get(key) 方法从对象储存检索特定记录，并返回 IDBRequest 对象。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // &gt; key ： 记录键。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> request</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> objectStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onerror</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;事务失败&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onsuccess</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Name: &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Age: &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Email: &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">email</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;未获得数据记录&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 遍历数据</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> readAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> transaction</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;person&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> objectStore</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">objectStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;person&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 通过 IDBObjectStore.openCursor(query, direction) 方法用一个游标来遍历一个对象存储空间，并返回 IDBRequest 对象。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // &gt; query ： 可选值，要查询的键或者 IDBKeyRange 。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // &gt; direction ： 可选值，游标遍历方向。有效的值有 &quot;next&quot; （默认） 、&quot;nextunique&quot; 、&quot;prev&quot; 和 &quot;prevunique&quot;。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  objectStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">openCursor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onsuccess</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> cursor</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">result</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">cursor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Id: &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> cursor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Name: &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> cursor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Age: &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> cursor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Email: &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> cursor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">email</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      cursor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">continue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;没有更多数据了！&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 更新数据</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> transaction</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;person&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;readwrite&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> objectStore</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">objectStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;person&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 通过 IDBDatabase.put(item, key) 方法更新一条记录，并返回 IDBRequest 对象。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // &gt; item ： 需要更新的记录值。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // &gt; key ： 可选值，记录键。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> request</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> objectStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    id</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;李四&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    age</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 35</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    email</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;lisi@example.com&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onsuccess</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;数据更新成功&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onerror</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;数据更新失败&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 删除数据</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> transaction</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;person&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;readwrite&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> objectStore</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">objectStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;person&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 通过 IDBObjectStore.delete(key) 方法删除一条记录，并返回 IDBRequest 对象。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // &gt; key ： 需要删除的记录键。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> request</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> objectStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">delete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onsuccess</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;数据删除成功&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="indexeddb-相关接口" tabindex="-1"><a class="header-anchor" href="#indexeddb-相关接口"><span>IndexedDB 相关接口</span></a></h3><h4 id="idbfactory-接口" tabindex="-1"><a class="header-anchor" href="#idbfactory-接口"><span>IDBFactory 接口</span></a></h4><p><code>IDBFactory</code> 提供数据库访问。全局对象 <code>indexedDB</code> 实现的接口，是 API 的入口。</p><ul><li><p><code>IDBFactory</code> 对象的方法</p><ul><li><p><code>IDBFactory.open()</code></p><p><strong>语法</strong>：<code>IDBFactory.open(name, version)</code></p><p><strong>描述</strong>：请求打开一个数据库的连接，并返回 <code>IDBOpenDBRequest</code> 对象。</p><ul><li>连接数据库的过程： <ul><li>指定数据库已存在时，等待 <code>versionchange</code> 操作完成。如果数据库已计划删除，则等待删除完成。</li><li>如果已有数据库版本高于给定 <code>version</code> ，中止操作，并返回类型为 VersionError 的错误。</li><li>如果已有数据库版本低于给定 <code>version</code> ，触发 <code>versionchange</code> 事件。</li><li>如果数据库不存在时，创建指定名称数据库，版本号设置为给定版本 <code>version</code> 。如果未给定版本号，则默认为 <code>1</code> 。</li></ul></li><li>异步打开数据库，通过监听各种事件处理打开数据库的操作结果。 <ul><li><code>success</code> 事件 ：打开数据库成功时触发。</li><li><code>error</code> 事件 ：打开数据库失败时触发。</li><li><code>upgradeneeded</code> 事件 ：第一次打开数据库或者数据库版本升级时触发。第一次打开数据库时，会触发该事件，然后触发 <code>success</code> 事件。</li><li><code>blocked</code> 事件 ：上一次打开数据库的连接未关闭时触发。</li></ul></li></ul><p><strong>参数</strong>：</p><ul><li><code>name</code> ： 数据库名称。</li><li><code>version</code> ： 可选值。数据库版本号。</li></ul></li><li><p><code>IDBFactory.deleteDatabase(name)</code> ：请求删除数据库，并返回 <code>IDBOpenDBRequest</code> 对象。</p><ul><li>异步删除数据库，通过监听各种事件处理删除数据库的操作结果。 <ul><li><code>success</code> 事件 ：删除数据库成功时触发。</li><li><code>error</code> 事件 ：删除数据库失败时触发。</li></ul></li><li>调用该方法之后，当前数据库的其他已打开连接都会接收到 <code>versionchange</code> 事件。</li><li>删除不存在的数据库并不会报错。</li></ul></li><li><p><code>IDBFactory.cmp(first, second)</code> ：比较两个值是否为 indexedDB 的相同的主键，并返回一个整数，表示比较结果。</p><ul><li>如果 <code>first</code> 大于 <code>second</code> ，返回 <code>1</code> 。</li><li>如果 <code>first</code> 等于 <code>second</code> ，返回 <code>0</code> 。</li><li>如果 <code>first</code> 小于 <code>second</code> ，返回 <code>-1</code> 。</li></ul></li><li><p><code>IDBFactory.databases()</code> ：返回一个列表，其中包含所有可用数据库的名称和版本。</p></li></ul></li></ul><h4 id="idbopendbrequest-接口" tabindex="-1"><a class="header-anchor" href="#idbopendbrequest-接口"><span>IDBOpenDBRequest 接口</span></a></h4><p><code>IDBOpenDBRequest</code> 继承了 <code>IDBRequest</code> 对象，表示一个打开数据库的请求。提供了额外的事件监听属性如下：</p><ul><li><code>IDBOpenDBRequest.onblocked</code> ：上一次打开数据库的连接未关闭时触发。</li><li><code>IDBOpenDBRequest.onupgradeneeded</code> ：第一次打开数据库或者数据库版本升级时触发。</li></ul><h4 id="idbdatabase-接口" tabindex="-1"><a class="header-anchor" href="#idbdatabase-接口"><span>IDBDatabase 接口</span></a></h4><p><code>IDBDatabase</code> 表示一个数据库连接。可以使用 <code>IDBDatabase</code> 对象在数据库中打开一个 <code>transaction</code> ，然后进行操作或者删除数据库中的对象。唯一能够访问和管理数据库版本的接口。</p><ul><li><p><code>IDBDatabase</code> 属性</p><ul><li><p><code>IDBDatabase.name</code> ：只读。DOMString 类型，当前连接数据库名。</p></li><li><p><code>IDBDatabase.version</code> ：只读。64-bit 整型数，当前连接数据库的版本。当数据第一次被创建时，这个属性是一个空的字符串。</p></li><li><p><code>IDBDatabase.objectStoreNames</code> ：只读。DOMStringList 类型，当前连接连接数据库中所有的 object store 名字列表。</p></li></ul></li><li><p><code>IDBDatabase</code> 事件属性</p><ul><li><p><code>IDBDatabase.onclose</code> ：当数据库连接意外关闭。例如，当底层存储被移除或用户在浏览器的历史首选项中清除数据库时。正常关闭数据库连接，则不会触发该事件。</p></li><li><p><code>IDBDatabase.onabort</code> ：在中断数据库访问时触发。</p></li><li><p><code>IDBDatabase.onerror</code> ：当访问数据库失败时触发。</p></li><li><p><code>IDBDatabase.onversionchange</code> ：当数据库结构发生更改时触发</p></li></ul></li><li><p><code>IDBDatabase</code> 方法</p><ul><li><p><code>IDBDatabase.close()</code> ：在一个单独的线程中关闭数据库连接并立即返回。</p></li><li><p><code>IDBDatabase.createObjectStore()</code> ：创建并返回一个新的 object store 或者 index。</p></li><li><p><code>IDBDatabase.deleteObjectStore()</code> ：根据给定的名字，删除在当前连接的数据库中的 object store 和 相关的索引。</p></li><li><p><code>IDBDatabase.transaction()</code> ：立即返回一个包含 <code>IDBTransaction.objectStore</code> 方法的 transaction 对象。你可以用这个对象来操作 object store。这个操作是在一个单独的线程中执行的。</p></li></ul></li></ul><h4 id="idbtransaction" tabindex="-1"><a class="header-anchor" href="#idbtransaction"><span>IDBTransaction</span></a></h4><p><code>IDBTransaction</code> 表示一个事务。在数据库上创建一个事务，指定作用域（例如要访问的存储对象），并确定所需的访问类型（只读或读写）。</p><ul><li><p><code>IDBTransaction</code> 属性</p><ul><li><p><code>IDBTransaction.db</code> ：只读。返回当前事务所属的数据库对象 <code>IDBDatabase</code>。</p></li><li><p><code>IDBTransaction.error</code> ：只读。返回当前事务的错误。如果事务没有结束，或者事务成功结束，或者被手动终止，该方法返回 <code>null</code> 。</p></li><li><p><code>IDBTransaction.mode</code> ：只读。返回当前事务的模式。可选值有 <code>readonly</code>（只读） 、 <code>readwrite</code> 。</p></li><li><p><code>IDBTransaction.objectStoreNames</code> ：只读。返回一个类似数组的对象 <code>DOMStringList</code>，成员是当前事务涉及的对象仓库的名字。</p></li></ul></li><li><p><code>IDBTransaction</code> 事件属性</p><ul><li><p><code>IDBTransaction.onabort</code> ：当事务被中止时触发。</p></li><li><p><code>IDBTransaction.oncomplete</code> ：当事务成功完成时触发。</p></li><li><p><code>IDBTransaction.onerror</code> ：当事务失败时触发。</p></li></ul></li><li><p><code>IDBTransaction</code> 方法</p><ul><li><p><code>IDBTransaction.objectStore()</code> ：返回一个 <code>IDBObjectStore</code> 对象，用于操作当前事务涉及的对象仓库。</p></li><li><p><code>IDBTransaction.abort()</code> ：中止事务，回滚所有对数据库的变更。</p></li></ul></li></ul><h4 id="idbrequest" tabindex="-1"><a class="header-anchor" href="#idbrequest"><span>IDBRequest</span></a></h4><p><code>IDBRequest</code> 表示打开的数据库连接。对数据库的读写操作都是通过 request 的方式来异步实现。</p><p>每一个请求都有一个 <code>readyState</code> 属性，初始时为 <code>pending</code>，当请求完成或失败的时候，<code>readyState</code> 会变为 <code>done</code>。当状态值变为 <code>done</code> 时，每一个请求都会返回 <code>result</code> 和 <code>error</code> 属性，并且会触发一个事件。当状态保持为 <code>pending</code> 时，任何尝试访问 <code>result</code> 或 <code>error</code> 属性的行为会触发一个 <code>InvalidStateError</code> 异常。</p><ul><li><p><code>IDBRequest</code> 属性</p><ul><li><p><code>IDBRequest.readyState</code> ：只读。等于 <code>pending</code> 表示操作正在进行，等于 <code>done</code> 表示操作正在完成。</p></li><li><p><code>IDBRequest.result</code> ：只读。返回请求的结果。如果请求失败、结果不可用，读取该属性会报错。</p></li><li><p><code>IDBRequest.error</code> ：只读。请求失败时，返回错误对象。</p></li><li><p><code>IDBRequest.source</code> ：只读。返回请求的来源（比如索引对象或 ObjectStore）。</p></li><li><p><code>IDBRequest.transaction</code> ：只读。返回当前请求正在进行的事务，如果不包含事务，返回 <code>null</code> 。</p></li></ul></li><li><p><code>IDBRequest</code> 事件属性</p><ul><li><p><code>IDBRequest.onsuccess</code> ：当请求成功完成时触发。</p></li><li><p><code>IDBRequest.onerror</code> ：当请求失败时触发。</p></li></ul></li></ul><h4 id="idbobjectstore" tabindex="-1"><a class="header-anchor" href="#idbobjectstore"><span>IDBObjectStore</span></a></h4><p><code>IDBObjectStore</code> 表示数据库中的一个对象库 (object store) 。</p><ul><li><p><code>IDBObjectStore</code> 属性</p><ul><li><p><code>IDBObjectStore.name</code> ：只读。返回对象仓库的名称。</p></li><li><p><code>IDBObjectStore.keyPath</code> ：只读。返回对象仓库的主键。</p></li><li><p><code>IDBObjectStore.indexNames</code> ：只读。返回一个 <code>DOMStringList</code> 对象，包含对象仓库中所有索引的名称。</p></li><li><p><code>IDBObjectStore.transaction</code> ：只读。返回当前对象仓库所在的事务。</p></li><li><p><code>IDBObjectStore.autoIncrement</code> ：只读。返回一个布尔值，表示当前对象仓库是否自增。</p></li></ul></li><li><p><code>IDBObjectStore</code> 方法</p><ul><li><p><code>IDBObjectStore.add()</code> ：返回一个 <code>IDBRequest</code> 对象，用于向对象仓库中添加一条记录。只用于添加数据，如果主键相同会报错，更新数据必须使用 <code>put()</code> 方法。</p></li><li><p><code>IDBObjectStore.put()</code> ：返回一个 <code>IDBRequest</code> 对象，用于向对象仓库中添加或更新一条记录。如果对应的键值不存在，则插入一条新的记录。</p></li><li><p><code>IDBObjectStore.clear()</code> ：返回一个 <code>IDBRequest</code> 对象，用于清空对象仓库中的所有记录。</p></li><li><p><code>IDBObjectStore.delete()</code> ：返回一个 <code>IDBRequest</code> 对象，用于删除对象仓库中指定键的记录。</p></li><li><p><code>IDBObjectStore.deleteIndex()</code> ：返回一个 <code>IDBRequest</code> 对象，用于删除对象仓库中指定索引。</p></li><li><p><code>IDBObjectStore.count()</code> ：返回一个 <code>IDBRequest</code> 对象，用于计算对象仓库中满足给定参数的记录数量。</p></li><li><p><code>IDBObjectStore.getKey()</code> ：返回一个 <code>IDBRequest</code> 对象，用于获取对象仓库中指定键的主键。</p></li><li><p><code>IDBObjectStore.get()</code> ：返回一个 <code>IDBRequest</code> 对象，用于获取对象仓库中指定键的记录。</p></li><li><p><code>IDBObjectStore.getAll()</code> ：返回一个 <code>IDBRequest</code> 对象，用于获取对象仓库中所有记录。</p></li><li><p><code>IDBObjectStore.getAllKeys()</code> ：返回一个 <code>IDBRequest</code> 对象，用于获取对象仓库中所有记录的主键。</p></li><li><p><code>IDBObjectStore.index()</code> ：返回一个 <code>IDBIndex</code> 对象，用于获取对象仓库中指定索引的记录。</p></li><li><p><code>IDBObjectStore.createIndex()</code> ：返回一个 <code>IDBIndex</code> 对象，用于创建一个索引。该方法只能在 <code>VersionChange</code> 监听函数里面调用。</p></li><li><p><code>IDBObjectStore.openCursor()</code> ：返回一个 <code>IDBRequest</code> 对象，获取一个指针对象 <code>IDBCursor</code> ，指针对象可以用来遍历数据。异步操作，通过监听事件（<code>success</code> 和 <code>error</code> 事件）处理获取数据的操作结果。</p></li><li><p><code>IDBObjectStore.openKeyCursor()</code> ：返回一个 <code>IDBRequest</code> 对象，用于获取一个主键指针对象。</p></li></ul></li></ul><h4 id="idbindex" tabindex="-1"><a class="header-anchor" href="#idbindex"><span>IDBIndex</span></a></h4><p><code>IDBIndex</code> 允许访问 IndexedDB 数据库中的数据子集，但使用索引来检索记录而不是主键。这有时比使用 <code>IDBObjectStore</code> 更快。</p><ul><li><p><code>IDBIndex</code> 属性</p><ul><li><p><code>IDBIndex.name</code> ：只读。返回索引的名称。</p></li><li><p><code>IDBIndex.objectStore</code> ：只读。返回索引所在的对象仓库。</p></li><li><p><code>IDBIndex.keyPath</code> ：只读。返回索引的主键。</p></li><li><p><code>IDBIndex.multiEntry</code> ：只读。返回一个布尔值，针对 <code>keyPath</code> 为数组的情况，如果设为 <code>true</code>，创建数组时，每个数组成员都会有一个条目，否则每个数组都只有一个条目。</p></li><li><p><code>IDBIndex.unique</code> ：只读。返回一个布尔值，表示索引的键是否包含重复的值。</p></li></ul></li><li><p><code>IDBIndex</code> 方法</p><ul><li><p><code>IDBIndex.count()</code> ：返回一个 <code>IDBRequest</code> 对象，用于计算索引中满足给定参数的记录数量。</p></li><li><p><code>IDBIndex.getKey()</code> ：返回一个 <code>IDBRequest</code> 对象，用于获取索引中指定键的主键。</p></li><li><p><code>IDBIndex.get()</code> ：返回一个 <code>IDBRequest</code> 对象，用于获取索引中指定键的记录。</p></li><li><p><code>IDBIndex.getAll()</code> ：返回一个 <code>IDBRequest</code> 对象，用于获取索引中所有记录。</p></li><li><p><code>IDBIndex.getAllKeys()</code> ：返回一个 <code>IDBRequest</code> 对象，用于获取索引中所有记录的主键。</p></li><li><p><code>IDBIndex.openCursor()</code> ：返回一个 <code>IDBRequest</code> 对象，获取一个指针对象 <code>IDBCursor</code> ，指针对象可以用来遍历数据。异步操作，通过监听事件（<code>success</code> 和 <code>error</code> 事件）处理获取数据的操作结果。</p></li><li><p><code>IDBIndex.openKeyCursor()</code> ：返回一个 <code>IDBRequest</code> 对象，用于获取一个主键指针对象。</p></li></ul></li></ul><h4 id="idbcursor" tabindex="-1"><a class="header-anchor" href="#idbcursor"><span>IDBCursor</span></a></h4><p><code>IDBCursor</code> 对象表示指针对象，用来遍历数据仓库（<code>IDBObjectStore</code>）或索引（<code>IDBIndex</code>）的记录。</p><ul><li><p><code>IDBCursor</code> 属性</p><ul><li><p><code>IDBCursor.source</code> ：只读。返回一个 <code>IDBObjectStore</code> 或 <code>IDBIndex</code> 对象，表示当前指针对象所在的对象仓库或索引。</p></li><li><p><code>IDBCursor.direction</code> ：只读。返回一个字符串，表示指针对象的遍历方向。可选值有 <code>next</code> （从头开始向后遍历） 、 <code>nextunique</code> 从头开始向后遍历，重复的值只遍历一次）、 <code>prev</code> （从尾部开始向前遍历） 、 <code>prevunique</code> （从尾部开始向前遍历，重复的值只遍历一次）。</p></li><li><p><code>IDBCursor.key</code> ：只读。返回当前记录的键。</p></li><li><p><code>IDBCursor.primaryKey</code> ：只读。返回当前记录的主键。</p></li><li><p><code>IDBCursor.value</code> ：只读。返回当前记录的值。</p></li></ul></li><li><p><code>IDBCursor</code> 方法</p><ul><li><p><code>IDBCursor.advance()</code> ：指针向前移动 n 个</p></li><li><p><code>IDBCursor.continue()</code> ：指针向前移动一个位置。它可以接受一个主键作为参数，这时会跳转到这个主键。</p></li><li><p><code>IDBCursor.continuePrimaryKey()</code> ：该方法需要两个参数，第一个是key，第二个是primaryKey，将指针移到符合这两个参数的位置。</p></li><li><p><code>IDBCursor.delete()</code> ：用来删除当前位置的记录，返回一个 IDBRequest 对象。该方法不会改变指针的位置。</p></li><li><p><code>IDBCursor.update()</code> ：用来更新当前位置的记录，返回一个 IDBRequest 对象。它的参数是要写入数据库的新的值。</p></li></ul></li></ul><h4 id="idbcursorwithvalue" tabindex="-1"><a class="header-anchor" href="#idbcursorwithvalue"><span>IDBCursorWithValue</span></a></h4><p><code>IDBCursorWithValue</code> 表示一个用于遍历或迭代数据库中多条记录的游标。除了包含值属性外，它与 <code>IDBCursor</code> 相同。</p><h4 id="idbkeyrange" tabindex="-1"><a class="header-anchor" href="#idbkeyrange"><span>IDBKeyRange</span></a></h4><p><code>IDBKeyRange</code> 定义可用于从特定范围内的数据库检索数据的键范围。</p><ul><li><p><code>IDBKeyRange</code> 属性</p><ul><li><p><code>IDBKeyRange.lower</code> ：只读。返回键范围的下限。</p></li><li><p><code>IDBKeyRange.upper</code> ：只读。返回键范围的上限。</p></li><li><p><code>IDBKeyRange.lowerOpen</code> ：只读。返回一个布尔值，表示下限是否为开区间（即下限是否排除在范围之外）。</p></li><li><p><code>IDBKeyRange.upperOpen</code> ：只读。返回一个布尔值，表示上限是否为开区间（即上限是否排除在范围之外）。</p></li></ul></li><li><p><code>IDBKeyRange</code> 方法</p><ul><li><p><code>IDBKeyRange.bound()</code> ：返回一个 <code>IDBKeyRange</code> 对象，表示一个范围，包含下限和上限。</p></li><li><p><code>IDBKeyRange.lowerBound()</code> ：返回一个 <code>IDBKeyRange</code> 对象，表示一个范围，包含下限，不包含上限。</p></li><li><p><code>IDBKeyRange.upperBound()</code> ：返回一个 <code>IDBKeyRange</code> 对象，表示一个范围，包含上限，不包含下限。</p></li><li><p><code>IDBKeyRange.only()</code> ：返回一个 <code>IDBKeyRange</code> 对象，表示一个范围，只包含一个特定的值。</p></li></ul></li></ul><h4 id="idbversionchangeevent" tabindex="-1"><a class="header-anchor" href="#idbversionchangeevent"><span>IDBVersionChangeEvent</span></a></h4><p><code>IDBVersionChangeEvent</code> 作为 <code>IDBOpenDBRequest.onupgradeneeded</code> 事件的处理程序的结果， <code>IDBVersionChangeEvent</code> 接口表示数据库的版本已经发生了改变。</p><h2 id="http-cookie" tabindex="-1"><a class="header-anchor" href="#http-cookie"><span>HTTP Cookie</span></a></h2><p>HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据。</p><ul><li>浏览器会存储 cookie 并在下次向同一服务器再发起请求时携带并发送到服务器上。</li><li>Cookie 主要用于以下三个方面： <ul><li>会话（session）状态管理：如用户登录状态、购物车、游戏分数或其他需要记录的信息</li><li>个性化设置：如用户自定义设置、主题和其他设置</li><li>浏览器行为跟踪：如跟踪分析用户行为等</li></ul></li><li>Cookie 容量仅 4 KB，缺乏数据操作接口，而且会影响性能。客户端存储可以使用 Web storage API 和 IndexedDB 。</li></ul><h3 id="cookie-的属性" tabindex="-1"><a class="header-anchor" href="#cookie-的属性"><span>Cookie 的属性</span></a></h3><ul><li><p><code>Expires</code>，<code>Max-Age</code></p><ul><li><p><code>Expires</code> ： 过期时间，即在此时候之后，响应过期。UTC 格式，可以使用 <code>Date.prototype.toUTCString()</code> 进行格式转换。</p><ul><li>如设置无效的日期（比如 <code>0</code>），代表着过去的日期，即该资源已经过期。</li><li>如果不设置该属性，或者设为 <code>null</code>，Cookie 只在当前会话（session）有效，浏览器窗口一旦关闭，当前 Session 结束，Cookie 会被删除。</li></ul></li><li><p><code>Max-Age</code> ： 有效期，指定的一段时间后被删除 Cookie 。</p></li></ul><p>如果同时指定了 <code>Expires</code> 和 <code>Max-Age</code> ，<code>Max-Age</code> 的值将优先生效。</p><p>如果 <code>Set-Cookie</code> 字段没有指定 <code>Expires</code> 或 <code>Max-Age</code> 属性，即它在本次对话存在，一旦用户关闭浏览器，浏览器就不会再保留这个 Cookie 。</p></li><li><p><code>Domain</code>，<code>Path</code></p><p><code>Domain</code> 和 <code>Path</code> 属性标识定义了 Cookie 的作用域：即允许 Cookie 应该发送给哪些 URL。</p><ul><li><p><code>Domain</code> 属性：指定 Cookie 属于哪个域名，浏览器向服务器发送 HTTP 请求时，通过该属性判断是否需要附带某个 Cookie 。</p><ul><li><p>如果未指定 <code>Domain</code> 属性，浏览器默认将其设为浏览器的当前域名。如果当前域名是一个 IP 地址，则不得设置 <code>Domain</code> 属性。</p></li><li><p>如果指定了 <code>Domain</code> 属性，则需遵循如下规则：只能是当前域名或者当前域名的上级域名，但设为上级域名时，不能设为顶级域名（如： <code>.com</code> 、 <code>.net</code> 等）或公共域名（开放给外部用户设置子域名的域名，如： <code>github.io</code>），否则浏览器会拒绝设置。</p><ul><li>如果当前域名为 <code>x.y.z.com</code> ，则 <code>Domain</code> 属性可设置为 <code>x.y.z.com</code> 或 <code>y.z.com</code> 或 <code>z.com</code> ，但不能设置为 <code>foo.x.y.z.com</code> 或 <code>another.domain.com</code> 。</li><li>如果当前域名为 <code>foo.github.io</code> ，则 <code>Domain</code> 属性只能设置为 <code>foo.github.io</code> ，不能设置为 <code>github.io</code> （该域名为公共域名）。</li></ul></li></ul></li><li><p><code>Path</code> 属性：指定浏览器发出 HTTP 请求时，哪些路径需要附带 Cookie 。当浏览器发现 <code>Path</code> 属性是 HTTP 请求路径的开头一部分，则会在头信息中携带 Cookie 。</p><ul><li>如果 <code>Path=/docs</code> ，则 <code>/docs</code> 、 <code>/docs/</code> 、 <code>/docs/Web/</code> 都会匹配，携带 Cookie 。但，不会匹配 <code>/</code> 、 <code>/docsets</code> 。</li><li>如果 <code>Path=/</code> ， 则 <code>/docs</code> 都会匹配，携带 Cookie 。</li></ul></li></ul></li><li><p><code>Secure</code>，<code>HttpOnly</code></p><p><code>Secure</code> 和 <code>HttpOnly</code> 属性确保 Cookie 被安全发送，并且不会被意外的参与者或脚本访问。</p><ul><li><p><code>Secure</code> 属性：指定 Cookie 只应通过被 HTTPS 协议加密过的请求发送给服务端。如果是 HTTP 协议，则无法使用 <code>Secure</code> 属性设置 Cookie ，但不会阻止对 Cookie 中敏感信息的访问。</p></li><li><p><code>HttpOnly</code> 属性：指定 Cookie 无法通过 JavaScript API （比如： <code>document.cookie</code> 属性 、 <code>XMLHttpRequest</code> 对象 、 Request API 等）获取，仅用于服务器。</p></li></ul></li><li><p><code>SameSite</code></p><p><code>SameSite</code> 属性允许服务器指定是否/何时通过跨站点请求发送，可用于防止 CSRF 攻击（Cookie 往往用于存储用户的身份信息，恶意网站可以设法伪造带有正确 Cookie 的 HTTP 请求）和用户追踪。</p><p><code>SameSite</code> 属性的属性值如下。如果没有设置 <code>SameSite</code> 属性，则将 Cookie 视为 <code>Lax</code>。</p><ul><li><code>Strict</code> ：最为严格，完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie。只有当前网页的 URL 与请求目标一致，才会带上 Cookie。</li><li><code>Lax</code> ：大多数情况也是不发送第三方 Cookie，但是导航到目标网址的 Get 请求除外。导航到目标网址的 GET 请求，只包括三种情况：链接，预加载请求，GET 表单。</li><li><code>None</code> ：浏览器会在同站请求和跨站请求下继续发送 Cookie，但仅在安全的上下文中（即，如果 <code>SameSite=None</code>，且还必须设置 <code>Secure</code> 属性）。</li></ul></li></ul><h3 id="cookie-与-http" tabindex="-1"><a class="header-anchor" href="#cookie-与-http"><span>Cookie 与 HTTP</span></a></h3><ul><li><p>服务器：收到 HTTP 请求后，服务器可以在响应标头里面添加一个或多个 <code>Set-Cookie</code> 选项。</p><ul><li>一个 <code>Set-Cookie</code> 字段里面，可以同时包括多个属性，没有次序的要求。</li><li>服务器如果要改变一个已设置的 Cookie，必须同时满足四个条件： Cookie 的 <code>key</code>、<code>domain</code>、<code>path</code> 和 <code>secure</code> 都是匹配的。只要有一个属性不同，就会生成一个全新的 Cookie ，而不是替换。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Set</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Cookie</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">cookie-name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;=&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">cookie-value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;; Domain=&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">domain-value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;; Secure; HttpOnly</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>浏览器：收到 HTTP 响应后，通常会保存下 Cookie，并将其放在 HTTP Cookie 标头内，向同一服务器发出请求时一起发送。</p></li></ul><h3 id="document-cookie" tabindex="-1"><a class="header-anchor" href="#document-cookie"><span>document.cookie</span></a></h3><p><code>document.cookie</code> 获取并设置与当前文档相关联的 Cookie。</p><ul><li>读取时，会返回当前网页的所有 Cookie （前提条件：对应 Cookie 不能有 <code>HttpOnly</code> 属性）。返回符串包含所有的 Cookie，每条 cookie 以 <code>分号和空格 (; )</code> 分隔（即： <code>key=value</code> 键值对）。</li><li>设置时，Cookie 的值必须为 <code>key=value</code> 键值对形式（等号两边不能有空格）。 <ul><li>一次只能写入一个 Cookie 。</li><li>必须对分号、逗号和空格进行转义（它们都不允许作为 Cookie 的值），可以使用 <code>encodeURIComponent</code> 方法处理。</li><li>Cookie 属性的写入注意点： <ul><li><code>path</code> 属性值必须为绝对路径，默认为当前路径。</li><li><code>domain</code> 属性值必须是当前发送 Cookie 的域名的一部分。如果显式设置该属性，则该域名的任意子域名也可以读取 Cookie。</li><li><code>max-age</code> 属性值为秒数。</li><li><code>expires</code> 属性值为 UTC 格式，可以使用 <code>Date.prototype.toUTCString()</code> 进行日期格式转换。</li></ul></li></ul></li><li>删除一个现存 Cookie 的唯一方法，是设置它的 <code>expires</code> 属性为一个过去的日期。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cookie</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &#39;fontSize=14; &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &#39;expires=&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> someDate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toGMTString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;; &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &#39;path=/subdirectory; &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &#39;domain=example.com&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,65)]))}const d=s(l,[["render",t]]),o=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/JavaScript/BOM/storage.html","title":"Storage","lang":"zh-CN","frontmatter":{"description":"Storage sessionStorage 和 localStorage Storage 提供了访问特定域名下的会话存储或本地存储的功能，数据存储大小为 5M 。例如，可以添加、修改或删除存储的数据项。 window.sessionStorage ： 操作一个域名的会话存储。当会话结束（通常是窗口关闭），数据会被清空。 window.localSto...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Storage\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-28T08:18:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF/JavaScript/BOM/storage.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"Storage"}],["meta",{"property":"og:description","content":"Storage sessionStorage 和 localStorage Storage 提供了访问特定域名下的会话存储或本地存储的功能，数据存储大小为 5M 。例如，可以添加、修改或删除存储的数据项。 window.sessionStorage ： 操作一个域名的会话存储。当会话结束（通常是窗口关闭），数据会被清空。 window.localSto..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-28T08:18:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-28T08:18:46.000Z"}]]},"git":{"createdTime":1698162204000,"updatedTime":1740730726000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"lingronghai@foxmail.com","commits":2,"url":"https://github.com/lrh21g"},{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":22.04,"words":6612},"filePathRelative":"前端/JavaScript/BOM/storage.md","excerpt":"\\n<h2>sessionStorage 和 localStorage</h2>\\n<p>Storage 提供了访问特定域名下的会话存储或本地存储的功能，数据存储大小为 5M 。例如，可以添加、修改或删除存储的数据项。</p>\\n<ul>\\n<li>\\n<p><code>window.sessionStorage</code> ： 操作一个域名的会话存储。当会话结束（通常是窗口关闭），数据会被清空。</p>\\n</li>\\n<li>\\n<p><code>window.localStorage</code> ： 操作一个域名的本地存储，数据长期存储。</p>\\n</li>\\n</ul>\\n<h3>Storage 属性</h3>","autoDesc":true}');export{d as comp,o as data};
