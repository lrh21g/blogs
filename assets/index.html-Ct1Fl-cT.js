import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as n}from"./app-CwERxs91.js";const h={};function s(r,l){return n(),a("div",null,l[0]||(l[0]=[e('<h1 id="软件设计原则与分层" tabindex="-1"><a class="header-anchor" href="#软件设计原则与分层"><span>软件设计原则与分层</span></a></h1><h2 id="软件设计原则" tabindex="-1"><a class="header-anchor" href="#软件设计原则"><span>软件设计原则</span></a></h2><h3 id="单一职责原则" tabindex="-1"><a class="header-anchor" href="#单一职责原则"><span>单一职责原则</span></a></h3><ul><li>永远不应该有多于一个原因来改变某个类。</li><li>理解：对于一个类而言，应该仅有一个引起它变化的原因。</li><li>应用：如果一个类拥有了两种职责，那就可以将这个类分成两个类。</li></ul><h3 id="开放封闭原则" tabindex="-1"><a class="header-anchor" href="#开放封闭原则"><span>开放封闭原则</span></a></h3><ul><li>软件实体扩展应该是开放的，但对于修改应该是封闭的。</li><li>理解：对扩展开放，对修改封闭。可以去扩展类，但不要去修改类。</li><li>应用：当需求有改动，尽量用继承或组合的方式来扩展类的功能，而不是直接修改类的代码。</li></ul><h3 id="里氏替换原则" tabindex="-1"><a class="header-anchor" href="#里氏替换原则"><span>里氏替换原则</span></a></h3><ul><li>理解：父类一定能过被子类替换</li></ul><h3 id="最少知识原则" tabindex="-1"><a class="header-anchor" href="#最少知识原则"><span>最少知识原则</span></a></h3><ul><li>只与你最直接的对象交流</li><li>理解：低耦合，高内聚</li><li>应用：做系统设计时，尽量减少依赖关系。</li></ul><h3 id="接口隔离原则" tabindex="-1"><a class="header-anchor" href="#接口隔离原则"><span>接口隔离原则</span></a></h3><ul><li>一个类与另一个类之间的依赖性，应该依赖于尽可能小的接口</li><li>理解：不要对外暴露没有实际意义的接口。用户不应该依赖它不需要的接口</li><li>应用：当需要对外暴露接口时，如果是非必要对外提供，尽量删除。</li></ul><h3 id="依赖倒置原则" tabindex="-1"><a class="header-anchor" href="#依赖倒置原则"><span>依赖倒置原则</span></a></h3><ul><li>高层模块不应该依赖于低层模块，它们应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</li><li>理解：应该面向接口编程，不应该面向实现类编程。</li><li>并不是说，所有的类都要有一个对应的接口，而是说，如果有接口，那就尽量使用接口来编程。</li></ul><h3 id="组合-聚合复用原则" tabindex="-1"><a class="header-anchor" href="#组合-聚合复用原则"><span>组合/聚合复用原则</span></a></h3><ul><li>当要扩展类的功能时，优先考虑使用组合，而不是继承</li><li>该原则在23中经典设计模式中频繁使用。如：代理模式、装饰模式、适配器模式等</li></ul><h3 id="无环依赖原则" tabindex="-1"><a class="header-anchor" href="#无环依赖原则"><span>无环依赖原则</span></a></h3><ul><li>当A模块依赖于B模块，B模块依赖于C模块，C模块依赖于A模块，此时将出现循环依赖</li><li>在设计中避免该问题，可通过引入”中介者模式“解决</li></ul><h3 id="共同封装原则" tabindex="-1"><a class="header-anchor" href="#共同封装原则"><span>共同封装原则</span></a></h3><ul><li>应该将易变的类放在同一个包里，将变化隔离出来</li><li>该原则是“开放 - 封闭原则”的诞生</li></ul><h3 id="共同重用原则" tabindex="-1"><a class="header-anchor" href="#共同重用原则"><span>共同重用原则</span></a></h3><ul><li>如果重用了包中的一个类，那么也就相当于重用了包中的所有类，我们要尽可能减少包的大小。</li></ul><h3 id="好莱坞原则" tabindex="-1"><a class="header-anchor" href="#好莱坞原则"><span>好莱坞原则</span></a></h3><ul><li>Don&#39;t call me, I&#39;ll call you</li><li>“控制反转”（或称为“依赖注入”）</li><li>不需要主动创建对象，而是由容器帮我们来创建并管理这些对象</li></ul><h3 id="不要重复你自己" tabindex="-1"><a class="header-anchor" href="#不要重复你自己"><span>不要重复你自己</span></a></h3><ul><li>不要让重复的代码到处都是，要让它们足够的重用，所以要尽可能地封装</li></ul><h3 id="保持它简单与傻瓜" tabindex="-1"><a class="header-anchor" href="#保持它简单与傻瓜"><span>保持它简单与傻瓜</span></a></h3><ul><li>保持系统界面简洁，功能实用，操作方便。</li></ul><h3 id="高内聚与低耦合" tabindex="-1"><a class="header-anchor" href="#高内聚与低耦合"><span>高内聚与低耦合</span></a></h3><ul><li>模块内部需要做到内聚度高，模块之间需要做到耦合度低</li></ul><h3 id="关注点分离" tabindex="-1"><a class="header-anchor" href="#关注点分离"><span>关注点分离</span></a></h3><ul><li>将一个复杂的问题分类为多个简单的问题，然后逐个解决。</li><li>难点：如何进行分离</li></ul><h3 id="你不需要它" tabindex="-1"><a class="header-anchor" href="#你不需要它"><span>你不需要它</span></a></h3><ul><li>不要一开始就把系统设计得非常复杂，不要陷入“过渡设计”的深渊</li><li>让系统足够简单，而又不失扩展性</li></ul><h2 id="架构种类" tabindex="-1"><a class="header-anchor" href="#架构种类"><span>架构种类</span></a></h2><p>系统级架构、应用级架构、模块级架构、代码级架构</p><h3 id="系统级架构" tabindex="-1"><a class="header-anchor" href="#系统级架构"><span>系统级架构</span></a></h3><ul><li>应用在整个系统内，如：与后台服务如何通信，与第三方系统如何集成。</li><li>设计前端：了解前端系统与其他系统之间的关系。包括：业务关系和协作机制</li><li>设计后端：只需要规定与后台数据传递的机制。包括：API设计规则，访问授权的一个开放标准（OAuth）跳转token验证，数据传递Cookie等。</li><li>前端与后端的关系考虑的主要因素是：前后端分离的架构设计。前后端分离架构其实是如何实施技术决策，用户鉴权，API接口管理和设计，API文档管理，Mock的使用，BFF（服务于前端的后端，Node.js），是否需要服务端渲染等。</li></ul><h4 id="微前端" tabindex="-1"><a class="header-anchor" href="#微前端"><span>微前端</span></a></h4><ul><li>在一个系统内，微前端是应用间的架构方案。在多个应用之间，微前端则是一种系统间的架构方案。</li><li>微前端是将多个前端应用已某种形式结合在一起进行应用，旨在解决单体应用在一个相对长的时间跨度下，由于参与的人员，团队增多、变迁，从一个普通应用演变成一个巨石应用（Frontend Monolith）后，随之而来的应用不可维护的问题。</li><li>实现形式： <ul><li>单实例：即同一时刻，只有一个子应用被展示，子应用具备一个完整的应用生命周期</li><li>多实例：通常基于URL的变化来做子应用的切换，同一时刻可展示多个子应用。通常使用 Web Components 方案来做子应用封装，子应用更像是一个业务组件而不是应用。</li></ul></li></ul><h3 id="应用级架构" tabindex="-1"><a class="header-anchor" href="#应用级架构"><span>应用级架构</span></a></h3><ul><li>应用级架构可以看作是系统级架构的细化</li><li>单个应用与其他外部应用的关系，微服务架构下多个应用的协作，数据交换等。</li><li>形式：脚手架、模式库、设计系统</li></ul><h3 id="模块级架构" tabindex="-1"><a class="header-anchor" href="#模块级架构"><span>模块级架构</span></a></h3><ul><li>开始业务编码之前进行设计，称为迭代。</li></ul><h3 id="代码级架构" tabindex="-1"><a class="header-anchor" href="#代码级架构"><span>代码级架构</span></a></h3><ul><li>规范与原则 <ul><li>开发流程</li><li>代码质量以及改善</li><li>规范而非默契</li></ul></li></ul><p>注：</p><ul><li>在开发中，要注意可维护性</li><li>简单的代码可维护性高，越是写的抽象的代码越难维护。</li></ul><h2 id="架构的质量-稳定性和健壮性" tabindex="-1"><a class="header-anchor" href="#架构的质量-稳定性和健壮性"><span>架构的质量 - 稳定性和健壮性</span></a></h2><p>健壮性和稳定性是特定的软件自身的要求，是软件处理的一部分。是该软件规划时所确定的目标，若软件的实现未达原定目标，则该软件的健壮性和稳定性不够或不好。</p><h3 id="系统的稳定性" tabindex="-1"><a class="header-anchor" href="#系统的稳定性"><span>系统的稳定性</span></a></h3><ul><li>定义：当一个实际的系统处于一个平衡的状态时，如果受到外来作用的影响时，系统经过一个过渡过程仍然能过回到原来的平衡状态，我们称这个系统就是稳定的，否则称系统不稳定</li><li>架构设计的基石</li><li>可以更好的实现自我修复</li></ul><h3 id="系统的健壮性-鲁棒性" tabindex="-1"><a class="header-anchor" href="#系统的健壮性-鲁棒性"><span>系统的健壮性（鲁棒性）</span></a></h3><ul><li>定义：计算机软件在输入错误、磁盘故障、网络挂载或有意攻击情况下，能否不死机、不崩溃，就是该软件健壮性的具体表现。</li><li>解释：一个系统容错能力强，运行不易被干扰，安全性好。</li><li>系统健壮性的度量标准 <ul><li>一个软件可以从错误的输入推断出正确合理的输入</li><li>一个软件可以正确的运行在不同环境下</li><li>一个软件能够检测自己内部的设计或者编码错误，并得到正确的结果</li></ul></li></ul><h3 id="架构质量的衡量" tabindex="-1"><a class="header-anchor" href="#架构质量的衡量"><span>架构质量的衡量</span></a></h3><ul><li>拓展性</li><li>维护性</li><li>可管理</li><li>高可用（故障修复、容灾、降级、熔断）</li></ul><p>日常开发过程中的架构质量</p><ul><li>理解难度</li><li>接入依赖的成本</li><li>崩溃率和错误率的指标</li><li>开发效率</li><li>错误上报和信息收集等功能</li></ul><h2 id="架构的前期准备" tabindex="-1"><a class="header-anchor" href="#架构的前期准备"><span>架构的前期准备</span></a></h2><h3 id="架构师的分类" tabindex="-1"><a class="header-anchor" href="#架构师的分类"><span>架构师的分类</span></a></h3><p>系统架构师、应用架构师、业务架构师</p><h3 id="系统架构师" tabindex="-1"><a class="header-anchor" href="#系统架构师"><span>系统架构师</span></a></h3><ul><li>从系统的维度，负责整体系统的架构设计</li><li>主要是基础服务和各系统间协调，着眼全局</li><li>比如关注负载，可靠性，伸缩，扩展，整体项目切分，缓存应用等方面的基础架构设计。</li></ul><h3 id="应用架构师" tabindex="-1"><a class="header-anchor" href="#应用架构师"><span>应用架构师</span></a></h3><ul><li>从应用程序的维度，负责某个应用的技术架构，主要偏业务系统</li><li>关注理解业务，梳理模型，设计模式，接口，数据交互等方面</li></ul><h3 id="业务架构师" tabindex="-1"><a class="header-anchor" href="#业务架构师"><span>业务架构师</span></a></h3><ul><li>从业务流程的维度，关注某一个行业、业务的领域分析，获取领域模型，最终获得系统的模型。</li><li>也可以叫业务领域专家、行业专家、产品咨询师、资深顾问。</li></ul><h3 id="技术前期准备" tabindex="-1"><a class="header-anchor" href="#技术前期准备"><span>技术前期准备</span></a></h3><ul><li>技术选型：社区氛围、发展规模、未来发展趋势、与当前团队的契合度、执行成本、维护和迁移成本、执行效率等内容的调研和报告。 <ul><li>充分调研每一项技术可能带来的利与弊</li><li>最大程度上预测架构设计中的缺陷，以防止问题的发生</li></ul></li><li>技术优化：在架构发展过程中，可能会存在一些有悖于当前架构设计的实现，造成了架构发展阻塞，所以需要进行架构优化，使架构设计的适应性更高。</li><li>架构优化：架构不是一蹴而就的，在业务发展过程中，架构也在不断演进。对架构设计进行实时调优，使架构优化成为常态化。通过不断的调整架构实现，改进初始架构中设计的不足，补足短板。</li></ul><h2 id="技术债务填补与崩溃预防" tabindex="-1"><a class="header-anchor" href="#技术债务填补与崩溃预防"><span>技术债务填补与崩溃预防</span></a></h2><h3 id="技术债务填补" tabindex="-1"><a class="header-anchor" href="#技术债务填补"><span>技术债务填补</span></a></h3><p>产生原因</p><ul><li>开发过程中因为时间紧迫导致的实现不合理。比如：查找10000以内的指数，使用循环的方式查找 =&gt; 筛选法</li><li>暂时没有想到更好的实现方式而妥协的版本。比如：使用 if...else... 实现 =&gt; 使用责任链模式</li><li>架构设计前期没有考虑到的细节。比如：使用 props 传递参数（交互冗余，流程过长） =&gt; 使用全局状态管理实现参数传递</li><li>不合理的交互设计，导致技术实现复杂。</li><li>旧功能文档缺失，无正确拓展、修改和兼容旧功能，导致上线后问题剧增。 =? 兼容旧功能，转换为新架构实现</li></ul><p>后果</p><ul><li>修复变重构</li><li>小的技术债务不做偿还，最后会演变成一场大规模的重构工作，导致产出不高。</li><li>影响开发速度</li><li>技术债务的存在导致整体开发需要兼容的点过多，影响开发效率，极大影响上线速度，导致整体项目迭代缓慢，失去核心竞争力。</li><li>容易陷入: 维护旧功能 -&gt; 开发新功能 -&gt; 兼容旧功能 -&gt; 维护旧功能 -&gt; 开发新功能 ... 的恶性循环</li></ul><p>解决方案</p><ul><li>优秀的架构设计是基础</li><li>必需能够有效处理当前的需求可预见的情况，对未知的、可能出现的特殊情况，很小的改动就能解决问题</li><li>根据当前的业务，进行合理的项目拆分，尽量的代码解耦和。必须有日志模块，操作日志，错误日志，业务日志等等</li><li>良好的技术培训和传帮带能力。让每一位开发者可以从更深一层次理解自己所需要实现的功能</li><li>从最开始的代码规范、到熟悉业务、最后再到编写文档</li><li>充分的技术方案可以避免一部分技术债务的产生。技术方案是充分理解需求之后所能产出的对需求理想的实现方式，必要性不言而喻。</li><li>不同工程师之间可以相互review。CodeReview 是非常重要的，同时也是对自身的一个提高</li><li>提升对修复技术债务重要性的认知，工程师如果能预见一个债务可能导致的问题，自然愿意花时间去处理。</li></ul><h3 id="预防架构崩溃" tabindex="-1"><a class="header-anchor" href="#预防架构崩溃"><span>预防架构崩溃</span></a></h3><ul><li>架构崩溃是严重的架构设计事故，也是我们需要预防的关键所在。系统崩溃的产生，日志记录，如：操作日志、错误日志、业务日志等。</li><li>用户行为抓取 -&gt; 争取在最新时间获取到用户操作链条</li><li>解决存量问题 -&gt; 技术债务</li><li>遏制新增 -&gt; 减少新增问题的概率</li><li>对脏数据进行兜底和检验</li><li>单元测试</li><li>崩溃报警</li><li>自动化测试</li><li>更广度的灰度触达</li><li>性能优化体系</li></ul><h2 id="系统重构" tabindex="-1"><a class="header-anchor" href="#系统重构"><span>系统重构</span></a></h2><p>架构不是永恒不变的。架构也具有生命周期，也会经理初生、发展、巅峰、衰弱、消亡的过程</p><p>重构：对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。</p><p>实现方式：使用一系列重构手法，在不改变软件可观察行为的前提下，调整其结构</p><p>重构理念：运用大量微小且保持软件行为的步骤，一步步达成大规模的修改。</p><p>当发现一个现有架构体系已经不能满足当前迭代速度的时候就需要进行重构工作。</p><p>重构流程：</p><ul><li>确定问题点，确定重构功能和范围</li><li>旧架构设计和逻辑梳理</li><li>稳定性保证</li><li>性能保证</li><li>需求过程中的冲突问题</li></ul>',87)]))}const d=i(h,[["render",s]]),o=JSON.parse('{"path":"/%E6%9E%B6%E6%9E%84/%E5%9F%BA%E7%A1%80/","title":"软件设计原则与分层","lang":"zh-CN","frontmatter":{"description":"软件设计原则与分层 软件设计原则 单一职责原则 永远不应该有多于一个原因来改变某个类。 理解：对于一个类而言，应该仅有一个引起它变化的原因。 应用：如果一个类拥有了两种职责，那就可以将这个类分成两个类。 开放封闭原则 软件实体扩展应该是开放的，但对于修改应该是封闭的。 理解：对扩展开放，对修改封闭。可以去扩展类，但不要去修改类。 应用：当需求有改动，尽...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"软件设计原则与分层\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-28T08:18:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E6%9E%B6%E6%9E%84/%E5%9F%BA%E7%A1%80/"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"软件设计原则与分层"}],["meta",{"property":"og:description","content":"软件设计原则与分层 软件设计原则 单一职责原则 永远不应该有多于一个原因来改变某个类。 理解：对于一个类而言，应该仅有一个引起它变化的原因。 应用：如果一个类拥有了两种职责，那就可以将这个类分成两个类。 开放封闭原则 软件实体扩展应该是开放的，但对于修改应该是封闭的。 理解：对扩展开放，对修改封闭。可以去扩展类，但不要去修改类。 应用：当需求有改动，尽..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-28T08:18:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-28T08:18:46.000Z"}]]},"git":{"createdTime":1633968478000,"updatedTime":1740730726000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"837233792@qq.com","commits":1,"url":"https://github.com/lrh21g"},{"name":"lingronghai","username":"lingronghai","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lingronghai"},{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":11.16,"words":3348},"filePathRelative":"架构/基础/README.md","excerpt":"\\n<h2>软件设计原则</h2>\\n<h3>单一职责原则</h3>\\n<ul>\\n<li>永远不应该有多于一个原因来改变某个类。</li>\\n<li>理解：对于一个类而言，应该仅有一个引起它变化的原因。</li>\\n<li>应用：如果一个类拥有了两种职责，那就可以将这个类分成两个类。</li>\\n</ul>\\n<h3>开放封闭原则</h3>\\n<ul>\\n<li>软件实体扩展应该是开放的，但对于修改应该是封闭的。</li>\\n<li>理解：对扩展开放，对修改封闭。可以去扩展类，但不要去修改类。</li>\\n<li>应用：当需求有改动，尽量用继承或组合的方式来扩展类的功能，而不是直接修改类的代码。</li>\\n</ul>","autoDesc":true}');export{d as comp,o as data};
