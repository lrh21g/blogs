import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as a,o as t}from"./app-CwERxs91.js";const l={};function n(h,i){return t(),e("div",null,i[0]||(i[0]=[a(`<h1 id="css-操作" tabindex="-1"><a class="header-anchor" href="#css-操作"><span>CSS 操作</span></a></h1><h2 id="操作元素节点的-style-属性" tabindex="-1"><a class="header-anchor" href="#操作元素节点的-style-属性"><span>操作元素节点的 style 属性</span></a></h2><p>操作 HTML 元素的 <code>style</code> 属性：</p><ul><li><p>使用元素节点的相关方法操作 <code>style</code> 属性</p><ul><li><p><code>element.getAttribute()</code></p><p><strong>语法</strong> ： <code>element.getAttribute(attributeName)</code></p><p><strong>描述</strong> ： 返回当前元素的 <code>attributeName</code> 属性值。</p></li><li><p><code>element.setAttribute()</code></p><p><strong>语法</strong> ： <code>element.setAttribute(attributeName, attributeValue)</code></p><p><strong>描述</strong> ： 设置当前元素的 <code>attributeName</code> 属性值为 <code>attributeValue</code>。如果已存在，则更新属性值。</p></li><li><p><code>element.removeAttribute()</code></p><p><strong>语法</strong> ： <code>element.removeAttribute(attributeName)</code></p><p><strong>描述</strong> ： 移除当前元素的 <code>attributeName</code> 属性。</p></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &lt;div id=&quot;divId&quot; style=&quot;color: red; font-size: 20px&quot;&gt;div content&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> divDOM</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getElementById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;divId&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">divDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;style&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// color: red; font-size: 20px</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">divDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;style&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;color: blue; font-size: 30px&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>style</code> 属性不仅可以使用字符串读写，其本身也是一个对象（<code>CSSStyleDeclaration</code> 接口），可以直接读写个别属性</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &lt;div id=&quot;divId&quot; style=&quot;color: red; font-size: 20px&quot;&gt;div content&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> divDOM</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getElementById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;divId&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">divDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">color</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // red</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">divDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">fontSize</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 20px</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">divDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">color</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;blue&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">divDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">fontSize</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;30px&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="cssstyledeclaration-接口" tabindex="-1"><a class="header-anchor" href="#cssstyledeclaration-接口"><span>CSSStyleDeclaration 接口</span></a></h2><p><code>CSSStyleDeclaration</code> 接口表示一个 CSS 声明块，它是一个 CSS 属性及其值的有序映射表，提供样式信息和各种与样式相关的属性方法和属性。以下 API 返回该接口实例：</p><ul><li><code>HTMLElement.style</code> ，用于操作单个元素节点 <code>style</code> 属性。该实例<strong>只返回行内样式</strong>，并不包含外部样式表和嵌入样式表。</li><li><code>CSSStyleSheet</code> 实例，用于操作单个 CSS 规则的 <code>style</code> 属性。例如 <code>document.styleSheets[0].cssRules[0].style</code> 返回文档中第一个样式表的第一条 CSS 规则。</li><li><code>window.getComputedStyle()</code> 返回值。</li></ul><p><code>style</code> 属性的值是一个 <code>CSSStyleDeclaration</code> 实例，对象中的属性与 CSS 规则一一对应。</p><ul><li>CSS 属性中的连字符 <code>-</code> 需转换为驼峰命名法，例如 <code>background-color</code> 转换为 <code>backgroundColor</code>。</li><li>如果 CSS 属性名是 JavaScript 中的保留字，则需在 CSS 属性名前添加 <code>&#39;css&#39;</code> 。例如 <code>float</code> 转换为 <code>style[&#39;float&#39;]</code>。</li><li>对象属性值为字符串，设置时需添加单位，例如 <code>style.width = &#39;100px&#39;</code>。</li></ul><h3 id="cssstyledeclaration-实例属性" tabindex="-1"><a class="header-anchor" href="#cssstyledeclaration-实例属性"><span>CSSStyleDeclaration 实例属性</span></a></h3><ul><li><code>CSSStyleDeclaration.cssFloat</code> ：返回 <code>float</code> 属性值。如果属性名为 JavaScript 中的保留字，则需使用 <code>cssFloat</code> 代替 <code>float</code> 。</li><li><code>CSSStyleDeclaration.cssText</code> ：获取或设置 CSS 声明块的文本内容。可以使用 <code>element.style.cssText = &#39;&#39;</code> 删除元素的所有行内样式。</li><li><code>CSSStyleDeclaration.length</code> ：返回当前 CSS 声明块中声明的 CSS 属性数量。</li><li><code>CSSStyleDeclaration.parentRule</code> ：返回包含当前 CSS 声明块的 CSS 规则（<code>CSSRule</code> 实例）。</li></ul><h3 id="cssstyledeclaration-实例方法" tabindex="-1"><a class="header-anchor" href="#cssstyledeclaration-实例方法"><span>CSSStyleDeclaration 实例方法</span></a></h3><ul><li><p><code>element.style.getPropertyPriority()</code></p><p><strong>语法</strong> ： <code>element.style.getPropertyPriority(property)</code></p><p><strong>描述</strong> ： 返回 <code>property</code> 属性的优先级。如果存在则返回 <code>&quot;important&quot;</code> 否则返回空字符串。</p></li><li><p><code>element.style.getPropertyValue()</code></p><p><strong>语法</strong> ： <code>element.style.getPropertyValue(property)</code></p><p><strong>描述</strong> ： 返回 <code>property</code> 属性的值。</p></li><li><p><code>element.style.item()</code></p><p><strong>语法</strong> ： <code>element.style.item(index)</code></p><p><strong>描述</strong> ： 返回 <code>index</code> 位置的 CSS 属性名。</p><ul><li>如果未提供 <code>index</code> ，则会报错。</li><li>如果 <code>index</code> 超出范围，则返回 <code>null</code> 。</li></ul></li><li><p><code>element.style.removeProperty()</code></p><p><strong>语法</strong> ： <code>element.style.removeProperty(property)</code></p><p><strong>描述</strong> ： 移除 <code>property</code> 属性，并返回移除的属性值。</p></li><li><p><code>element.style.setProperty()</code></p><p><strong>语法</strong> ： <code>element.style.setProperty(property, value, priority)</code></p><p><strong>描述</strong> ： 设置 <code>property</code> 属性的值为 <code>value</code> ，优先级为 <code>priority</code> 。<code>value</code> 和 <code>priority</code> 可选。</p></li></ul><h2 id="css-属性检测" tabindex="-1"><a class="header-anchor" href="#css-属性检测"><span>CSS 属性检测</span></a></h2><p>检测浏览器是否支持某个 CSS 属性。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> isPropertySupported</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">property</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">property</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefixes</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Moz&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Webkit&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;O&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;ms&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Khtml&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefProperty</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> property</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">charAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toUpperCase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> property</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">substr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> prefixes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">prefixes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefProperty</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isPropertySupported</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;background-clip&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="css-接口" tabindex="-1"><a class="header-anchor" href="#css-接口"><span>CSS 接口</span></a></h2><p>CSS 接口是一个工具接口，无法创建该类型的对象，但可以使用它的属性和方法。</p><ul><li><p>CSS 接口属性</p></li><li><p>CSS 接口方法</p><ul><li><p><code>CSS.escape()</code></p><p><strong>语法</strong> ： <code>CSS.escape(string)</code></p><p><strong>描述</strong> ： 转义 CSS 选择器中的特殊字符。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &lt;div id=&quot;foo#bar&quot;&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 元素 id 属性中包含了 # 字符，需要转义后，才能通过 document.querySelector 获取元素</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">querySelector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;#&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> CSS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">escape</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;foo#bar&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 即： document.querySelector(&#39;#foo\\\\#bar&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>CSS.supports()</code></p><p><strong>语法</strong> ： <code>CSS.supports(property, value)</code></p><p><strong>描述</strong> ： 检测浏览器是否支持某个 CSS 属性。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第一种写法</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">CSS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">supports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;transform-origin&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;5px&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第二种写法：不能带有分号，否则结果不准确</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">CSS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">supports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;display: table-cell&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="window-getcomputedstyle" tabindex="-1"><a class="header-anchor" href="#window-getcomputedstyle"><span>window.getComputedStyle()</span></a></h2><p><strong>语法</strong> ： <code>window.getComputedStyle(element, pseudoElement)</code></p><p><strong>描述</strong> ： 返回 <code>element</code> 元素的所有 CSS 属性（动态更新的 <code>CSSStyleDeclaration</code> 实例）。如果 <code>pseudoElement</code> 为 <code>null</code> ，则返回元素的所有 CSS 属性，否则返回伪元素的所有 CSS 属性。</p><ul><li><code>CSSStyleDeclaration</code> 实例返回的 CSS 值都是绝对单位。比如，长度是像素单位（返回值包括 <code>px</code> 后缀），颜色是 <code>rgb(#, #, #)</code>或 <code>rgba(#, #, #, #)</code> 格式。</li><li>CSS 规则的简写形式无效。比如，读取 <code>margin</code> 属性的值，不能直接读，只能读 <code>marginLeft</code> 、 <code>marginTop</code> 等属性； <code>font</code> 属性也是不能直接读的，只能读 <code>font-size</code> 等单个属性。</li><li>如果读取 CSS 原始的属性名，要用方括号运算符，比如：<code>styleObj[&#39;z-index&#39;]</code>；如果读取骆驼拼写法的 CSS 属性名，可以直接读取 <code>styleObj.zIndex</code>。</li><li>方法返回的 <code>CSSStyleDeclaration</code> 实例的 <code>cssText</code> 属性无效，返回 <code>undefined</code> 。</li></ul><p><strong>参数</strong> ：</p><ul><li><code>element</code> ：必选，要获取样式的元素节点。</li><li><code>pseudoElement</code> ：可选，伪元素（比如 <code>:before</code> 、 <code>:after</code> 、 <code>:first-line</code> 、 <code>:first-letter</code> 等）。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> div</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">querySelector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;div&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> styleObj</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getComputedStyle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">styleObj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">backgroundColor</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stylesheet-、-cssstylesheet-接口" tabindex="-1"><a class="header-anchor" href="#stylesheet-、-cssstylesheet-接口"><span>StyleSheet 、 CSSStyleSheet 接口</span></a></h2><p><code>StyleSheet</code> 接口表示一个样式表，包括 <code>&lt;style&gt;</code> 元素内嵌样式表、<code>&lt;link&gt;</code> 元素外部样式表。</p><ul><li><code>document.styleSheets</code> 返回当前文档中所有 <code>StyleSheet</code> 实例（即所有样式表）。</li><li>如果是 <code>&lt;style&gt;</code> 元素内嵌样式表，可以通过获取该元素的 <code>sheet</code> 属性获取 <code>StyleSheet</code> 实例。</li></ul><p><code>CSSStyleSheet</code> 接口表示一个 CSS 样式表，允许检查和编辑样式表中的 CSS 规则。从父类型 <code>StyleSheet</code> 继承属性和方法。</p><h3 id="stylesheet-、-cssstylesheet-实例属性" tabindex="-1"><a class="header-anchor" href="#stylesheet-、-cssstylesheet-实例属性"><span>StyleSheet 、 CSSStyleSheet 实例属性</span></a></h3><ul><li><p><code>StyleSheet.disabled</code> ：获取或设置样式表是否禁用。手动设置 <code>disabled</code> 属性为 <code>true</code>，等同于在 <code>&lt;link&gt;</code> 元素中设置 <code>alternate stylesheet</code>，表示该样式表不会生效。</p></li><li><p><code>StyleSheet.href</code> ：只读属性。返回样式表的 URL 地址。对于 <code>&lt;style&gt;</code> 元素内嵌样式表返回为 <code>null</code> 。</p></li><li><p><code>StyleSheet.media</code> ：返回 <code>MediaList</code> 实例对象，表示样式表的媒体类型。</p></li><li><p><code>StyleSheet.title</code> ：返回样式表的 <code>title</code> 标题属性。</p></li><li><p><code>StyleSheet.type</code> ：返回样式表的 <code>type</code> 类型属性，通常为 <code>text/css</code>。</p></li><li><p><code>StyleSheet.ownerNode</code> ：返回拥有当前样式表的节点，通常是 <code>&lt;style&gt;</code> 或 <code>&lt;link&gt;</code>。对于由其他样式表导入的样式表，返回 <code>null</code> 。</p></li><li><p><code>StyleSheet.parentStyleSheet</code> ：CSS 的 <code>@import</code> 命令允许在样式表中加载其他样式表，该属性返回包含当前样式表的样式表（<code>StyleSheet</code> 实例）。如果当前样式表是顶层样式表，则返回 <code>null</code> 。</p></li><li><p><code>CSSStyleSheet.cssRules</code> ：返回样式表的所有 CSS 规则（<code>CSSRuleList</code> 实例）。每条规则可以使用其 <code>cssText</code> 属性获取对应 CSS 规则的字符串，使用其 <code>style</code> 属性可以读写 CSS 规则的样式。</p></li><li><p><code>CSSStyleSheet.ownerRule</code> ：返回通过 <code>@import</code> 命令引入当前样式表的 CSS 规则（<code>CSSRule</code> 实例）。如果当前样式表不是由 <code>@import</code> 命令引入的，则返回 <code>null</code> 。</p></li></ul><h3 id="stylesheet-、-cssstylesheet-实例方法" tabindex="-1"><a class="header-anchor" href="#stylesheet-、-cssstylesheet-实例方法"><span>StyleSheet 、 CSSStyleSheet 实例方法</span></a></h3><ul><li><p><code>CSSStyleSheet.deleteRule()</code></p><p><strong>语法</strong> ： <code>CSSStyleSheet.deleteRule(index)</code></p><p><strong>描述</strong> ： 删除样式表中指定位置的 CSS 规则。</p></li><li><p><code>CSSStyleSheet.insertRule()</code></p><p><strong>语法</strong> ： <code>CSSStyleSheet.insertRule(rule, index)</code></p><p><strong>描述</strong> ： 在样式表中指定位置 <code>index</code> （可选，默认值为 <code>0</code>）插入 CSS 规则 <code>rule</code> ，并返回新插入规则的位置索引。</p><ul><li>如果插入位置大于现有规则的数目，会报错。</li><li>浏览器对脚本在样式表里面插入规则有很多限制，最好放在 <code>try...catch</code> 里使用。</li></ul></li><li><p><code>CSSStyleSheet.replace()</code></p><p><strong>语法</strong> ： <code>CSSStyleSheet.replace(text)</code></p><p><strong>描述</strong> ： 以异步方式将样式表的内容替换为传入的内容 <code>text</code> 。返回一个与 <code>CSSStyleSheet</code> 对象解析的 <code>Promise</code> 。</p></li><li><p><code>CSSStyleSheet.replaceSync()</code></p><p><strong>语法</strong> ： <code>CSSStyleSheet.replaceSync(text)</code></p><p><strong>描述</strong> ： 以同步方式将样式表的内容替换为传入的内容 <code>text</code> 。</p></li></ul><h2 id="cssrulelist-接口" tabindex="-1"><a class="header-anchor" href="#cssrulelist-接口"><span>CSSRuleList 接口</span></a></h2><p>CSS 规则列表 <code>CSSRuleList</code> 是一个只读的类数组对象，包含了 CSS 规则（<code>CSSRule</code> 实例）。</p><ul><li>获取 <code>CSSRuleList</code> 实例，一般通过 <code>StyleSheet.cssRules</code> 属性获取。</li><li><code>CSSRuleList</code> 实例中，每一条 CSS 规则（<code>CSSRule</code> 实例）可以通过 <code>rules.item(index)</code> 或 <code>rules[index]</code> 获取。</li><li>CSS 规则的条数可以通过 <code>rules.length</code> 获取。</li><li>添加或删除规则不能在 <code>CSSRuleList</code> 实例操作，只能在父元素 <code>StyleSheet</code> 实例上操作，可以通过 <code>CSSStyleSheet.insertRule()</code> 和 <code>CSSStyleSheet.deleteRule()</code> 方法。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &lt;style id=&quot;myStyle&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//   h1 { color: red; }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//   p { color: blue; }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &lt;/style&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> styleSheet</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getElementById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;myStyle&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">sheet</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> cssRuleList</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> styleSheet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cssRules</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cssrule-接口" tabindex="-1"><a class="header-anchor" href="#cssrule-接口"><span>CSSRule 接口</span></a></h2><p><code>CSSRule</code> 接口表示一条 CSS 规则。JavaScript 通过 <code>CSSRule</code> 接口操作 CSS 规则，一般通过 <code>CSSRuleList</code> 实例（<code>StyleSheet.cssRules</code>）获取 <code>CSSRule</code> 实例。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &lt;style id=&quot;myStyle&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//   .myClass {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//     color: red;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//     background-color: yellow;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//   }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &lt;/style&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> styleSheet</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getElementById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;myStyle&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">sheet</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> cssRuleList</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> styleSheet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cssRules</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ruleItem</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> cssRuleList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CSSRule</code> 实例属性：</p><ul><li><p><code>CSSRule.cssText</code> ：获取或设置 CSS 规则的文本内容。如果 CSS 规则是通过 <code>@import</code> 命令引入的，则返回 <code>@import &#39;url&#39;</code> 。</p></li><li><p><code>CSSRule.parentStyleSheet</code> ：返回包含当前 CSS 规则的样式表（<code>StyleSheet</code> 实例）。</p></li><li><p><code>CSSRule.parentRule</code> ：返回包含当前 CSS 规则父规则。如果不存在父规则（即当前规则为顶层规则），则返回 <code>null</code> 。</p></li></ul><h2 id="cssstylerule-接口" tabindex="-1"><a class="header-anchor" href="#cssstylerule-接口"><span>CSSStyleRule 接口</span></a></h2><p><code>CSSStyleRule</code> 接口表示一条 CSS 样式规则，继承自 <code>CSSRule</code> 接口。</p><p><code>CSSStyleRule</code> 实例属性：</p><ul><li><p><code>CSSStyleRule.selectorText</code> ：获取或设置当前规则的 CSS 选择器。</p></li><li><p><code>CSSStyleRule.style</code> ：返回 <code>CSSStyleDeclaration</code> 实例，表示 CSS 规则的样式声明（即选择器后大括号中的部分）。<code>CSSStyleDeclaration</code> 实例的 <code>cssText</code> 属性，返回样式声明的文本内容。</p></li></ul><h2 id="cssmediarule-接口" tabindex="-1"><a class="header-anchor" href="#cssmediarule-接口"><span>CSSMediaRule 接口</span></a></h2><p><code>CSSMediaRule</code> 接口表示单个 CSS <code>@media</code> 规则。</p><p><code>CSSMediaRule</code> 实例属性：</p><ul><li><code>CSSMediaRule.media</code> ：返回 <code>MediaList</code> 实例，表示 <code>@media</code> 规则的对象。</li><li><code>CSSMediaRule.conditionText</code> ：返回 <code>@media</code> 规则的生效条件。</li></ul><h2 id="window-matchmedia" tabindex="-1"><a class="header-anchor" href="#window-matchmedia"><span>window.matchMedia()</span></a></h2><p><strong>语法</strong> ： <code>window.matchMedia(mediaQueryString)</code></p><p><strong>描述</strong> ： 返回 <code>MediaQueryList</code> 实例，表示指定的媒体查询字符串 <code>mediaQueryString</code> 是否匹配当前文档。</p><ul><li><p><code>MediaQueryList</code> 实例属性</p><ul><li><code>MediaQueryList.matches</code> ：返回布尔值，表示指定的媒体查询字符串是否匹配当前文档。</li><li><code>MediaQueryList.media</code> ：返回媒体查询字符串。</li></ul></li><li><p><code>MediaQueryList</code> 实例方法</p><ul><li><code>MediaQueryList.onchange</code> ：监听函数，当媒体查询字符串匹配当前文档时，执行监听函数。</li><li><code>MediaQueryList.addListener()</code> ：添加监听函数。当媒体查询字符串匹配当前文档时，执行监听函数。</li><li><code>MediaQueryList.removeListener()</code> ：移除监听函数。</li></ul></li></ul>`,55)]))}const k=s(l,[["render",n]]),r=JSON.parse(`{"path":"/%E5%89%8D%E7%AB%AF/JavaScript/DOM/css.html","title":"CSS 操作","lang":"zh-CN","frontmatter":{"description":"CSS 操作 操作元素节点的 style 属性 操作 HTML 元素的 style 属性： 使用元素节点的相关方法操作 style 属性 element.getAttribute() 语法 ： element.getAttribute(attributeName) 描述 ： 返回当前元素的 attributeName 属性值。 element.setA...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSS 操作\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-28T08:18:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF/JavaScript/DOM/css.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"CSS 操作"}],["meta",{"property":"og:description","content":"CSS 操作 操作元素节点的 style 属性 操作 HTML 元素的 style 属性： 使用元素节点的相关方法操作 style 属性 element.getAttribute() 语法 ： element.getAttribute(attributeName) 描述 ： 返回当前元素的 attributeName 属性值。 element.setA..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-28T08:18:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-28T08:18:46.000Z"}]]},"git":{"createdTime":1699120295000,"updatedTime":1740730726000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh21g"},{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":7.83,"words":2350},"filePathRelative":"前端/JavaScript/DOM/css.md","excerpt":"\\n<h2>操作元素节点的 style 属性</h2>\\n<p>操作 HTML 元素的 <code>style</code> 属性：</p>\\n<ul>\\n<li>\\n<p>使用元素节点的相关方法操作 <code>style</code> 属性</p>\\n<ul>\\n<li>\\n<p><code>element.getAttribute()</code></p>\\n<p><strong>语法</strong> ： <code>element.getAttribute(attributeName)</code></p>\\n<p><strong>描述</strong> ： 返回当前元素的 <code>attributeName</code> 属性值。</p>\\n</li>\\n<li>\\n<p><code>element.setAttribute()</code></p>\\n<p><strong>语法</strong> ： <code>element.setAttribute(attributeName, attributeValue)</code></p>\\n<p><strong>描述</strong> ： 设置当前元素的 <code>attributeName</code> 属性值为 <code>attributeValue</code>。如果已存在，则更新属性值。</p>\\n</li>\\n<li>\\n<p><code>element.removeAttribute()</code></p>\\n<p><strong>语法</strong> ： <code>element.removeAttribute(attributeName)</code></p>\\n<p><strong>描述</strong> ： 移除当前元素的 <code>attributeName</code> 属性。</p>\\n</li>\\n</ul>\\n<div class=\\"language-javascript line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"javascript\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-javascript\\"><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// &lt;div id=\\"divId\\" style=\\"color: red; font-size: 20px\\"&gt;div content&lt;/div&gt;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">let</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> divDOM</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> document</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">getElementById</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'divId'</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">divDOM</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">getAttribute</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'style'</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">) </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// color: red; font-size: 20px</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">divDOM</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">setAttribute</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'style'</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'color: blue; font-size: 30px'</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><code>style</code> 属性不仅可以使用字符串读写，其本身也是一个对象（<code>CSSStyleDeclaration</code> 接口），可以直接读写个别属性</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"javascript\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-javascript\\"><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// &lt;div id=\\"divId\\" style=\\"color: red; font-size: 20px\\"&gt;div content&lt;/div&gt;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">let</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> divDOM</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> document</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">getElementById</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'divId'</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">divDOM</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">style</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">color</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> // red</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">divDOM</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">style</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">fontSize</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> // 20px</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">divDOM</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">style</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">color</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 'blue'</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">divDOM</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">style</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">fontSize</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> '30px'</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>","autoDesc":true}`);export{k as comp,r as data};
