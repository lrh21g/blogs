import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as a,o as l}from"./app-CwERxs91.js";const n="/blogs/assets/HRM.drawio-DuX-4wle.png",h={};function t(p,s){return l(),e("div",null,s[0]||(s[0]=[a(`<h1 id="webpack-dev-server-本地开发服务" tabindex="-1"><a class="header-anchor" href="#webpack-dev-server-本地开发服务"><span>Webpack Dev Server 本地开发服务</span></a></h1><p><code>webpack-dev-server</code> 是一个基于 Express 的本地开发服务器。它使用 <code>webpack-dev-middleware</code> 中间件来为通过 Webpack 打包生成的资源文件提供 Web 服务。它还有一个通过 Socket IO 连接着 <code>webpack-dev-server</code> 服务器的小型运行时程序。<code>webpack-dev-server</code> 发送关于编译状态的消息到客户端，客户端根据消息作出响应。</p><h2 id="常用配置" tabindex="-1"><a class="header-anchor" href="#常用配置"><span>常用配置</span></a></h2><h3 id="devserver-publicpath" tabindex="-1"><a class="header-anchor" href="#devserver-publicpath"><span>devServer.publicPath</span></a></h3><p><code>devServer.publicPath</code> ：指定本地服务所在的文件夹。</p><ul><li>默认值为 <code>/</code>，直接访问端口，即可访问其中的资源。（eg: <code>http://localhost:8080</code>）</li><li>设置为 <code>/abc</code>，则需要通过 <code>http://localhost:8080/abc</code> 才可访问到对应打包后的资源。此时，必须将 <code>output.publicPath</code> 也设置为 <code>/abc</code></li><li>建议 <code>devServer.publicPath</code> 与 <code>output.publicPath</code> 相同</li></ul><p><code>output.path</code> ：webpack 资源输出路径。</p><p><code>output.publicPath</code> ：是指定 <code>index.html</code> 文件打包引用的一个基本路径。（指定在浏览器中所引用的 <strong>此输出目录对应的公开 URL</strong>。）</p><ul><li>默认值为 <code>&#39;&#39;</code>（空字符串）</li><li>开发过程中，设置为 <code>/</code>，则访问资源路径为 <code>/bundle.js</code>。浏览器根据 <strong>所在的域名+路径</strong> 请求对应资源</li><li>如希望在本地直接打开 html 文件来运行，则设置为 <code>./</code>，访问资源路径为 <code>./bundle.js</code>，可以根据相对路径查找资源。</li></ul><h3 id="devserver-contentbase" tabindex="-1"><a class="header-anchor" href="#devserver-contentbase"><span>devServer.contentBase</span></a></h3><p><code>devServer.contentBase</code> ：如果打包后的资源，又依赖于其他的一些资源，那么就需要指定从哪里来查找。</p><p>在 <code>index.html</code> 中，依赖 <code>abc.js</code> 文件，文件存放于 <code>public/</code> 文件夹中。在 <code>index.html</code> 中，通过 <code>&lt;script src=&quot;/abc.js&quot;&gt;&lt;/script&gt;</code> 引入文件。此时，设置 <code>devServer.contentBase</code> 即可。</p><h3 id="devserver-hotonly" tabindex="-1"><a class="header-anchor" href="#devserver-hotonly"><span>devServer.hotOnly</span></a></h3><p><code>devServer.hotOnly</code> ：当代码编译失败时，是否刷新整个页面</p><ul><li>默认情况下，当代码编译失败修复后，会重新刷新整个页面</li><li>如果不希望重新刷新整个页面，可以设置 <code>hotOnly</code> 为 <code>true</code></li></ul><h3 id="devserver-host" tabindex="-1"><a class="header-anchor" href="#devserver-host"><span>devServer.host</span></a></h3><p><code>devServer.host</code> ：指定 host，默认值为 <code>localhost</code>，使用 <code>0.0.0.0</code> 可以让局域网内访问。</p><p><code>localhost</code> 和 <code>0.0.0.0</code> 的区别：</p><ul><li><code>localhost</code> ：本质上是一个域名，通常情况下会被解析成 <code>127.0.0.1</code></li><li><code>127.0.0.1</code> ：回环地址(Loop Back Address)，指主机自己发出去的包，直接被自己接收 <ul><li>正常的数据库包经过：应用层 - 传输层 - 网络层 - 数据链路层 - 物理层</li><li>回环地址，是在网络层直接就被获取到了，是不会经过数据链路层和物理层的;</li><li>监听 <code>127.0.0.1</code> 时，在同一个网段下的主机中，通过 IP地址 是不能访问的</li></ul></li><li><code>0.0.0.0</code> ：监听 IPV4上所有的地址，再根据端口找到不同的应用程序。 <ul><li>监听 <code>0.0.0.0</code> 时，在同一个网段下的主机中，通过 IP地址 是可以访问的</li></ul></li></ul><h3 id="devserver-port" tabindex="-1"><a class="header-anchor" href="#devserver-port"><span>devServer.port</span></a></h3><p><code>devServer.port</code> ：监听端口号，默认 <code>8080</code></p><h3 id="devserver-open" tabindex="-1"><a class="header-anchor" href="#devserver-open"><span>devServer.open</span></a></h3><p><code>devServer.open</code> ：启动后，是否自动使用浏览器打开首页。默认值为 <code>false</code></p><h3 id="devserver-compress" tabindex="-1"><a class="header-anchor" href="#devserver-compress"><span>devServer.compress</span></a></h3><p><code>devServer.compress</code> ：是否启用 gzip 压缩。默认值为 <code>false</code></p><h3 id="devserver-proxy" tabindex="-1"><a class="header-anchor" href="#devserver-proxy"><span>devServer.proxy</span></a></h3><p><code>devServer.proxy</code> ：设置代理，可用来解决跨域访问的问题。常用设置如下：</p><ul><li><code>proxy.target</code> ：表示的是代理到的目标地址，比如 <code>/api/moment</code> 会被代理到 <code>http://localhost:8888/api/moment</code></li><li><code>proxy.pathRewrite</code> ：默认情况下，设置的 <code>/api</code> 也会被写入到 URL 中，如果希望删除，可以使用 <code>pathRewrite</code></li><li><code>proxy.secure</code> ：默认情况下，不接受在 HTTPS 上运行且证书无效的后端服务器，如果需要，可以设置为 <code>false</code></li><li><code>proxy.changeOrigin</code> ：表示是否更新代理后请求的 <code>headers</code> 中 <code>host</code> 地址</li><li><code>proxy.bypass</code> ：如果不想代理所有内容。可以基于函数的返回值绕过代理。 <ul><li>返回 <code>null</code> 或 <code>undefined</code> ，继续使用代理处理请求</li><li>返回 <code>false</code> ，为请求产生 404 错误</li><li>返回提供服务的路径，而不是继续代理请求</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  devServer</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    proxy</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &#39;/api&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        target</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;http://localhost:8888&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        pathRewrite</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;^/api&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        secure</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 对于浏览器请求，想要提供 HTML 页面，但是对于 API 请求，想要代理它。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        bypass</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">req</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">proxyOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">          if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">req</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">headers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">accept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">indexOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">!==</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">            console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Skipping proxy for browser request.&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/index.html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="devserver-historyapifallback" tabindex="-1"><a class="header-anchor" href="#devserver-historyapifallback"><span>devServer.historyApiFallback</span></a></h3><p><code>devServer.historyApiFallback</code>：解决 SPA 页面在路由跳转之后，进行页面刷新时，返回 404 的错误。即：配置如果找不到页面就默认显示的页面。</p><ul><li><p>Boolean 值：默认为 <code>false</code> 。设置为 <code>true</code>，在刷新时，返回 404 错误时，会自动返回 <code>index.html</code> 的内容</p></li><li><p>Object 值，可以配置 <code>rewrites</code> 属性，通过配置 <code>from</code> 来匹配路径，决定要跳转到哪一个页面</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  devServer</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    historyApiFallback</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      rewrites</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">from</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">^</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">to</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/views/landing.html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">from</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">^</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\/</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">subpage/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">to</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/views/subpage.html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">from</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">to</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/views/404.html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      ],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>注：事实上 <code>devServer</code> 中实现 <code>historyApiFallback</code> 功能，是通过 <code>connect-history-api-fallback</code> 库实现的</p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><ul><li><code>devServer.inline</code>：模式切换，默认为内联模式，使用 <code>false</code> 切换到 <code>iframe</code> 模式；</li><li><code>devServer.openPage</code>：启动后，自动使用浏览器打开设置的页面；</li><li><code>devServer.overlay</code>：是否允许使用全屏覆盖的方式显示编译错误，默认不允许；</li><li><code>devServer.staticOptions</code>：为 Expressjs 的 <code>express.static</code> 配置参数，参考文档： <a href="http://expressjs.com/en/4x/api.html#express.static" target="_blank" rel="noopener noreferrer">http://expressjs.com/en/4x/api.html#express.static</a></li><li><code>devServer.clientLogLevel</code>：在 <code>inline</code> 模式下用于控制在浏览器中打印的 log 级别，如<code>error</code>, <code>warning</code>, <code>info</code> or <code>none</code>；</li><li><code>devServer.quiet</code>：静默模式，设置为 <code>true</code> ，则不在控制台输出 log；</li><li><code>devServer.noInfo</code>：不输出启动 log；</li><li><code>devServer.lazy</code>: 不监听文件变化，而是当请求来的时候再重新编译；</li><li><code>devServer.watchOptions</code>：watch 相关配置，可以用于控制间隔多少秒检测文件的变化；</li><li><code>devServer.headers</code>：自定义请求头，例如自定义 <code>userAgent</code> 等；</li><li><code>devServer.https</code>：<code>https</code> 需要的证书签名等配置。</li></ul><h2 id="hmr-hot-module-replacement-模块热替换" tabindex="-1"><a class="header-anchor" href="#hmr-hot-module-replacement-模块热替换"><span>HMR（Hot Module Replacement，模块热替换）</span></a></h2><p><code>HMR</code>（Hot Module Replacement，模块热替换） ：在应用程序运行过程中，替换、添加、删除模块，而无需重新刷新整个页面。</p><p>Webpack 可以通过配置 <code>webpack.HotModuleReplacementPlugin</code> 插件来开启全局的 <code>HMR</code> 能力，开启后 <code>bundle</code> 文件会变大一些，因为它加入了一个小型的 <code>HMR</code> 运行时（runtime），当在运行的时候，Webpack 监听到文件变更并重新打包模块时，HMR 会判断这些模块是否接受 update，若允许，则发信号通知应用进行热替换。</p><h3 id="hmr-配置" tabindex="-1"><a class="header-anchor" href="#hmr-配置"><span>HMR 配置</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> webpack</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;webpack&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  entry</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    app</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./src/index.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  devServer</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    port</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8888</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    hot</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 开启 HMR 支持</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  plugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 添加 HMR plugin</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> webpack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">HotModuleReplacementPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hrm原理" tabindex="-1"><a class="header-anchor" href="#hrm原理"><span>HRM原理</span></a></h3><p><code>webpack-dev-server</code> 会创建两个服务：提供静态资源的服务（<code>express</code>）和 Socket 服务（<code>net.Socket</code>）</p><ul><li><code>express server</code> ：负责直接提供静态资源的服务（打包后的资源直接被浏览器请求和解析）</li><li><code>HMR Socket Server</code>，是一个 socket 的长连接： <ul><li><strong>长连接</strong>的好处是：建立连接后双方可以通信（服务器可以直接发送文件到客户端）；</li><li>当服务器监听到对应的模块发生变化时，会生成两个文件 <code>.json</code> （manifest文件）和 <code>.js</code> 文件（update chunk）；</li><li>通过长连接，可以直接将这两个文件主动发送给客户端（浏览器）；</li><li>浏览器拿到两个新的文件后，通过 <code>HMR runtime</code> 机制，加载这两个文件，并且针对修改的模块进行更新</li></ul></li></ul><p><img src="`+n+'" alt="HRM"></p>',44)]))}const k=i(h,[["render",t]]),c=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/devServer.html","title":"Webpack Dev Server 本地开发服务","lang":"zh-CN","frontmatter":{"description":"Webpack Dev Server 本地开发服务 webpack-dev-server 是一个基于 Express 的本地开发服务器。它使用 webpack-dev-middleware 中间件来为通过 Webpack 打包生成的资源文件提供 Web 服务。它还有一个通过 Socket IO 连接着 webpack-dev-server 服务器的小型...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Webpack Dev Server 本地开发服务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-28T08:18:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/devServer.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"Webpack Dev Server 本地开发服务"}],["meta",{"property":"og:description","content":"Webpack Dev Server 本地开发服务 webpack-dev-server 是一个基于 Express 的本地开发服务器。它使用 webpack-dev-middleware 中间件来为通过 Webpack 打包生成的资源文件提供 Web 服务。它还有一个通过 Socket IO 连接着 webpack-dev-server 服务器的小型..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-28T08:18:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-28T08:18:46.000Z"}]]},"git":{"createdTime":1649339546000,"updatedTime":1740730726000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"837233792@qq.com","commits":1,"url":"https://github.com/lrh21g"},{"name":"lingronghai","username":"lingronghai","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lingronghai"},{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":5.68,"words":1705},"filePathRelative":"前端框架/Webpack/Webpack基础/devServer.md","excerpt":"\\n<p><code>webpack-dev-server</code> 是一个基于 Express 的本地开发服务器。它使用 <code>webpack-dev-middleware</code> 中间件来为通过 Webpack 打包生成的资源文件提供 Web 服务。它还有一个通过 Socket IO 连接着 <code>webpack-dev-server</code> 服务器的小型运行时程序。<code>webpack-dev-server</code> 发送关于编译状态的消息到客户端，客户端根据消息作出响应。</p>\\n<h2>常用配置</h2>\\n<h3>devServer.publicPath</h3>","autoDesc":true}');export{k as comp,c as data};
