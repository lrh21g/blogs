import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d,o}from"./app-CwERxs91.js";const t={};function l(n,e){return o(),i("div",null,e[0]||(e[0]=[d(`<h1 id="网络请求" tabindex="-1"><a class="header-anchor" href="#网络请求"><span>网络请求</span></a></h1><h2 id="xmlhttprequest-对象" tabindex="-1"><a class="header-anchor" href="#xmlhttprequest-对象"><span>XMLHttpRequest 对象</span></a></h2><p><code>XMLHttpRequest</code>（XHR）对象用于与服务器交互。通过 <code>XMLHttpRequest</code> 可以在不刷新页面的情况下请求特定 URL，获取数据。</p><h3 id="xmlhttprequest-实例属性" tabindex="-1"><a class="header-anchor" href="#xmlhttprequest-实例属性"><span>XMLHttpRequest 实例属性</span></a></h3><ul><li><p><code>XMLHttpRequest.readyState</code> ： 返回一个 <code>XMLHttpRequest</code> 代理当前所处的状态。一个 XHR 代理总是处于下列状态中的一个：</p><table><thead><tr><th style="text-align:center;">值</th><th style="text-align:center;">状态</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>0</code></td><td style="text-align:center;"><code>UNSENT</code></td><td style="text-align:left;"><code>XMLHttpRequest</code> 代理已创建，但尚未调用 <code>open()</code> 方法</td></tr><tr><td style="text-align:center;"><code>1</code></td><td style="text-align:center;"><code>OPENED</code></td><td style="text-align:left;"><code>open()</code> 方法已经被调用，可以使用 <code>XMLHttpRequest</code> 实例的 <code>setRequestHeader()</code> 方法，设定 HTTP 请求的头信息</td></tr><tr><td style="text-align:center;"><code>2</code></td><td style="text-align:center;"><code>HEADERS_RECEIVED</code></td><td style="text-align:left;"><code>send()</code> 方法已经被调用，并且头部和状态已经可获得</td></tr><tr><td style="text-align:center;"><code>3</code></td><td style="text-align:center;"><code>LOADING</code></td><td style="text-align:left;">响应体部分正在被接收。<code>responseText</code> 属性已经包含部分数据</td></tr><tr><td style="text-align:center;"><code>4</code></td><td style="text-align:center;"><code>DONE</code></td><td style="text-align:left;">请求操作已经完成。服务器返回的数据已经完全或失败</td></tr></tbody></table></li><li><p><code>XMLHttpRequest.response</code> ： 只读。返回响应的正文（即 HTTP 回应的 body 部分）。返回的类型为 <code>ArrayBuffer</code>、<code>Blob</code>、<code>Document</code>、<code>JavaScript Object</code> 或字符串中的一个，取决于请求的 <code>responseType</code> 属性。</p><ul><li>如果请求未成功或尚未发送，则返回 <code>null</code>。</li><li>如果 <code>responseType</code> 属性为 <code>&quot;text&quot;</code> 或 <code>&quot;&quot;</code> （空字符串），在请求状态为 <code>LOADING</code> 时，<code>response</code> 属性包含到目前为止该请求已经取得的内容。</li></ul></li><li><p><code>XMLHttpRequest.responseType</code> ： 枚举字符串。用于指定响应中包含的数据类型。</p><ul><li>该属性可写。在调用 <code>open()</code> 方法之后、调用 <code>send()</code> 方法之前，可设置该属性的值。</li><li>如果 <code>responseType</code> 设为 <code>&quot;&quot;</code> （空字符串），等同于默认值 <code>&quot;text&quot;</code>。</li><li><code>responseType</code> 属性枚举值 <ul><li><code>&quot;&quot;</code>（空字符串） ： 等同于 <code>&quot;text&quot;</code> ，表示服务器返回文本数据。</li><li><code>&quot;arraybuffer&quot;</code> ： <code>ArrayBuffer</code> 对象，表示服务器返回二进制数组。</li><li><code>&quot;blob&quot;</code> ： <code>Blob</code> 对象，表示服务器返回二进制对象。</li><li><code>&quot;document&quot;</code> ： <code>Document</code> 对象，表示服务器返回一个文档对象。</li><li><code>&quot;json&quot;</code> ： JSON 对象。</li><li><code>&quot;text&quot;</code> ： 字符串。</li></ul></li></ul></li><li><p><code>XMLHttpRequest.responseText</code> ： 只读。返回从服务器接收到的字符串。只有 HTTP 请求完成接收以后，该属性才会包含完整的数据。</p></li><li><p><code>XMLHttpRequest.responseXML</code> ： 字符串。表示发送数据的服务器的网址。</p><ul><li>如果 URL 为空，则返回空字符串。</li><li>如果 URL 有锚点，则位于 URL # 后面的内容会被删除。</li><li>如果 URL 有重定向，<code>responseURL</code> 的值会是经过多次重定向后的最终 URL。</li></ul></li><li><p><code>XMLHttpRequest.responseURL</code> ： 只读。返回从服务器接收到 HTML 或 XML 的 <code>Document</code> 对象。</p><ul><li>如果请求未成功，尚未发送，或者检索的数据无法正确解析为 XML 或 HTML，则为 <code>null</code>。</li><li>该属性生效的前提是 HTTP 回应的 <code>Content-Type</code> 头信息等于 <code>text/xml</code> 或 <code>application/xml</code> 。要求在发送请求前，<code>XMLHttpRequest.responseType</code> 属性要设为 <code>document</code>。</li><li>如果 HTTP 回应的 <code>Content-Type</code> 头信息不等于 <code>text/xml</code> 和 <code>application/xml</code> ，从 <code>responseXML</code> 获取数据（即把数据按照 DOM 格式解析），需要手动调用 <code>XMLHttpRequest.overrideMimeType()</code> 方法，强制进行 XML 解析。</li></ul></li><li><p><code>XMLHttpRequest.status</code> ： 只读。返回 <code>XMLHttpRequest</code> 响应中的 HTTP 状态码。</p><ul><li>请求成功状态码为 <code>200</code> ，如果服务器没有返回状态码，该属性默认是 <code>200</code> 。请求发出之前，该属性为 <code>0</code> 。</li><li>HTTP 响应状态码分类 <ul><li>信息响应 (<code>100</code> – <code>199</code>)</li><li>成功响应 (<code>200</code> – <code>299</code>)</li><li>重定向消息 (<code>300</code> – <code>399</code>)</li><li>客户端错误响应 (<code>400</code> – <code>499</code>)</li><li>服务端错误响应 (<code>500</code> – <code>599</code>)</li></ul></li></ul></li><li><p><code>XMLHttpRequest.statusText</code> ： 服务器返回的一个 <code>DOMString</code> 类型的文本信息（包含了响应的 HTTP 状态码）。</p></li><li><p><code>XMLHttpRequest.timeout</code> ： 表示请求的超时时间（毫秒），超过该时长，请求会自动终止。默认值为 <code>0</code> ，表示没有超时限制。</p></li><li><p><code>XMLHttpRequest.upload</code> ： 返回一个 <code>XMLHttpRequestUpload</code> 对象，用来表示文件上传的进度。可以通过对其绑定事件来监听上传进度。</p><table><thead><tr><th style="text-align:center;">事件</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>onloadstart</code></td><td style="text-align:left;">获取开始</td></tr><tr><td style="text-align:center;"><code>onprogress</code></td><td style="text-align:left;">数据传输进行中</td></tr><tr><td style="text-align:center;"><code>onabort</code></td><td style="text-align:left;">获取操作终止</td></tr><tr><td style="text-align:center;"><code>onerror</code></td><td style="text-align:left;">获取失败</td></tr><tr><td style="text-align:center;"><code>onload</code></td><td style="text-align:left;">获取成功</td></tr><tr><td style="text-align:center;"><code>ontimeout</code></td><td style="text-align:left;">获取操作在用户规定的时间内未完成</td></tr><tr><td style="text-align:center;"><code>onloadend</code></td><td style="text-align:left;">获取完成（不论成功与否）</td></tr></tbody></table></li><li><p><code>XMLHttpRequest.withCredentials</code> ： 布尔值，表示跨域请求时，用户信息（比如 <code>Cookie</code> 和认证的 HTTP 头信息）是否会包含在请求之中，默认为 <code>false</code> 。</p><ul><li>同源请求设置 <code>withCredentials</code> 无效。</li><li>为了让这个属性生效，服务器必须显式返回 <code>Access-Control-Allow-Credentials</code> 头信息。</li></ul></li></ul><h3 id="xmlhttprequest-实例方法" tabindex="-1"><a class="header-anchor" href="#xmlhttprequest-实例方法"><span>XMLHttpRequest 实例方法</span></a></h3><ul><li><p><code>XMLHttpRequest.open()</code></p><p><strong>语法</strong> ： <code>XMLHttpRequest.open(method, url[, async[, user[, password]]])</code></p><p><strong>描述</strong> ： 初始化一个请求。</p><ul><li>该方法只能在 <code>XMLHttpRequest</code> 实例创建后、调用 <code>send()</code> 方法前调用。</li><li>如果对使用过 <code>open()</code> 方法的 AJAX 请求，再次使用这个方法，等同于调用 <code>abort()</code>，即终止请求。</li></ul><p><strong>参数</strong> ：</p><ul><li><p><code>method</code> ： HTTP 方法。比如 <code>GET</code> 、 <code>POST</code> 、 <code>PUT</code> 、<code>DELETE</code> 等。不区分大小写。</p></li><li><p><code>url</code> ： 表示请求发送的目标 URL 。</p></li><li><p><code>async</code> ： 可选。布尔值，表示请求是否为异步，默认为 <code>true</code> 。</p><ul><li>如果值为 <code>false</code>，<code>send()</code> 方法直到收到答复前不会返回。</li><li>如果 <code>multipart</code> 属性为 <code>true</code> ，则该值必须为 <code>true</code>，否则将引发异常。</li></ul></li><li><p><code>user</code> ： 可选。表示用于认证的用户名。默认为 <code>null</code> 。</p></li><li><p><code>password</code> ： 可选。表示用于认证的密码。默认为 <code>null</code> 。</p></li></ul></li><li><p><code>XMLHttpRequest.setRequestHeader()</code></p><p><strong>语法</strong> ： <code>XMLHttpRequest.setRequestHeader(header, value)</code></p><p><strong>描述</strong> ： 设置 HTTP 请求的头信息。</p><ul><li>该方法必须在 <code>open()</code> 方法和 <code>send()</code> 方法之间调用。</li><li>如果多次对同一个请求头赋值，只会生成一个合并了多个值的请求头。</li><li>如果没有设置 <code>Accept</code> 属性，则发送出 <code>send()</code> 的值为此属性的默认值：<code>*/*</code> 。</li></ul><p><strong>参数</strong> ：</p><ul><li><code>header</code> ： 表示属性的名称。</li><li><code>value</code> ： 表示属性的值。</li></ul></li><li><p><code>XMLHttpRequest.overrideMimeType()</code></p><p><strong>语法</strong> ： <code>XMLHttpRequest.overrideMimeType(mime)</code></p><p><strong>描述</strong> ： 重写服务器返回的 <code>MIME</code> 类型，从而让浏览器进行不一样的处理。</p><ul><li>该方法必须在 <code>send()</code> 方法之前调用。</li><li>只有在服务器无法返回某种数据类型时，才使用该方法。</li></ul></li><li><p><code>XMLHttpRequest.send()</code></p><p><strong>语法</strong> ： <code>XMLHttpRequest.send([body])</code></p><p><strong>描述</strong> ： 发送 HTTP 请求。</p><ul><li>如果是异步请求（默认为异步请求），则该方法会在请求发送后立即返回。</li><li>如果是同步请求，则该方法直到响应到达后才会返回。</li></ul><p><strong>参数</strong> ：</p><ul><li><code>body</code> ： 可选。表示请求的主体部分。如果请求方法是 <code>GET</code> 或 <code>HEAD</code> ，则该参数必须为 <code>null</code> 。</li></ul></li><li><p><code>XMLHttpRequest.abort()</code></p><p><strong>语法</strong> ： <code>XMLHttpRequest.abort()</code></p><p><strong>描述</strong> ： 终止 HTTP 请求。当请求被终止，<code>readyState</code> 属性被设置为 <code>XMLHttpRequest.UNSENT</code> (值为 <code>0</code>)，请求的 <code>status</code> 属性被设置为 <code>0</code>。</p></li><li><p><code>XMLHttpRequest.getAllResponseHeaders()</code></p><p><strong>语法</strong> ： <code>XMLHttpRequest.getAllResponseHeaders()</code></p><p><strong>描述</strong> ： 返回所有的响应头信息，以 <code>CRLF</code> 分隔的字符串形式。</p><ul><li>如果没有收到服务器回应，该属性为 <code>null</code>。</li><li>如果发生网络错误，该属性为空字符串。</li></ul></li><li><p><code>XMLHttpRequest.getResponseHeader()</code></p><p><strong>语法</strong> ： <code>XMLHttpRequest.getResponseHeader(header)</code></p><p><strong>描述</strong> ： 返回指定的响应头信息 <code>header</code> （不区分大小写）的值。</p><ul><li>如果还没有收到服务器回应或者指定字段不存在，返回 <code>null</code>。</li><li>如果有多个字段同名，它们的值会被连接为一个字符串，每个字段之间使用 “逗号+空格” 分隔。</li></ul></li></ul><h3 id="xmlhttprequest-实例事件" tabindex="-1"><a class="header-anchor" href="#xmlhttprequest-实例事件"><span>XMLHttpRequest 实例事件</span></a></h3><ul><li><code>readystatechange</code> 事件 ： 当 <code>XMLHttpRequest.readyState</code> 属性发生变化时触发。</li><li><code>loadstart</code> 事件 ： 当请求开始时触发。</li><li><code>progress</code> 事件 ： 当请求接收到数据时，周期性地触发。</li><li><code>load</code> 事件 ： 当请求成功完成时触发。</li><li><code>loadend</code> 事件 ： 当请求结束时触发，无论请求成功还是失败。</li><li><code>error</code> 事件 ： 当请求发生错误时触发。</li><li><code>timeout</code> 事件 ： 当请求超时时触发。</li><li><code>abort</code> 事件 ： 当请求被终止时触发。</li></ul><h3 id="使用-xmlhttprequest" tabindex="-1"><a class="header-anchor" href="#使用-xmlhttprequest"><span>使用 XMLHttpRequest</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> xhr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> XMLHttpRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onreadystatechange</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">readyState</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ((</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">status</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">status</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 300</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">||</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">status</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 304</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">responseText</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Request was unsuccessful: &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 假设由 ontimeout 处理</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;get&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;timeout.php&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">timeout</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 设置 1 秒超时</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ontimeout</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  alert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Request did not return in a second.&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cors-通信" tabindex="-1"><a class="header-anchor" href="#cors-通信"><span>CORS 通信</span></a></h2><p>跨源资源共享（CORS，或通俗地称为跨域资源共享）是一种基于 HTTP 头的机制，允许浏览器向跨源服务器，发出 <code>XMLHttpRequest</code> 请求，从而克服了 AJAX 只能同源使用的限制。</p><p>跨源共享标准允许在下列场景中使用跨站点 HTTP 请求：</p><ul><li>由 <code>XMLHttpRequest</code> 或 <code>Fetch</code> API 发起的跨源 HTTP 请求。</li><li>Web 字体（CSS 中通过 <code>@font-face</code> 使用跨源字体资源）。网站就可以发布 TrueType 字体资源，并只允许已授权网站进行跨站调用。</li><li><code>WebGL</code> 贴图。</li><li>使用 <code>drawImage()</code> 将图片或视频画面绘制到 <code>canvas</code>。</li><li>来自图像的 CSS 图形 (en-US)。</li></ul><p>CORS 预检请求用于检查服务器是否支持 CORS 即跨域资源共享。</p><ul><li>对于简单请求，不会触发 CORS 预检请求，而是直接发出 CORS 请求。</li><li>对于复杂请求，浏览器会先发出 CORS 预检请求，从而获知服务器是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（例如 Cookie 和 HTTP 认证相关数据）。</li></ul><h3 id="简单请求" tabindex="-1"><a class="header-anchor" href="#简单请求"><span>简单请求</span></a></h3><p>简单请求，不会触发 CORS 预检请求，而是直接发出 CORS 请求。若请求满足以下所有条件，则该请求可视为简单请求：</p><ul><li>请求方法 ： <code>GET</code> 、 <code>HEAD</code> 、 <code>POST</code> 之一</li><li>HTTP 头信息：除了被用户代理自动设置的标头字段（例如 <code>Connection</code> 、 <code>User-Agent</code> ）以外，仅允许人为设置以下字段 <ul><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li><li><code>Content-Type</code> ： 只限于三个值 <code>application/x-www-form-urlencoded</code> 、 <code>multipart/form-data</code> 、 <code>text/plain</code></li></ul></li><li>如果请求是使用 <code>XMLHttpRequest</code> 对象发出的，在返回的 <code>XMLHttpRequest.upload</code> 对象属性上没有注册任何事件监听器（即，没有调用 <code>xhr.upload.addEventListener()</code> 监听该上传请求）</li><li>请求中没有使用 <code>ReadableStream</code> 对象</li></ul><p>当浏览器发现跨域请求时，会在请求头中加入 <code>Origin</code> 字段，表示该请求来源（协议、域名、端口）。服务器可根据该值，决定是否同意该请求。</p><ul><li><p>如果 <code>Origin</code> 字段的值不在许可范围内，服务器会返回一个正常的 HTTP 回应。浏览器发现，这个回应的头信息没有包含 <code>Access-Control-Allow-Origin</code> 字段，就会抛出一个错误，被 <code>XMLHttpRequest</code> 的 <code>onerror</code> 回调函数捕获。注意，这种错误无法通过状态码识别，因为 HTTP 回应的状态码有可能是 <code>200</code> 。</p></li><li><p>如果 <code>Origin</code> 字段的值在许可范围内，服务器返回的响应，会多出以下几个头信息字段。</p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-http"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Access-Control-Allow-Origin</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://api.bob.com</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Access-Control-Allow-Credentials</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> true</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Access-Control-Expose-Headers</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> FooBar</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Content-Type</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> text/html; charset=utf-8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Access-Control-Allow-Origin</code> ： 必须的。指定了该响应的资源是否被允许与给定的来源（origin）共享。其值是请求时 <code>Origin</code> 字段的值，或者 <code>*</code> （表示接受任意域名的请求）。</li><li><code>Access-Control-Allow-Credentials</code> ： 可选。布尔值，表示是否允许发送 Cookie 。 <ul><li>默认情况下，Cookie 不包括在 CORS 请求之中。</li><li>该值设为 <code>true</code> ，即表示服务器明确许可，Cookie 可以包含在请求中，发送给服务器。该值也只能设为 <code>true</code> ，如果服务器不要浏览器发送 Cookie ，删除该字段即可。</li></ul></li><li><code>Access-Control-Expose-Headers</code> ： 可选。 <ul><li>CORS 请求时，<code>XMLHttpRequest</code> 对象的 <code>getResponseHeader()</code> 方法只能获取 6 个基本字段： <code>Cache-Control</code> 、 <code>Content-Language</code> 、 <code>Content-Type</code> 、 <code>Expires</code> 、 <code>Last-Modified</code> 、 <code>Pragma</code> 。</li><li>如果需要获取其他字段，就必须在 <code>Access-Control-Expose-Headers</code> 里面指定。</li></ul></li></ul></li></ul><h3 id="复杂请求" tabindex="-1"><a class="header-anchor" href="#复杂请求"><span>复杂请求</span></a></h3><p>复杂请求，浏览器会先发出 CORS 预检请求，从而获知服务器是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。</p><ul><li><p>预检请求 ： 当浏览器请求为非简单请求时，会自动发出预检请求。</p><p>CORS 预检请求必须首先使用 <code>OPTIONS</code> 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。预检请求/响应示例如下：</p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-http"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">OPTIONS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /doc </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HTTP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Host</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bar.other</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">User-Agent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Accept</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Accept-Language</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> en-us,en;q=0.5</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Accept-Encoding</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gzip,deflate</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Connection</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> keep-alive</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Origin</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://foo.example</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Access-Control-Request-Method</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> POST</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Access-Control-Request-Headers</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> X-PINGOTHER, Content-Type</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HTTP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 204</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> No Content</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Date</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Mon, 01 Dec 2008 01:15:39 GMT</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Server</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Apache/2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Access-Control-Allow-Origin</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://foo.example</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Access-Control-Allow-Methods</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> POST, GET, OPTIONS</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Access-Control-Allow-Headers</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> X-PINGOTHER, Content-Type</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Access-Control-Max-Age</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 86400</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Vary</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Accept-Encoding, Origin</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Keep-Alive</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> timeout=2, max=100</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Connection</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Keep-Alive</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>正常请求 ： 当预检请求通过后，每次的 CORS 请求都会在请求头中加入 <code>Origin</code> 字段，表示该请求来源（协议、域名、端口）。服务器回应的头信息中，也会有一个 <code>Access-Control-Allow-Origin</code> 头信息字段。</p></li></ul><h2 id="fetch" tabindex="-1"><a class="header-anchor" href="#fetch"><span>Fetch</span></a></h2><p>Fetch API 提供了一个获取资源的接口（包括跨网络通信）。 它还提供了一个全局 <code>fetch()</code> 方法，该方法提供了一种简单，合理的方式来跨网络异步获取资源。</p><h3 id="fetch-方法" tabindex="-1"><a class="header-anchor" href="#fetch-方法"><span>fetch() 方法</span></a></h3><p><strong>语法</strong> ： <code>fetch(input[, init])</code></p><p><strong>描述</strong> ： 用于发起获取资源的请求。返回一个 <code>Promise</code> 对象，在请求响应后被 <code>resolve</code> ，并传回 <code>Response</code> 对象。</p><ul><li>成功的 <code>fetch()</code> 需要检查 <code>Promise</code> 对象被 <code>resolve</code>，还需包括 <code>Response.ok</code> 属性为 <code>true</code>。 <ul><li>接收到一个代表错误的 HTTP 状态码时，返回的 <code>Promise</code> <strong>不会被标记为 <code>reject</code></strong> ，即使该 HTTP 响应的状态码是 <code>404</code> 或 <code>500</code> 。</li><li>如果 HTTP 状态码不在 <code>200 - 299</code> 范围内，<code>resolve</code> 返回值的 <code>ok</code> 属性为 <code>false</code> 。</li></ul></li><li>当网络错误或请求被阻止时，<code>Promise</code> 会被 <code>reject</code> 。</li></ul><p><strong>参数</strong> ：</p><ul><li><code>input</code> ： 表示获取资源的 <code>URL</code> 或者 <code>Request</code> 对象。</li><li><code>init</code> ： 可选。一个配置项对象，包括所有对请求的设置。可选的参数有： <ul><li><code>method</code> ： 请求使用的方法，如 <code>GET</code> 、 <code>POST</code> 。</li><li><code>headers</code> ： 请求的头信息，形式为 <code>Headers</code> 对象或包含 <code>ByteString</code> 值的对象字面量。</li><li><code>body</code> ： 请求的 <code>body</code> 信息。 <ul><li>可以是 <code>Blob</code> 、 <code>BufferSource</code> 、 <code>FormData</code> 、 <code>URLSearchParams</code> 、 <code>USVString</code> 对象。</li><li><code>GET</code> 或 <code>HEAD</code> 方法的请求不能包含 <code>body</code> 信息。</li></ul></li><li><code>mode</code> ： 请求的模式，用于确定跨域请求是否能得到有效的响应，以及响应的哪些属性是可读的。可选值为 <code>same-origin</code> 、 <code>no-cors</code> 、 <code>cors</code> 、 <code>navigate</code> 。</li><li><code>credentials</code> ： 表示用户代理是否应该在跨域请求的情况下从其他域发送 cookies。可选值为 <code>omit</code> 、 <code>same-origin</code> 、 <code>include</code> 。</li><li><code>cache</code> ： 请求的缓存模式。控制着请求以何种方式与浏览器的 HTTP 缓存进行交互。可选值为 <code>default</code> 、 <code>no-store</code> 、 <code>reload</code> 、 <code>no-cache</code> 、 <code>force-cache</code> 、 <code>only-if-cached</code> 。</li><li><code>redirect</code> ： 重定向模式。可选值为 <code>follow</code> 、 <code>error</code> 、 <code>manual</code> 。</li><li><code>referrer</code> ： 一个 <code>USVString</code> ，表示请求的 <code>referrer</code> 。可以是 <code>client</code> （默认） 、 <code>no-referrer</code> 或一个 <code>URL</code> 。</li><li><code>referrerPolicy</code> ： 指定了 HTTP 头部 <code>referer</code> 字段的值。可选值为 <code>no-referrer</code>、 <code>no-referrer-when-downgrade</code>、<code>origin</code>、<code>origin-when-cross-origin</code>、 <code>unsafe-url</code>。</li><li><code>integrity</code> ： 包括请求的子资源所需的 <code>Subresource Integrity</code> 值（子资源完整性，SRI，通过验证获取文件的哈希值是否和提供的哈希值一样来判断资源是否被篡改）。</li><li><code>keepalive</code> ： 可用于使请求的时间超过页面的时间。</li><li><code>signal</code> ： <code>AbortSignal</code> 对象实例。允许获取请求的控制器，并且允许通过 <code>AbortController</code> 中止请求。</li><li><code>priority</code> ： 请求的优先级。可选值为 <code>high</code> 、 <code>low</code> 、 <code>normal</code> 。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> abortController</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> AbortController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> payload</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stringify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  foo</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;bar&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> jsonHeaders</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Headers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &#39;Content-Type&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;application/json&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/send-me-json&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  method</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;POST&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 发送请求体时必须使用一种 HTTP 方法</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  body</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> payload</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  headers</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> jsonHeaders</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  signal</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> abortController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">signal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 10 毫秒后中断请求</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setTimeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> abortController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">abort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="headers-接口" tabindex="-1"><a class="header-anchor" href="#headers-接口"><span>Headers 接口</span></a></h3><p>Fetch API 的 <code>Headers</code> 接口允许对 HTTP 请求和响应头执行各种操作。这些操作包括检索，设置，添加和删除。可以使用 <code>new Headers()</code> 创建一个新的 <code>Headers</code> 对象。</p><h4 id="headers-构造函数" tabindex="-1"><a class="header-anchor" href="#headers-构造函数"><span>Headers 构造函数</span></a></h4><p><strong>语法</strong> ： <code>new Headers([init])</code></p><p><strong>描述</strong> ： 创建一个新的 <code>Headers</code> 对象。</p><p><strong>参数</strong> ：</p><ul><li><code>init</code> ： 可选。通过一个包含任意 HTTP headers 的对象来预设 Headers。 可以是一个 <code>ByteString</code> 对象，或者是一个已存在的 <code>Headers</code> 对象。</li></ul><h4 id="headers-方法" tabindex="-1"><a class="header-anchor" href="#headers-方法"><span>Headers 方法</span></a></h4><ul><li><p><code>headers.has()</code></p><p><strong>语法</strong> ： <code>headers.has(name)</code></p><p><strong>描述</strong> ： 返回一个布尔值，表示 <code>Headers</code> 对象是否包含某个特定的头部。</p></li><li><p><code>headers.get()</code></p><p><strong>语法</strong> ： <code>headers.get(name)</code></p><p><strong>描述</strong> ： 返回 <code>Headers</code> 对象中返回指定 header 的全部值。如果 <code>Headers</code> 对象中不存在对应的头部，则返回 <code>null</code>。</p></li><li><p><code>headers.getSetCookie()</code></p><p><strong>语法</strong> ： <code>headers.getSetCookie()</code></p><p><strong>描述</strong> ： 返回一个数组，其中包含与响应相关的所有 <code>Set-Cookie</code> 标头的值。使得 <code>Headers</code> 对象可以处理多个 <code>Set-Cookie</code> 标头。</p></li><li><p><code>headers.append()</code></p><p><strong>语法</strong> ： <code>headers.append(name, value)</code></p><p><strong>描述</strong> ： 追加一个新值 <code>value</code> 到已存在的 headers 对象上，或者新增一个原本不存在的 header 。</p></li><li><p><code>headers.set()</code></p><p><strong>语法</strong> ： <code>headers.set(name, value)</code></p><p><strong>描述</strong> ： 设置一个新的值 <code>value</code> 到已存在的 headers 对象上，或者新增一个原本不存在的 header 。</p></li><li><p><code>headers.delete()</code></p><p><strong>语法</strong> ： <code>headers.delete(name)</code></p><p><strong>描述</strong> ： 从 <code>Headers</code> 对象中删除指定的头部。当 <code>name</code> 参数的值不是 HTTP 标头的名称，或者 Guard 的值为 <code>immutable</code> 抛出 TypeError 错误。</p></li><li><p><code>headers.entries()</code></p><p><strong>语法</strong> ： <code>headers.entries()</code></p><p><strong>描述</strong> ： 返回一个迭代器，它包含 <code>Headers</code> 对象中所有的键/值对的 <code>Array</code> 。每个键/值对都是一个 <code>Array</code> ，第一个元素是键名，第二个元素是值。</p></li><li><p><code>headers.keys()</code></p><p><strong>语法</strong> ： <code>headers.keys()</code></p><p><strong>描述</strong> ： 返回一个迭代器，它包含 <code>Headers</code> 对象中所有的键名。</p></li><li><p><code>headers.values()</code></p><p><strong>语法</strong> ： <code>headers.values()</code></p><p><strong>描述</strong> ： 返回一个迭代器，它包含 <code>Headers</code> 对象中所有的值。</p></li><li><p><code>headers.forEach()</code></p><p><strong>语法</strong> ： <code>headers.forEach(callback[, thisArg])</code></p><p><strong>描述</strong> ： 为 <code>Headers</code> 对象中的每个键值对执行提供的回调函数 <code>callback</code>。</p></li></ul><h3 id="request-接口" tabindex="-1"><a class="header-anchor" href="#request-接口"><span>Request 接口</span></a></h3><p>Fetch API 的 <code>Request</code> 接口用来表示资源请求。可以使用 <code>new Request()</code> 构造函数创建一个新的 <code>Request</code> 对象。</p><h4 id="request-构造函数" tabindex="-1"><a class="header-anchor" href="#request-构造函数"><span>Request 构造函数</span></a></h4><p><strong>语法</strong> ： <code>new Request(input[, init])</code></p><p><strong>描述</strong> ： 创建一个新的 <code>Request</code> 对象。</p><p><strong>参数</strong> ：</p><ul><li><code>input</code> ： fetch 的资源。可选值如下： <ul><li>获取资源的 <code>URL</code> 。</li><li><code>Request</code> 对象： <ul><li>如果该对象存在于构造函数调用的另一个起源上，则将除去 <code>Request.referrer</code> 。</li><li>如果该对象 <code>Request.mode</code> 为 <code>navigate</code>，则 <code>mode</code> 将转换为 <code>same-origin</code> 。</li></ul></li></ul></li><li><code>init</code> ： 可选。一个配置项对象，包括所有对请求的设置。可选的参数有： <ul><li><code>method</code> ： 请求使用的方法，如 <code>GET</code> 、 <code>POST</code> 。</li><li><code>headers</code> ： 请求的头信息，形式为 <code>Headers</code> 对象或包含 <code>ByteString</code> 值的对象字面量。</li><li><code>body</code> ： 请求的 <code>body</code> 信息。 <ul><li>可以是 <code>Blob</code> 、 <code>BufferSource</code> 、 <code>FormData</code> 、 <code>URLSearchParams</code> 、 <code>USVString</code> 对象。</li><li><code>GET</code> 或 <code>HEAD</code> 方法的请求不能包含 <code>body</code> 信息。</li></ul></li><li><code>mode</code> ： 请求的模式，用于确定跨域请求是否能得到有效的响应，以及响应的哪些属性是可读的。 <ul><li><code>cors</code> ： 默认值。允许跨域请求。</li><li><code>no-cors</code> ：保证请求对应的 <code>method</code> 只有 <code>HEAD</code>，<code>GET</code> 或 <code>POST</code> 方法，并且请求的 <code>headers</code> 只能有简单请求头。</li><li><code>same-origin</code> ： 设置该模式可确保请求总是向当前的源发起的。</li><li><code>navigate</code> ：表示是浏览器的页面切换请求 (request)。<code>navigate</code> 请求仅在浏览器切换页面时创建，该请求应该返回 HTML。</li></ul></li><li><code>credentials</code> ： 表示用户代理是否应该在跨域请求的情况下从其他域发送 cookies。 <ul><li><code>omit</code> ：默认值。从不发送 Cookies 。</li><li><code>same-origin</code> ：只有当 URL 与响应脚本同源才发送 Cookies、HTTP Basic authentication 等验证信息。</li><li><code>include</code> ： 不论是不是跨域的请求，总是发送请求资源域在本地的 Cookies、HTTP Basic authentication 等验证信息。</li></ul></li><li><code>cache</code> ： 请求的缓存模式。控制着请求以何种方式与浏览器的 HTTP 缓存进行交互。 <ul><li><code>default</code> ：浏览器从 HTTP 缓存中寻找匹配的请求。 <ul><li>如果缓存匹配上并且有效（ fresh）, 它将直接从缓存中返回资源。</li><li>如果缓存匹配上但已经过期，浏览器将会使用传统（ conditional request ）的请求方式去访问远程服务器。如果服务器端显示资源没有改动，它将从缓存中返回资源。否则，如果服务器显示资源变动，那么重新从服务器下载资源更新缓存。</li><li>如果缓存没有匹配，浏览器将会以普通方式请求，并且更新已经下载的资源缓存。</li></ul></li><li><code>no-store</code> ：浏览器直接从远程服务器获取资源，不查看缓存，并且不会使用下载的资源更新缓存。</li><li><code>reload</code> ：浏览器直接从远程服务器获取资源，不查看缓存，然后使用下载的资源更新缓存。</li><li><code>no-cache</code> ： 浏览器在其 HTTP 缓存中寻找匹配的请求。 <ul><li>如果有匹配，无论是新的还是陈旧的，浏览器都会向远程服务器发出条件请求。如果服务器指示资源没有更改，则将从缓存中返回该资源。否则，将从服务器下载资源并更新缓存。</li><li>如果没有匹配，浏览器将发出正常请求，并使用下载的资源更新缓存。</li></ul></li><li><code>force-cache</code> ：浏览器在其 HTTP 缓存中寻找匹配的请求。 <ul><li>如果有匹配项，不管是新匹配项还是旧匹配项，都将从缓存中返回。</li><li>如果没有匹配，浏览器将发出正常请求，并使用下载的资源更新缓存。</li></ul></li><li><code>only-if-cached</code> ：浏览器在其 HTTP 缓存中寻找匹配的请求。 <ul><li>如果有匹配项 (新的或旧的)，则从缓存中返回。</li><li>如果没有匹配，浏览器将返回一个错误。</li></ul></li></ul></li><li><code>redirect</code> ： 重定向模式。 <ul><li><code>follow</code> ： 自动重定向。</li><li><code>error</code> ： 如果产生重定向将自动终止并且抛出一个错误。</li><li><code>manual</code> ： 手动处理重定向。</li></ul></li><li><code>referrer</code> ： 一个 <code>USVString</code> ，表示请求的 <code>referrer</code> 。可以是 <code>client</code> （默认） 、 <code>no-referrer</code> 或一个 <code>URL</code> 。</li><li><code>referrerPolicy</code> ： 指定了 HTTP 头部 <code>referer</code> 字段的值。可选值为 <code>no-referrer</code>、 <code>no-referrer-when-downgrade</code>、<code>origin</code>、<code>origin-when-cross-origin</code>、 <code>unsafe-url</code>。</li><li><code>integrity</code> ： 包括请求的子资源所需的 <code>Subresource Integrity</code> 值（子资源完整性，SRI，通过验证获取文件的哈希值是否和提供的哈希值一样来判断资源是否被篡改）。</li><li><code>keepalive</code> ： 可用于使请求的时间超过页面的时间。</li><li><code>signal</code> ： <code>AbortSignal</code> 对象实例。允许获取请求的控制器，并且允许通过 <code>AbortController</code> 中止请求。</li><li><code>priority</code> ： 请求的优先级。可选值如下： <ul><li><code>auto</code> ： 默认值。自动确定请求相对于其他同类型请求的优先级。</li><li><code>high</code> ： 相对于其他同类型请求，高优先级。</li><li><code>low</code> ： 相对于其他同类型请求，低优先级。</li></ul></li></ul></li></ul><h4 id="request-属性" tabindex="-1"><a class="header-anchor" href="#request-属性"><span>Request 属性</span></a></h4><ul><li><p><code>url</code> ：只读属性。请求的 URL 。</p></li><li><p><code>method</code> ：只读属性。请求方法。</p></li><li><p><code>headers</code> ：只读属性。包含与当前请求关联的 <code>Headers</code> 对象。</p></li><li><p><code>body</code> ：只读属性。返回一个 <code>ReadableStream</code> 对象，允许读取 <code>Request</code> 对象的内容。使用 <code>GET</code> 或 <code>HEAD</code> 方法的请求返回 <code>null</code>。</p></li><li><p><code>bodyUsed</code> ：只读属性。表示 <code>body</code> 属性是否已被读取。</p></li><li><p><code>cache</code> ：只读属性。请求的缓存模式，控制着请求以何种方式与浏览器的 HTTP 缓存进行交互。</p></li><li><p><code>credentials</code> ：只读属性。表示用户代理是否应该在跨域请求的情况下从其他域发送 cookies。</p></li><li><p><code>destination</code> ：只读属性。表示请求的内容类型。</p></li><li><p><code>integrity</code> ：只读属性。请求的子资源所需的 <code>Subresource Integrity</code> 值（子资源完整性，SRI，通过验证获取文件的哈希值是否和提供的哈希值一样来判断资源是否被篡改）。</p></li><li><p><code>mode</code> ：只读属性。请求模式。</p></li><li><p><code>redirect</code> ：只读属性。重定向模式。</p></li><li><p><code>referrer</code> ：只读属性。请求的 <code>referrer</code> 。</p></li><li><p><code>referrerPolicy</code> ：只读属性。 HTTP 头部 <code>referer</code> 字段的值。</p></li><li><p><code>signal</code> ： 只读属性。与请求相关的 <code>AbortSignal</code>。</p></li></ul><h4 id="request-方法" tabindex="-1"><a class="header-anchor" href="#request-方法"><span>Request 方法</span></a></h4><ul><li><p><code>request.arrayBuffer()</code></p><p><strong>语法</strong> ： <code>request.arrayBuffer()</code></p><p><strong>描述</strong> ： 读取请求体并返回 <code>Promise</code> ，该 <code>Promise</code> 将兑现为 <code>ArrayBuffer</code> 对象。</p></li><li><p><code>request.blob()</code></p><p><strong>语法</strong> ： <code>request.blob()</code></p><p><strong>描述</strong> ： 读取请求体并返回 <code>Promise</code> ，该 <code>Promise</code> 将兑现为 <code>Blob</code> 对象。</p></li><li><p><code>request.clone()</code></p><p><strong>语法</strong> ： <code>request.clone()</code></p><p><strong>描述</strong> ： 创建一个 <code>Request</code> 对象的克隆，克隆的对象和原对象使用相同的属性。如果响应体 Body 已经被使用过，该方法会抛出一个 TypeError。</p></li><li><p><code>request.formData()</code></p><p><strong>语法</strong> ： <code>request.formData()</code></p><p><strong>描述</strong> ： 读取请求体并返回 <code>Promise</code> ，该 <code>Promise</code> 将兑现为 <code>FormData</code> 对象。</p></li><li><p><code>request.json()</code></p><p><strong>语法</strong> ： <code>request.json()</code></p><p><strong>描述</strong> ： 读取请求体并返回 <code>Promise</code> ，该 <code>Promise</code> 将兑现由响应体的文本解析得到的 <code>JSON</code> 。</p></li><li><p><code>request.text()</code></p><p><strong>语法</strong> ： <code>request.text()</code></p><p><strong>描述</strong> ： 读取请求体并返回 <code>Promise</code> ，该 <code>Promise</code> 将兑现为 <code>String</code> 。</p></li></ul><h3 id="response-接口" tabindex="-1"><a class="header-anchor" href="#response-接口"><span>Response 接口</span></a></h3><p>Fetch API 的 <code>Response</code> 接口表示请求的响应数据。可以使用 <code>new Response()</code> 构造函数创建一个新的 <code>Response</code> 对象。</p><h4 id="response-构造函数" tabindex="-1"><a class="header-anchor" href="#response-构造函数"><span>Response 构造函数</span></a></h4><p><strong>语法</strong> ： <code>new Response(body[, init])</code></p><p><strong>描述</strong> ： 创建一个新的 <code>Response</code> 对象。</p><p><strong>参数</strong> ：</p><ul><li><code>body</code> ： 可选。一个定义 <code>response</code> 中 <code>body</code> 的对象，包括 <code>Blob</code> 、 <code>FormData</code> 、 <code>BufferSource</code> 、 <code>ReadableStream</code> 、 <code>URLSearchParams</code> 、 <code>USVString</code> 对象。</li><li><code>init</code> ： 可选。一个配置项对象，包含要应用到 <code>response</code> 上的自定义设置。可选的参数有： <ul><li><code>status</code> ： 响应的状态码。默认为 <code>200</code> 。</li><li><code>statusText</code> ： 响应的状态信息。默认为 <code>OK</code> 。</li><li><code>headers</code> ： 响应的头信息，形式为 <code>Headers</code> 对象或包含 <code>ByteString</code> 值的对象字面量。</li></ul></li></ul><h4 id="response-属性" tabindex="-1"><a class="header-anchor" href="#response-属性"><span>Response 属性</span></a></h4><ul><li><p><code>response.url</code> ： 只读属性。响应的 <code>URL</code>。</p></li><li><p><code>response.status</code> ： 只读属性。响应的状态码。</p></li><li><p><code>response.ok</code> ： 只读属性。一个布尔值，表示响应是否成功（即，HTTP 状态码是否在范围 <code>200 – 299</code> 内）。</p></li><li><p><code>response.statusText</code> ： 只读属性。响应的状态信息。</p></li><li><p><code>response.headers</code> ： 只读属性。包含与当前请求关联的 <code>Headers</code> 对象。</p></li><li><p><code>response.body</code> ： 只读属性。一个 <code>ReadableStream</code>，或者对于使用空的 <code>body</code> 属性构建的任意的 <code>Response</code> 对象，或没有任何主体的实际 HTTP 响应，则为 <code>null</code>。</p></li><li><p><code>response.bodyUsed</code> ： 只读属性。一个布尔值，表示 <code>body</code> 属性是否已被读取。</p></li><li><p><code>response.redirected</code> ： 只读属性。一个布尔值，表示响应是否是重定向的响应。</p></li><li><p><code>response.type</code> ： 只读属性。响应的类型。</p><ul><li><code>basic</code> ： 标准值，同源响应，暴露除了 “Set-Cookie” 之外的所有标头。</li><li><code>cors</code> ： 从有效的跨源请求接收到响应。某些标头和主体可以被访问。</li><li><code>error</code> ： 网络错误。没有有用的描述错误的信息。响应的状态为 <code>0</code>，<code>header</code> 为空且不可变。这是从 <code>Response.error()</code> 中获得的响应的类型。</li><li><code>opaque</code> ： 对跨源资源的 “no-cors” 请求的响应。严格限制。</li><li><code>opaqueredirect</code> ： fetch 请求是通过 <code>redirect: &quot;manual&quot;</code> 发出的。响应的状态是 <code>0</code>，标头是空的，主体是 <code>null</code>，<code>trailer</code> 是空的。</li></ul></li></ul><h4 id="response-方法" tabindex="-1"><a class="header-anchor" href="#response-方法"><span>Response 方法</span></a></h4><ul><li><p><code>response.error()</code></p><p><strong>语法</strong> ： <code>response.error()</code></p><p><strong>描述</strong> ： 返回包含网络错误相关信息的新 <code>Response</code> 对象。</p></li><li><p><code>response.json()</code></p><p><strong>语法</strong> ： <code>response.json(data, options)</code></p><p><strong>描述</strong> ： 返回一个以提供的 JSON 数据为主体的 <code>Response</code>，以及一个设置为 <code>application/json</code> 的 <code>Content-Type</code> 头信息。还可以设置响应状态、状态信息和其他标头。</p><p><strong>参数</strong> ：</p><ul><li><code>data</code> ： 可选。包含要序列化为 JSON 的数据的对象。</li><li><code>options</code> ： 可选。一个配置项对象，包含对响应的设置，与 <code>Response</code> 构造函数的选项参数相同。可选的参数有： <ul><li><code>status</code> ： 响应的状态码。默认为 <code>200</code> 。</li><li><code>statusText</code> ： 响应的状态信息。默认为 <code>OK</code> 。</li><li><code>headers</code> ： 响应的头信息，形式为 <code>Headers</code> 对象或包含 <code>ByteString</code> 值的对象字面量。</li></ul></li></ul></li><li><p><code>response.redirect()</code></p><p><strong>语法</strong> ： <code>response.redirect(url, status)</code></p><p><strong>描述</strong> ： 返回一个可以重定向到指定 URL 的 <code>Response</code> 。</p><p><strong>参数</strong> ：</p><ul><li><code>url</code> ： 重定向的 URL 。</li><li><code>status</code> ： 可选。重定向的状态码，默认为 <code>302</code> 。</li></ul></li></ul><h2 id="beacon-api" tabindex="-1"><a class="header-anchor" href="#beacon-api"><span>Beacon API</span></a></h2><p>Beacon API 用于发送异步和非阻塞请求到服务器。</p><p>Beacon API 主要使用场景是将分析数据发送给服务器，如：客户端事件、会话数据等。在 <code>unload</code> 事件处理程序中，创建的任何异步请求都会被浏览器取消，因此异步 <code>XMLHttpRequest</code> 或 <code>fetch()</code> 不适合这个任务。如果使用同步 <code>XMLHttpRequest</code> 强制发送请求，浏览器会因为要等待 <code>unload</code> 事件处理程序完成而延迟导航到下一个页面。</p><p>Beacon API 定义了一个独立的方法：<code>navigator.sendBeacon()</code>。</p><ul><li><p><strong>语法</strong> ： <code>navigator.sendBeacon(url, data)</code></p></li><li><p><strong>描述</strong> ： 通过 HTTP <code>POST</code> 将少量数据异步传输到 Web 服务器。</p><ul><li>可用于发送统计数据。并不是只能在页面生命周期末尾使用，在任何时候都可以使用。</li><li>调用 <code>sendBeacon()</code> 后，浏览器会把请求添加到一个内部的请求队列。浏览器会主动地发送队列中的请求。当请求成功把数据加入传输队列时，<code>sendBeacon()</code> 方法将会返回 <code>true</code>，否则返回 <code>false</code>。</li><li>浏览器保证在原始页面已经关闭的情况下也会发送请求。</li><li>状态码、超时和其他网络原因造成的失败完全是不透明的，不能通过编程方式处理。</li><li>请求会携带调用 <code>sendBeacon()</code> 时所有相关的 Cookie 。</li></ul></li><li><p><strong>参数</strong> ：</p><ul><li><code>url</code> ： 必须。请求的 <code>URL</code> 。</li><li><code>data</code> ： 可选。将要发送的 <code>ArrayBuffer</code>、<code>ArrayBufferView</code>、<code>Blob</code>、<code>DOMString</code>、<code>FormData</code> 或 <code>URLSearchParams</code> 类型的数据。</li></ul></li></ul><h2 id="web-socket" tabindex="-1"><a class="header-anchor" href="#web-socket"><span>Web Socket</span></a></h2><p><code>WebSocket</code> 对象提供了用于创建和管理 <code>WebSocket</code> 连接，以及可以通过该连接发送和接收数据的 API。</p><h3 id="websocket-构造函数" tabindex="-1"><a class="header-anchor" href="#websocket-构造函数"><span>WebSocket 构造函数</span></a></h3><p><strong>语法</strong> ： <code>new WebSocket(url[, protocols])</code></p><p><strong>描述</strong> ： 创建一个 <code>WebSocket</code> 对象。</p><p><strong>参数</strong> ：</p><ul><li><p><code>url</code> ： 连接 URL ，WebSocket 服务器将响应的 URL。</p></li><li><p><code>protocols</code> ： 可选。一个协议字符串或者一个包含协议字符串的数组。</p><ul><li>字符串用于指定子协议，单个服务器可以实现多个 WebSocket 子协议（例如，希望一台服务器能够根据指定的协议（protocol）处理不同类型的交互）。</li><li>如果不指定协议字符串，则假定为空字符串。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> socket</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> WebSocket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;ws://www.example.com/server.php&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> stringData</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Hello world!&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> arrayBufferData</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Uint8Array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;f&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;o&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;o&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> blobData</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Blob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;f&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;o&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;o&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">stringData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">arrayBufferData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">blobData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="websocket-属性" tabindex="-1"><a class="header-anchor" href="#websocket-属性"><span>WebSocket 属性</span></a></h3><ul><li><p><code>url</code> ： 只读属性。返回构造函数创建 WebSocket 实例对象时 URL 的绝对路径。</p></li><li><p><code>readyState</code> : 只读属性。返回当前 WebSocket 的链接状态。</p><ul><li><code>WebSocket.CONNECTING</code> ： 值为 <code>0</code> ，正在链接中。</li><li><code>WebSocket.OPEN</code> ： 值为 <code>1</code> ，链接已经建立，可以通信。</li><li><code>WebSocket.CLOSING</code> ： 值为 <code>2</code> ，链接正在关闭。</li><li><code>WebSocket.CLOSED</code> ： 值为 <code>3</code> ，链接已经关闭或者没有链接成功。</li></ul></li><li><p><code>protocol</code> ： 只读属性。用于返回服务器端选中的子协议的名字。在创建 WebSocket 对象时，在参数 <code>protocols</code> 中指定的字符串，当没有已建立的链接时为空串。</p></li><li><p><code>binaryType</code> ： 返回 websocket 连接所传输二进制数据的类型。可选值为 <code>blob</code> 、 <code>arraybuffer</code> 。</p></li><li><p><code>bufferedAmount</code> ： 只读属性。返回已经被 <code>send()</code> 方法放入队列中但还没有被发送到网络中的数据的字节数。</p><ul><li>一旦队列中的所有数据被发送至网络，则该属性值将被重置为 <code>0</code>。</li><li>若在发送过程中连接被关闭，则属性值不会重置为 <code>0</code>。</li><li>如果不断地调用 <code>send()</code> ，则该属性值会持续增长</li></ul></li><li><p><code>extensions</code> ： 只读属性。返回服务器已选择的扩展值。链接可以协定的扩展值，只有空字符串或者一个扩展列表。</p></li></ul><h3 id="websocket-方法" tabindex="-1"><a class="header-anchor" href="#websocket-方法"><span>WebSocket 方法</span></a></h3><ul><li><p><code>WebSocket.close()</code></p><p><strong>语法</strong> ： <code>WebSocket.close([code[, reason]])</code></p><p><strong>描述</strong> ： 关闭 WebSocket 连接或者正在连接的连接。</p><p><strong>参数</strong> ：</p><ul><li><code>code</code> ： 可选。表示关闭连接的状态码。默认值为 <code>1005</code> 。</li><li><code>reason</code> ： 可选。字符串，表示连接被关闭的原因。</li></ul></li><li><p><code>WebSocket.send()</code></p><p><strong>语法</strong> ： <code>WebSocket.send(data)</code></p><p><strong>描述</strong> ： 使用 WebSocket 连接发送数据。</p></li></ul><h3 id="websocket-事件" tabindex="-1"><a class="header-anchor" href="#websocket-事件"><span>WebSocket 事件</span></a></h3><ul><li><p><code>WebSocket.onclose</code> 事件：在 WebSocket 连接状态 <code>readyState</code> 变为 <code>WebSocket.CLOSED</code> 时触发。</p></li><li><p><code>WebSocket.error</code> 事件 ： 由于一些错误事件的发生 (例如无法发送一些数据) 而被关闭时触发。</p></li><li><p><code>WebSocket.message</code> 事件 ： 在 WebSocket 接收到新消息时被触发</p></li><li><p><code>WebSocket.open</code> 事件 ： 在 WebSocket 连接状态 <code>readyState</code> 变为 <code>WebSocket.OPEN</code> 时触发。</p></li></ul>`,84)]))}const p=s(t,[["render",l]]),r=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82.html","title":"网络请求","lang":"zh-CN","frontmatter":{"description":"网络请求 XMLHttpRequest 对象 XMLHttpRequest（XHR）对象用于与服务器交互。通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL，获取数据。 XMLHttpRequest 实例属性 XMLHttpRequest.readyState ： 返回一个 XMLHttpRequest 代理当前所处的状态。一...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"网络请求\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-28T08:18:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF/JavaScript/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"网络请求"}],["meta",{"property":"og:description","content":"网络请求 XMLHttpRequest 对象 XMLHttpRequest（XHR）对象用于与服务器交互。通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL，获取数据。 XMLHttpRequest 实例属性 XMLHttpRequest.readyState ： 返回一个 XMLHttpRequest 代理当前所处的状态。一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-28T08:18:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-28T08:18:46.000Z"}]]},"git":{"createdTime":1700736799000,"updatedTime":1740730726000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh21g"},{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":25.53,"words":7658},"filePathRelative":"前端/JavaScript/基础知识/网络请求.md","excerpt":"\\n<h2>XMLHttpRequest 对象</h2>\\n<p><code>XMLHttpRequest</code>（XHR）对象用于与服务器交互。通过 <code>XMLHttpRequest</code> 可以在不刷新页面的情况下请求特定 URL，获取数据。</p>\\n<h3>XMLHttpRequest 实例属性</h3>\\n<ul>\\n<li>\\n<p><code>XMLHttpRequest.readyState</code> ： 返回一个 <code>XMLHttpRequest</code> 代理当前所处的状态。一个 XHR 代理总是处于下列状态中的一个：</p>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:center\\">值</th>\\n<th style=\\"text-align:center\\">状态</th>\\n<th style=\\"text-align:left\\">描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:center\\"><code>0</code></td>\\n<td style=\\"text-align:center\\"><code>UNSENT</code></td>\\n<td style=\\"text-align:left\\"><code>XMLHttpRequest</code> 代理已创建，但尚未调用 <code>open()</code> 方法</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\"><code>1</code></td>\\n<td style=\\"text-align:center\\"><code>OPENED</code></td>\\n<td style=\\"text-align:left\\"><code>open()</code> 方法已经被调用，可以使用 <code>XMLHttpRequest</code> 实例的 <code>setRequestHeader()</code> 方法，设定 HTTP 请求的头信息</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\"><code>2</code></td>\\n<td style=\\"text-align:center\\"><code>HEADERS_RECEIVED</code></td>\\n<td style=\\"text-align:left\\"><code>send()</code> 方法已经被调用，并且头部和状态已经可获得</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\"><code>3</code></td>\\n<td style=\\"text-align:center\\"><code>LOADING</code></td>\\n<td style=\\"text-align:left\\">响应体部分正在被接收。<code>responseText</code> 属性已经包含部分数据</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\"><code>4</code></td>\\n<td style=\\"text-align:center\\"><code>DONE</code></td>\\n<td style=\\"text-align:left\\">请求操作已经完成。服务器返回的数据已经完全或失败</td>\\n</tr>\\n</tbody>\\n</table>\\n</li>\\n<li>\\n<p><code>XMLHttpRequest.response</code> ： 只读。返回响应的正文（即 HTTP 回应的 body 部分）。返回的类型为 <code>ArrayBuffer</code>、<code>Blob</code>、<code>Document</code>、<code>JavaScript Object</code> 或字符串中的一个，取决于请求的 <code>responseType</code> 属性。</p>\\n<ul>\\n<li>如果请求未成功或尚未发送，则返回 <code>null</code>。</li>\\n<li>如果 <code>responseType</code> 属性为 <code>\\"text\\"</code> 或 <code>\\"\\"</code> （空字符串），在请求状态为 <code>LOADING</code> 时，<code>response</code> 属性包含到目前为止该请求已经取得的内容。</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>XMLHttpRequest.responseType</code> ： 枚举字符串。用于指定响应中包含的数据类型。</p>\\n<ul>\\n<li>该属性可写。在调用 <code>open()</code> 方法之后、调用 <code>send()</code> 方法之前，可设置该属性的值。</li>\\n<li>如果 <code>responseType</code> 设为 <code>\\"\\"</code> （空字符串），等同于默认值 <code>\\"text\\"</code>。</li>\\n<li><code>responseType</code> 属性枚举值\\n<ul>\\n<li><code>\\"\\"</code>（空字符串） ： 等同于 <code>\\"text\\"</code> ，表示服务器返回文本数据。</li>\\n<li><code>\\"arraybuffer\\"</code> ： <code>ArrayBuffer</code> 对象，表示服务器返回二进制数组。</li>\\n<li><code>\\"blob\\"</code> ： <code>Blob</code> 对象，表示服务器返回二进制对象。</li>\\n<li><code>\\"document\\"</code> ： <code>Document</code> 对象，表示服务器返回一个文档对象。</li>\\n<li><code>\\"json\\"</code> ： JSON 对象。</li>\\n<li><code>\\"text\\"</code> ： 字符串。</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>XMLHttpRequest.responseText</code> ： 只读。返回从服务器接收到的字符串。只有 HTTP 请求完成接收以后，该属性才会包含完整的数据。</p>\\n</li>\\n<li>\\n<p><code>XMLHttpRequest.responseXML</code> ： 字符串。表示发送数据的服务器的网址。</p>\\n<ul>\\n<li>如果 URL 为空，则返回空字符串。</li>\\n<li>如果 URL 有锚点，则位于 URL # 后面的内容会被删除。</li>\\n<li>如果 URL 有重定向，<code>responseURL</code> 的值会是经过多次重定向后的最终 URL。</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>XMLHttpRequest.responseURL</code> ： 只读。返回从服务器接收到 HTML 或 XML 的 <code>Document</code> 对象。</p>\\n<ul>\\n<li>如果请求未成功，尚未发送，或者检索的数据无法正确解析为 XML 或 HTML，则为 <code>null</code>。</li>\\n<li>该属性生效的前提是 HTTP 回应的 <code>Content-Type</code> 头信息等于 <code>text/xml</code> 或 <code>application/xml</code> 。要求在发送请求前，<code>XMLHttpRequest.responseType</code> 属性要设为 <code>document</code>。</li>\\n<li>如果 HTTP 回应的 <code>Content-Type</code> 头信息不等于 <code>text/xml</code> 和 <code>application/xml</code> ，从 <code>responseXML</code> 获取数据（即把数据按照 DOM 格式解析），需要手动调用 <code>XMLHttpRequest.overrideMimeType()</code> 方法，强制进行 XML 解析。</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>XMLHttpRequest.status</code> ： 只读。返回 <code>XMLHttpRequest</code> 响应中的 HTTP 状态码。</p>\\n<ul>\\n<li>请求成功状态码为 <code>200</code> ，如果服务器没有返回状态码，该属性默认是 <code>200</code> 。请求发出之前，该属性为 <code>0</code> 。</li>\\n<li>HTTP 响应状态码分类\\n<ul>\\n<li>信息响应 (<code>100</code> – <code>199</code>)</li>\\n<li>成功响应 (<code>200</code> – <code>299</code>)</li>\\n<li>重定向消息 (<code>300</code> – <code>399</code>)</li>\\n<li>客户端错误响应 (<code>400</code> – <code>499</code>)</li>\\n<li>服务端错误响应 (<code>500</code> – <code>599</code>)</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>XMLHttpRequest.statusText</code> ： 服务器返回的一个 <code>DOMString</code> 类型的文本信息（包含了响应的 HTTP 状态码）。</p>\\n</li>\\n<li>\\n<p><code>XMLHttpRequest.timeout</code> ： 表示请求的超时时间（毫秒），超过该时长，请求会自动终止。默认值为 <code>0</code> ，表示没有超时限制。</p>\\n</li>\\n<li>\\n<p><code>XMLHttpRequest.upload</code> ： 返回一个 <code>XMLHttpRequestUpload</code> 对象，用来表示文件上传的进度。可以通过对其绑定事件来监听上传进度。</p>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:center\\">事件</th>\\n<th style=\\"text-align:left\\">描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:center\\"><code>onloadstart</code></td>\\n<td style=\\"text-align:left\\">获取开始</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\"><code>onprogress</code></td>\\n<td style=\\"text-align:left\\">数据传输进行中</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\"><code>onabort</code></td>\\n<td style=\\"text-align:left\\">获取操作终止</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\"><code>onerror</code></td>\\n<td style=\\"text-align:left\\">获取失败</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\"><code>onload</code></td>\\n<td style=\\"text-align:left\\">获取成功</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\"><code>ontimeout</code></td>\\n<td style=\\"text-align:left\\">获取操作在用户规定的时间内未完成</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\"><code>onloadend</code></td>\\n<td style=\\"text-align:left\\">获取完成（不论成功与否）</td>\\n</tr>\\n</tbody>\\n</table>\\n</li>\\n<li>\\n<p><code>XMLHttpRequest.withCredentials</code> ： 布尔值，表示跨域请求时，用户信息（比如 <code>Cookie</code> 和认证的 HTTP 头信息）是否会包含在请求之中，默认为 <code>false</code> 。</p>\\n<ul>\\n<li>同源请求设置 <code>withCredentials</code> 无效。</li>\\n<li>为了让这个属性生效，服务器必须显式返回 <code>Access-Control-Allow-Credentials</code> 头信息。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{p as comp,r as data};
