import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as a,o as t}from"./app-CwERxs91.js";const n="/blogs/assets/number-64-bit.drawio-DVCPZfsO.png",l="/blogs/assets/0.1_0.2-binary.drawio-C11DObKS.png",d={};function r(p,i){return t(),e("div",null,i[0]||(i[0]=[a(`<h1 id="javascript词法和类型" tabindex="-1"><a class="header-anchor" href="#javascript词法和类型"><span>JavaScript词法和类型</span></a></h1><h2 id="unicode-字符集" tabindex="-1"><a class="header-anchor" href="#unicode-字符集"><span>Unicode（字符集）</span></a></h2><p>中文又称万国码、国际码、统一码、单一码，是计算机科学领域的业界标准。它整理、编码了世界上大部分的文字系统，使得电脑可以用更为简单的方式来呈现和处理文字。</p><h3 id="blocks-区段" tabindex="-1"><a class="header-anchor" href="#blocks-区段"><span>Blocks（区段）</span></a></h3><p>在 Unicode 中，Blocks 被定义为一组连续码位的范围。Blocks 会被给予唯一的名称，且区段与区段间不会重叠。</p><h3 id="categories-类别" tabindex="-1"><a class="header-anchor" href="#categories-类别"><span>Categories （类别）</span></a></h3><h2 id="lexical-grammar-词法" tabindex="-1"><a class="header-anchor" href="#lexical-grammar-词法"><span>Lexical Grammar（词法）</span></a></h2><p>ECMAScript 源码文本会被从左到右扫描，并被转换为一系列的输入元素，包括 token、控制符、行终止符、注释和空白符。</p><h3 id="control-characters-格式控制符" tabindex="-1"><a class="header-anchor" href="#control-characters-格式控制符"><span>Control characters（格式控制符）</span></a></h3><p>格式控制符用于控制对源码文本的解释，但是并不会显示出来。</p><table><thead><tr><th>代码点</th><th>名称</th><th>缩写</th><th>说明</th></tr></thead><tbody><tr><td>U+200C</td><td>零宽不连字字符</td><td><code>&lt;ZWNJ&gt;</code></td><td>放置在一些经常会被当成连字的字符之间，用于将它们分别以独立形式显示（<a href="https://en.wikipedia.org/wiki/Zero-width_non-joiner" target="_blank" rel="noopener noreferrer">Wikipedia</a>）</td></tr><tr><td>U+200D</td><td>零宽连字字符</td><td><code>&lt;ZWJ&gt;</code></td><td>放置在一些通常不会被标记为连字的字符之间，用于将这些字符以连字形式显示（<a href="https://en.wikipedia.org/wiki/Zero-width_joiner" target="_blank" rel="noopener noreferrer">Wikipedia</a>）</td></tr><tr><td>U+FEFF</td><td>字节顺序标记</td><td><code>&lt;BOM&gt;</code></td><td>在脚本开头使用，除了将脚本标记为Unicode格式以外，还用来标记文本的字节流方向（<a href="https://en.wikipedia.org/wiki/Byte_order_mark" target="_blank" rel="noopener noreferrer">Wikipedia</a>）</td></tr></tbody></table><h3 id="whitespace-空白字符" tabindex="-1"><a class="header-anchor" href="#whitespace-空白字符"><span>WhiteSpace （空白字符）</span></a></h3><p>空白符提升了源码的可读性，并将标记（tokens）区分开。这些符号通常不影响源码的功能。通常可以用压缩器（Minification）来移除源码中的空白，减少数据传输量。</p><p>压缩器（Minification）：在编程语言（尤其是JavaScript）的范畴里，指的是在不影响功能的情况下，移除所有非功能性必要之源代码字元（如：空白、换行、注释等）。</p><table><thead><tr><th style="text-align:left;">代码点</th><th style="text-align:left;">名称</th><th style="text-align:left;">缩写</th><th style="text-align:left;">说明</th><th style="text-align:left;">转义序列</th></tr></thead><tbody><tr><td style="text-align:left;">U+0009</td><td style="text-align:left;">制表符</td><td style="text-align:left;"><code>&lt;HT&gt;</code></td><td style="text-align:left;">水平制表符</td><td style="text-align:left;">\\t</td></tr><tr><td style="text-align:left;">U+000B</td><td style="text-align:left;">垂直制表符</td><td style="text-align:left;"><code>&lt;VT&gt;</code></td><td style="text-align:left;">垂直制表符</td><td style="text-align:left;">\\v</td></tr><tr><td style="text-align:left;">U+000C</td><td style="text-align:left;">分页符</td><td style="text-align:left;"><code>&lt;FF&gt;</code></td><td style="text-align:left;">分页符</td><td style="text-align:left;">\\f</td></tr><tr><td style="text-align:left;">U+0020</td><td style="text-align:left;">空格</td><td style="text-align:left;"><code>&lt;SP&gt;</code></td><td style="text-align:left;">空格</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">U+00A0</td><td style="text-align:left;">无间断空格</td><td style="text-align:left;"><code>&lt;NBSP&gt;</code></td><td style="text-align:left;">在该空格处不会换行</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">U+FEFF</td><td style="text-align:left;">零宽非断行空格</td><td style="text-align:left;"><code>&lt;ZWNBSP&gt;</code></td><td style="text-align:left;">出现在字节流的中间，表达零宽度非换行空格的意义，用户看起来就是一个空格。从Unicode3.2开始，U+FEFF只能出现在字节流的开头，只能用于标识字节序。</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Others</td><td style="text-align:left;">其他 Unicode 空白</td><td style="text-align:left;"><code>&lt;USP&gt;</code></td><td style="text-align:left;"><a href="http://en.wikipedia.org/wiki/Space_(punctuation)#Spaces_in_Unicode" target="_blank" rel="noopener noreferrer">Wikipedia上对 Unicode 空白的介绍</a></td><td style="text-align:left;"></td></tr></tbody></table><h3 id="lineterminator-行终止符" tabindex="-1"><a class="header-anchor" href="#lineterminator-行终止符"><span>LineTerminator （行终止符）</span></a></h3><p>除了空白符之外，行终止符也可以提高源码的可读性。不同的是，行终止符可以影响 JavaScript 代码的执行。行终止符也会影响自动分号补全的执行。在正则表达式中，行终止符会被 \\s 匹配。</p><p>在 ECMAScript 中，只有下列 Unicode 字符会被当成行终止符，其他的行终止符（比如 Next Line、NEL、U+0085 等）都会被当成空白符。</p><table><thead><tr><th style="text-align:left;">编码</th><th style="text-align:left;">名称</th><th style="text-align:left;">缩写</th><th style="text-align:left;">说明</th><th style="text-align:left;">转义序列</th></tr></thead><tbody><tr><td style="text-align:left;">U+000A</td><td style="text-align:left;">换行符</td><td style="text-align:left;"><code>&lt;LF&gt;</code></td><td style="text-align:left;">在UNIX系统中起新行</td><td style="text-align:left;">\\n</td></tr><tr><td style="text-align:left;">U+000D</td><td style="text-align:left;">回车符</td><td style="text-align:left;"><code>&lt;CR&gt;</code></td><td style="text-align:left;">在 Commodore 和早期的 Mac 系统中起新行。在一部分Windows风格文本编辑器中，换行是两个字符\\r\\n。</td><td style="text-align:left;">\\r</td></tr><tr><td style="text-align:left;">U+2028</td><td style="text-align:left;">行分隔符</td><td style="text-align:left;"><code>&lt;LS&gt;</code></td><td style="text-align:left;">行分隔符（<a href="http://en.wikipedia.org/wiki/Newline" target="_blank" rel="noopener noreferrer">Wikipedia</a>）</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">U+2029</td><td style="text-align:left;">段分隔符</td><td style="text-align:left;"><code>&lt;PS&gt;</code></td><td style="text-align:left;">段落分隔符（<a href="http://en.wikipedia.org/wiki/Newline" target="_blank" rel="noopener noreferrer">Wikipedia</a>）</td><td style="text-align:left;"></td></tr></tbody></table><p>大部分 Line Terminator 在被词法分析器扫描出之后，会被语法分析器丢弃，但是换行符会影响JavaScript的两个重要语法特性：自动插入分号 和 “no line terminator” 规则。</p><h3 id="comment-注释" tabindex="-1"><a class="header-anchor" href="#comment-注释"><span>Comment （注释）</span></a></h3><p>注释用来在源码中增加提示、笔记、建议、警告等信息，可以帮助阅读和理解源码。在调试时，可以用来将一段代码屏蔽掉，防止其运行。</p><p>在 JavaScript 中，有两种添加注释的方法：</p><ul><li><p><strong>单行注释</strong>（single-line comment），使用 <code>//</code></p></li><li><p><strong>多行注释</strong>（multiple-line comment），使用 <code>/* */</code></p></li></ul><p>注意：多行注释中是否包含换行符号，会对JavaScript语法产生影响，对于 “no line terminator” 规则来说，带换行的多行注释与换行符是等效的。</p><h3 id="token-词" tabindex="-1"><a class="header-anchor" href="#token-词"><span>Token （词）</span></a></h3><h4 id="punctuator-符号" tabindex="-1"><a class="header-anchor" href="#punctuator-符号"><span>Punctuator （符号）</span></a></h4><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-md"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{ ( ) [ ] . ... ; , &lt; &gt; &lt;= &gt;= == != === !== + - _ % </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\*\\*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ++ -- &lt;&lt; &gt;&gt; &gt;&gt;&gt; &amp; | ^ ! ~ &amp;&amp; || ? : = += -= _= %= </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\*\\*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= &amp;= |= ^= =&gt; / /= }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="identifiername-标识符名称" tabindex="-1"><a class="header-anchor" href="#identifiername-标识符名称"><span>IdentifierName（标识符名称）</span></a></h4><p><code>IdentifierName</code> 可以以美元符 <code>$</code> 、下划线 <code>_</code> 、或者 Unicode 字母 开始，除了开始字符以外，<code>IdentifierName</code>中还可以使用 Unicode 中的连接标记、数字、以及连接符号。</p><p><code>IdentifierName</code> 可以是 <code>Identifier</code> 、<code>NullLiteral</code>、<code>BooleanLiteral</code> 或者 <code>keyword</code>，在<code>ObjectLiteral</code>中，<code>IdentifierName</code> 还可以被直接当做属性名称使用。</p><p>仅当不是保留字的时候，<code>IdentifierName</code> 会被解析为 <code>Identifier</code>。</p><ul><li><p>Identifier （标识符）</p></li><li><p>keyword （关键字）</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-md"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">await break case catch class const continue debugger default delete do else export extends finally for function if import ininstance of new return super switch this throw try typeof var void while with yield</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Future reserved keywords （未来保留关键字）</p><p>在严格模式和非严格模式中均不能使用： <code>enum</code></p><p>只在模块代码中被当成保留关键字： <code>await</code></p><p>以下关键字只在严格模式中被当成保留关键字：</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-md"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">implements package protected interface private public</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>除了这些之外，<code>NullLiteral</code>（<code>null</code>）和<code>BooleanLiteral</code>（<code>true false</code>）也是保留字，不能用于<code>Identifier</code>。</p></li><li><p>Future reserved keywords in older standards （之前标准中的保留关键字）</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-md"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">abstract boolean byte char double final float goto int long native short synchronized transient volatile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h4 id="literal-直接量" tabindex="-1"><a class="header-anchor" href="#literal-直接量"><span>Literal （直接量）</span></a></h4><ul><li><p>Null literal：<code>null</code></p></li><li><p>Boolean literal （布尔）：<code>true</code> / <code>false</code></p></li><li><p>Numeric literal （数值）</p><ul><li><p>Number</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-md"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// ========== 十进制 ==========</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.01 12.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">12.01</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 科学计数法</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">10.24E+2 //1024</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">10.24e-2 // 0.1024</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">10.24e2 // 1024</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">12.toString()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// Uncaught SyntaxError: Invalid or unexpected token</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 12. 会被当做省略了小数点后面部分的数字而看成一个整体，所以要想让点单独成为一个 token，就要加入空格。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">12 .toString()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 谨慎使用 0 开头的数值：如果 0 以后的最高位比 8 小，数值将会被认为是八进制</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">0888 // 转换为十进制 888</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">0777 // 转换为八进制 777，十进制为 511</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// ========== 二进制 ==========</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 以 0b 或 0B 开头表示</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 如果 0b 之后有除了0或1以外的数字，将会抛出SyntaxError：&quot;Missing binary digits after 0b&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">var FLT_SIGNBIT = 0b10000000000000000000000000000000; // 2147483648</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">var FLT_EXPONENT = 0b01111111100000000000000000000000; // 2139095040</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">var FLT_MANTISSA = 0B00000000011111111111111111111111; // 8388607</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// ========== 八进制 ==========</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 以 0o 或 0O 开头表示</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 如果有不在（01234567）中的数字，将会抛出SyntaxError：&quot;Missing octal digits after 0o&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">var n = 0O755; // 493</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">var m = 0o644; // 420</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// ========== 十六进制 ==========</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 以 0x 或 0X 开头表示</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 如果有不在（0123456789ABCDEF）中的数字，将会抛出SyntaxError：&quot;Identifier starts immediately after numeric literal&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">0xFFFFFFFFFFFFFFFFF // 295147905179352830000</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">0x123456789ABCDEF // 81985529216486900</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">0XA // 10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>BigInt</p><p>内置对象，它提供了一种方法来表示大于 <code>2^53 - 1</code> 的整数。这原本是 JavaScript 中可以用 Number 表示的最大数字。<strong><code>BigInt</code></strong> 可以表示任意大的整数。</p><p>可以用在一个整数字面量后面加 <code>n</code> 的方式定义一个 <code>BigInt</code> 。eg： <code>10n</code> 或者调用函数 <code>BigInt()</code></p></li></ul></li><li><p>Object literals （对象）</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> o</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;foo&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;bar&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">c</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 42</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ES6 中的简略表示方法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;foo&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;bar&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">c</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 42</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> o</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Array literals （数组）</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> arr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1954</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1974</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1990</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2014</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>String literals （字符串）</p><p>JavaScript中的 StringLiteral 支持 <strong>单引号</strong> 和 <strong>双引号</strong> 两种写法。</p><p>在双引号字符串直接量中，双引号必须转义，在单引号字符串直接量中，单 引号必须转义。字符串中其他必须转义的字符是 <code>\\</code> 和 <code>所有换行符</code>。</p><p>JavaScript中支持四种转义形式：</p><ul><li><p>单字符转义。即一个反斜杠 <code>\\</code> 后面跟一个字符这种形式。</p><table><thead><tr><th style="text-align:center;">转义字符</th><th style="text-align:center;">转义Unicode</th><th style="text-align:center;">产生字符</th></tr></thead><tbody><tr><td style="text-align:center;">&#39;</td><td style="text-align:center;">U+0022</td><td style="text-align:center;">&quot;</td></tr><tr><td style="text-align:center;">&quot;</td><td style="text-align:center;">U+0027</td><td style="text-align:center;">&#39;</td></tr><tr><td style="text-align:center;">\\</td><td style="text-align:center;">U+005C</td><td style="text-align:center;">\\</td></tr><tr><td style="text-align:center;">b</td><td style="text-align:center;">U+0008</td><td style="text-align:center;"><code>&lt;BS&gt;</code></td></tr><tr><td style="text-align:center;">f</td><td style="text-align:center;">U+000C</td><td style="text-align:center;"><code>&lt;FF&gt;</code></td></tr><tr><td style="text-align:center;">n</td><td style="text-align:center;">U+000A</td><td style="text-align:center;"><code>&lt;LF&gt;</code></td></tr><tr><td style="text-align:center;">r</td><td style="text-align:center;">U+000D</td><td style="text-align:center;"><code>&lt;CR&gt;</code></td></tr><tr><td style="text-align:center;">t</td><td style="text-align:center;">U+0009</td><td style="text-align:center;"><code>&lt;HT&gt;</code></td></tr><tr><td style="text-align:center;">v</td><td style="text-align:center;">U+000B</td><td style="text-align:center;"><code>&lt;VT&gt;</code></td></tr></tbody></table></li><li><p>数字</p></li><li><p>x和u</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-md"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// ========== 十六进制转义序列 ==========</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&#39;\\xA9&#39; // &quot;©&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// ========== Unicode 转义序列 ==========</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// Unicode 转义序列要求在 \\u 之后至少有四个字符</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&#39;\\u00A9&#39; // &quot;©&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// ========== Unicode 编码转义 ==========</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// ECMAScript 6新增特性</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 使用Unicode编码转义，任何字符都可以被转义为十六进制编码。最高可以用到0x10FFFF</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 使用单纯的Unicode转义通常需要写成分开的两半以达到相同的效果</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 可以参考 String.fromCodePoint() 和 String.prototype.codePointAt()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&#39;\\u{2F804}&#39; // 你</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&#39;\\uD87E\\uDC04&#39; // 使用单纯 Unicode 转义： 你</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>所有的换行符</p></li></ul></li><li><p>Regular expression literals （正则表达式）</p><p>正则表达式由 Body 和 Flags 两部分组成，例如：<code>/RegularExpressionBody/g</code></p><p>其中 Body 部分至少有一个字符，第一个字符不能是 <code>*</code>（因为 <code>/*</code> 跟多行注释有词法冲突）。</p><p>正则表达式中的flag在词法阶段不会限制字符。</p></li><li><p>Template literals （字符串模板）</p><p>从语法结构上，Template 是个整体，其中的 <code>\${ }</code> 是并列关系。但是实际上，在JavaScript 词法中，包含 <code>\${ }</code> 的 Template，是被拆开分析的。</p><p>模板字符串不需要关心大多数字符的转义，但是至少 \${ 和 \`。还是需要处理的。模板中的转义跟字符串几乎完全一样，都是使用 \\ 。</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-md"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">\`</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">a\${b}c\${d}e</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 在 JavaScript 中被认为是：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\`a\${    --&gt;    模板头</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b       --&gt;    普通标识符</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}c\${    --&gt;    模板尾</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d       --&gt;    普通标识符</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}e\` --&gt; 模板尾</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 模板支持添加处理函数的写法，模板的各段会被拆开，传递给函数当参数：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">function f(){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">console.log(arguments);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">var a = &quot;world&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">\`</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">Hello \${a}!</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; // [[&quot;Hello&quot;, &quot;!&quot;], world]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="自动分号补全" tabindex="-1"><a class="header-anchor" href="#自动分号补全"><span>自动分号补全</span></a></h3><p>一些 JavaScript 语句必须用分号结束，所以会被自动分号补全 (ASI)影响：</p><ul><li>空语句</li><li><code>let</code>、<code>const</code>、变量声明</li><li><code>import</code>、<code>export</code>、模块定义</li><li>表达式语句</li><li><code>debugger</code></li><li><code>continue</code>、<code>break</code>、<code>throw</code></li><li><code>return</code></li></ul><p>ECMAScript 规格提到自动分号补全的三个规则：</p><ul><li><p>当出现一个不允许的 行终止符 或 &quot; } &quot; 时，会在其之前插入一个分号。</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-md"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{ 1 2 } 3</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 将会被 ASI 转换为</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{ 1 2 ;} 3;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当捕获到标识符输入流的结尾，并且无法将单个输入流转换为一个完整的程序时，将在结尾插入一个分号。</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-md"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a = b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++c</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 将被 ASI 转换为</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a = b;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++c;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当语句中包含语法中的限制产品后跟一个行终止符的时候，将会在结尾插入一个分号。带“这里没有行终止符”则的语句有：</p><ul><li>后置运算符（<code>++</code> 和 <code>--</code>）</li><li><code>continue</code></li><li><code>break</code></li><li><code>return</code></li><li><code>yield</code>、<code>yield*</code></li><li><code>module</code></li></ul><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-md"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">return</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a + b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 将被 ASI 转换为</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">return;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a + b;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="特殊设计" tabindex="-1"><a class="header-anchor" href="#特殊设计"><span>特殊设计</span></a></h3><h4 id="除法运算符与正则表达式" tabindex="-1"><a class="header-anchor" href="#除法运算符与正则表达式"><span>除法运算符与正则表达式</span></a></h4><p>JavaScript 不但支持除法运算符（<code>/</code> 和 <code>/=</code>），还支持正则表达式（eg： <code>/abc/</code>）。对于词法分析来说，无法处理，所以 JavaScript 的解决方案是定义两组词法，靠语法分析传一个标志给词法分析器，来决定使用哪一套词法。</p><h4 id="字符串模板" tabindex="-1"><a class="header-anchor" href="#字符串模板"><span>字符串模板</span></a></h4><p>JavaScript 词法的另外一个特别设计是字符串模板。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`Hello, </span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>理论上，<code>\${}</code> 内部可以放任何 JavaScript 表达式代码，这部分词法不允许出现 <code>}</code> 运算符。</p><p>是否允许 <code>}</code> 运算符、除法运算符和正则表达式就是四种词法定义，所以在 JavaScript 标准中，可以看到四种定义：</p><ul><li>InputElementDiv</li><li>InputElementRegExp</li><li>InputElementRegExpOrTemplateTail</li><li>InputElementTemplateTail</li></ul><h2 id="number" tabindex="-1"><a class="header-anchor" href="#number"><span>Number</span></a></h2><p>JavaScript 中的数字类型是 基于 IEEE 754 标准的双精度 64 位二进制格式的值（-(2^53 - 1) 至 2^53 - 1）。它并没有为整数给出一种特定的类型。除了能够表示浮点数外，还有一些带符号的值：<code>+Infinity</code>，<code>-Infinity</code> 和 <code>NaN</code> (非数值，Not-a-Number)。</p><p>双精度浮点数使用64 bit来进行存储，结构图如下：</p><p><img src="`+n+`" alt="number-64-bit"></p><p>根据国际标准IEEE 754，任意一个二进制浮点数 V 可以表示成下面的形式：<strong><code>V = (-1)^s * M * 2^E</code></strong></p><p>对于32位的浮点数：最高的1位是符号位 <code>s</code>，接着的 8 位是指数 <code>E</code>，剩下的 23 位为有效数字 <code>M</code>。</p><p>对于64位的浮点数：最高的1位是符号位 <code>s</code>，接着的 11 位是指数 <code>E</code>，剩下的 52 位为有效数字 <code>M</code>。</p><ul><li><code>(-1)^s</code>：表示符号位。 <ul><li>当 s=0 ,V 为正数</li><li>当 s=1 , V 为负数</li></ul></li><li><code>M</code>：表示有效数字，取值范围为：1≤M&lt;2 <ul><li><code>M</code> 可以写成 1.xxxxxx 的形式，其中 xxxxxx 表示小数部分。</li><li>IEEE 754规定，在计算机内部保存 <code>M</code> 时，默认这个数的第一位总是 1，因此可以被舍去，只保存后面的 xxxxxx 部分。其目的是节省 1 位有效数字，多保存 1 位有效数字。</li><li>示例：保存 1.01 的时候，只保存 01，等到读取的时候，再把第一位的 1 加上去。</li></ul></li><li><code>2^E</code>：表示指数位（<code>阶数</code> + <code>偏移量</code>）。阶数是：2^(e-1) - 1，e 为阶码的位数。偏移量是把小数点移动到整数位只有 1 时移动的位数，正数表示向左移，负数表示向右移。</li></ul><h3 id="_0-1-0-2-计算精度丢失问题" tabindex="-1"><a class="header-anchor" href="#_0-1-0-2-计算精度丢失问题"><span>0.1 + 0.2 计算精度丢失问题</span></a></h3><h4 id="十进制转换为二进制" tabindex="-1"><a class="header-anchor" href="#十进制转换为二进制"><span>十进制转换为二进制</span></a></h4><p>使用 “乘2取整，顺序排列” 的方法，将十进制转换为二进制：</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-md"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// ========== 0.1 转换为 二进制 ==========</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(1) 0.1 x 2 = 0.2 取整数位 0 得 0.0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(2) 0.2 x 2 = 0.4 取整数位 0 得 0.00</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(3) 0.4 x 2 = 0.8 取整数位 0 得 0.000</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(4) 0.8 x 2 = 1.6 取整数位 1 得 0.0001</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(5) 0.6 x 2 = 1.2 取整数位 1 得 0.00011</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// ========== 无限循环 ==========</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(6) 0.2 x 2 = 0.4 取整数位 0 得 0.000110</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(7) 0.4 x 2 = 0.8 取整数位 0 得 0.0001100</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(8) 0.8 x 2 = 1.6 取整数位 1 得 0.00011001</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(9) 0.6 x 2 = 1.2 取整数位 1 得 0.000110011</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n) ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">得到一个无限循环的二进制小数 0.0001 1001 1001 1001......</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// ========== 0.2 转换为 二进制 ==========</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(1) 0.2 x 2 = 0.4 取整数位 0 得 0.0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(2) 0.4 x 2 = 0.8 取整数位 0 得 0.00</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(3) 0.8 x 2 = 1.6 取整数位 0 得 0.001</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(4) 0.6 x 2 = 1.2 取整数位 1 得 0.0011</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// ========== 无限循环 ==========</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(5) 0.2 x 2 = 0.4 取整数位 0 得 0.00110</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(6) 0.4 x 2 = 0.8 取整数位 0 得 0.001100</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(7) 0.8 x 2 = 1.6 取整数位 0 得 0.0011001</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(8) 0.6 x 2 = 1.2 取整数位 1 得 0.00110011</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n) ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">得到一个无限循环的二进制小数 0.0011 0011 0011 0011......</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="二进制转换为浮点数相加-并再转换为十进制" tabindex="-1"><a class="header-anchor" href="#二进制转换为浮点数相加-并再转换为十进制"><span>二进制转换为浮点数相加，并再转换为十进制</span></a></h4><ul><li><p>二进制转换为浮点数</p><ul><li>0.1 → 0.0001 1001 1001 1001...... <ul><li>将小数点移动到整数位只有 1 ，向右移动 4 位（即：1.100110011001......），则偏移量为 -4 ，通过指数位计算公式 2^(11-1) - 1 - 4 = 1019</li><li>将 1019 转换成二进制为 1111111011 ，不够 11 位要补零，最终得出指数位为 01111111011</li><li>小数位为 100110011001...... ，小数位只能保留 52 位，第 53 位为 1 故进 1</li></ul></li><li>0.2 → 0.0011 0011 0011 0011...... <ul><li>将小数点移动到整数位只有 1 ，向右移动 3 位（即：1.1001100110011......），则偏移量为 -3 ，通过指数位计算公式 2^(11-1) - 1 - 3 = 1020</li><li>将 1020 转换成二进制为 1111111100 ，不够 11 位要补零，最终得出指数位为 01111111100</li><li>小数位为 1001100110011...... ，小数位只能保留 52 位，第 53 位为 0</li></ul></li></ul></li><li><p>浮点数相加,其结果再转换为十进制</p><p><img src="`+l+`" alt="0.1&amp;0.2-binary"></p></li></ul><h4 id="原因与解决方案" tabindex="-1"><a class="header-anchor" href="#原因与解决方案"><span>原因与解决方案</span></a></h4><ul><li><p>原因：</p><p>0.1 + 0.2 的计算过程中发生了两次精度丢失：</p><ul><li><p>0.1 与 0.2 转换成双精度二进制浮点数。</p><p>由于二进制浮点数的小数位只能存储52位，导致小数点后第53位的数要进行 ”为 1 则进 1，为 0 则舍去“ 的操作，从而造成一次精度丢失。</p></li><li><p>0.1 与 0.2 转换成二进制转成二进制浮点数后，二进制浮点数相加的过程中。</p><p>小数位相加导致小数位多出了一位，第53位的数进行 ”为 1 则进 1，为 0 则舍去“ 的操作，又造成一次精度丢失</p></li></ul></li><li><p>解决方案</p><ul><li><p>使用 <a href="https://mathjs.org/" target="_blank" rel="noopener noreferrer">math.js</a></p></li><li><p>使用 <a href="https://github.com/nefe/number-precision" target="_blank" rel="noopener noreferrer">number-precision.js</a></p></li><li><p>使用 <code>toFixed()</code> 对计算结果四舍五入。</p><p><code>toFixed()</code> 在 chrome 或者火狐浏览器下四舍五入也有精度误差。可以用 <code>Math.round</code> 来解决精度误差。</p><p>示例：将 2.55 四舍五入保留 1 位小数，先把 2.55 ∗ 10 = 25.5，再用 Math.round(25.5) = 25 ，再把 25 / 10 = 2.5 ，间接实现四舍五入。</p></li><li><p>使用 <code>Math.pow</code> 简单封装</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// number 为需要四舍五入的数</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// m 为保留几位小数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">round</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h4 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展"><span>扩展</span></a></h4><ul><li><p>十进制小数转换为二进制小数</p><p>方法：乘2取整，顺序排列。</p><p>具体做法：</p><ul><li>用2乘十进制小数，可以得到积</li><li>将积的整数部分取出，再用2乘余下的小数部分，又得到一个积，再将积的整数部分取出</li><li>如此进行，直到积中的小数部分为零，此时0或1为二进制的最后一位。或者达到所要求的精度为止。</li></ul></li></ul>`,67)]))}const k=s(d,[["render",r]]),o=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5/02.JavaScript%E8%AF%8D%E6%B3%95%E5%92%8C%E7%B1%BB%E5%9E%8B.html","title":"JavaScript词法和类型","lang":"zh-CN","frontmatter":{"description":"JavaScript词法和类型 Unicode（字符集） 中文又称万国码、国际码、统一码、单一码，是计算机科学领域的业界标准。它整理、编码了世界上大部分的文字系统，使得电脑可以用更为简单的方式来呈现和处理文字。 Blocks（区段） 在 Unicode 中，Blocks 被定义为一组连续码位的范围。Blocks 会被给予唯一的名称，且区段与区段间不会重...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript词法和类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-28T08:53:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5/02.JavaScript%E8%AF%8D%E6%B3%95%E5%92%8C%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"JavaScript词法和类型"}],["meta",{"property":"og:description","content":"JavaScript词法和类型 Unicode（字符集） 中文又称万国码、国际码、统一码、单一码，是计算机科学领域的业界标准。它整理、编码了世界上大部分的文字系统，使得电脑可以用更为简单的方式来呈现和处理文字。 Blocks（区段） 在 Unicode 中，Blocks 被定义为一组连续码位的范围。Blocks 会被给予唯一的名称，且区段与区段间不会重..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-28T08:53:37.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-28T08:53:37.000Z"}]]},"git":{"createdTime":1613149193000,"updatedTime":1745830417000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"837233792@qq.com","commits":4,"url":"https://github.com/lrh21g"},{"name":"lingronghai","username":"lingronghai","email":"lingronghai@foxmail.com","commits":2,"url":"https://github.com/lingronghai"},{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":13.81,"words":4142},"filePathRelative":"前端/前端训练营/02.JavaScript词法和类型.md","excerpt":"\\n<h2>Unicode（字符集）</h2>\\n<p>中文又称万国码、国际码、统一码、单一码，是计算机科学领域的业界标准。它整理、编码了世界上大部分的文字系统，使得电脑可以用更为简单的方式来呈现和处理文字。</p>\\n<h3>Blocks（区段）</h3>\\n<p>在 Unicode 中，Blocks 被定义为一组连续码位的范围。Blocks 会被给予唯一的名称，且区段与区段间不会重叠。</p>\\n<h3>Categories （类别）</h3>\\n<h2>Lexical Grammar（词法）</h2>\\n<p>ECMAScript 源码文本会被从左到右扫描，并被转换为一系列的输入元素，包括 token、控制符、行终止符、注释和空白符。</p>","autoDesc":true}');export{k as comp,o as data};
