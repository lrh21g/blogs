import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as e}from"./app-CwERxs91.js";const l="/blogs/assets/transition-demo-rendering-process-Y4UB06YL.png",t="/blogs/assets/transform-demo-rendering-process-BXNLzCVk.png",h={};function d(p,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="css-动画" tabindex="-1"><a class="header-anchor" href="#css-动画"><span>CSS 动画</span></a></h1><p>CSS 动画类型</p><ul><li>transition （过渡动画）</li><li>keyframe （关键帧动画）</li><li>steps() （逐帧动画）</li></ul><p>过渡动画和关键帧动画的区别：过渡动画需要有状态变化，关键帧动画不需要状态变化，关键帧动画能控制更精细。</p><h2 id="transform-变换" tabindex="-1"><a class="header-anchor" href="#transform-变换"><span>transform 变换</span></a></h2><p>transform 属性允许你旋转、缩放、倾斜或平移给定元素。</p><h3 id="transform-origin" tabindex="-1"><a class="header-anchor" href="#transform-origin"><span>transform-origin</span></a></h3><p><code>transform-origin(x, y, z)</code> 设置对象变换的原点，通常和 <code>rotate</code> 旋转、 <code>scale</code> 缩放、 <code>skew</code> 斜切等一起使用。</p><ul><li>取值说明： <ul><li>X 轴： left ｜ center｜ right ｜ length ｜ %</li><li>Y 轴： top ｜ center ｜ bottom ｜ length ｜ %</li><li>Z 轴： length</li></ul></li><li>默认值： <ul><li>2D 情况下：默认值 50% 50% ，即 center center 。</li><li>3D 情况下：默认值 50% 50% 0 。</li></ul></li></ul><p>如果只设置一个值，则该值作用于横坐标，纵坐标默认 50%，Z 轴默认为 0，另外百分比是相对于自身进行计算的。</p><h3 id="transform-style" tabindex="-1"><a class="header-anchor" href="#transform-style"><span>transform-style</span></a></h3><p><code>transform-style</code> 设置元素的子元素是位于 3D 空间中还是平面中。</p><ul><li><code>flat</code> ：设置元素的子元素位于该元素的平面中。</li><li><code>preserve-3d</code> ：指示元素的子元素应位于 3D 空间中。</li></ul><h3 id="角度单位" tabindex="-1"><a class="header-anchor" href="#角度单位"><span>角度单位</span></a></h3><p>在所有可使用角度的地方均可使用这四种单位</p><table><thead><tr><th>单位</th><th>说明</th></tr></thead><tbody><tr><td>deg</td><td>度数，一个圆共360度。</td></tr><tr><td>grad</td><td>梯度，一个圆共400梯度。</td></tr><tr><td>rad</td><td>弧度，一个圆共2n弧度。</td></tr><tr><td>turn</td><td>转、圈，一个圆共1转。</td></tr></tbody></table><p>单位说明： <code>90deg</code> = <code>100grad</code> = <code>0.25turn</code> ≈ <code>1.570796326794897rad</code></p><h3 id="transform-function" tabindex="-1"><a class="header-anchor" href="#transform-function"><span>transform-function</span></a></h3><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 关键字值 */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: none;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 函数值 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 函数值 - 矩阵 */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: matrix(1</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 2</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 3</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 4</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 5</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: matrix3d(1</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 函数值 - 透视 */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: perspective(17px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 函数值 - 位移 */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: translate(12px</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 50%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: translate3d(12px</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 50%</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 3em</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: translateX(2em</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: translateY(3in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: translateZ(2px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 函数值 - 旋转 */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: rotate(0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.5turn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: rotate3d(1</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 2</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 3</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 10deg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: rotateX(10deg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: rotateY(10deg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: rotateZ(10deg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 函数值 - 缩放 */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: scale(2</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: scale3d(2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.5</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.2</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: scaleX(2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: scaleY(0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: scaleZ(0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 函数值 - 倾斜 */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: skew(30deg</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 20deg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: skewX(30deg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: skewY(1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.07rad</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 多个函数值 */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: translateX(10px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">rotate(10deg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">translateY(5px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: perspective(500px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">translate(10px</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 20px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">rotateY(3deg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 全局值 */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: inherit;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: initial;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: revert;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">revert-layer</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transform: unset;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>matrix</code> 变换矩阵：对象进行 2D 空间或 3D 空间的矩阵变换。</p><ul><li><code>matrix(a, b, c, d, tx, ty)</code> : 指定的 6 个值组成的 2D 变换矩阵。<code>a b c d</code> 描述线性变换，<code>tx ty</code> 描述如何应用这个变换。</li><li><code>matrix3d(a1, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3, a4, b4, c4, d4)</code> ：以 4x4 齐次矩阵的形式定义一个 3D 变换。<code>a1 b1 c1 d1 a2 b2 c2 d2 a3 b3 c3 d3</code> 描述线性变换，<code>a4 b4 c4 d4</code> 描述要应用的平移。</li></ul></li><li><p><code>perspective(d)</code> ：透视属性。创建一个元素的三维视觉效果。这个属性定义了用户眼睛与 z=0 平面的距离，这个平面是虚拟的三维空间中的一个参考面。通过调整这个距离，可以控制元素在三维空间中的视觉大小和深度感。</p></li><li><p><code>translate</code> 位移：对象进行 2D 空间或 3D 空间的位移。</p><ul><li><code>translate(x, y)</code> ：第一个参数指定 X 轴的位移量（必须）, 第二个参数指定 Y 轴的位移量（当不设置时, 默认为 0）。</li><li><code>translateX(x)</code> ：指定 X 轴的位移。</li><li><code>translateY(y)</code> ：指定 Y 轴的位移。</li><li><code>translateZ(z)</code> ：指定 Z 轴的位移。设置的 <code>translateZ</code> 值越小，则子元素大小越小；<code>translateZ</code> 值越大，该元素也会越来越大。</li><li><code>translate3d(x, y, z)</code> ：第一个参数指定 X 轴的位移量, 第二个参数指定 Y 轴的位移量, 第三个参数指定 Z 轴的位移量, 3 个参数缺一不可。</li></ul><p>使用 <code>translate</code> 时，需要注意位移量的百分比是相对元素自身宽高来计算的。</p></li><li><p><code>rotate</code> 旋转： 对象进行 2D 空间或 3D 空间旋转。常与 <code>transform-origin</code> 一起使用。</p><ul><li><code>rotate(angle)</code> : 2D 旋转，根据指定的旋转角度 angle 进行旋转。</li><li><code>rotate3d(x, y, z, angle)</code> : 3D 旋转，必须指定四个参数，前 3 个参数分别表示旋转的方向 x y z, 第 4 个参数表示旋转的角度 angle。</li><li><code>rotateX(angle)</code> : 指定 X 轴的旋转角度 angle。</li><li><code>rotateY(angle)</code> : 指定 Y 轴的旋转角度 angle。</li><li><code>rotateZ(angle)</code> : 指定 Z 轴的旋转角度 angle。</li></ul><p>旋转角度必须有单位，否则将报错。 <code>rotate</code> 值为正值时，顺时针旋转；否则逆时针旋转。</p><p>在 2D 情况下，<code>rotate()</code> 只能指定一个参数；在 3D 情况下， <code>rotate3D()</code> 必须指定四个参数，否则将报错。</p></li><li><p><code>scale</code> 缩放：对象进行 2D 空间或 3D 空间缩放。常与 <code>transform-origin</code> 一起使用。</p><ul><li><code>scale(x, y)</code> : 第一个参数指定 X 轴的缩放倍数（必须）, 第二个参数指定 Y 轴的缩放倍数（当不设置时, 默认取第一个参数的值）。</li><li><code>scaleX(x)</code> : 指定 X 轴的缩放倍数。</li><li><code>scaleY(y)</code> : 指定 Y 轴的缩放倍数。</li><li><code>scaleZ(z)</code> : 指定 Z 轴的缩放倍数。</li><li><code>scale3d(x, y, z)</code> : 第一个参数指定 X 轴的缩放倍数, 第二个参数指定 Y 轴的缩放倍数, 第三个参数指定 Z 轴的缩放倍数, 3个参数缺一不可。</li></ul><p>参数值为倍数，分别相对元素的宽和高进行计算的。即便是 <code>scale</code> 只设置了一个值，那也是分别计算的。</p><ul><li>参数值 <code>大于 1</code> 表示放大。</li><li>参数值 <code>0 - 1</code> 之间为缩小。</li><li>参数值 <code>1</code> 表示不变。</li><li>参数值 <code>0</code> 表示元素不可见。</li><li>参数值为负数时，除了元素的方向发生改变（X 轴反转），其他规律与正值一致。</li></ul></li><li><p><code>skew</code> 倾斜：对象进行 2D 空间倾斜。常与 <code>transform-origin</code> 一起使用。</p><ul><li><code>skew(angleX, angleY)</code> : 第一个参数对应 X 轴（必须）, 第二个参数对应 Y 轴（当不设置时, 默认为 0）。</li><li><code>skewX(angle)</code> : 指定 X 轴的倾斜角度 angle。</li><li><code>skewY(angle)</code> : 指定 Y 轴的倾斜角度 angle。</li></ul></li></ul><h2 id="transition-过渡" tabindex="-1"><a class="header-anchor" href="#transition-过渡"><span>transition 过渡</span></a></h2><h3 id="transition-属性" tabindex="-1"><a class="header-anchor" href="#transition-属性"><span>transition 属性</span></a></h3><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transition: &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">transition-property</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">transition-duration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">transition-timing-function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">transition-delay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p><code>transition-property</code> 过渡属性 ：</p><ul><li><code>none</code> ：没有过渡动画。</li><li><code>all</code> ：所有可被动画的属性都表现出过渡动画。</li><li><code>IDENT</code> ：属性名称。不是能写所有的属性，比如 <code>display</code> 就是不行的。因为需要用 <code>property</code> 来计算过渡的各项指针，像 <code>display</code> 没有明确数值标记的是不能达到效果的。</li></ul></li><li><p><code>transition-duration</code> 延时时间 ：以秒（s）或毫秒（ms）为单位，指定过渡动画所需的时间。默认值为 <code>0s</code>，表示不出现过渡动画。</p></li><li><p><code>transition-timing-function</code> 过渡方法函数 ：指定过渡效果的时间函数的属性。</p><ul><li><code>ease</code> ：默认值，缓慢加速，然后缓慢减速的过渡效果。</li><li><code>linear</code> ：匀速过渡效果。</li><li><code>ease-in</code> ：缓慢加速的过渡效果。</li><li><code>ease-out</code> ：缓慢减速的过渡效果。</li><li><code>ease-in-out</code> ：先缓慢加速，再缓慢减速的过渡效果。</li><li><code>cubic-bezier(x1, y1, x2, y2)</code> ：自定义的贝塞尔曲线函数，通过四个值来定义曲线的控制点，分别对应 x1、y1、x2、y2。</li><li><code>steps(&lt;integer&gt;[,start| end]?)</code> ：步进函数将过渡时间分成大小相等的时间时隔来运行没有过度效果，而是一帧一帧的变化，<code>integer</code> 等于几就分成几帧，阶跃函数。第二个参数可选，默认是 <code>end</code> ,表示开始值保持一次，若参数为 <code>start</code>，表示开始值不保持。</li></ul></li><li><p><code>transition-delay</code> 过渡延迟 ：以秒（s）或毫秒（ms）为单位，表明动画过渡效果将在何时开始。取值为正时会延迟一段时间来响应过渡效果；取值为负时会导致过渡立即开始。</p></li></ul><p><code>transition</code> <strong>需要明确知道，开始状态和结束状态的具体数值，才能计算出中间状态</strong>。一般情况下，在实际开发中都是往往通过添加或删除 <code>class</code> 来触发动画的。</p><p>比如，<code>height</code> 从 <code>0px -&gt; 100px</code>，<code>transition</code> 可以算出中间状态。但是，<code>transition</code> 没法算出 <code>0px -&gt; auto</code> 的中间状态，也就是说，如果开始或结束的设置是 <code>height: auto</code>，那么就不会产生动画效果。类似的情况还有，<code>display</code> 从 <code>none -&gt; block</code>，<code>background</code> 从 <code>url(foo.jpg) -&gt; url(bar.jpg)</code> 等等。</p><h3 id="transition-的局限" tabindex="-1"><a class="header-anchor" href="#transition-的局限"><span>transition 的局限</span></a></h3><ul><li><code>transition</code> 需要事件触发，所以没法在网页加载时自动发生。</li><li><code>transition</code> 是一次性的，不能重复发生，除非一再触发。</li><li><code>transition</code> 只能定义开始状态和结束状态，不能定义中间状态，也就是说只有两个状态。</li><li>一条 <code>transition</code> 规则，只能定义一个属性的变化，不能涉及多个属性。</li></ul><h2 id="animation-动画" tabindex="-1"><a class="header-anchor" href="#animation-动画"><span>animation 动画</span></a></h2><h3 id="animation-属性" tabindex="-1"><a class="header-anchor" href="#animation-属性"><span>animation 属性</span></a></h3><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">animation: &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">animation-name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">animation-duration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">animation-timing-function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">animation-delay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">animation-iteration-count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">animation-direction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">animation-fill-mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">animation-play-state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p><code>animation-name</code> 动画名称 ：指定一个或多个 <code>@keyframes</code> at-rule 的名称。at-rule 描述了要应用于元素的动画。</p></li><li><p><code>animation-duration</code> 动画持续时间 ：设置动画完成一个动画周期所需的时间。</p></li><li><p><code>animation-timing-function</code> 动画时间函数 ：设置动画在每个周期的持续时间内如何进行。</p></li><li><p><code>animation-delay</code> 动画延迟时间 ：指定从应用动画到元素开始执行动画之前等待的时间量。</p></li><li><p><code>animation-iteration-count</code> 动画迭代次数 ：设置动画序列在停止前应播放的次数。</p><ul><li><code>infinite</code> ：无限循环播放动画。</li><li><code>&lt;number&gt;</code> ：动画重复的次数，默认为 1 ，负值是无效的。可以指定非整数值以播放动画循环的一部分：例如，0.5 将播放动画循环的一半。</li></ul></li><li><p><code>animation-direction</code> 动画方向 ：设置动画是应正向播放、反向播放还是在正向和反向之间交替播放。</p><ul><li><code>normal</code> ：默认值。动画在每个循环中正向播放。每次动画循环时，动画将重置为起始状态并重新开始。</li><li><code>reverse</code> ：动画在每个循环中反向播放。每次动画循环时，动画将重置为结束状态并重新开始。动画步骤将反向执行，并且时间函数也将被反转。</li><li><code>alternate</code> ：动画在每个循环中正反交替播放，第一次迭代是正向播放。确定循环是奇数还是偶数的计数从 1 开始。</li><li><code>alternate-reverse</code> ：动画在每个循环中正反交替播放，第一次迭代是反向播放。确定循环是奇数还是偶数的计数从 1 开始。</li></ul></li><li><p><code>animation-fill-mode</code> 动画填充模式 ：设置 CSS 动画在执行之前和之后如何将样式应用于其目标。</p><ul><li><code>none</code> ：默认值，回到动画没开始时的状态。</li><li><code>backwards</code> ：让动画回到第一帧的状态。</li><li><code>forwards</code> ：让动画停留在结束状态。</li><li><code>both</code> : 根据 <code>animation-direction</code> 轮流应用 <code>forwards</code> 和 <code>backwards</code> 规则。</li></ul></li><li><p><code>animation-play-state</code> 动画播放状态 ：设置动画是运行还是暂停。</p><ul><li><code>running</code> ：当前动画正在运行。</li><li><code>paused</code> ：当前动画已被停止。</li></ul></li></ul><h3 id="keyframes" tabindex="-1"><a class="header-anchor" href="#keyframes"><span>keyframes</span></a></h3><p>关键帧 <code>@keyframes</code> at 规则通过在动画序列中定义关键帧（或 waypoints）的样式来控制 CSS 动画序列中的中间步骤。如果省略某个状态，浏览器会自动推算中间状态。</p><h3 id="steps" tabindex="-1"><a class="header-anchor" href="#steps"><span>steps</span></a></h3><p><code>steps</code> 就是原本一个状态向另一个状态的过渡是平滑的，<code>steps</code> 可以实现分步过渡。</p><p><code>steps(n, [start | end])</code></p><ul><li>n 是一个自然数，<code>steps</code> 函数把动画分成 n 等份。</li><li><code>step-start</code> 等同于 <code>steps(1, start)</code> ，动画分成 1 步，动画执行时以左侧端点为开始。</li><li><code>step-end</code> 等同于 <code>steps(1, end)</code> ，动画分成 1 步，动画执行时以结尾端点为开始。</li></ul><p><code>step-start</code>，<code>step-end</code> 的区别</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@keyframes</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> circle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  0% { background: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  50%{ background: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">yellow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  100% { background: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">blue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>step-start</code> ：在变化过程中，都是以下一帧的显示效果来填充间隔动画，所以 0% 到 50% 直接就显示了黄色 yellow 。</p></li><li><p><code>step-end</code> ：与上面相反，都是以上一帧的显示效果来填充间隔动画，所以 0% 到 50% 直接就显示了红色 red 。</p></li></ul><h2 id="硬件加速" tabindex="-1"><a class="header-anchor" href="#硬件加速"><span>硬件加速</span></a></h2><h3 id="开启-gpu-加速-提升-css-动画性能" tabindex="-1"><a class="header-anchor" href="#开启-gpu-加速-提升-css-动画性能"><span>开启 GPU 加速 提升 CSS 动画性能</span></a></h3><p>现在大多数电脑的显卡都支持硬件加速。鉴于此，可以发挥 GPU 的力量，从而使我们的网站或应用表现的更为流畅。</p><p>CSS <code>animations</code>, <code>transforms</code> 以及 <code>transitions</code> 不会自动开启 GPU 加速，而是由浏览器的缓慢的软件渲染引擎来执行。</p><p>在一些情况下，并不需要对元素应用 3D 变换的效果，可以使用个小技巧“欺骗”浏览器来开启硬件加速：可以用 <code>transform: translateZ(0);</code> 来开启硬件加速。</p><h3 id="css-动画性能说明" tabindex="-1"><a class="header-anchor" href="#css-动画性能说明"><span>CSS 动画性能说明</span></a></h3><h4 id="从浏览器内部理解" tabindex="-1"><a class="header-anchor" href="#从浏览器内部理解"><span>从浏览器内部理解</span></a></h4><p>JavaScript 是单线程的，但是浏览器可以开启多个线程，渲染一个网页需要两个重要的线程来共同完成：</p><ul><li><p>Main Thread 主线程</p><ul><li>运行 JavaScript</li><li>计算 HTML 元素的 CSS 样式</li><li>布局页面</li><li>将元素绘制到一个或多个位图中</li><li>把这些位图交给 Compositor Thread 来处理</li></ul></li><li><p>Compositor Thread 绘制线程</p><ul><li>通过 GPU 将位图绘制到屏幕上</li><li>通知主线程去更新页面中可见或即将可见的部分的位图</li><li>计算出页面中那些部分是可见的</li><li>计算出在滚动页面时候，页面中哪些部分是即将可见的</li><li>滚动页面时将相应位置的元素移动到可视区</li></ul></li></ul><p>如果长时间的执行 JavaScript 会阻塞主线程，页面就会出现各种的卡顿。而绘制线程会尽量的去响应用户的交互，页面发生变化时，绘制线程会以每秒 60 帧（60fps 是最适合人眼的交互，30fps 以下的动画，让人感觉到明显的卡顿）的间隔不断重绘页面。</p><p>GPU 在如下方面很快：</p><ul><li>绘制位图到屏幕上</li><li>可不断的绘制相同的位图</li><li>将同一位图进行位移、旋转、缩放 （就是动画）</li></ul><h4 id="transition-渲染示例" tabindex="-1"><a class="header-anchor" href="#transition-渲染示例"><span>transition 渲染示例</span></a></h4><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  height: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  transition: height </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;"> linear</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">:hover</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  height: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>transition</code> 示例渲染中，有多个的橙色方框，浏览器会做大量的计算，动画就会卡顿。</p><p>因为每一帧的变化浏览器都在进行布局、绘制、把新的位图交给 GPU 内存，虽然只改变元素高度但是很可能要同步改变他的子元素的大小，那浏览器就要重新计算布局，计算完后主线程再来重新生成该元素的位图。</p><p><img src="`+l+`" alt="transition-demo-rendering-process"></p><h4 id="transform-渲染示例" tabindex="-1"><a class="header-anchor" href="#transform-渲染示例"><span>transform 渲染示例</span></a></h4><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  transform: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">scale</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  transition: transform </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;"> linear</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">:hover</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  transform: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">scale</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>transform</code> 示例渲染中，橙色方框较少，动画肯定会流畅。</p><p>因为 <code>transform</code> 属性不会改变自己和他周围元素的布局，他会对元素的整体产生影响。因此，浏览器只需要一次生成这个元素的位图，然后动画开始时候交给 GPU 来处理他最擅长的位移、旋转、缩放等操作。这就解放了浏览器不再去做各种的布局、绘制等操作。</p><p><img src="`+t+'" alt="transform-demo-rendering-process"></p>',63)]))}const o=s(h,[["render",d]]),c=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/CSS%E5%8A%A8%E7%94%BB.html","title":"CSS 动画","lang":"zh-CN","frontmatter":{"category":"CSS基础","tag":["CSS"],"description":"CSS 动画 CSS 动画类型 transition （过渡动画） keyframe （关键帧动画） steps() （逐帧动画） 过渡动画和关键帧动画的区别：过渡动画需要有状态变化，关键帧动画不需要状态变化，关键帧动画能控制更精细。 transform 变换 transform 属性允许你旋转、缩放、倾斜或平移给定元素。 transform-orig...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSS 动画\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-08T16:42:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/CSS%E5%8A%A8%E7%94%BB.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"CSS 动画"}],["meta",{"property":"og:description","content":"CSS 动画 CSS 动画类型 transition （过渡动画） keyframe （关键帧动画） steps() （逐帧动画） 过渡动画和关键帧动画的区别：过渡动画需要有状态变化，关键帧动画不需要状态变化，关键帧动画能控制更精细。 transform 变换 transform 属性允许你旋转、缩放、倾斜或平移给定元素。 transform-orig..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-08T16:42:45.000Z"}],["meta",{"property":"article:tag","content":"CSS"}],["meta",{"property":"article:modified_time","content":"2025-04-08T16:42:45.000Z"}]]},"git":{"createdTime":1744130565000,"updatedTime":1744130565000,"contributors":[{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":12.51,"words":3752},"filePathRelative":"前端/CSS/CSS基础/CSS动画.md","excerpt":"\\n<p>CSS 动画类型</p>\\n<ul>\\n<li>transition （过渡动画）</li>\\n<li>keyframe （关键帧动画）</li>\\n<li>steps() （逐帧动画）</li>\\n</ul>\\n<p>过渡动画和关键帧动画的区别：过渡动画需要有状态变化，关键帧动画不需要状态变化，关键帧动画能控制更精细。</p>\\n<h2>transform 变换</h2>\\n<p>transform 属性允许你旋转、缩放、倾斜或平移给定元素。</p>\\n<h3>transform-origin</h3>\\n<p><code>transform-origin(x, y, z)</code> 设置对象变换的原点，通常和 <code>rotate</code> 旋转、 <code>scale</code> 缩放、 <code>skew</code> 斜切等一起使用。</p>","autoDesc":true}');export{o as comp,c as data};
