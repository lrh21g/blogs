import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as t}from"./app-CwERxs91.js";const n="/blogs/assets/html2canvas%E5%BA%93%E7%AE%80%E6%98%93%E7%81%AB%E7%84%B0%E5%9B%BE-UuVP0QBJ.png",l={};function h(p,i){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="网页截屏" tabindex="-1"><a class="header-anchor" href="#网页截屏"><span>网页截屏</span></a></h1><h2 id="puppeteer" tabindex="-1"><a class="header-anchor" href="#puppeteer"><span><a href="http://puppeteerjs.com/" target="_blank" rel="noopener noreferrer">Puppeteer</a></span></a></h2><p>Puppeteer 是一个 Node 库，它提供了一个高级 API 来通过 DevTools 协议控制 Chromium 或 Chrome。Puppeteer 默认以 headless 模式运行。可实现：</p><ul><li>生成页面 PDF。</li><li>抓取 SPA（单页应用）并生成预渲染内容（即“SSR”（服务器端渲染））。</li><li>自动提交表单，进行 UI 测试，键盘输入等。</li><li>创建一个时时更新的自动化测试环境。 使用最新的 JavaScript 和浏览器功能直接在最新版本的Chrome中执行测试。</li><li>捕获网站的 timeline trace，用来帮助分析性能问题。</li><li>测试浏览器扩展。</li></ul><p>Puppeteer 是通过 WebSocket 给浏览器发送遵循 Chrome Devtools Protocol 的数据，命令浏览器去执行一些操作。然后，浏览器再通过 WebSocket 把结果返回给 Puppeteer。这个过程是异步的。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> puppeteer</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;puppeteer&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 创建一个 Browser 类的实例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> browser</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> puppeteer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">launch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 返回一个新的 Page 对象。Page 在一个默认的浏览器上下文中被创建。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> browser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newPage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setViewport</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 设置视窗大小</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    width</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 600</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    height</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 800</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  });</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">goto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;https://example.com&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 打开页面</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">screenshot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;example.png&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// path: 截屏文件保存路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> browser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dom-to-image" tabindex="-1"><a class="header-anchor" href="#dom-to-image"><span><a href="https://github.com/tsayen/dom-to-image" target="_blank" rel="noopener noreferrer">dom-to-image</a></span></a></h2><p>SVG 的 <code>&lt;foreignObject&gt;</code> 标签可以包裹任意的 HTML 内容。为了渲染一个节点，主要进行了以下步骤：</p><ul><li>递归地拷贝原始 DOM 节点和后代节点</li><li>把原始节点以及后代节点的样式递归的应用到对应的拷贝后的节点和后代节点上</li><li>字体处理</li><li>图片处理</li><li>序列化拷贝后的节点，把它插入到 <code>&lt;foreignObject&gt;</code> 里面，然后组成一个 SVG ，然后生成一个 <code>data URL</code></li><li>如果想得到 PNG 内容或原始像素值，可以先使用 <code>data URL</code> 创建一个图片，使用一个离屏 canvas 渲染这张图片，然后从 canvas 中获取想要的数据</li></ul><h2 id="html2canvas" tabindex="-1"><a class="header-anchor" href="#html2canvas"><span><a href="https://html2canvas.hertzen.com/" target="_blank" rel="noopener noreferrer">html2canvas</a></span></a></h2><p><a href="https://juejin.cn/post/6908255717317148685" target="_blank" rel="noopener noreferrer">html2canvas实现浏览器截图的原理（包含源码分析的通用方法）</a></p><p><img src="`+n+'" alt="html2canvas库简易火焰图"></p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p><a href="https://segmentfault.com/a/1190000037673677" target="_blank" rel="noopener noreferrer">JavaScript实现网页截屏方法总结</a></p>',14)]))}const o=s(l,[["render",h]]),d=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/JavaScript/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/%E7%BD%91%E9%A1%B5%E6%88%AA%E5%B1%8F.html","title":"网页截屏","lang":"zh-CN","frontmatter":{"category":"JavaScript","tag":["网页截屏"],"description":"网页截屏 Puppeteer Puppeteer 是一个 Node 库，它提供了一个高级 API 来通过 DevTools 协议控制 Chromium 或 Chrome。Puppeteer 默认以 headless 模式运行。可实现： 生成页面 PDF。 抓取 SPA（单页应用）并生成预渲染内容（即“SSR”（服务器端渲染））。 自动提交表单，进行 U...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"网页截屏\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-28T08:18:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF/JavaScript/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/%E7%BD%91%E9%A1%B5%E6%88%AA%E5%B1%8F.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"网页截屏"}],["meta",{"property":"og:description","content":"网页截屏 Puppeteer Puppeteer 是一个 Node 库，它提供了一个高级 API 来通过 DevTools 协议控制 Chromium 或 Chrome。Puppeteer 默认以 headless 模式运行。可实现： 生成页面 PDF。 抓取 SPA（单页应用）并生成预渲染内容（即“SSR”（服务器端渲染））。 自动提交表单，进行 U..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-28T08:18:46.000Z"}],["meta",{"property":"article:tag","content":"网页截屏"}],["meta",{"property":"article:modified_time","content":"2025-02-28T08:18:46.000Z"}]]},"git":{"createdTime":1627316948000,"updatedTime":1740730726000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"837233792@qq.com","commits":4,"url":"https://github.com/lrh21g"},{"name":"lingronghai","username":"lingronghai","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lingronghai"},{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":1.81,"words":544},"filePathRelative":"前端/JavaScript/实用技巧/网页截屏.md","excerpt":"\\n<h2><a class=\\"header-anchor\\" href=\\"#puppeteer\\"><span></span></a><a href=\\"http://puppeteerjs.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Puppeteer</a></h2>\\n<p>Puppeteer 是一个 Node 库，它提供了一个高级 API 来通过 DevTools 协议控制 Chromium 或 Chrome。Puppeteer 默认以 headless 模式运行。可实现：</p>\\n<ul>\\n<li>生成页面 PDF。</li>\\n<li>抓取 SPA（单页应用）并生成预渲染内容（即“SSR”（服务器端渲染））。</li>\\n<li>自动提交表单，进行 UI 测试，键盘输入等。</li>\\n<li>创建一个时时更新的自动化测试环境。 使用最新的 JavaScript 和浏览器功能直接在最新版本的Chrome中执行测试。</li>\\n<li>捕获网站的 timeline trace，用来帮助分析性能问题。</li>\\n<li>测试浏览器扩展。</li>\\n</ul>","autoDesc":true}');export{o as comp,d as data};
