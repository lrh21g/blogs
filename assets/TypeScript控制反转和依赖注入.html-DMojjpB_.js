import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as o,o as n}from"./app-CwERxs91.js";const i={};function a(p,e){return n(),r("div",null,e[0]||(e[0]=[o('<h1 id="typescript控制反转和依赖注入" tabindex="-1"><a class="header-anchor" href="#typescript控制反转和依赖注入"><span>TypeScript控制反转和依赖注入</span></a></h1><h2 id="ioc-控制反转" tabindex="-1"><a class="header-anchor" href="#ioc-控制反转"><span>IoC 控制反转</span></a></h2><p>IoC（Inversion of Control），即 “控制反转”。在开发中， IoC 意味着将设计好的对象交给容器控制，⽽不是使⽤传统的⽅式，在对象内部直接控制。</p><ul><li><strong>IoC 是有专⻔⼀个容器来创建这些对象，即由 IoC 容器控制对象的创建</strong>。而直接在对象内部通过 <code>new</code> 的方式创建对象，是程序主动创建依赖对象。</li><li>传统应⽤程序是由我们⾃⼰在程序中主动控制去获取依赖对象，称为<strong>正转</strong>。<strong>反转，则是由容器来帮忙创建及注⼊依赖对象</strong>。因为由容器帮我们查找及注⼊依赖对象，对象只是被动的接受依赖对象，依赖对象的获取被反转。</li></ul><p>把创建和查找依赖对象的控制权交给了容器，由容器注⼊组合对象，所以对象之间是松散耦合。</p><h2 id="di-依赖注入" tabindex="-1"><a class="header-anchor" href="#di-依赖注入"><span>DI 依赖注入</span></a></h2><p>对于控制反转来说，其中最常⻅的⽅式是 DI（Dependency Injection），即 “依赖注入”。组件之间的依赖关系由容器在运⾏期决定，即由容器动态的将某个依赖关系注⼊到组件之中。依赖注⼊的⽬的是为了提升组件重⽤的频率，并为系统搭建⼀个灵活、可扩展的平台。</p><ul><li>应⽤程序依赖 IoC 容器，IoC 容器注⼊应⽤程序依赖的对象，注⼊某个对象所需的外部资源（包括对象、资源、常量数据）</li><li>应⽤程序需要 IoC 容器来提供对象需要的外部资源（包括对象、资源、常量数据）</li></ul><h2 id="相关-npm-库" tabindex="-1"><a class="header-anchor" href="#相关-npm-库"><span>相关 npm 库</span></a></h2><ul><li><a href="https://github.com/rbuckton/reflect-metadata" target="_blank" rel="noopener noreferrer">reflect-metadata</a></li><li><a href="https://github.com/inversify/InversifyJS" target="_blank" rel="noopener noreferrer">InversifyJS</a> : 依赖注入工具库，可⽤于 JavaScript 和 Node.js 应⽤，功能强⼤、轻量的IoC 容器。</li><li><a href="https://github.com/microsoft/tsyringe" target="_blank" rel="noopener noreferrer">TSYringe</a> : TypeScript / JavaScript的轻量级依赖注入容器，用于构造函数注入。</li></ul>',10)]))}const s=t(i,[["render",a]]),h=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/TypeScript/TypeScript%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html","title":"TypeScript控制反转和依赖注入","lang":"zh-CN","frontmatter":{"description":"TypeScript控制反转和依赖注入 IoC 控制反转 IoC（Inversion of Control），即 “控制反转”。在开发中， IoC 意味着将设计好的对象交给容器控制，⽽不是使⽤传统的⽅式，在对象内部直接控制。 IoC 是有专⻔⼀个容器来创建这些对象，即由 IoC 容器控制对象的创建。而直接在对象内部通过 new 的方式创建对象，是程序主...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TypeScript控制反转和依赖注入\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-28T08:18:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF/TypeScript/TypeScript%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"TypeScript控制反转和依赖注入"}],["meta",{"property":"og:description","content":"TypeScript控制反转和依赖注入 IoC 控制反转 IoC（Inversion of Control），即 “控制反转”。在开发中， IoC 意味着将设计好的对象交给容器控制，⽽不是使⽤传统的⽅式，在对象内部直接控制。 IoC 是有专⻔⼀个容器来创建这些对象，即由 IoC 容器控制对象的创建。而直接在对象内部通过 new 的方式创建对象，是程序主..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-28T08:18:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-28T08:18:46.000Z"}]]},"git":{"createdTime":1644856541000,"updatedTime":1740730726000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"837233792@qq.com","commits":1,"url":"https://github.com/lrh21g"},{"name":"lingronghai","username":"lingronghai","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lingronghai"},{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":1.55,"words":465},"filePathRelative":"前端/TypeScript/TypeScript控制反转和依赖注入.md","excerpt":"\\n<h2>IoC 控制反转</h2>\\n<p>IoC（Inversion of Control），即 “控制反转”。在开发中， IoC 意味着将设计好的对象交给容器控制，⽽不是使⽤传统的⽅式，在对象内部直接控制。</p>\\n<ul>\\n<li><strong>IoC 是有专⻔⼀个容器来创建这些对象，即由 IoC 容器控制对象的创建</strong>。而直接在对象内部通过 <code>new</code> 的方式创建对象，是程序主动创建依赖对象。</li>\\n<li>传统应⽤程序是由我们⾃⼰在程序中主动控制去获取依赖对象，称为<strong>正转</strong>。<strong>反转，则是由容器来帮忙创建及注⼊依赖对象</strong>。因为由容器帮我们查找及注⼊依赖对象，对象只是被动的接受依赖对象，依赖对象的获取被反转。</li>\\n</ul>","autoDesc":true}');export{s as comp,h as data};
