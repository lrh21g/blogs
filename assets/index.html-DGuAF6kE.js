import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as a,o as n}from"./app-CwERxs91.js";const t={};function r(o,e){return n(),l("div",null,e[0]||(e[0]=[a('<h1 id="微前端简介" tabindex="-1"><a class="header-anchor" href="#微前端简介"><span>微前端简介</span></a></h1><blockquote><p>Techniques, strategies and recipes for building a modern web app with multiple teams that can ship features independently. -- <a href="https://micro-frontends.org/" target="_blank" rel="noopener noreferrer">Micro Frontends</a></p><p>微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。</p><p>构建一个现代web应用所需要的技术、策略和方法，具备多个团队独立开发、部署的特性。</p></blockquote><p>微前端是将多个前端应用以某种形式结合在一起进行应用。旨在解决单体应用在一个相对长的时间跨度下，由于参与的人员，团队增多、变迁，从一个普通应用演变成一个巨石应用（Frontend Monolith）后，随之而来的应用不可维护的问题。</p><p>微前端架构具备以下几个核心价值：</p><ul><li>技术栈无关：主框架不限制接入应用的技术栈，微应用具备完全自主权</li><li>独立开发、独立部署：微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新</li><li>增量升级：在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略</li><li>独立运行时：每个微应用之间状态隔离，运行时状态不共享</li></ul><p>在一个系统内，微前端是应用间的架构方案。在多个应用之间，微前端则是一种系统间的架构方案。实现形式：</p><ul><li>单实例：即同一时刻，只有一个子应用被展示，子应用具备一个完整的应用生命周期。</li><li>多实例：通常基于URL的变化来做子应用的切换，同一时刻可展示多个子应用。通常使用 <code>Web Components</code> 方案来做子应用封装，子应用更像是一个业务组件而不是应用。</li></ul><h2 id="微前端方案种类" tabindex="-1"><a class="header-anchor" href="#微前端方案种类"><span>微前端方案种类</span></a></h2><ul><li><strong>中心基座模式</strong>：通过搭建基座、配置中心来管理子应用。如：<a href="https://zh-hans.single-spa.js.org/" target="_blank" rel="noopener noreferrer">Single-spa</a> 框架、基于 single-spa 的 <a href="https://qiankun.umijs.org/zh/guide" target="_blank" rel="noopener noreferrer">qiankun</a>、iframe。</li><li><strong>去中心模式</strong>：脱离基座模式，每个应用之间都可以彼此分享资源。如：<code>Web Components</code> 、基于 Webpack 5 的 <code>Module Federation（模块联邦）</code> 实现的 EMP 微前端方案（可以实现多个应用彼此共享资源分享）。</li><li><strong>自组织模式</strong>：通过约定进行互调。如：利用 <code>Nginx</code> 路由分发实现、微件化。</li></ul><h2 id="微前端实现方式" tabindex="-1"><a class="header-anchor" href="#微前端实现方式"><span>微前端实现方式</span></a></h2><h3 id="iframe" tabindex="-1"><a class="header-anchor" href="#iframe"><span>iframe</span></a></h3><p>每个微应用独立开发部署，通过 iframe的方式将这些应用嵌入到父应用系统中。</p><ul><li>技术栈：无限制</li><li>优点 <ul><li>技术栈无关，子应用独立构建部署</li><li>实现简单，子应用之间自带沙箱，天然隔离，互不影响</li></ul></li><li>缺点：体验差、路由无法记忆、页面适配困难、无法监控、依赖无法复用，兼容性等都具有局限性，资源开销巨大，通信困难</li><li>单独构建 / 部署：支持</li><li>构建速度：正常</li><li>SPA（单页应用） 体验：不支持</li><li>项目侵入性：高</li><li>通信难度：高</li></ul><h3 id="通用中心路由基座式" tabindex="-1"><a class="header-anchor" href="#通用中心路由基座式"><span>通用中心路由基座式</span></a></h3><p>微应用可以使用不同技术栈；微应用之间完全独立，互不依赖。统一由基座工程进行管理，按照DOM节点的注册、挂载、卸载来完成。</p><ul><li>技术栈：无限制</li><li>优点：子应用独立构建，用户体验好，可控性强，适应快速迭代</li><li>缺点：学习与实现的成本比较高，需要额外处理依赖复用</li><li>单独构建 / 部署：支持</li><li>构建速度：正常</li><li>SPA（单页应用） 体验：支持</li><li>项目侵入性：高</li><li>通信难度：正常</li></ul><h3 id="特定中心路由基座式" tabindex="-1"><a class="header-anchor" href="#特定中心路由基座式"><span>特定中心路由基座式</span></a></h3><p>微应用业务线之间使用相同技术栈；基座工程和微应用可以单独开发单独部署；微应用有能力复用基座工程的公共基建。</p><ul><li>技术栈：统一技术栈</li><li>优点：子应用独立构建，用户体验好，可控性强，适应快速迭代</li><li>缺点：学习与实现的成本比较高，需要额外处理依赖复用</li><li>单独构建 / 部署：支持</li><li>构建速度：正常</li><li>SPA（单页应用） 体验：支持</li><li>项目侵入性：高</li><li>通信难度：正常</li></ul><h3 id="npm-集成" tabindex="-1"><a class="header-anchor" href="#npm-集成"><span>npm 集成</span></a></h3><p>将微应用抽离成包的方式，发布 npm 中，由父应用依赖的方式使用，构建时候集成进项目中。</p><ul><li>技术栈：无限制</li><li>优点： <ul><li>编译阶段的应用，在项目运行阶段无需加载，体验流畅</li><li>开发与接入成本低，容易理解</li></ul></li><li>缺点： <ul><li>影响主应用编译速度和打包后的体积</li><li>不支持动态下发，npm 包更新后，需要重新更新包，主应用需要重新发布部署</li></ul></li><li>单独构建 / 部署：不支持</li><li>构建速度：慢</li><li>SPA（单页应用） 体验：支持</li><li>项目侵入性：高</li><li>通信难度：正常</li></ul><h3 id="webpack5-模块联邦" tabindex="-1"><a class="header-anchor" href="#webpack5-模块联邦"><span>webpack5 模块联邦</span></a></h3><p>webpack5 模块联邦 去中心模式、脱离基座模式。每个应用是单独部署在各自的服务器，每个应用都可以引用其他应用，也能被其他应用所引用</p><ul><li>技术栈：统一技术栈</li><li>优点：基于webpack5，无需引入新框架，学习成本低，像引入第三方库一样方便，各个应用的资源都可以相互共享应用间松耦合，各应用平行的关系</li><li>缺点：需要升级Webpack5技术栈必须保持一致改造旧项目难度大</li><li>单独构建 / 部署：支持</li><li>构建速度：正常</li><li>SPA（单页应用） 体验：支持</li><li>项目侵入性：低</li><li>通信难度：正常</li></ul><h3 id="web-component" tabindex="-1"><a class="header-anchor" href="#web-component"><span>Web Component</span></a></h3><p><code>Web Components</code> 是一套不同的技术，允许创建可重用的定制元素（它们的功能封装在代码之外）并且在web应用中使用。</p><p>主要有三项主要技术组成，可以一起使用来创建封装功能的定制元素，可以在任何地方重用，不必担心代码冲突：</p><ul><li><code>Custom elements（自定义元素）</code>：一组 JavaScript API，允许定义 custom elements 及其行为，然后可以在用户界面中按照需要使用它们。</li><li>支持 <code>Shadow DOM（影子DOM）</code>：一组 JavaScript API，用于将封装的 “影子”DOM树 附加到元素（与主文档DOM分开呈现）并控制其关联的功能。通过这种方式，可以保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。</li><li>支持 <code>HTML templates（HTML模板）</code> ： <code>&lt;template&gt;</code> 和 <code>&lt;slot&gt;</code> 元可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。</li></ul><p>使用 <code>Web Components</code> 实现微前端的缺点：</p><ul><li>需要重写当前项目</li><li>生态系统不完善，技术过新容易出现兼容性问题</li><li>整体架构设计复杂，组件与组件之间拆分过细时，容易造成通讯和控制繁琐</li></ul><h3 id="nginx-路由转发" tabindex="-1"><a class="header-anchor" href="#nginx-路由转发"><span>Nginx 路由转发</span></a></h3><p>通过 Nginx 配置实现不同路径映射到不同应用。该方式只是路由层面看起来是一个项目，实际上是通过跳转连接了多个项目。</p><ul><li>技术栈：无限制</li><li>优点：简单、快速、易配置</li><li>缺点：在切换应用时触发发页面刷新，通信不易</li><li>单独构建 / 部署：支持</li><li>构建速度：正常</li><li>SPA（单页应用） 体验：不支持</li><li>项目侵入性：正常</li><li>通信难度：高</li></ul><h3 id="微件化" tabindex="-1"><a class="header-anchor" href="#微件化"><span>微件化</span></a></h3><p>微件（widget），指的是一段可以直接嵌入在应用上运行的代码，它由开发人员预先编译好，在加载时不需要再做任何修改或者编译。</p><ul><li>打包出可以直接嵌入在页面上运行的代码，可能是一段 js，使用时直接引入即可。</li><li>需要实现一套微件管理机制，成本太高。</li></ul><h3 id="微应用化" tabindex="-1"><a class="header-anchor" href="#微应用化"><span>微应用化</span></a></h3><p>微应用化，即在开发时，应用都是以单一、微小应用的形式存在，而在运行时，则通过构建系统合并这些应用，组合成一个新的应用。</p><ul><li>通过软件工程的方式，在部署构建环境中，通过 webpack 打包，组合多个独立应用成一个单体应用。</li><li>需要将多个项目打包成一个，所以技术栈需要保持统一。</li></ul><h2 id="微应用-子应用-拆分规则" tabindex="-1"><a class="header-anchor" href="#微应用-子应用-拆分规则"><span>微应用（子应用）拆分规则</span></a></h2><ul><li>按照<strong>业务</strong>拆分：独立出每个业务项目，可以让整个项目架构清晰。如：电商后台，包括商品管理、商家管理、物流管理等。</li><li>按照<strong>权限</strong>拆分：独立出不同的权限项目，可以突出每个项目的使用范围。如：运营后台，管理员和普通运营看到的页面不一样。</li><li>按照<strong>变更频率</strong>拆分：独立出变更频繁的项目，可以避免频繁更新可能导致的整体项目挂掉的风险；独立出很少改动的项目，可在核心项目上投入更多精力。如：项目中，包含很少改动祖传项目和经常改动的业务项目。</li><li>按照<strong>组织结构</strong>拆分：独立出不同团队的项目，可以避免开发冲突，部署冲突等问题。如：一个功能复杂的项目后台，由多个团队共同开发而成。</li><li>跟随<strong>后端微服务</strong>拆分：有利于前后端保持统一。如：后端已经做了不同模块的微服务划分，前端按照对应划分进行拆分应用。</li></ul>',42)]))}const c=i(t,[["render",r]]),h=JSON.parse('{"path":"/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E5%89%8D%E7%AB%AF/","title":"微前端简介","lang":"zh-CN","frontmatter":{"description":"微前端简介 Techniques, strategies and recipes for building a modern web app with multiple teams that can ship features independently. -- Micro Frontends 微前端是一种多个团队通过独立发布功能的方式来共同构建现代化...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"微前端简介\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-28T08:18:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E5%89%8D%E7%AB%AF/"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"微前端简介"}],["meta",{"property":"og:description","content":"微前端简介 Techniques, strategies and recipes for building a modern web app with multiple teams that can ship features independently. -- Micro Frontends 微前端是一种多个团队通过独立发布功能的方式来共同构建现代化..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-28T08:18:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-28T08:18:46.000Z"}]]},"git":{"createdTime":1603019226000,"updatedTime":1740730726000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"837233792@qq.com","commits":7,"url":"https://github.com/lrh21g"},{"name":"lingronghai","username":"lingronghai","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lingronghai"},{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":8.17,"words":2451},"filePathRelative":"架构/微前端/README.md","excerpt":"\\n<blockquote>\\n<p>Techniques, strategies and recipes for building a modern web app with multiple teams that can ship features independently. -- <a href=\\"https://micro-frontends.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Micro Frontends</a></p>\\n<p>微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。</p>\\n<p>构建一个现代web应用所需要的技术、策略和方法，具备多个团队独立开发、部署的特性。</p>\\n</blockquote>","autoDesc":true}');export{c as comp,h as data};
