import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d,o as c}from"./app-CwERxs91.js";const l="/blogs/assets/element.drawio-CtKpaQvs.png",n={};function i(s,e){return c(),t("div",null,e[0]||(e[0]=[d('<h1 id="element-类型" tabindex="-1"><a class="header-anchor" href="#element-类型"><span>Element 类型</span></a></h1><p>在 XML 和 HTML 中，<code>Element</code> 用来描述页面的结构，可以是数据项、文本、按钮、复选框、图像等。</p><p><code>Element</code> 继承链路： <code>EventTarget &lt;-- Node &lt;-- Element</code> 。。</p><p><code>Element</code> 包括开始标签、结束标签、属性以及其他内容。</p><p><img src="'+l+'" alt="element"></p><h2 id="element-类型属性" tabindex="-1"><a class="header-anchor" href="#element-类型属性"><span>Element 类型属性</span></a></h2><h3 id="元素特性属性" tabindex="-1"><a class="header-anchor" href="#元素特性属性"><span>元素特性属性</span></a></h3><ul><li><p><code>element.id</code> ： 获取或者设置当前元素的 <code>id</code> 属性值。</p></li><li><p><code>element.tagName</code> ： 返回当前元素的大写标签名，与 <code>nodeName</code> 属性值一致。</p></li><li><p><code>element.attributes</code> ： 返回一个 <code>NamedNodeMap</code> 对象，包含元素的所有属性。</p></li><li><p><code>element.innerHTML</code> ： 获取或者设置当前元素包含的所有 HTML 代码。用来设置某个节点的内容。</p></li><li><p><code>element.outerHTML</code> ： 获取或者设置当前元素包含的所有 HTML 代码，包含当前元素本身与所有子元素。用来替换当前元素节点。</p></li><li><p><code>element.localName</code> ： 只读属性。返回当前元素的标签名，不包含命名空间前缀。</p></li><li><p><code>element.prefix</code> ： 返回当前元素的命名空间前缀，如果未指定前缀，则返回 null。</p></li><li><p><code>element.namespaceURI</code> ： 只读属性。返回元素的命名空间，若该元素不在命名空间中则返回 <code>null</code> 。</p></li><li><p><code>element.shadowRoot</code> ： 只读属性。返回当前元素的 <code>ShadowRoot</code> 对象，如果没有则返回 <code>null</code>。</p></li><li><p><code>element.slot</code> ： 返回已插入元素所在的 Shadow DOM slot 的名称。</p></li></ul><h3 id="元素样式属性" tabindex="-1"><a class="header-anchor" href="#元素样式属性"><span>元素样式属性</span></a></h3><ul><li><p><code>element.className</code> ： 获取或者设置当前元素的 class 类名，多个类名之间使用空格分割。</p></li><li><p><code>element.classList</code> ： 只读属性。返回一个动态的 <code>DOMTokenList</code> 对象，包含当前元素的所有类名。可以用于操作 class 集合。</p><ul><li><code>element.classList.item(index)</code> ： 返回指定索引 <code>index</code> 的 class 类名。</li><li><code>element.classList.add(className1, className2, ..., classNameN)</code> ： 添加一个或者多个 class 类名。</li><li><code>element.classList.remove(className1, className2, ..., classNameN)</code> ： 移除一个或者多个 class 类名。</li><li><code>element.classList.toggle(className, force)</code> ： 将某个 class 类名添加或者移除当前元素，已存在则移除，并返回 <code>false</code>，不存在则添加，并返回 <code>true</code> 。<code>force</code> 参数为可选值，传入 <code>true</code> 则添加，否则移除。</li><li><code>element.classList.contains(className)</code> ： 判断当前元素是否包含某个 class 类名。</li><li><code>element.classList.replace(oldClassName, newClassName)</code> ： 替换 class 类名，使用 <code>newClassName</code> 替换 <code>oldClassName</code>。</li><li><code>element.classList.toString()</code> ： 返回所有 class 类名的字符串。</li></ul></li></ul><h3 id="元素宽高属性" tabindex="-1"><a class="header-anchor" href="#元素宽高属性"><span>元素宽高属性</span></a></h3><ul><li><p><code>element.clientHeight</code> ： 返回元素的高度（整数值，小数会四舍五入），包含 <code>padding</code>，不包含 <code>border</code> 、 <code>margin</code> 和水平滚动条高度（如存在）。</p></li><li><p><code>element.clientWidth</code> ： 返回元素的宽度（整数值，小数会四舍五入），包含 <code>padding</code>，不包含 <code>border</code> 、 <code>margin</code> 和垂直滚动条宽度（如存在）。</p></li><li><p><code>document.documentElement.clientHeight</code> ： 返回当前视口的高度（即浏览器窗口高度）。等同于 <code>window.innerHeight</code> 减去水平滚动条的高度（如存在）。</p></li><li><p><code>document.documentElement.clientWidth</code> ： 返回当前视口的宽度（即浏览器窗口宽度）。等同于 <code>window.innerWidth</code> 减去垂直滚动条的宽度（如存在）。</p></li><li><p><code>document.body.clientHeight</code> ： 返回文档的 <code>&lt;body&gt;</code> 元素的高度（即网页的实际高度）。一般来说，<code>document.body.clientHeight</code> 大于 <code>document.documentElement.clientHeight</code>。</p></li><li><p><code>document.body.clientWidth</code> ： 返回文档的 <code>&lt;body&gt;</code> 元素的宽度（即网页的实际宽度）。</p></li><li><p><code>element.clientLeft</code> ： 返回元素的左边框（left border）宽度（整数值，小数会四舍五入），不包含 <code>padding</code> 和 <code>margin</code>。如果没有设置，或是行内元素（<code>display: inline</code>），则返回 <code>0</code>。</p></li><li><p><code>element.clientTop</code> ： 返回元素的左边框（top border）宽度（整数值，小数会四舍五入），不包含 <code>padding</code> 和 <code>margin</code>。其他与 <code>element.clientLeft</code> 一致。</p></li><li><p><code>element.scrollHeight</code> ： 返回元素的总高度（整数值，小数会四舍五入），包含溢出容器不可见部分、 <code>padding</code> 、伪元素（<code>::before</code> 或 <code>::after</code>）高度，不包含 <code>border</code>、 <code>margin</code> 和水平滚动条的高度（如存在）。</p></li><li><p><code>element.scrollWidth</code> ： 返回元素的总宽度（整数值，小数会四舍五入），其他与 <code>element.scrollHeight</code> 一致。</p></li><li><p><code>element.scrollLeft</code> ： 获取或者设置当前元素的水平滚动条向右滚动的距离。如果没有滚动条，则返回为 <code>0</code> 。</p></li><li><p><code>element.scrollTop</code> ： 获取或者设置当前元素的垂直滚动条向下滚动的距离。如果没有滚动条，则返回为 <code>0</code> 。</p></li></ul><h3 id="获取相邻元素与子元素属性" tabindex="-1"><a class="header-anchor" href="#获取相邻元素与子元素属性"><span>获取相邻元素与子元素属性</span></a></h3><ul><li><p><code>element.children</code> ： 只读属性。返回一个动态的 <code>HTMLCollection</code> 对象（动态更新），包含当前元素的所有子元素。</p></li><li><p><code>element.childElementCount</code> ： 只读属性。返回当前元素包含的子元素个数，与 <code>element.children.length</code> 值相同。</p></li><li><p><code>element.firstElementChild</code> ： 返回当前元素的第一个子元素，如果没有则返回 <code>null</code>。</p></li><li><p><code>element.lastElementChild</code> ： 返回当前元素的最后一个子元素，如果没有则返回 <code>null</code>。</p></li><li><p><code>element.previousElementSibling</code> ： 只读属性。返回当前元素在的前一个同级元素节点。如果没有则返回 <code>null</code>。</p></li><li><p><code>element.nextElementSibling</code> ： 只读属性。返回当前元素在的后一个同级元素节点。如果没有则返回 <code>null</code>。</p></li></ul><h2 id="element-类型方法" tabindex="-1"><a class="header-anchor" href="#element-类型方法"><span>Element 类型方法</span></a></h2><h3 id="获取元素方法" tabindex="-1"><a class="header-anchor" href="#获取元素方法"><span>获取元素方法</span></a></h3><ul><li><p><code>element.getElementsByClassName()</code></p><p><strong>语法</strong> ： <code>element.getElementsByClassName(classNames)</code></p><p><strong>描述</strong> ： 返回一个 <code>HTMLCollection</code> 实例（实时更新），包含当前元素所有具有指定 <code>classNames</code> 类名的子元素节点。</p><p><strong>参数</strong> ：</p><ul><li><code>classNames</code> 参数：一个或者多个类名（大小写敏感），多个类名之间使用空格分割。</li></ul></li><li><p><code>element.getElementsByTagName()</code></p><p><strong>语法</strong> ： <code>element.getElementsByTagName(tagName)</code></p><p><strong>描述</strong> ： 返回一个 <code>HTMLCollection</code> 实例（实时更新），包含当前元素所有具有指定 <code>tagName</code> 标签名的子元素节点。</p><p><strong>参数</strong> ：</p><ul><li><code>tagName</code> 参数：标签名（大小写不敏感）。特殊字符 <code>*</code> 表示所有元素。</li></ul></li><li><p><code>element.querySelector()</code></p><p><strong>语法</strong> ： <code>element.querySelector(selectors)</code></p><p><strong>描述</strong> ： 返回当前元素的第一个匹配 CSS 选择器 <code>selectors</code> 的后代元素节点，如果没有匹配则返回 <code>null</code>。</p><ul><li>浏览器执行该方法时，会先在全局范围内搜索指定的 CSS 选择器，然后过滤出属于当前元素的后代元素节点。</li></ul></li><li><p><code>element.querySelectorAll()</code></p><p><strong>语法</strong> ： <code>element.querySelectorAll(selectors)</code></p><p><strong>描述</strong> ： 返回一个 <code>NodeList</code> 实例（静态），包含当前元素所有匹配 CSS 选择器 <code>selectors</code> 的后代元素节点。</p><ul><li>浏览器执行该方法时，会先在全局范围内搜索指定的 CSS 选择器，然后过滤出属于当前元素的后代元素节点。</li></ul></li><li><p><code>element.closest()</code></p><p><strong>语法</strong> ： <code>element.closest(selectors)</code></p><p><strong>描述</strong> ： 返回当前元素与选择器 <code>selectors</code> 匹配的最近祖先元素（包括当前元素本身），如果没有匹配则返回 <code>null</code>。</p></li></ul><h3 id="添加元素方法" tabindex="-1"><a class="header-anchor" href="#添加元素方法"><span>添加元素方法</span></a></h3><ul><li><p><code>element.after()</code></p><p><strong>语法</strong> ： <code>element.after(node1, node2, ..., nodeN)</code></p><p><strong>描述</strong> ： 在当前元素后面插入一个（或多个） <code>Node</code> 节点或 <code>DOMString</code> （以 <code>Text</code> 的形式插入）</p></li><li><p><code>element.before()</code></p><p><strong>语法</strong> ： <code>element.before(node1, node2, ..., nodeN)</code></p><p><strong>描述</strong> ： 在当前元素前面插入一个（或多个） <code>Node</code> 节点或 <code>DOMString</code> （以 <code>Text</code> 的形式插入）</p></li><li><p><code>element.append()</code></p><p><strong>语法</strong> ： <code>element.append(node1, node2, ..., nodeN)</code></p><p><strong>描述</strong> ： 在当前元素的最后一个子元素后面插入一个（或多个） <code>Node</code> 节点或 <code>DOMString</code> （以 <code>Text</code> 的形式插入）</p></li><li><p><code>element.prepend()</code></p><p><strong>语法</strong> ： <code>element.prepend(node1, node2, ..., nodeN)</code></p><p><strong>描述</strong> ： 在当前元素的第一个子元素前面插入一个（或多个） <code>Node</code> 节点或 <code>DOMString</code> （以 <code>Text</code> 的形式插入）。</p></li><li><p><code>element.insertAdjacentElement()</code></p><p><strong>语法</strong> ： <code>element.insertAdjacentElement(position, element)</code></p><p><strong>描述</strong> ： 在当前元素的指定位置插入一个元素节点，并返回被插入的节点。如果插入失败，则返回 <code>null</code>。</p><p><strong>参数</strong> ：</p><ul><li><code>position</code> 参数：表示相对于当前元素的位置。 <ul><li><code>&#39;beforebegin&#39;</code> ： 在当前元素之前插入。</li><li><code>&#39;afterend&#39;</code> ： 在当前元素之后插入。</li><li><code>&#39;afterbegin&#39;</code> ： 在当前元素的第一个子元素之前插入。</li><li><code>&#39;beforeend&#39;</code> ： 在当前元素的最后一个子元素之后插入。</li></ul></li><li><code>element</code> 参数：要插入的元素节点。</li></ul></li><li><p><code>element.insertAdjacentHTML()</code></p><p><strong>语法</strong> ： <code>element.insertAdjacentHTML(position, text)</code></p><p><strong>描述</strong> ： 在当前元素的指定位置插入一个 HTML 字符串。该方法不会转义 HTML 字符串，导致不能用来插入用户输入的内容，否则会有安全风险。</p><p><strong>参数</strong> ：</p><ul><li><code>position</code> 参数：表示相对于当前元素的位置。 <ul><li><code>&#39;beforebegin&#39;</code> ： 在当前元素之前插入。</li><li><code>&#39;afterend&#39;</code> ： 在当前元素之后插入。</li><li><code>&#39;afterbegin&#39;</code> ： 在当前元素的第一个子元素之前插入。</li><li><code>&#39;beforeend&#39;</code> ： 在当前元素的最后一个子元素之后插入。</li></ul></li><li><code>text</code> 参数：待解析的 HTML 字符串。</li></ul></li><li><p><code>element.insertAdjacentText()</code></p><p><strong>语法</strong> ： <code>element.insertAdjacentText(position, text)</code></p><p><strong>描述</strong> ： 在当前元素的指定位置插入一个文本节点。</p><p><strong>参数</strong> ：</p><ul><li><code>position</code> 参数：表示相对于当前元素的位置。 <ul><li><code>&#39;beforebegin&#39;</code> ： 在当前元素之前插入。</li><li><code>&#39;afterend&#39;</code> ： 在当前元素之后插入。</li><li><code>&#39;afterbegin&#39;</code> ： 在当前元素的第一个子元素之前插入。</li><li><code>&#39;beforeend&#39;</code> ： 在当前元素的最后一个子元素之后插入。</li></ul></li><li><code>text</code> 参数：要插入的文本节点。</li></ul></li></ul><h3 id="删除或替换元素方法" tabindex="-1"><a class="header-anchor" href="#删除或替换元素方法"><span>删除或替换元素方法</span></a></h3><ul><li><p><code>element.remove()</code></p><p><strong>语法</strong> ： <code>element.remove()</code></p><p><strong>描述</strong> ： 从 DOM 树中移除当前元素。</p></li><li><p><code>element.replaceChildren()</code></p><p><strong>语法</strong> ： <code>element.replaceChildren(nodes)</code></p><p><strong>描述</strong> ： 移除当前元素的所有子元素，并用 <code>nodes</code> 参数指定的节点替换。</p></li><li><p><code>element.replaceWith()</code></p><p><strong>语法</strong> ： <code>element.replaceWith(node1, node2, ..., nodeN)</code></p><p><strong>描述</strong> ： 用一个（或多个） <code>Node</code> 节点或 <code>DOMString</code> （以 <code>Text</code> 的形式插入）替换当前元素父元素的子元素。</p></li></ul><h3 id="操作元素属性方法" tabindex="-1"><a class="header-anchor" href="#操作元素属性方法"><span>操作元素属性方法</span></a></h3><ul><li><p><code>element.getAttribute()</code></p><p><strong>语法</strong> ： <code>element.getAttribute(attributeName)</code></p><p><strong>描述</strong> ： 返回当前元素的 <code>attributeName</code> 属性值。</p></li><li><p><code>element.getAttributeNames()</code></p><p><strong>语法</strong> ： <code>element.getAttributeNames()</code></p><p><strong>描述</strong> ： 返回当前元素的所有属性名，包括自定义属性。</p></li><li><p><code>element.getAttributeNode()</code></p><p><strong>语法</strong> ： <code>element.getAttributeNode(attributeName)</code></p><p><strong>描述</strong> ： 返回当前元素的 <code>attributeName</code> 属性节点。</p></li><li><p><code>element.getBoundingClientRect()</code></p><p><strong>语法</strong> ： <code>element.getBoundingClientRect()</code></p><p><strong>描述</strong> ： 返回当前元素的 <code>DOMRect</code> 对象，提供元素节点的大小、位置等信息。</p><ul><li><code>width</code> ： 元素的宽度（包含了元素本身宽度 + <code>padding</code> + <code>border</code>）。</li><li><code>height</code> ： 元素的高度（包含了元素本身高度 + <code>padding</code> + <code>border</code>）。</li><li><code>x</code> ： 元素左上角相对于视口的横坐标。</li><li><code>y</code> ： 元素左上角相对于视口的纵坐标。</li><li><code>left</code> ： 元素左上角相对于视口的横坐标。与 <code>x</code> 属性相等。</li><li><code>top</code> ： 元素左上角相对于视口的纵坐标。与 <code>y</code> 属性相等。</li><li><code>right</code> ： 元素右下角相对于视口的横坐标（相当于 <code>x + width</code>）。</li><li><code>bottom</code> ： 元素右下角相对于视口的纵坐标（相当于 <code>y + height</code>）。</li></ul><p>元素相对于视口（viewport）的位置，会随着页面滚动变化，因此表示位置的四个属性值，都不是固定不变的。其绝对位置为 <code>(left + window.scrollX, top + window.scrollY)</code> 。</p></li><li><p><code>element.getClientRects()</code></p><p><strong>语法</strong> ： <code>element.getClientRects()</code></p><p><strong>描述</strong> ： 返回当前元素的 <code>DOMRect</code> 对象数组，提供元素节点的大小、位置等信息。与 <code>element.getBoundingClientRect()</code> 方法类似，但是返回的是所有 <code>DOMRect</code> 对象，而不是一个。</p><ul><li>对于块级元素，方法返回一个 <code>DOMRect</code> 对象。</li><li>对于行内元素，方法返回多个 <code>DOMRect</code> 对象，取决于元素在页面占据多少行。如果行内元素包含换行符，页面展示为一行，但是方法返回多个 <code>DOMRect</code> 对象。</li></ul></li><li><p><code>element.hasAttribute()</code></p><p><strong>语法</strong> ： <code>element.hasAttribute(attributeName)</code></p><p><strong>描述</strong> ： 返回一个布尔值，判断当前元素是否包含 <code>attributeName</code> 属性。</p></li><li><p><code>element.hasAttributes()</code></p><p><strong>语法</strong> ： <code>element.hasAttributes()</code></p><p><strong>描述</strong> ： 返回一个布尔值，判断当前元素是否包含属性。</p></li><li><p><code>element.setAttribute()</code></p><p><strong>语法</strong> ： <code>element.setAttribute(attributeName, attributeValue)</code></p><p><strong>描述</strong> ： 设置当前元素的 <code>attributeName</code> 属性值为 <code>attributeValue</code>。如果已存在，则更新属性值。</p></li><li><p><code>element.setAttributeNode()</code></p><p><strong>语法</strong> ： <code>element.setAttributeNode(attributeNode)</code></p><p><strong>描述</strong> ： 设置当前元素的 <code>attributeNode</code> 属性节点（Attr 对象）。</p></li><li><p><code>element.removeAttribute()</code></p><p><strong>语法</strong> ： <code>element.removeAttribute(attributeName)</code></p><p><strong>描述</strong> ： 移除当前元素的 <code>attributeName</code> 属性。</p></li><li><p><code>element.removeAttributeNode()</code></p><p><strong>语法</strong> ： <code>element.removeAttributeNode(attributeNode)</code></p><p><strong>描述</strong> ： 移除当前元素的 <code>attributeNode</code> 属性节点（Attr 对象）。</p></li><li><p><code>element.toggleAttribute()</code></p><p><strong>语法</strong> ： <code>element.toggleAttribute(attributeName, force)</code></p><p><strong>描述</strong> ： 如果当前元素包含 <code>attributeName</code> 属性，则移除该属性，否则添加该属性。</p><p><strong>参数</strong> ：</p><ul><li><code>attributeName</code> 参数：属性名。</li><li><code>force</code> 参数：可选值。布尔值，设置为 <code>true</code> 时，添加属性；设置为 <code>false</code> 时，移除属性。</li></ul></li></ul><h3 id="元素滚动方法" tabindex="-1"><a class="header-anchor" href="#元素滚动方法"><span>元素滚动方法</span></a></h3><ul><li><p><code>element.scroll()</code></p><p><strong>语法</strong> ： <code>element.scroll(x, y)</code> / <code>element.scroll(options)</code></p><p><strong>描述</strong> ： 在当前元素中，滚动到绝对位置（<code>x</code>、<code>y</code>）。</p><p><strong>参数</strong> ：</p><ul><li><code>x</code> 参数：水平滚动的距离。</li><li><code>y</code> 参数：垂直滚动的距离。</li><li><code>options</code> 参数 <ul><li><code>options.top</code> ： 垂直滚动的距离。</li><li><code>options.left</code> ： 水平滚动的距离。</li><li><code>options.behavior</code> ： 滚动行为，默认值为 <code>auto</code>。可选值为 <code>auto</code> （直接跳转到目标位置） 或者 <code>smooth</code> （平滑滚动并产生过渡效果）。</li></ul></li></ul></li><li><p><code>element.scrollBy()</code></p><p><strong>语法</strong> ： <code>element.scrollBy(x, y)</code> / <code>element.scrollBy(options)</code></p><p><strong>描述</strong> ： 在当前元素中，滚动相对的距离（<code>x</code>、<code>y</code>）。</p><p><strong>参数</strong> ：</p><ul><li><code>x</code> 参数：水平滚动的距离。</li><li><code>y</code> 参数：垂直滚动的距离。</li><li><code>options</code> 参数： <ul><li><code>options.top</code> ： 垂直滚动的距离。</li><li><code>options.left</code> ： 水平滚动的距离。</li><li><code>options.behavior</code> ： 滚动行为，默认值为 <code>auto</code>。可选值为 <code>auto</code> （直接跳转到目标位置） 或者 <code>smooth</code> （平滑滚动并产生过渡效果）。</li></ul></li></ul></li><li><p><code>element.scrollIntoView()</code></p><p><strong>语法</strong> ： <code>element.scrollIntoView(alignToTop)</code> / ``element.scrollIntoView(scrollIntoViewOptions)`</p><p><strong>描述</strong> ： 滚动当前元素，进入浏览器的可见区域，类似于设置 <code>window.location.hash</code> 的效果。</p><p><strong>参数</strong> ：</p><ul><li><code>alignToTop</code> 参数：可选。布尔值，默认值为 <code>true</code>。 <ul><li>如果为 <code>true</code>，则元素的顶部与视口顶部对齐。相当于 <code>scrollIntoViewOptions: { block: &quot;start&quot;, inline: &quot;nearest&quot; }</code></li><li>如果为 <code>false</code>，则元素的底部与视口底部对齐。相当于 <code>scrollIntoViewOptions: { block: &quot;end&quot;, inline: &quot;nearest&quot; }</code></li></ul></li><li><code>scrollIntoViewOptions</code> 参数：可选。 <ul><li><code>scrollIntoViewOptions.behavior</code> ： 可选。滚动行为，默认值为 <code>auto</code>。可选值为 <code>auto</code> （直接跳转到目标位置） 、 <code>smooth</code> （平滑滚动并产生过渡效果）、 <code>instant</code> （直接跳转到目标位置）。</li><li><code>scrollIntoViewOptions.block</code> ： 可选。垂直滚动的位置，默认值为 <code>start</code>。可选值为 <code>start</code> （元素的顶部与视口顶部对齐）、 <code>center</code> （元素的中心与视口中心对齐）、 <code>end</code> （元素的底部与视口底部对齐）、 <code>nearest</code> （元素的边界与视口的边界尽可能接近）。</li><li><code>scrollIntoViewOptions.inline</code> ： 可选。水平滚动的位置，默认值为 <code>nearest</code>。可选值为 <code>start</code> （元素的左边界与视口左边界对齐）、 <code>center</code> （元素的中心与视口中心对齐）、 <code>end</code> （元素的右边界与视口右边界对齐）、 <code>nearest</code> （元素的边界与视口的边界尽可能接近）。</li></ul></li></ul></li><li><p><code>element.scrollTo()</code></p><p><strong>语法</strong> ： <code>element.scrollTo(x, y)</code> / <code>element.scrollTo(options)</code></p><p><strong>描述</strong> ： 在当前元素中，滚动到绝对位置（<code>x</code>、<code>y</code>）。</p><p><strong>参数</strong> ：</p><ul><li><code>x</code> 参数：水平滚动的距离。</li><li><code>y</code> 参数：垂直滚动的距离。</li><li><code>options</code> 参数： <ul><li><code>options.top</code> ： 垂直滚动的距离。</li><li><code>options.left</code> ： 水平滚动的距离。</li><li><code>options.behavior</code> ： 滚动行为，默认值为 <code>auto</code>。可选值为 <code>auto</code> （直接跳转到目标位置）、 <code>smooth</code> （平滑滚动并产生过渡效果）、 <code>instant</code> （直接跳转到目标位置）。</li></ul></li></ul></li></ul><h3 id="其他方法" tabindex="-1"><a class="header-anchor" href="#其他方法"><span>其他方法</span></a></h3><ul><li><p><code>element.matches()</code></p><p><strong>语法</strong> ： <code>element.matches(selectors)</code></p><p><strong>描述</strong> ： 返回一个布尔值，判断当前元素是否匹配 CSS 选择器 <code>selectors</code>。</p></li><li><p><code>element.animate()</code></p><p><strong>语法</strong> ： <code>element.animate(keyframes, options)</code></p><p><strong>描述</strong> ： 创建一个新的 <code>Animation</code> 对象，用来控制当前元素的动画效果。</p><p><strong>参数</strong> ：</p><ul><li><code>keyframes</code> 参数：关键帧对象数组或者关键帧对象。</li><li><code>options</code> 参数：表示动画持续时间（单位毫秒），或者是包含一个或者多个时间属性的对象（<code>new KeyframeEffect()</code> 的 <code>options</code> 参数）。</li></ul></li><li><p><code>element.getAnimations()</code></p><p><strong>语法</strong> ： <code>element.getAnimations(options)</code></p><p><strong>*描述</strong> ： 返回当前元素以及其子元素的所有 <code>Animation</code> 对象，如果没有则返回空数组。</p><p><strong>参数</strong> ：</p><ul><li><code>options</code> ： 可选值。 <ul><li><code>options.subtree</code> ： 布尔值，默认值为 <code>false</code>。如果为 <code>true</code>，则也会返回以当前元素的后代为目标的动画。</li></ul></li></ul></li><li><p><code>element.attachShadow()</code></p><p><strong>语法</strong> ： <code>element.attachShadow(shadowRootInit)</code></p><p><strong>描述</strong> ： 给当前元素挂在一个 Shadow DOM，并且返回对 <code>ShadowRoot</code> 的引用。</p><p><strong>参数</strong> ：</p><ul><li><code>shadowRootInit</code> 参数：<code>ShadowRootInit</code> 字典 <ul><li><code>shadowRootInit.mode</code> : 指定 Shadow DOM 树封装模式的字符串 <ul><li><code>open</code> ： 可以从 js 外部访问根节点 shadow root 元素。例如使用 <code>Element.shadowRoot</code></li><li><code>closed</code> ： 拒绝从 js 外部访问关闭的 shadow root 节点。</li></ul></li><li><code>shadowRootInit.delegatesFocus</code> ： 布尔值，设置为 <code>true</code> 时，指定减轻自定义元素的聚焦性能问题行为。</li></ul></li></ul></li></ul>',27)]))}const a=o(n,[["render",i]]),m=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/JavaScript/DOM/element.html","title":"Element 类型","lang":"zh-CN","frontmatter":{"description":"Element 类型 在 XML 和 HTML 中，Element 用来描述页面的结构，可以是数据项、文本、按钮、复选框、图像等。 Element 继承链路： EventTarget <-- Node <-- Element 。。 Element 包括开始标签、结束标签、属性以及其他内容。 element Element 类型属性 元素特性属性 ele...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Element 类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-28T08:18:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF/JavaScript/DOM/element.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"Element 类型"}],["meta",{"property":"og:description","content":"Element 类型 在 XML 和 HTML 中，Element 用来描述页面的结构，可以是数据项、文本、按钮、复选框、图像等。 Element 继承链路： EventTarget <-- Node <-- Element 。。 Element 包括开始标签、结束标签、属性以及其他内容。 element Element 类型属性 元素特性属性 ele..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-28T08:18:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-28T08:18:46.000Z"}]]},"git":{"createdTime":1698775113000,"updatedTime":1740730726000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"lingronghai@foxmail.com","commits":3,"url":"https://github.com/lrh21g"},{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":12.37,"words":3710},"filePathRelative":"前端/JavaScript/DOM/element.md","excerpt":"\\n<p>在 XML 和 HTML 中，<code>Element</code> 用来描述页面的结构，可以是数据项、文本、按钮、复选框、图像等。</p>\\n<p><code>Element</code> 继承链路： <code>EventTarget &lt;-- Node &lt;-- Element</code> 。。</p>\\n<p><code>Element</code> 包括开始标签、结束标签、属性以及其他内容。</p>\\n<p></p>\\n<h2>Element 类型属性</h2>\\n<h3>元素特性属性</h3>\\n<ul>\\n<li>\\n<p><code>element.id</code> ： 获取或者设置当前元素的 <code>id</code> 属性值。</p>\\n</li>\\n<li>\\n<p><code>element.tagName</code> ： 返回当前元素的大写标签名，与 <code>nodeName</code> 属性值一致。</p>\\n</li>\\n<li>\\n<p><code>element.attributes</code> ： 返回一个 <code>NamedNodeMap</code> 对象，包含元素的所有属性。</p>\\n</li>\\n<li>\\n<p><code>element.innerHTML</code> ： 获取或者设置当前元素包含的所有 HTML 代码。用来设置某个节点的内容。</p>\\n</li>\\n<li>\\n<p><code>element.outerHTML</code> ： 获取或者设置当前元素包含的所有 HTML 代码，包含当前元素本身与所有子元素。用来替换当前元素节点。</p>\\n</li>\\n<li>\\n<p><code>element.localName</code> ： 只读属性。返回当前元素的标签名，不包含命名空间前缀。</p>\\n</li>\\n<li>\\n<p><code>element.prefix</code> ： 返回当前元素的命名空间前缀，如果未指定前缀，则返回 null。</p>\\n</li>\\n<li>\\n<p><code>element.namespaceURI</code> ： 只读属性。返回元素的命名空间，若该元素不在命名空间中则返回 <code>null</code> 。</p>\\n</li>\\n<li>\\n<p><code>element.shadowRoot</code> ： 只读属性。返回当前元素的 <code>ShadowRoot</code> 对象，如果没有则返回 <code>null</code>。</p>\\n</li>\\n<li>\\n<p><code>element.slot</code> ： 返回已插入元素所在的 Shadow DOM slot 的名称。</p>\\n</li>\\n</ul>","autoDesc":true}');export{a as comp,m as data};
