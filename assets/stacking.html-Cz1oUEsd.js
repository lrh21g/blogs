import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,d as i,o as c}from"./app-CwERxs91.js";const n="/blogs/assets/stacking-order-BucW8YVu.png",a="/blogs/assets/stacking-order-and-z-index-f3D9WzFF.png",l={};function t(r,e){return c(),o("div",null,e[0]||(e[0]=[i('<h1 id="层叠规则与-z-index" tabindex="-1"><a class="header-anchor" href="#层叠规则与-z-index"><span>层叠规则与 z-index</span></a></h1><h2 id="层叠上下文" tabindex="-1"><a class="header-anchor" href="#层叠上下文"><span>层叠上下文</span></a></h2><p>假定用户正面向（浏览器）视窗或网页，而 HTML 元素沿着其相对于用户的一条虚构的 z 轴排开，层叠上下文就是对这些 HTML 元素的一个三维构想。众 HTML 元素基于其元素属性按照优先级顺序占据这个空间。</p><h3 id="层叠水平" tabindex="-1"><a class="header-anchor" href="#层叠水平"><span>层叠水平</span></a></h3><p>层叠水平，决定了同一个层叠上下文中元素在 z 轴上的显示顺序。 层叠水平和 CSS 的 <code>z-index</code> 属性不一样：</p><ul><li>某些情况下 <code>z-index</code> 确实可以影响层叠水平，但是只限于定位元素以及 <code>flex</code> 盒子的孩子元素。</li><li>层叠水平所有的元素都存在。对普通元素的层叠水平探讨只局限在当前层叠上下文元素中。</li></ul><h3 id="层叠顺序" tabindex="-1"><a class="header-anchor" href="#层叠顺序"><span>层叠顺序</span></a></h3><p>层叠顺序，表示元素发生层叠时有着特定的垂直显示顺序。“层叠上下文” 和 “层叠水平” 是概念，“层叠顺序” 是规则。</p><p><img src="'+n+'" alt="stacking-order"></p><ul><li>位于最下面的 <code>background</code>/<code>border</code> 特指层叠上下文元素的边框和背景色。每一个层叠顺序规则仅适用于当前层叠上下文元素的小世界。</li><li><code>inline</code> 水平盒子指的是包括 <code>inline</code>/<code>inline-block</code>/<code>inline-table</code> 元素的“层叠顺序”，它们都是同等级别的。</li><li>单纯从层叠水平上看，实际上 <code>z-index: 0</code> 和 <code>z-index: auto</code> 是可以看成是一样的。注意 “单纯从层叠水平上看”，实际上，两者在层叠上下文领域有着根本性的差异。</li></ul><h3 id="层叠准则" tabindex="-1"><a class="header-anchor" href="#层叠准则"><span>层叠准则</span></a></h3><p>当元素发生层叠的时候，其覆盖关系遵循下面两条准则：</p><ul><li>谁大谁上：当具有明显的层叠水平标识的时候，如生效的 <code>z-index</code> 属性值，在同一个层叠上下文领域，层叠水平值大的那一个覆盖小的那一个。</li><li>后来居上：当元素的层叠水平一致、层叠顺序相同的时候，在 DOM 流中处于后面的元素会覆盖前面的元素。</li></ul><h3 id="层叠上下文的特性" tabindex="-1"><a class="header-anchor" href="#层叠上下文的特性"><span>层叠上下文的特性</span></a></h3><ul><li><p>层叠上下文的层叠水平要比普通元素高。</p></li><li><p>层叠上下文可以阻断元素的混合模式（<code>mix-blend-mode</code> 属性/<code>background-blend-mode</code> 属性）。</p><p><code>isolation</code> CSS 属性决定了元素是否必须创建一个新的层叠上下文。用于隔离一组元素，使这组元素不和它们的背景进行混合。支持的值：</p><ul><li><code>auto</code> ：默认值，元素不进行隔离。</li><li><code>isolate</code> ：创建一个新的堆叠上下文环境。用来隔离 <code>mix-blend-mode</code> 元素的混合。</li></ul></li><li><p>层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的 “层叠上下文”。</p></li><li><p>每个层叠上下文和兄弟元素独立，也就是说，当进行层叠变化或渲染的时候，只需要考虑后代元素。</p></li><li><p>每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。</p></li></ul><h3 id="层叠上下文的创建" tabindex="-1"><a class="header-anchor" href="#层叠上下文的创建"><span>层叠上下文的创建</span></a></h3><p>和块状格式化上下文一样，层叠上下文也基本上是由一些特定的 CSS 属性创建的。主要有：</p><ul><li><p>根层叠上下文：根层叠上下文指的是页面根元素，可以看成是 <code>&lt;html&gt;</code> 元素。</p></li><li><p><code>z-index</code> 值为数值的定位元素的传统 “层叠上下文”</p></li><li><p>其他 CSS3 属性</p><ul><li>元素为 <code>flex</code> 布局元素（父元素 <code>display:flex|inline-flex</code>），同时 <code>z-index</code> 值不是 <code>auto</code>。</li><li>元素的 <code>opacity</code> 值不是 1。</li><li>元素的 <code>transform</code> 值不是 <code>none</code>。</li><li>元素 <code>mix-blend-mode</code> 值不是 <code>normal</code>。</li><li>元素的 <code>filter</code> 值不是 <code>none</code>。</li><li>元素的 <code>isolation</code> 值是 <code>isolate</code>。</li><li>元素的 <code>will-change</code> 属性值为上面 2～6 的任意一个（如 <code>will-change:opacity</code>、<code>will-chang:transform</code> 等）。</li><li>元素的 <code>-webkit-overflow-scrolling</code> 设为 <code>touch</code>。</li></ul></li></ul><h3 id="层叠上下文与层叠顺序" tabindex="-1"><a class="header-anchor" href="#层叠上下文与层叠顺序"><span>层叠上下文与层叠顺序</span></a></h3><ul><li>如果层叠上下文元素不依赖 <code>z-index</code> 数值，则其层叠顺序是 <code>z-index:auto</code>，可看成 <code>z:index:0</code> 级别。</li><li>如果层叠上下文元素依赖 <code>z-index</code> 数值，则其层叠顺序由 <code>z-index</code> 值决定。</li></ul><p><img src="'+a+'" alt="stacking-order-and-z-index"></p><p>元素一旦成为定位元素，其 <code>z-index</code> 就会自动生效，此时其 <code>z-index</code> 就是默认的 <code>auto</code>，也就是 0 级别，根据上面的层叠顺序表，就会覆盖 <code>inline</code> 或 <code>block</code> 或 <code>float</code> 元素。 而不支持 <code>z-index</code> 的层叠上下文元素天然是 <code>z-index:auto</code> 级别，也就意味着，层叠上下文元素和定位元素是一个层叠顺序的，于是当它们发生层叠的时候，遵循的是“后来居上”准则。</p><h2 id="z-index" tabindex="-1"><a class="header-anchor" href="#z-index"><span>z-index</span></a></h2><h3 id="z-index-准则" tabindex="-1"><a class="header-anchor" href="#z-index-准则"><span>z-index 准则</span></a></h3><p>对于非浮层元素，避免设置 <code>z-index</code> 值，<code>z-index</code> 值没有任何道理需要超过 2 。</p><ul><li>定位元素一旦设置了 <code>z-index</code> 值，就从普通定位元素变成了层叠上下文元素，相互间的层叠顺序就发生了根本的变化，很容易出现设置了巨大的 <code>z-index</code> 值也无法覆盖其他元素的问题。</li><li>避免 <code>z-index</code> “一山比一山高”的样式混乱问题。如果 DOM 顺序确实无法调整，不得不使用 <code>z-index</code> 值，请记住，<code>z-index</code> 不要超过 2 。</li></ul><p><code>z-index</code> 准则，并不包括那些在页面上飘来飘去的元素定位，弹框、出错提示、一些下拉效果等都不受这一准则限制。</p><h3 id="z-index-负值" tabindex="-1"><a class="header-anchor" href="#z-index-负值"><span>z-index 负值</span></a></h3><p><code>z-index</code> 负值元素的层级是在层叠上下文元素上面、block 元素的下面，也就是 <code>z-index</code> 虽然名为负数层级，但依然无法突破当前层叠上下文。</p><p><code>z-index</code> 负值渲染的过程是一个寻找第一个层叠上下文元素的过程，然后层叠顺序止步于这个层叠上下文元素。</p>',30)]))}const h=d(l,[["render",t]]),x=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/stacking.html","title":"层叠规则与 z-index","lang":"zh-CN","frontmatter":{"category":"CSS基础","tag":["CSS"],"description":"层叠规则与 z-index 层叠上下文 假定用户正面向（浏览器）视窗或网页，而 HTML 元素沿着其相对于用户的一条虚构的 z 轴排开，层叠上下文就是对这些 HTML 元素的一个三维构想。众 HTML 元素基于其元素属性按照优先级顺序占据这个空间。 层叠水平 层叠水平，决定了同一个层叠上下文中元素在 z 轴上的显示顺序。 层叠水平和 CSS 的 z-i...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"层叠规则与 z-index\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-08T16:42:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/stacking.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"层叠规则与 z-index"}],["meta",{"property":"og:description","content":"层叠规则与 z-index 层叠上下文 假定用户正面向（浏览器）视窗或网页，而 HTML 元素沿着其相对于用户的一条虚构的 z 轴排开，层叠上下文就是对这些 HTML 元素的一个三维构想。众 HTML 元素基于其元素属性按照优先级顺序占据这个空间。 层叠水平 层叠水平，决定了同一个层叠上下文中元素在 z 轴上的显示顺序。 层叠水平和 CSS 的 z-i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-08T16:42:45.000Z"}],["meta",{"property":"article:tag","content":"CSS"}],["meta",{"property":"article:modified_time","content":"2025-04-08T16:42:45.000Z"}]]},"git":{"createdTime":1744130565000,"updatedTime":1744130565000,"contributors":[{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":5,"words":1500},"filePathRelative":"前端/CSS/CSS基础/stacking.md","excerpt":"\\n<h2>层叠上下文</h2>\\n<p>假定用户正面向（浏览器）视窗或网页，而 HTML 元素沿着其相对于用户的一条虚构的 z 轴排开，层叠上下文就是对这些 HTML 元素的一个三维构想。众 HTML 元素基于其元素属性按照优先级顺序占据这个空间。</p>\\n<h3>层叠水平</h3>\\n<p>层叠水平，决定了同一个层叠上下文中元素在 z 轴上的显示顺序。 层叠水平和 CSS 的 <code>z-index</code> 属性不一样：</p>\\n<ul>\\n<li>某些情况下 <code>z-index</code> 确实可以影响层叠水平，但是只限于定位元素以及 <code>flex</code> 盒子的孩子元素。</li>\\n<li>层叠水平所有的元素都存在。对普通元素的层叠水平探讨只局限在当前层叠上下文元素中。</li>\\n</ul>","autoDesc":true}');export{h as comp,x as data};
