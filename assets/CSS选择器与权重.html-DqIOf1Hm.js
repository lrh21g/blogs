import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as o,o as c}from"./app-CwERxs91.js";const r={};function a(n,t){return c(),e("div",null,t[0]||(t[0]=[o('<h1 id="css-选择器与权重" tabindex="-1"><a class="header-anchor" href="#css-选择器与权重"><span>CSS 选择器与权重</span></a></h1><h2 id="css-选择器权重" tabindex="-1"><a class="header-anchor" href="#css-选择器权重"><span>CSS 选择器权重</span></a></h2><ul><li><p>权重计算规则</p><ul><li><p>第一等：代表内联样式。如: <code>style=””</code> 权值为 <code>+1000</code></p></li><li><p>第二等：代表 ID 选择器。如：<code>#content</code> 权值为 <code>+100</code></p></li><li><p>第三等：代表类，伪类和属性选择器。如：<code>.content</code> 权值为 <code>+10</code></p></li><li><p>第四等：代表类型选择器和伪元素选择器，如：<code>div p</code> 权值为 <code>+1</code></p></li><li><p>通配符、子选择器、相邻选择器等。权值为 <code>+0</code></p></li><li><p>继承的样式没有权值</p></li></ul></li><li><p>权重比较规则： <strong><code>1,0,0,0 &gt; 0,99,99,99</code></strong></p><ul><li><p>从左往右逐个等级比较，前一等级相等才往后比</p></li><li><p>在权重相同的情况下，后面的样式会覆盖掉前面的样式。</p></li><li><p>通配符、子选择器、相邻选择器等的。虽然权值为 0000，但是也比继承的样式优先</p></li></ul></li><li><p><code>!important</code></p><p><code>!important</code> 的作用是提升优先级，样式的优先级是最高的（比内联样式的优先级还高）</p></li></ul><h2 id="css-选择器" tabindex="-1"><a class="header-anchor" href="#css-选择器"><span>CSS 选择器</span></a></h2><p>浏览器解析 CSS 是从右往左进行解析的。例如：<code>body div p.text</code> ，浏览器先找到 <code>p.text</code>，然后再寻找 <code>p.text</code> 的父级 <code>div</code>，以此类推。</p><h3 id="基本选择器语法" tabindex="-1"><a class="header-anchor" href="#基本选择器语法"><span>基本选择器语法</span></a></h3><table><thead><tr><th>选择器</th><th>类型</th><th>功能描述</th></tr></thead><tbody><tr><td><code>*</code></td><td>通配选择器</td><td>选择文档中所有 HTML 元素</td></tr><tr><td><code>E</code></td><td>元素选择器</td><td>选择指定类型的 HTML 元素</td></tr><tr><td><code>#id</code></td><td>ID选择器</td><td>选择指定 ID 属性值为 <code>&quot;id&quot;</code> 的任意类型元素</td></tr><tr><td><code>.class</code></td><td>类选择器</td><td>选择指定 class 属性值为 <code>&quot;class&quot;</code> 的任意类型的任意多个元素</td></tr><tr><td><code>selector1,selectorN</code></td><td>群组选择器</td><td>将每一个选择器匹配的元素集合并</td></tr></tbody></table><h3 id="层次选择器语法" tabindex="-1"><a class="header-anchor" href="#层次选择器语法"><span>层次选择器语法</span></a></h3><table><thead><tr><th>选择器</th><th>类型</th><th>功能描述</th></tr></thead><tbody><tr><td><code>E F</code></td><td>后代选择器（包含选择器）</td><td>选择匹配的 F 元素，且匹配的 F 元素被包含在匹配的 E 元素内</td></tr><tr><td><code>E &gt; F</code></td><td>子选择器</td><td>选择匹配的 F 元素，且匹配的 F 元素所匹配的 E 元素的子元素</td></tr><tr><td><code>E + F</code></td><td>相邻兄弟选择器</td><td>选择匹配的 F 元素，且匹配的 F 元素紧位于匹配的 E 元素的后面</td></tr><tr><td><code>E ~ F</code></td><td>通用选择器</td><td>选择匹配的 F 元素，且位于匹配的 E 元素后的所有匹配的 F 元素</td></tr></tbody></table><h3 id="动态伪类选择器语法" tabindex="-1"><a class="header-anchor" href="#动态伪类选择器语法"><span>动态伪类选择器语法</span></a></h3><table><thead><tr><th>选择器</th><th>类型类型</th><th>功能描述</th></tr></thead><tbody><tr><td><code>E:link</code></td><td>链接伪类选择器</td><td>选择匹配的 E 元素，而且匹配元素被定义了超链接并未被访问过。常用于链接描点上</td></tr><tr><td><code>E:visited</code></td><td>链接伪类选择器</td><td>选择匹配的 E 元素，而且匹配元素被定义了超链接并已被访问过。常用于链接描点上</td></tr><tr><td><code>E:active</code></td><td>用户行为选择器</td><td>选择匹配的 E 元素，且匹配元素被激活。常用于链接描点和按钮上</td></tr><tr><td><code>E:hover</code></td><td>用户行为选择器</td><td>选择匹配的 E 元素，且用户鼠标停留在元素 E 上。IE6及以下浏览器仅支持a:hover</td></tr><tr><td><code>E:focus</code></td><td>用户行为选择器</td><td>选择匹配的 E 元素，而且匹配元素获取焦点</td></tr></tbody></table><h3 id="目标伪类选择器" tabindex="-1"><a class="header-anchor" href="#目标伪类选择器"><span>目标伪类选择器</span></a></h3><table><thead><tr><th>选择器</th><th>功能描述</th></tr></thead><tbody><tr><td><code>E:target</code></td><td>选择匹配 E 的所有元素，且匹配元素被相关 URL 指向</td></tr></tbody></table><h3 id="ui元素状态伪类选择器语法" tabindex="-1"><a class="header-anchor" href="#ui元素状态伪类选择器语法"><span>UI元素状态伪类选择器语法</span></a></h3><table><thead><tr><th>选择器</th><th>类型</th><th>功能描述</th></tr></thead><tbody><tr><td><code>E:checked</code></td><td>选中状态伪类选择器</td><td>匹配选中的复选按钮或者单选按钮表单元素</td></tr><tr><td><code>E:enabled</code></td><td>启用状态伪类选择器</td><td>匹配所有启用的表单元素</td></tr><tr><td><code>E:disabled</code></td><td>不可用状态伪类选择器</td><td>匹配所有禁用的表单元素</td></tr></tbody></table><h3 id="否定伪类选择器" tabindex="-1"><a class="header-anchor" href="#否定伪类选择器"><span>否定伪类选择器</span></a></h3><table><thead><tr><th>选择器</th><th>功能描述</th></tr></thead><tbody><tr><td><code>E:not(F)</code></td><td>匹配所有除元素 F 外的 E 元素</td></tr></tbody></table><h3 id="属性选择器" tabindex="-1"><a class="header-anchor" href="#属性选择器"><span>属性选择器</span></a></h3><table><thead><tr><th>选择器</th><th>功能描述</th></tr></thead><tbody><tr><td><code>[attribute]</code></td><td>用于选取带有指定属性的元素。</td></tr><tr><td><code>[attribute=value]</code></td><td>用于选取带有指定属性和值的元素。</td></tr><tr><td><code>[attribute~=value]</code></td><td>用于选取属性值中包含指定词汇的元素。</td></tr><tr><td><code>[attribute|=value]</code></td><td>用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。</td></tr><tr><td><code>[attribute^=value]</code></td><td>匹配属性值以指定值开头的每个元素。</td></tr><tr><td><code>[attribute$=value]</code></td><td>匹配属性值以指定值结尾的每个元素。</td></tr><tr><td><code>[attribute*=value]</code></td><td>匹配属性值中包含指定值的每个元素。</td></tr></tbody></table><p>注意： <code>&lt;div class=&quot;links item&quot;&gt;&lt;/div&gt;</code> 其中 <code>div[class=&quot;links&quot;]{ /*...*/ }</code> 是找不到匹配元素，只有 <code>div[class=&quot;links item&quot;]{ /*...*/ }</code> 才匹配</p><h3 id="结构伪类选择器使用语法" tabindex="-1"><a class="header-anchor" href="#结构伪类选择器使用语法"><span>结构伪类选择器使用语法</span></a></h3><table><thead><tr><th>选择器</th><th>功能描述</th></tr></thead><tbody><tr><td><code>E:first-child</code></td><td>作为父元素的第一个子元素的元素E。与 <code>E:nth-child(1)</code> 等同</td></tr><tr><td><code>E:last-child</code></td><td>作为父元素的最后一个子元素的元素E。与 <code>E:nth-last-child(1)</code> 等同</td></tr><tr><td><code>E:root</code></td><td>选择匹配元素 E 所在文档的根元素。在 HTML 文档中，根元素始终是html，此时该选择器与 html 类型选择器匹配的内容相同</td></tr><tr><td><code>E F:nth-child(n)</code></td><td>选择父元素 E 的第 n 个子元素F。其中 n 可以是整数（1，2，3）、关键字（even，odd）、可以是公式（2n+1）,而且 n 值起始值为1，而不是0.</td></tr><tr><td><code>E F:nth-last-child(n)</code></td><td>选择父元素 E 的倒数第 n 个子元素F。此选择器与 <code>E:nth-child(n)</code> 选择器计算顺序刚好相反，但使用方法都是一样的，其中 <code>:nth-last-child(1)</code> 始终匹配最后一个元素，与last-child等同</td></tr><tr><td><code>E:nth-of-type(n)</code></td><td>选择父元素内具有指定类型的第 n 个 E 元素</td></tr><tr><td><code>E:nth-last-of-type(n)</code></td><td>选择父元素内具有指定类型的倒数第 n 个 E 元素</td></tr><tr><td><code>E:first-of-type</code></td><td>选择父元素内具有指定类型的第一个 E 元素，与 <code>E:nth-of-type(1)</code> 等同</td></tr><tr><td><code>E:last-of-type</code></td><td>选择父元素内具有指定类型的最后一个 E 元素，与 <code>E:nth-last-of-type(1)</code> 等同</td></tr><tr><td><code>E:only-child</code></td><td>选择父元素只包含一个子元素，且该子元素匹配 E 元素</td></tr><tr><td><code>E:only-of-type</code></td><td>选择父元素只包含一个同类型子元素，且该子元素匹配 E 元素</td></tr><tr><td><code>E:empty</code></td><td>选择没有子元素的元素，而且该元素也不包含任何文本节点</td></tr></tbody></table><p>注意：</p><ul><li><p><code>ul&gt;li:nth-child(3)</code> 表达的并不是一定选择列表 <code>ul</code> 元素中的第 3 个子元素 <code>li</code>，仅有列表 <code>ul</code> 中第 3 个 <code>li</code> 元素前不存在其他的元素，命题才有意义，否则不会改变列表第 3 个 <code>li</code> 元素的样式。</p></li><li><p><code>:nth-child(n)</code> 中参数只能是 <code>n</code>，不可以用其他字母代替。</p></li><li><p><code>:nth-child(odd)</code> 选择的是奇数项，而使用 <code>:nth-last-child(odd)</code> 选择的却是偶数项。</p></li></ul>',24)]))}const h=d(r,[["render",a]]),p=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E6%9D%83%E9%87%8D.html","title":"CSS 选择器与权重","lang":"zh-CN","frontmatter":{"category":"CSS基础","tag":["CSS"],"description":"CSS 选择器与权重 CSS 选择器权重 权重计算规则 第一等：代表内联样式。如: style=”” 权值为 +1000 第二等：代表 ID 选择器。如：#content 权值为 +100 第三等：代表类，伪类和属性选择器。如：.content 权值为 +10 第四等：代表类型选择器和伪元素选择器，如：div p 权值为 +1 通配符、子选择器、相邻选...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSS 选择器与权重\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-07T06:45:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E6%9D%83%E9%87%8D.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"CSS 选择器与权重"}],["meta",{"property":"og:description","content":"CSS 选择器与权重 CSS 选择器权重 权重计算规则 第一等：代表内联样式。如: style=”” 权值为 +1000 第二等：代表 ID 选择器。如：#content 权值为 +100 第三等：代表类，伪类和属性选择器。如：.content 权值为 +10 第四等：代表类型选择器和伪元素选择器，如：div p 权值为 +1 通配符、子选择器、相邻选..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-07T06:45:05.000Z"}],["meta",{"property":"article:tag","content":"CSS"}],["meta",{"property":"article:modified_time","content":"2025-04-07T06:45:05.000Z"}]]},"git":{"createdTime":1742284261000,"updatedTime":1744008305000,"contributors":[{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":2,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":5.63,"words":1688},"filePathRelative":"前端/CSS/CSS基础/CSS选择器与权重.md","excerpt":"\\n<h2>CSS 选择器权重</h2>\\n<ul>\\n<li>\\n<p>权重计算规则</p>\\n<ul>\\n<li>\\n<p>第一等：代表内联样式。如: <code>style=””</code> 权值为 <code>+1000</code></p>\\n</li>\\n<li>\\n<p>第二等：代表 ID 选择器。如：<code>#content</code> 权值为 <code>+100</code></p>\\n</li>\\n<li>\\n<p>第三等：代表类，伪类和属性选择器。如：<code>.content</code> 权值为 <code>+10</code></p>\\n</li>\\n<li>\\n<p>第四等：代表类型选择器和伪元素选择器，如：<code>div p</code> 权值为 <code>+1</code></p>\\n</li>\\n<li>\\n<p>通配符、子选择器、相邻选择器等。权值为 <code>+0</code></p>\\n</li>\\n<li>\\n<p>继承的样式没有权值</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>权重比较规则： <strong><code>1,0,0,0 &gt; 0,99,99,99</code></strong></p>\\n<ul>\\n<li>\\n<p>从左往右逐个等级比较，前一等级相等才往后比</p>\\n</li>\\n<li>\\n<p>在权重相同的情况下，后面的样式会覆盖掉前面的样式。</p>\\n</li>\\n<li>\\n<p>通配符、子选择器、相邻选择器等的。虽然权值为 0000，但是也比继承的样式优先</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>!important</code></p>\\n<p><code>!important</code> 的作用是提升优先级，样式的优先级是最高的（比内联样式的优先级还高）</p>\\n</li>\\n</ul>","autoDesc":true}');export{h as comp,p as data};
