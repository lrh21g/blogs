import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as a,o as t}from"./app-CwERxs91.js";const n="/blogs/assets/gitobject.drawio-CdYHLh3d.png",l="/blogs/assets/gitobjectmenu.drawio-DAh13o0c.png",r={};function o(d,i){return t(),e("div",null,i[0]||(i[0]=[a(`<h1 id="git-对象" tabindex="-1"><a class="header-anchor" href="#git-对象"><span>Git 对象</span></a></h1><p>Git 是一个内容寻址文件系统。Git 的核心部分是一个简单的键值对数据库（key-value data store）。向该数据库插入任意类型的内容，它会返回一个键值，通过该键值可以在任意时刻再次检索（retrieve）该内容。</p><h2 id="git目录" tabindex="-1"><a class="header-anchor" href="#git目录"><span>.git目录</span></a></h2><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-md"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.git/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| -- description # 仅供 GitWeb 程序使用</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| -- config # 包含项目特有的配置选项</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| -- info/ # 包含一个全局性排除（global exclude）文件，用以放置那些不希望被记录在 .gitignore 文件中的忽略模式（ignored patterns）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| -- hooks/ # 包含客户端或服务端的钩子脚本（hook scripts）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| -- HEAD # 指示目前被检出的分支</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| -- index # 保存暂存区信息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| -- objects/ # 存储所有数据内容</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| -- refs/ # 存储指向数据（分支）的提交对象的指针</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>objects/ 目录用于存储所有的数据。Git 存储内容的方式 —— 一个文件对应一条内容，以该内容加上特定头部信息一起的 SHA-1 校验和为文件命名。校验和的前两个字符用于命名子目录，余的 38 个字符则用作文件名。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># cat-file 命令显示版本库对象的内容、类型、及大小信息</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cat-file</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 根据对象的类型，显示其内容</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cat-file</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 显示对象的类型</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sha" tabindex="-1"><a class="header-anchor" href="#sha"><span>SHA</span></a></h2><p>所有用于表示文件历史信息，是通过一个40个字符的“对象名”索引的。每一个“对象名”都是对“对象”内容做SHA1哈希计算得来的。</p><p>对象名示例：<code>8c6be0c1f1c4034724d892cf5caec3071e985ea9</code></p><p>优点：</p><ul><li>只需要比较对象名，就可以判断两个对象是否相同</li><li>同样的内容存在两个不同的仓库中，就会存在相同的“对象名”下</li><li>通过检查对象内容的SHA1的哈希值和“对象名”是否相同，来判断对象内容是否正确</li></ul><h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象"><span>对象</span></a></h2><p>每个对象 (object) 包括三个部分：<strong>类型</strong>，<strong>大小</strong>（内容的大小）和<strong>内容</strong>（取决于对象的类型）。有四种类型的对象：<code>blob</code>、<code>tree</code>、 <code>commit</code> 和 <code>tag</code>。</p><ul><li><p><code>blob</code>：用来存储文件数据，通常是一个文件。因为 <code>blob</code> 对象内容全部都是数据，如两个文件在一个目录树（或是一个版本仓库）中有同样的数据内容，那么它们将会共享同一个 <code>blob</code> 对象。<code>blob</code> 对象和其所对应的文件所在路径、文件名是否改被更改都完全没有关系。</p></li><li><p><code>tree</code>：相当于文件系统中的文件夹，它管理一些 <code>tree</code> 或是 <code>blob</code>（就像文件和子目录）。只有当两个 <code>tree</code> 对象的内容完全相同（包括其所指向所有子对象）时，它的名字才会一样。</p></li><li><p><code>commit</code>：一个 <code>commit</code> 只指向一个 <code>tree</code>，它用来标记项目某一个特定时间点的状态。它包括一些关于时间点的元数据，如时间戳、最近一次提交的作者、指向上次提交 (commits) 的指针等等。</p><ul><li>一个 <code>tree</code> 对象： <code>tree</code> 对象的SHA1签名, 代表着目录在某一时间点的内容</li><li>父对象 (parent(s))：提交(commit)的SHA1签名代表着当前提交前一步的项目历史。合并的提交(merge commits)可能会有不只一个父对象。如果一个提交没有父对象, 那么我们就叫它“根提交&quot;(root commit), 它就代表着项目最初的一个版本(revision). 每个项目必须有至少有一个“根提交&quot;(root commit)。</li><li>作者：此次修改的人的名字,修改日期。</li><li>提交者(committer)：实际创建提交(commit)的人的名字, 同时也带有提交日期。</li><li>注释：用来描述此次提交</li></ul><p>注意: 一个提交(commit)本身并没有包括任何信息来说明其做了哪些修改; 所有的修改(changes)都是通过与父提交(parents)的内容比较而得出的。</p></li><li><p><code>tag</code>：来标记某一个提交 (commit) 的方法。包括一个对象名, 对象类型, 标签名, 标签创建人的名字(tagger), 还有一条可能包含有签名(signature)的消息</p></li></ul><p><img src="`+n+'" alt="gitobject"></p><p><img src="'+l+'" alt="gitobjectmenu"></p>',16)]))}const p=s(r,[["render",o]]),g=JSON.parse('{"path":"/%E5%85%B6%E4%BB%96/Git/git%E5%AF%B9%E8%B1%A1.html","title":"Git 对象","lang":"zh-CN","frontmatter":{"description":"Git 对象 Git 是一个内容寻址文件系统。Git 的核心部分是一个简单的键值对数据库（key-value data store）。向该数据库插入任意类型的内容，它会返回一个键值，通过该键值可以在任意时刻再次检索（retrieve）该内容。 .git目录 objects/ 目录用于存储所有的数据。Git 存储内容的方式 —— 一个文件对应一条内容，以...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git 对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-28T08:18:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%85%B6%E4%BB%96/Git/git%E5%AF%B9%E8%B1%A1.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"Git 对象"}],["meta",{"property":"og:description","content":"Git 对象 Git 是一个内容寻址文件系统。Git 的核心部分是一个简单的键值对数据库（key-value data store）。向该数据库插入任意类型的内容，它会返回一个键值，通过该键值可以在任意时刻再次检索（retrieve）该内容。 .git目录 objects/ 目录用于存储所有的数据。Git 存储内容的方式 —— 一个文件对应一条内容，以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-28T08:18:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-28T08:18:46.000Z"}]]},"git":{"createdTime":1618649014000,"updatedTime":1740730726000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"837233792@qq.com","commits":3,"url":"https://github.com/lrh21g"},{"name":"lingronghai","username":"lingronghai","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lingronghai"},{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":3.46,"words":1039},"filePathRelative":"其他/Git/git对象.md","excerpt":"\\n<p>Git 是一个内容寻址文件系统。Git 的核心部分是一个简单的键值对数据库（key-value data store）。向该数据库插入任意类型的内容，它会返回一个键值，通过该键值可以在任意时刻再次检索（retrieve）该内容。</p>\\n<h2>.git目录</h2>\\n<div class=\\"language-md line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"md\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-md\\"><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.git/</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">| -- description # 仅供 GitWeb 程序使用</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">| -- config # 包含项目特有的配置选项</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">| -- info/ # 包含一个全局性排除（global exclude）文件，用以放置那些不希望被记录在 .gitignore 文件中的忽略模式（ignored patterns）</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">| -- hooks/ # 包含客户端或服务端的钩子脚本（hook scripts）</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">| -- HEAD # 指示目前被检出的分支</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">| -- index # 保存暂存区信息</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">| -- objects/ # 存储所有数据内容</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">| -- refs/ # 存储指向数据（分支）的提交对象的指针</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{p as comp,g as data};
