import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as n,o as a}from"./app-CwERxs91.js";const l={};function t(d,i){return a(),e("div",null,i[0]||(i[0]=[n(`<h1 id="font" tabindex="-1"><a class="header-anchor" href="#font"><span>font</span></a></h1><h2 id="font-size" tabindex="-1"><a class="header-anchor" href="#font-size"><span>font-size</span></a></h2><h3 id="font-size-属性值" tabindex="-1"><a class="header-anchor" href="#font-size-属性值"><span><code>font-size</code> 属性值</span></a></h3><p><code>font-size</code> 支持长度值（如 <code>1em</code>），也支持百分比值（如 <code>100%</code>）。同时，还支持关键字属性值。</p><p><code>font-size</code> 的关键字属性值分以下两类。</p><ul><li><p>相对尺寸关键字。指相对于当前元素 <code>font-size</code> 计算，包括：</p><ul><li><code>larger</code> ：大一点，是 <code>&lt;big&gt;</code> 元素的默认 <code>font-size</code> 属性值。</li><li><code>smaller</code> ：小一点，是 <code>&lt;small&gt;</code> 元素的默认 <code>font-size</code> 属性值。</li></ul></li><li><p>绝对尺寸关键字。与当前元素 <code>font-size</code> 无关，仅受浏览器设置的字号影响。</p><ul><li><code>xx-large</code> ：好大好大，和 <code>&lt;h1&gt;</code> 元素计算值一样。</li><li><code>x-large</code> ：好大，和 <code>&lt;h2&gt;</code> 元素计算值一样。</li><li><code>large</code> ：大，和 <code>&lt;h3&gt;</code> 元素计算值近似（“近似”指计算值偏差在1 像素以内，下同）。</li><li><code>medium</code> ：不上不下，是 <code>font-size</code> 的初始值，和 <code>&lt;h4&gt;</code> 元素计算值一样。</li><li><code>small</code> ：小，和 <code>&lt;h5&gt;</code> 元素计算值近似。</li><li><code>x-small</code> ：好小，和 <code>&lt;h6&gt;</code> 元素计算值近似。</li><li><code>xx-small</code> ：好小好小，无对应的 HTML 元素。</li></ul></li></ul><p>相对尺寸关键字 <code>larger</code> 和 <code>smaller</code> 由于计算的系数在不同浏览器下差异很大，因此实用价值有限，只有类似文档页、帮助页这类对文字尺寸要求不高的场合才有用；绝对尺寸关键字的实用性要大一些，而且在某些场合是推荐使用的关键字属性值。</p><blockquote><p>Q： 如果 <code>font-size</code> 默认值是 <code>medium</code> ，而 <code>medium</code> 计算值仅与浏览器设置有关，那为何平时元素 <code>font-size</code> 总是受环境影响变来变去呢？</p><p>A： 因为 <code>font-size</code> 属性的继承性，实际开发的时候，我们常常会对 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 重置 <code>font-size</code> 大小，例如：<code>body { font-size: 14px; }</code> 。于是，受继承性影响，大多数后代元素的 <code>font-size</code> 计算值也变成了 <code>14px</code> ，<code>medium</code> 这个初始值受继承性影响而被覆盖了。</p></blockquote><h3 id="font-size-0-与文本的隐藏" tabindex="-1"><a class="header-anchor" href="#font-size-0-与文本的隐藏"><span>font-size:0 与文本的隐藏</span></a></h3><p>Chrome 浏览器有个 <code>12px</code> 的字号限制，就是文字的 <code>font-size</code> 计算值不能小于 <code>12px</code>，正是这种限制导致我们在使用 <code>em</code> 或 <code>rem</code> 进行布局的时候，不能这么处理： <code>html { font-size: 62.5%; }</code> 。理论上，此时根字号计算值是 <code>16px * 0.625=10px</code>，于是，<code>width:14px</code> 可以写成 <code>width:1.4em</code>，省了很多计算的麻烦。</p><p>但是，在 Chrome 下，由于 <code>12px</code> 的限制，根字号计算值实际不是 <code>10px</code>，而是 <code>12px</code>，所以，可以试试处理成这样： <code>html { font-size: 625%; }</code> 。 此时根字号计算值是 <code>100px</code>，既计算无忧，又没有 <code>12px</code> 的最小字号限制。</p><ul><li><p>缺陷</p><p>建议还是不要这样处理，尤其使用 <code>em</code> 的时候，因为 <code>font-size</code> 属性和 <code>line-height</code> 属性一样，由于继承性的存在，会影响贯穿整个网页，<code>100px</code> 的环境 <code>font-size</code> 一定会将平时不显山露水的底边对齐问题、间隙问题等放大，导致出现一些明显的样式问题，同时这样做也限制了 <code>px</code> 等其他单位的使用，有时候是比较要命的。</p></li><li><p>建议</p><p>仍基于浏览器默认的字号进行相对计算，也就是 <code>medium</code> 对应的 <code>16px</code>，16 这个数字是一定可以整除的，因此计算成本还行，或者使用 Sass 或 Less 之类的工具辅助计算。</p></li></ul><p>Chrome 浏览器下有个 <code>12px</code> 的字号限制，并不是所有小于 <code>12px</code> 的 <code>font-size</code> 都会被当作 <code>12px</code> 处理，有一个值例外，那就是 <code>0</code> 。 也就是说，如果 <code>font-size:0</code> 的字号表现就是 <code>0</code>，那么文字会直接被隐藏掉，并且只能是 <code>font-size:0</code>，哪怕设置成 <code>font-size:0.0000001px</code>，都还是会被当作 <code>12px</code> 处理的。</p><p>因此，如果希望隐藏 logo 对应元素内的文字，除了 <code>text-indent</code> 缩进隐藏外，还可以试试下面这种方法：<code>.logo { font-size: 0; }</code></p><h3 id="font-size-和-vertical-align" tabindex="-1"><a class="header-anchor" href="#font-size-和-vertical-align"><span>font-size 和 vertical-align</span></a></h3><p><code>line-height</code> 的部分类别属性值是相对于 <code>font-size</code> 计算的，<code>vertical-align</code> 百分比值属性值又是相对于 <code>line-height</code> 计算的，所以 <code>vertical-align</code> 和 <code>font-size</code> 属性背后其实也有有着关联的。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  font-size: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  line-height: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 基础示例 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> img</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /* -25% 是一个相对计算属性值，如果此时元素的 font-size 发生变化，则图片会自动进行垂直位置调整。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /* vertical-align 计算值为： 16px * 1.5 * (-25%) = -6px */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /* 等同于 vertical-align: -6px; */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  vertical-align: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-0.25</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 无论 font-size 如何变化，图标都垂直居中对齐的示例 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 内联元素默认基线对齐，图片的基线可以看成是图片的下边缘，文字内容的基线是字符 x 下边缘 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 因此，图片下边缘默认和文本底边缘往上一点的位置对齐，通过 vertical-align:25% 声明让图片的下边缘和文本的中心线对齐 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 图标是固定的像素尺寸，因此，通过偏移自身 1/2 高度来实现真正的居中，可以使用 CSS3 transform 位移，为了兼容性，可以使用 relative 相对定位  */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> img</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  height: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  vertical-align: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">25</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  position: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">relative</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  top: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 更好的实现文本和图标都垂直居中对齐 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 使用 vertical-align: .6ex 实现的垂直居中效果不会受 line-height 变化影响 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 而使用 vertical-align:25% ，line-height 一旦变化，就必须改变原来的 vertical-align 大小、重新调整垂直位置，这容错性明显就降了一个层次。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 因此，推荐使用与 font-size 有着密切关系的 ex 单位。  */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> img</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  height: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  vertical-align: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.6</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">ex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  position: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">relative</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  top: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="font-size-与ex、em-和rem-的关系" tabindex="-1"><a class="header-anchor" href="#font-size-与ex、em-和rem-的关系"><span>font-size 与ex、em 和rem 的关系</span></a></h3><ul><li><p><code>ex</code> 是字符 <code>x</code> 高度，<code>font-size</code> 值越大，自然 <code>ex</code> 对应的大小也就大。</p></li><li><p><code>em</code> 在传统排版中指一个字模的高度，注意是字模的高度，不是字符的高度。其一般由 <code>M</code> 的宽度决定（因为宽相同），所以叫 <code>em</code>。也就是说，之所以叫作 <code>em</code> 完全取决于 <code>M</code> 的字形。</p><ul><li><code>em</code> 实际上更适用于图文内容展示的场景，对此进行弹性布局。 <code>&lt;h1&gt; - &lt;h6&gt;</code>以及 <code>&lt;p&gt;</code> 等与文本内容展示的元素的 <code>margin</code> 都是用 <code>em</code> 作为单位。这样，当用户把浏览器默认字号从 “中” 设置成 “大” 或改成 “小” 的时候，上下间距也能根据字号大小自动调整，使阅读更舒服。</li><li>使用 SVG 矢量图标，建议设置 SVG 宽高为 <code>svg { width: 1em; height: 1em; }</code> 。无论图标是个大号文字混在一起还是和小号文字混在一起，都能和当前文字大小保持一致，既省时又省力。</li></ul><blockquote><p>Q：在Chrome 浏览器下，<code>&lt;h1&gt;</code> 元素有如下的默认CSS： <code>h1 { font-size: 2em; -webkit-margin-before: 0.67em; -webkit-margin-after: 0.67em; }</code> 。假设页面没有任何 CSS 重置，根元素 <code>font-size</code> 就是默认的 <code>16px</code>，请问：此时 <code>&lt;h1&gt;</code> 元素 <code>margin-before</code> 的像素计算值是多少？</p><p>A：假设 <code>&lt;h1&gt;</code> 里面有汉字，这个高度就是此时 <code>1em</code> 大小。 <code>&lt;h1&gt;</code> 元素此时 <code>font-size</code> 是 <code>2em</code>，此时里面汉字的高度应该是 <code>32px</code>，此时 <code>&lt;h1&gt;</code> 元素的 <code>1em</code> 应该是 <code>32px</code>，于是 <code>margin-before</code> 的像素计算值为 <code>32px×0.67 = 21.44px</code> 。</p></blockquote></li><li><p><code>rem</code> 即 rootem ，根元素 <code>em</code> 大小。<code>em</code> 相对于当前元素，<code>rem</code> 相对于根元素，本质差别在于当前元素是多变的，根元素是固定的，也就是说，如果使用 <code>rem</code>，计算值不会受当前元素 <code>font-size</code> 大小的影响。<code>rem</code> 是 CSS3 单位，IE9 以上浏览器才支持，需要注意兼容性。</p></li></ul><h2 id="font-family" tabindex="-1"><a class="header-anchor" href="#font-family"><span>font-family</span></a></h2><p>font-family 支持两类属性值。</p><ul><li><p>字体名 ：使用的对应字体的名称。可以不用区分大小写。如果有多个字体设定，从左往右依次寻找本地是否有对应的字体即可。</p></li><li><p>字体族 ：分为很多类，MDN 上文档分类如下：<code>font-family: serif;</code> （衬线字体）; <code>font-family: sans-serif;</code>（无衬线字体）; <code>font-family: monospace;</code>（等宽字体）; <code>font-family: cursive;</code>（手写字体）; <code>font-family: fantasy;</code>（奇幻字体）; <code>font-family: system-ui;</code>（系统UI 字体）; 对于中文网站，cursive 和 fantasy 应用场景有限。</p></li></ul><h3 id="衬线字体和无衬线字体" tabindex="-1"><a class="header-anchor" href="#衬线字体和无衬线字体"><span>衬线字体和无衬线字体</span></a></h3><ul><li><p>衬线字体，通俗讲就是笔画开始、结束的地方有额外装饰而且笔画的粗细会有所不同的字体。网页中常用中文衬线字体是“宋体”，常用英文衬线字体有 Times New Roman、Georgia 等</p></li><li><p>无衬线字体，没有这些额外的装饰，而且笔画的粗细差不多，如中文的“雅黑”字体，英文包括 Arial、Verdana、Tahoma、Helivetica、Calibri 等。</p></li></ul><p>注意：</p><ul><li><p>需要注意的是，serif 和 sans-serif 一定要写在最后，因为在大多数浏览器下，写在serif 和sans-serif 后面的所有字体都会被忽略。例如：<code>body { font-family: sans-serif, &quot;Microsoft Yahei&quot;; }</code></p></li><li><p>在Chrome 浏览器下，后面的 Microsoft Yahei 字体是不会被渲染的。有可能浏览器认为当前“字体族”已经满足了文本渲染的需要，没必要再往后解析了。</p></li></ul><h3 id="等宽字体的实践价值" tabindex="-1"><a class="header-anchor" href="#等宽字体的实践价值"><span>等宽字体的实践价值</span></a></h3><p>等宽字体，一般是针对英文字体而言的。就是每个字符在同等 <code>font-size</code> 下占据的宽度是一样的。</p><ul><li><p>等宽字体利于代码呈现</p></li><li><p>等宽字体与图形呈现案例一则</p><p>假设某工具有这么一个功能：通过下拉选择，可以改变元素的边框样式，也就是 <code>borderStyle</code> 在 <code>solid/dashed/dotted</code> 间切换。</p><p>原生的 <code>&lt;select&gt;</code> 的 <code>&lt;option&gt;</code> 元素的 <code>innerHTML</code> 只能是纯 text 字符，不能有 html，也不支持伪元素，因此，要模拟 solid、dashed 和dotted，只能使用字符，而字符有长有短，可以使用等宽字体模拟成像样的规整的图形</p></li><li><p><code>ch</code> 单位与等宽字体布局</p><p><code>ch</code> 和 <code>em</code>、<code>rem</code>、<code>ex</code> 一样，是 CSS 中和字符相关的相对单位。</p><p>和 <code>ch</code> 相关的字符阿拉伯数字 <code>0</code> 。<code>1ch</code> 表示一个 <code>0</code> 字符的宽度，所以 6 个 0 所占据的宽度就是 6ch。</p><p>例如，有些输入框是输入手机号的，在中国，手机号是 11 位，因此我们可以设置该输入框宽度为 11ch，同时让字体等宽，则用户一眼就能看出自己是否少输入或者多输入了 1 位数字。</p><p>又如，想实现一个屏幕上代码一个一个出现的动效，如果代码是等宽字体，此时使用 ch 单位来控制宽度，配合 overflow 属性和 CSS animation 就能在完全不使用 JavaScript 的情况下将此效果模拟出来。</p></li></ul><h3 id="font-weight" tabindex="-1"><a class="header-anchor" href="#font-weight"><span>font-weight</span></a></h3><p><code>font-weight</code> 表示“字重”，文字的粗细程度。支持的属性值如下：</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 平常用的最多的 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">font-weight</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: normal;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">font-weight</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: bold;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 相对于父级元素 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">font-weight</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: lighter;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">font-weight</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: bolder;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 字重的精细控制 —— 使用数值作为 font-weight 属性值，必须是100～900 的整百数 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 数值关键字和字母关键字之间是有对应关系的 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 例如，font-weight:400 实际上等同于 font-weight:normal，font-weight:700 等同于 font-weight:bold。 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">font-weight</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: 100;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">font-weight</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: 200;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">font-weight</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: 300;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">font-weight</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: 400;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">font-weight</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: 500;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">font-weight</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: 600;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">font-weight</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: 700;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">font-weight</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: 800;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">font-weight</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: 900;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Q：<code>font-weight</code> 无论是设置 300、400、500 还是 600，文字的粗细都没有任何变化，只有到 700 的时候才会加粗一下，感觉浏览器好像不支持这些数值，那么搞这么多档位不就是多余的吗？</p><p>A：所有这些数值关键字浏览器都是支持的，之所以没有看到任何粗细的变化，是因为我们的系统里面缺乏对应粗细的字体。尤其做桌面端项目时，大部分用户都是使用 Windows 系统，而 Windows 系统中的中文字体粗细就一个型号，如“宋体”，或者说“微软雅黑”，因此，最终的效果就是 CSS 层面的 “加粗” 和 “正常尺寸” 两种表现。</p></blockquote><h2 id="font-style" tabindex="-1"><a class="header-anchor" href="#font-style"><span>font-style</span></a></h2><p><code>font-style</code> 表示文字造型是斜还是正。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* italic 和 oblique 这两个关键字都表示“斜体”的意思。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* italic 是使用当前字体的斜体字体，而 oblique 只是单纯地让文字倾斜。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 如果当前字体没有对应的斜体字体，则退而求其次，解析为 oblique，也就是单纯形状倾斜。 */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">font-style</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: normal; </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">font-style</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: italic; </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">font-style</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: oblique;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="font-属性" tabindex="-1"><a class="header-anchor" href="#font-属性"><span>font 属性</span></a></h2><ul><li><p>作为缩写的 <code>font</code> 属性</p><ul><li><p>利用 <code>font</code> 属性进行文本相关样式的缩写。可以缩写在 <code>font</code> 属性中的属性非常多，包括 <code>font-style</code>、<code>font-variant</code>、<code>font-weight</code>、<code>font-size</code>、<code>line-height</code>、<code>font-family</code> 等。</p><p>完整语法为：<code>[ [ font-style || font-variant || font-weight ]? font-size [ / line-height ]? font-family ]</code> （<code>||</code> 表示或，<code>?</code> 表示 0 个或 1 个。）</p><p>注： <code>font-size</code> 和 <code>font-family</code> 是必需的，不可缺少的。</p></li><li><p><code>font</code> 属性的注意事项</p><ul><li><p><code>font</code> 缩写会破坏部分属性的继承性。</p><p>假设页面行高是 20px，当使用了 font 属性后 <code>.font { font: 400 30px &#39;Microsoft Yahei&#39;; }</code> ， <code>.font</code> 元素的行高 <code>line-height</code> 属性值就被重置为了 <code>normal</code>，而不同浏览器上 <code>line-height:normal</code> 是不一样的，因此，在使用 <code>font</code> 缩写的时候，如果不设定行高值，一定会出现不兼容的问题。换句话说，如果你的 <code>CSS</code> 代码原本就没有 <code>line-height</code> 属性，使用 <code>font</code> 缩写反而是不推荐的。</p></li><li><p><code>font</code> 缩写必须要带上 <code>font-family</code>，然而，原本真实继承的 <code>font-family</code> 属性值可能会很长，每次 <code>font</code> 缩写后面都挂一个长长的字体列表， 使用小技巧可以避免带上<code>font-family</code>：</p><ul><li><p>可以随便找一个系统根本不存在的字体名占位，如字母 a，或者特殊一点，用笑脸表情 ☺，然后再设置 <code>font-family:inherit</code> 来重置这个占位字体。</p><p>例如，把字号和行高合并缩写，就可以这样： <code>.font { font: 30px/30px &#39;☺&#39;; font-family: inherit; }</code> ，主要是因为 <code>font</code> 缩写不能使用 <code>inherit</code> 等全局关键字。</p></li><li><p>利用 <code>@font face</code> 规则将我们的字体列表重定义为一个字体，这是兼容性很好、效益很高的一种解决方法。</p></li></ul></li></ul></li></ul></li><li><p>使用关键字值的 <code>font</code> 属性</p><p><code>font:caption | icon | menu | message-box | small-caption | status-bar</code></p><p>如果将 <code>font</code> 属性设置为上面的一个值，就等同于设置 <code>font</code> 为操作系统该部件对应的 <code>font</code>，也就是说直接使用系统字体。</p><ul><li><code>caption</code>：活动窗口标题栏使用的字体。</li><li><code>icon</code>：包含图标内容所使用的字体，如所有文件夹名称、文件名称、磁盘名称，甚至浏览器窗口标题所使用的字体。</li><li><code>menu</code>：菜单使用的字体，如文件夹菜单。</li><li><code>message-box</code>：消息盒里面使用的字体。</li><li><code>small-caption</code>：调色板标题所使用的字体。</li><li><code>status-bar</code>：窗体状态栏使用的字体。</li></ul><p>注意：使用关键字作为属性值的时候必须是独立的，不能添加 <code>font-family</code> 或者 <code>font-size</code> 之类的。如果混用，例如：<code>.menu { font: menu; }</code> 则此时的 menu 是作为自定义的字体名称存在的，而不是表示系统的 menu 菜单字体。</p></li></ul><h2 id="font-face-规则" tabindex="-1"><a class="header-anchor" href="#font-face-规则"><span>@font face 规则</span></a></h2><p><code>@font face</code> 的本质是变量，是一个定义字体或字体集的变量，这个变量不仅仅是自定义字体，还包括字体重命名、默认字体样式设置等。</p><p><code>@font face</code> 规则支持的CSS 属性有 <code>font-family</code>、<code>src</code>、<code>font-style</code>、<code>font-weigh</code>、<code>unicode-range</code>、<code>font-variant</code>、<code>font-stretch</code> 和 <code>font-feature-settings</code>。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@font-face</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  font-family: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;example&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  src: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">example.ttf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  font-style: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">normal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  font-weight: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">normal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  unicode-range: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">U+0025-00FF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  font-variant: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">small-caps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  font-stretch: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">expanded</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  font-feature-settings：&quot;liga1&quot; on;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42)]))}const h=s(l,[["render",t]]),p=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/font.html","title":"font","lang":"zh-CN","frontmatter":{"category":"CSS基础","tag":["CSS"],"description":"font font-size font-size 属性值 font-size 支持长度值（如 1em），也支持百分比值（如 100%）。同时，还支持关键字属性值。 font-size 的关键字属性值分以下两类。 相对尺寸关键字。指相对于当前元素 font-size 计算，包括： larger ：大一点，是 <big> 元素的默认 font-size 属...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"font\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-07T06:45:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/font.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"font"}],["meta",{"property":"og:description","content":"font font-size font-size 属性值 font-size 支持长度值（如 1em），也支持百分比值（如 100%）。同时，还支持关键字属性值。 font-size 的关键字属性值分以下两类。 相对尺寸关键字。指相对于当前元素 font-size 计算，包括： larger ：大一点，是 <big> 元素的默认 font-size 属..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-07T06:45:05.000Z"}],["meta",{"property":"article:tag","content":"CSS"}],["meta",{"property":"article:modified_time","content":"2025-04-07T06:45:05.000Z"}]]},"git":{"createdTime":1742284261000,"updatedTime":1744008305000,"contributors":[{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":2,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":13.04,"words":3911},"filePathRelative":"前端/CSS/CSS基础/font.md","excerpt":"\\n<h2>font-size</h2>\\n<h3><code>font-size</code> 属性值</h3>\\n<p><code>font-size</code> 支持长度值（如 <code>1em</code>），也支持百分比值（如 <code>100%</code>）。同时，还支持关键字属性值。</p>\\n<p><code>font-size</code> 的关键字属性值分以下两类。</p>\\n<ul>\\n<li>\\n<p>相对尺寸关键字。指相对于当前元素 <code>font-size</code> 计算，包括：</p>\\n<ul>\\n<li><code>larger</code> ：大一点，是 <code>&lt;big&gt;</code> 元素的默认 <code>font-size</code> 属性值。</li>\\n<li><code>smaller</code> ：小一点，是 <code>&lt;small&gt;</code> 元素的默认 <code>font-size</code> 属性值。</li>\\n</ul>\\n</li>\\n<li>\\n<p>绝对尺寸关键字。与当前元素 <code>font-size</code> 无关，仅受浏览器设置的字号影响。</p>\\n<ul>\\n<li><code>xx-large</code> ：好大好大，和 <code>&lt;h1&gt;</code> 元素计算值一样。</li>\\n<li><code>x-large</code> ：好大，和 <code>&lt;h2&gt;</code> 元素计算值一样。</li>\\n<li><code>large</code> ：大，和 <code>&lt;h3&gt;</code> 元素计算值近似（“近似”指计算值偏差在1 像素以内，下同）。</li>\\n<li><code>medium</code> ：不上不下，是 <code>font-size</code> 的初始值，和 <code>&lt;h4&gt;</code> 元素计算值一样。</li>\\n<li><code>small</code> ：小，和 <code>&lt;h5&gt;</code> 元素计算值近似。</li>\\n<li><code>x-small</code> ：好小，和 <code>&lt;h6&gt;</code> 元素计算值近似。</li>\\n<li><code>xx-small</code> ：好小好小，无对应的 HTML 元素。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{h as comp,p as data};
