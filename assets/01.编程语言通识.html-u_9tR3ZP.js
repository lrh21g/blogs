import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as s,o as a}from"./app-CwERxs91.js";const t={};function n(o,i){return a(),l("div",null,i[0]||(i[0]=[s(`<h1 id="编程语言通识" tabindex="-1"><a class="header-anchor" href="#编程语言通识"><span>编程语言通识</span></a></h1><h2 id="形式语言-乔姆斯基谱系" tabindex="-1"><a class="header-anchor" href="#形式语言-乔姆斯基谱系"><span>形式语言（乔姆斯基谱系）</span></a></h2><ul><li>0型 无限制文发</li><li>1型 上下文相关文法</li><li>2型 上下文无关文法</li><li>3型 正则文法</li></ul><h2 id="bnf-巴科斯范式" tabindex="-1"><a class="header-anchor" href="#bnf-巴科斯范式"><span>BNF（巴科斯范式）</span></a></h2><p>一种形式化的语法表示方法，用来描述语法的一种形式体系，是一种典型的元语言。又称巴科斯-诺尔形式(Backus-Naur form)。它不仅能严格地表示语法规则，而且所描述的语法是与上下文无关的。它具有语法简单，表示明确，便于语法分析和编译的特点。</p><h3 id="语法规则" tabindex="-1"><a class="header-anchor" href="#语法规则"><span>语法规则</span></a></h3><ul><li>非终结符用尖括号括起</li><li>每条规则的左部是一个非终结符，右部是由非终结符和终结符组成的一个符号串，中间一般以<code>::=</code>分开</li><li>具有相同左部的规则可以共用一个左部，各右部之间以直竖“|”隔开</li></ul><h3 id="常用元字符" tabindex="-1"><a class="header-anchor" href="#常用元字符"><span>常用元字符</span></a></h3><ul><li><code>::=</code> ：是“被定义为”的意思；示例：<code>字符串 ::= 用引号包围的字符序列</code>，表示 <code>字符串</code> 就是 <code>用引号包围的字符序列</code></li><li><code>&quot;...&quot;</code> ：终结符，即引号中的字符序列本身，并非指代其它字。而终结符双引号 <code>&quot;</code> 用 <code>double_quote</code> 用来表示；示例：<code>函数调用 ::= 名字 &quot;()&quot;</code> 表示 <code>函数的调用</code> 是由 <code>名字</code> 加上左右括号字符 <code>()</code> 组成；</li><li><code>double_quote</code> ：代表终结符双引号 <code>&quot;</code>； 示例：<code>字符串 ::= double_quote ... double_quote</code>，表示 <code>字符串</code> 是由被字符 <code>&quot;</code> 包围的字符序列组成；</li><li>在双引号外的字代表着语法部分；示例：<code>基本类型 ::= 字符串 | 数字 | 布尔</code>，表示 <code>字符串</code> 或 <code>数字</code> 或 <code>布尔</code> 都是 基本类型，但 <code>字符串</code>、<code>数字</code>、<code>布尔</code> 具体是什么，由其它规则定义；</li><li><code>&lt;...&gt;</code>：必选项；示例：<code>名字 ::= [姓] &lt;名&gt;</code> 表示 <code>名字</code> 中的 <code>名</code> 是必须要有的，但 <code>姓</code> 是可有可无的，即：<code>姓 名</code> 是 <code>名字</code>，<code>名</code> 也是 <code>名字</code>；</li><li><code>[...]</code>：可选，可有可无；示例：<code>名字 ::= [姓] &lt;名&gt;</code> 表示 <code>名字</code> 中的 <code>名</code> 是必须要有的，但 <code>姓</code> 是可有可无的，即：<code>姓 名</code> 是 <code>名字</code>，<code>名</code> 也是 <code>名字</code>；</li><li><code>{...}</code>：重复，0 或 任意次重复；示例：<code>AB ::= &quot;a&quot; {&quot;b&quot;}</code>，表示 <code>AB</code> 是由 一个 <code>a</code> 后面跟上任意数量（包括0个）个 <code>b</code> 组成，如 <code>a</code>、<code>a b</code>、<code>a bb</code>、<code>a bbb</code></li><li><code>(...)</code>：分组，用来控制表达式的优先级；示例：<code>AX ::= &quot;a&quot; (&quot;m&quot;|&quot;n&quot;)</code>，表示 <code>AX</code> 是由 一个 <code>a</code> 后面跟上 <code>m</code> 或 <code>n</code> 组成；</li><li><code>|</code>：替换，即 <code>或</code> 的意思；示例：<code>布尔 ::= &quot;true&quot; | &quot;false&quot;</code>，表示 <code>true</code> 或 <code>false</code> 都是 <code>布尔</code>；</li><li><code>...</code>：表示各种列举或省略的代码片断；示例：<code>a...z</code> 表示从 <code>a</code> 到 <code>z</code> 的字符，<code>&quot;...&quot;</code> 表示由双引号 <code>&quot;</code> 包围起来的任意字符；</li><li>斜体字: 参数，在其它地方有解释</li></ul><p><a href="https://www.jianshu.com/p/15efcb0c06c8#2-%E5%B7%B4%E7%A7%91%E6%96%AF%E8%8C%83%E5%BC%8Fbnf" target="_blank" rel="noopener noreferrer">参考：语法格式描述规范BNF、EBNF、ABNF</a></p><h3 id="带括号的四则运算产生式" tabindex="-1"><a class="header-anchor" href="#带括号的四则运算产生式"><span>带括号的四则运算产生式</span></a></h3><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-md"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 数字 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;Number&gt; ::= &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | ... | &quot;9&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 十进制数 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;DecimalNumber&gt; ::= &quot;0&quot; | ((&quot;1&quot; | &quot;2&quot; | ... | &quot;9&quot;) &lt;Number&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 表达式 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;PrimaryExpression&gt; ::= &lt;DecimalNumber&gt; | &quot;(&quot; &lt;LogicalExpression&gt; &quot;)&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 乘法/除法表达式 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;MultiplicativeExpression&gt; ::= &lt;PrimaryExpression&gt; |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;MultiplicativeExpression&gt; &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot; &lt;PrimaryExpression&gt; |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;MultiplicativeExpression&gt; &quot;/&quot; &lt;PrimaryExpression&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 加法/减法表达式 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;AdditiveExpression&gt; ::= &lt;MultiplicativeExpression&gt; |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;AdditiveExpression&gt; &quot;+&quot; &lt;MultiplicativeExpression&gt; |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;AdditiveExpression&gt; &quot;-&quot; &lt;MultiplicativeExpression&gt; |</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 逻辑表达式 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;LogicalExpression&gt; ::= &lt;AdditiveExpression&gt; |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;LogicalExpression&gt; &quot;||&quot; &lt;AdditiveExpression&gt; |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;LogicalExpression&gt; &quot;&amp;&amp;&quot; &lt;AdditiveExpression&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过产生式理解乔姆斯基谱系" tabindex="-1"><a class="header-anchor" href="#通过产生式理解乔姆斯基谱系"><span>通过产生式理解乔姆斯基谱系</span></a></h3><ul><li>0型 无限制文发： <code>?::=?</code></li><li>1型 上下文相关文法： <code>?&lt;A&gt;?::=?&lt;B&gt;?</code></li><li>2型 上下文无关文法： <code>&lt;A&gt;::=?</code></li><li>3型 正则文法: <code>&lt;A&gt;::=&lt;A&gt;?</code>、<code>&lt;A&gt;::=?&lt;A&gt;x</code></li></ul><h2 id="图灵完备性" tabindex="-1"><a class="header-anchor" href="#图灵完备性"><span>图灵完备性</span></a></h2><ul><li>命令式 —— 图灵机 <ul><li>goto</li><li>if 和 while</li></ul></li><li>声明式 —— lambda <ul><li>递归</li></ul></li></ul><h2 id="动态与静态" tabindex="-1"><a class="header-anchor" href="#动态与静态"><span>动态与静态</span></a></h2><ul><li>动态语言 <ul><li>在用户的设备/在线服务器上</li><li>产品实际运行时</li><li>Runtime（运行时）</li></ul></li><li>静态语言 <ul><li>在程序员的设备上</li><li>产品开发时</li><li>Compiletime（编译时）</li></ul></li></ul><h2 id="类型系统" tabindex="-1"><a class="header-anchor" href="#类型系统"><span>类型系统</span></a></h2><ul><li>动态类型系统与静态类型系统</li><li>强类型与弱类型</li><li>复合类型：结构体、函数签名</li><li>子类型：协变/逆变 <ul><li>协变：凡是能用 <code>Array&lt;Parent&gt;</code> 的地方，都能用 <code>Array&lt;Child&gt;</code></li><li>逆变：凡是能用 <code>Array&lt;Child&gt;</code> 的地方，都能用 <code>Array&lt;Parent&gt;</code></li></ul></li></ul><h2 id="一般命令式编程语言" tabindex="-1"><a class="header-anchor" href="#一般命令式编程语言"><span>一般命令式编程语言</span></a></h2><h3 id="atom" tabindex="-1"><a class="header-anchor" href="#atom"><span>Atom</span></a></h3><ul><li>Identifier</li><li>Literal</li></ul><h3 id="expression" tabindex="-1"><a class="header-anchor" href="#expression"><span>Expression</span></a></h3><ul><li>Atom</li><li>Operator</li><li>Punctuator</li></ul><h3 id="statement" tabindex="-1"><a class="header-anchor" href="#statement"><span>Statement</span></a></h3><ul><li>Expression</li><li>Keyword</li><li>Punctuator</li></ul><h3 id="structure" tabindex="-1"><a class="header-anchor" href="#structure"><span>Structure</span></a></h3><ul><li>Function</li><li>Class</li><li>Process</li><li>Namespace</li><li>...</li></ul><h3 id="program" tabindex="-1"><a class="header-anchor" href="#program"><span>Program</span></a></h3><ul><li>Program</li><li>Module</li><li>Package</li><li>Library</li></ul>`,31)]))}const r=e(t,[["render",n]]),p=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5/01.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E9%80%9A%E8%AF%86.html","title":"编程语言通识","lang":"zh-CN","frontmatter":{"description":"编程语言通识 形式语言（乔姆斯基谱系） 0型 无限制文发 1型 上下文相关文法 2型 上下文无关文法 3型 正则文法 BNF（巴科斯范式） 一种形式化的语法表示方法，用来描述语法的一种形式体系，是一种典型的元语言。又称巴科斯-诺尔形式(Backus-Naur form)。它不仅能严格地表示语法规则，而且所描述的语法是与上下文无关的。它具有语法简单，表示...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编程语言通识\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-28T08:53:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5/01.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E9%80%9A%E8%AF%86.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"编程语言通识"}],["meta",{"property":"og:description","content":"编程语言通识 形式语言（乔姆斯基谱系） 0型 无限制文发 1型 上下文相关文法 2型 上下文无关文法 3型 正则文法 BNF（巴科斯范式） 一种形式化的语法表示方法，用来描述语法的一种形式体系，是一种典型的元语言。又称巴科斯-诺尔形式(Backus-Naur form)。它不仅能严格地表示语法规则，而且所描述的语法是与上下文无关的。它具有语法简单，表示..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-28T08:53:37.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-28T08:53:37.000Z"}]]},"git":{"createdTime":1613149193000,"updatedTime":1745830417000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"837233792@qq.com","commits":3,"url":"https://github.com/lrh21g"},{"name":"lingronghai","username":"lingronghai","email":"lingronghai@foxmail.com","commits":2,"url":"https://github.com/lingronghai"},{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":3.44,"words":1032},"filePathRelative":"前端/前端训练营/01.编程语言通识.md","excerpt":"\\n<h2>形式语言（乔姆斯基谱系）</h2>\\n<ul>\\n<li>0型 无限制文发</li>\\n<li>1型 上下文相关文法</li>\\n<li>2型 上下文无关文法</li>\\n<li>3型 正则文法</li>\\n</ul>\\n<h2>BNF（巴科斯范式）</h2>\\n<p>一种形式化的语法表示方法，用来描述语法的一种形式体系，是一种典型的元语言。又称巴科斯-诺尔形式(Backus-Naur form)。它不仅能严格地表示语法规则，而且所描述的语法是与上下文无关的。它具有语法简单，表示明确，便于语法分析和编译的特点。</p>\\n<h3>语法规则</h3>\\n<ul>\\n<li>非终结符用尖括号括起</li>\\n<li>每条规则的左部是一个非终结符，右部是由非终结符和终结符组成的一个符号串，中间一般以<code>::=</code>分开</li>\\n<li>具有相同左部的规则可以共用一个左部，各右部之间以直竖“|”隔开</li>\\n</ul>","autoDesc":true}');export{r as comp,p as data};
