import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as n,e as h,w as d,r as p,o as k,a as i,b as s}from"./app-CwERxs91.js";const c="/blogs/assets/inline-block-model.drawio-9lBNzS1c.png",r={};function o(g,a){const e=p("CodeDemo");return k(),t("div",null,[a[1]||(a[1]=n('<h1 id="流与元素" tabindex="-1"><a class="header-anchor" href="#流与元素"><span>流与元素</span></a></h1><h2 id="块级元素" tabindex="-1"><a class="header-anchor" href="#块级元素"><span>块级元素</span></a></h2><p>常见的块级元素有 <code>&lt;div&gt;</code>、<code>&lt;li&gt;</code> 和 <code>&lt;table&gt;</code> 等。“块级元素” 和 <code>display</code> 为 <code>block</code> 的元素不是一个概念。</p><p>“块级元素” 的特征：一个水平流上只能单独显示一个元素，多个块级元素则换行显示。正是由于 “块级元素” 具有换行特性，因此理论上它都可以配合 <code>clear</code> 属性来清除浮动带来的影响。</p><p>按照 <code>display</code> 的属性值不同：</p><ul><li>值为 <code>block</code> 的元素，由外在的 “块级盒子” 和内在的 “块级容器盒子” 组成</li><li>值为 <code>inline-block</code> 的元素，由外在的 “内联盒子” 和内在的 “块级容器盒子” 组成</li><li>值为 <code>inline</code> 的元素，内外均是 “内联盒子”</li><li>值为 <code>inline-table</code> 的元素，由外在的 “内联盒子” 和内在的 “table 盒子” 组成，得到的就是一个可以和文字在一行中显示的表格</li></ul><h2 id="内联元素" tabindex="-1"><a class="header-anchor" href="#内联元素"><span>内联元素</span></a></h2><ul><li><p>从定义上看</p><p>“内联元素” 的 “内联” 特指 “外在的盒子”，与 <code>display</code> 为 <code>inline</code> 的元素不是一个概念！</p><p><code>inline-block</code> 和 <code>inline-table</code> 都是 “内联元素”，因为它们的 “外在盒子” 都是内联盒子。</p><p><code>display: inline</code> 的元素也是 “内联元素” 。<code>&lt;button&gt;</code> 按钮元素（<code>display</code> 默认值是 <code>inline-block</code>）、<code>&lt;img&gt;</code> 图片元素（<code>display</code> 默认值是 <code>inline</code>）都是内联元素。</p></li><li><p>从表现上看</p><p>“内联元素” 的特征是：<strong>可以和文字在一行显示</strong>。文字、图片、按钮、输入框、下拉框等原生表单控件都是内联元素。</p></li></ul><h3 id="内联盒模型" tabindex="-1"><a class="header-anchor" href="#内联盒模型"><span>内联盒模型</span></a></h3><p><img src="'+c+'" alt="inline-block-model"></p><p>在 CSS 规范中，并没有“包含盒子”的说法，更准确的称呼应该是“包含块”（containing block）。之所以把它称为盒子。一是，为了与其他盒子名称统一；二是，称为盒子更形象、更容易理解。</p><h3 id="幽灵空白节点" tabindex="-1"><a class="header-anchor" href="#幽灵空白节点"><span>幽灵空白节点</span></a></h3><p>在 HTML5 文档声明中，<strong>内联元素的所有解析和渲染表现，就如同每个行框盒子的前面有一个 “空白节点” 一样</strong>。这个 “空白节点” 永远透明，不占据任何宽度，无法通过脚本获取，但又确确实实地存在，表现如同文本节点一样，因此称之为“幽灵空白节点”。</p><p>在 W3C 规范中，对于 “幽灵空白节点” 有所提及，“幽灵空白节点” 实际上也是一个盒子，名为 “strut” 。是一个存在于每个 “行框盒子” 前面，同时具有该元素的字体和行高属性的 0 宽度的内联盒。</p><blockquote><p>Each line box starts with a zero-width inline box with the element&#39;s font and line height properties. We call that imaginary box a &quot;<a href="https://www.w3.org/TR/CSS2/visudet.html#strut" target="_blank" rel="noopener noreferrer">stru</a>.&quot;</p></blockquote>',15)),h(e,{id:"code-demo-87",type:"normal",title:"%E5%9C%A8%20%3Cdiv%3E%3Cspan%3E%3C%2Fspan%3E%3C%2Fdiv%3E%20%E4%B8%AD%EF%BC%8C%E6%AD%A4%E6%97%B6%20div%20%E7%9A%84%E9%AB%98%E5%BA%A6%E5%B9%B6%E4%B8%8D%E4%B8%BA%200",code:"eJxtjTEOwjAMRa8SmZXSgQGpBE6SxU0CRHWdqg5IqOrdcVWWSp08+L33J3iVnqABG9LHeEKRm4OWkLuKc4hS+cwFE8fRwd2xMVYG5F0yUuwjF+VsvUCK21qzeuEIXkRnTrtpMy3lFn33HPObg34oj405nCM+Lv7qeHbseCP/11Y1JBkIv41JTBqsWsq+WzWYf579UIo="},{default:d(()=>a[0]||(a[0]=[i("div",{class:"language-html line-numbers-mode","data-highlighter":"shiki","data-ext":"html",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",{class:"language-html"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"<"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"div"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," class"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"="),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"blank-nodes-container"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},">")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  <"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"span"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," class"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"="),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"blank-nodes-element"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"></"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"span"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},">")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"</"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"div"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},">")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1),i("div",{class:"language-css line-numbers-mode","data-highlighter":"shiki","data-ext":"css",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",{class:"language-css"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},".blank-nodes-container"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  background-color: "),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"#"),i("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#D19A66"}},"3eaf7c"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},".blank-nodes-element"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  display: "),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#D19A66"}},"inline-block"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),_:1,__:[0]}),a[2]||(a[2]=n(`<h2 id="width" tabindex="-1"><a class="header-anchor" href="#width"><span>width</span></a></h2><h3 id="width-auto" tabindex="-1"><a class="header-anchor" href="#width-auto"><span>width: auto</span></a></h3><p><code>width</code> 的默认值是 <code>auto</code>。它至少包含了以下 4 种不同的宽度表现：</p><ul><li>充分利用可用空间。例如，<code>&lt;div&gt;</code>、<code>&lt;p&gt;</code> 这些元素的宽度，默认是 100% 于父级容器的。</li><li>收缩与包裹。典型代表就是浮动、绝对定位、inline-block 元素或 table 元素，可以称为“包裹性”。CSS3 中的 fit-content 指的就是这种宽度表现。</li><li>收缩到最小。最容易出 <code>table-layout</code> 为 <code>auto</code> 的表格中。</li><li>超出容器限制。除非有明确的 <code>width</code> 相关设置，否则上面 3 种情况尺寸都不会主动超过父级容器宽度的，但是存在一些特殊情况。例如，内容很长的连续的英文和数字，或者内联元素被设置了 <code>white-space:nowrap</code> 。</li></ul><h3 id="外部尺寸和内部尺寸" tabindex="-1"><a class="header-anchor" href="#外部尺寸和内部尺寸"><span>外部尺寸和内部尺寸</span></a></h3><p>在 CSS 中，尺寸分 “内部尺寸” 和 “外部尺寸”。</p><ul><li>“内部尺寸” 表示尺寸由内部元素决定；</li><li>“外部尺寸” 表示宽度由外部元素决定。</li></ul><h4 id="外部尺寸与流体特性" tabindex="-1"><a class="header-anchor" href="#外部尺寸与流体特性"><span>外部尺寸与流体特性</span></a></h4><ul><li><p>正常流宽度</p><p>在页面中写一个 <code>&lt;div&gt;</code> 元素，其尺寸表现会铺满容器，这就是 block 容器的流特性。流动性，并不是看上去的宽度 100% 显示这么简单，而是一种 margin/border/padding 和 content 内容区域自动分配水平空间的机制。</p><p>如果表现为 “外部尺寸” 的块级元素一旦设置了宽度，流动性就丢失了。尺寸超出了外部的容器，就不能完全利用容器空间，即所谓的“流动性丢失”。</p></li><li><p>格式化宽度</p><p>格式化宽度仅出现在 “绝对定位模型” 中（即：<code>position</code> 属性值为 <code>absolute</code> 或 <code>fixed</code> 的元素）。</p><p>格式化宽度具有完全的流体性，也就是 margin、border、padding 和 content 内容区域同样会自动分配水平（和垂直）空间。</p><p>在默认情况下，绝对定位元素的宽度表现是 “包裹性” ，宽度由 <strong>内部尺寸</strong> 决定。但是，有一种情况其宽度是由外部尺寸决定的：对于非替换元素，当 left/top 或 top/bottom 对立方位的属性值同时存在的时候，元素的宽度表现为“格式化宽度”，其宽度大小相对于最近的具有定位特性（ <code>position</code> 属性值不是 <code>static</code>）的祖先元素计算。</p></li></ul><h4 id="内部尺寸与流体特" tabindex="-1"><a class="header-anchor" href="#内部尺寸与流体特"><span>内部尺寸与流体特</span></a></h4><p>快速判断一个元素使用的是否为 “内部尺寸”：假如这个元素里面没有内容，宽度就是0，那就是应用的“内部尺寸”。</p><ul><li><p>包裹性</p><p>“包裹性”，除了“包裹”，还有“自适应性”。其中，“自适应性” 指的是元素尺寸由内部元素决定，但永远小于“包含块”容器的尺寸（除非容器尺寸小于元素的“首选最小宽度”）。</p><p><code>&lt;button&gt;</code> 按钮元素（<code>display</code> 默认值是 <code>inline-block</code>）的 “包裹性”表现在按钮文字越多宽度越宽（内部尺寸特性），如果文字足够多，则会在容器的宽度处自动换行（“自适应特性”）。</p><p>除了 <code>inline-block</code> 元素，浮动元素以及绝对定位元素都具有包裹性，均有类似的智能宽度行为。</p></li><li><p>首选最小宽度（元素最适合的最小宽度），具体表现规则如下：</p><ul><li><p>东亚文字（如中文）最小宽度为每个汉字的宽度。</p></li><li><p>西方文字最小宽度由特定的连续的英文字符单元决定。并不是所有的英文字符都会组成连续单元，一般会终止于空格（普通空格）、短横线、问号以及其他非英文字符等。</p><p>例如，<code>display:inline-block</code> 这几个字符以连接符（“-”）作为分隔符，形成了 <code>display:inline</code> 和 <code>block</code> 两个连续单元，由于连接符（“-”）分隔位置在字符后面，因此，最后的宽度就是 <code>display:inline-</code> 的宽度。如果想让英文字符和中文一样，每一个字符都用最小宽度单元，可以使用 CSS 中的 <code>word-break:break-all</code>。</p></li><li><p>类似图片这样的替换元素的最小宽度就是该元素内容本身的宽度。</p></li></ul></li><li><p>最大宽度（元素可以有的最大宽度）</p><p>“最大宽度” 实际等同于 “包裹性” 元素设置 <code>white-space:nowrap</code> 声明后的宽度。如果内部没有块级元素或者块级元素没有设定宽度值，则 “最大宽度” 实际上是最大的连续内联盒子的宽度。</p><p>“连续内联盒子” 指的全部都是内联级别的一个或一堆元素，中间没有任何的换行标签 <code>&lt;br&gt;</code> 或其他块级元素。</p><p>大部分需要使用 “最大宽度” 的场景都可以通过设置一个 “很大宽度” 来实现。注意，这里的 “很大宽度” 和 “最大宽度” 是有本质区别的。</p></li></ul><h3 id="css-流体布局下的宽度分离原则" tabindex="-1"><a class="header-anchor" href="#css-流体布局下的宽度分离原则"><span>CSS 流体布局下的宽度分离原则</span></a></h3><p>“宽度分离原则” 就是 CSS 中的 <code>width</code> 属性不与影响宽度的 <code>padding</code>/<code>border</code>（有时候包括 <code>margin</code>）属性共存。即不能出现以下的组合：<code>.box { width: 100px; border: 1px solid; }</code> 或者 <code>.box { width: 100px; padding: 20px; }</code> 。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* “宽度分离原则” 书写方式 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* width 独立占用一层标签，而 padding、border、margin 利用流动性在内部自适应呈现 */</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.father</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">180</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.son</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  margin: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  padding: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  border: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;"> solid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Q：为何要宽度分离？</p><p>A：便于维护。例如，样式和行为分离、前后端分离或者这里的“宽度分离”。由于盒尺寸中的 4 个盒子都能影响宽度，自然页面元素的最终宽度就很容易发生变化而导致意想不到的布局发生。</p><p>可能的挑战：HTML 的成本也是成本，过深的嵌套是会增加页面渲染和维护成本的。</p></blockquote><h2 id="height" tabindex="-1"><a class="header-anchor" href="#height"><span>height</span></a></h2><h3 id="height-auto" tabindex="-1"><a class="header-anchor" href="#height-auto"><span>height: auto</span></a></h3><p><strong>CSS 的默认流是水平方向的，宽度是稀缺的，高度是无限的</strong>。因此，宽度的分配规则就比较复杂，高度就显得比较随意。</p><p>比如：元素 float 容器高度没了，或者是 <code>margin</code> 直接穿过去，高度比预期的矮了。这个其实不是 <code>height</code> 的问题。</p><h3 id="height-100" tabindex="-1"><a class="header-anchor" href="#height-100"><span>height: 100%</span></a></h3><ul><li>对于 <code>width</code> 属性，就算父元素 <code>width</code> 为 <code>auto</code>，其百分比值也是支持的；</li><li>对于 <code>height</code> 属性，如果父元素 <code>height</code> 为 <code>auto</code>，只要子元素在文档流中，其百分比值完全就被忽略了。</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 这是多余的 */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  height: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 这是无效的 */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  background: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">bg.jpg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 事实上，需要进行如下设置才行： */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">html</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  height: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 并且仅仅设置 &lt;body&gt; 也是不行的，因为此时的 &lt;body&gt; 也没有具体的高度值： */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 子元素 height:100% 依旧无效 */</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于普通文档流中的元素，百分比高度值要想起作用，其父级必须有一个可以生效的高度值。</p><ul><li><p>为何 <code>height:100%</code> 无效</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 父元素的宽度就是图片加文字内容的宽度之和  --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;box&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.jpg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;text&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;红色背景是父级&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.box</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">inline-block</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  white-space: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">nowrap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  background-color: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">#</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">cd0000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">inline-block</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  background-color: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">#</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">34538b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  color: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">#</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">fff</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>浏览器渲染的基本原理：先下载文档内容 --&gt; 加载头部的样式资源（如果有的话）-- &gt; 按照从上而下、自外而内的顺序渲染 DOM 内容。</li><li>在本示例中，先渲染父元素，后渲染子元素，是有先后顺序的。因此，当渲染到父元素的时候，子元素的 <code>width: 100%;</code> 并没有渲染，宽度就是图片加文字内容的宽度；等渲染到文字这个子元素的时候，父元素宽度已经固定，此时的 <code>width: 100%;</code> 就是已经固定好的父元素的宽度。</li><li><strong>如果包含块的高度没有显式指定（即，高度由内容决定），并且该元素不是绝对定位，则计算值为 <code>auto</code></strong>。 <code>auto</code> 和百分比计算，肯定是算不了的： <code>&#39;auto&#39; * 100/100 = NaN</code> 。</li><li><strong>对于宽度，如果包含块的宽度取决于该元素的宽度</strong>。因此，高度明确了就是 <code>auto</code>，高度百分比计算自然无果，<code>width</code> 却没有这样的说法，因此，就按照包含块真实的计算值作为百分比计算的基数。</li></ul></li><li><p>如何让元素支持 height:100% 效果</p><ul><li><p>设定显式的高度值。例如，设置 <code>height:600px</code> 或者可以生效的百分比值高度。常见的有 <code>html, body { height: 100%; }</code></p></li><li><p>使用绝对定位。例如，<code>div { height: 100%; position: absolute; }</code> ，此时的 <code>height:100%</code> 就会有计算值，即使祖先元素的 <code>height</code> 计算为 <code>auto</code> 也是如此。</p><p>绝对定位元素的百分比计算和非绝对定位元素的百分比计算是有区别的，区别在于：</p><ul><li>绝对定位的宽高百分比计算是相对于 padding box 的，也就是说会把 padding 大小值计算在内。</li><li>非绝对定位元素则是相对于content box 计算的</li></ul></li></ul></li></ul><h2 id="min-width-max-width-和-min-height-max-height" tabindex="-1"><a class="header-anchor" href="#min-width-max-width-和-min-height-max-height"><span>min-width/max-width 和 min-height/max-height</span></a></h2><p>min-width/max-width 出现的场景是自适应布局或者流体布局中，因为，如果是 width/height 定死的布局，是具有边界行为的属性，所以没有变化自然无法触发。</p><ul><li>min-width/min-height 的初始值是 <code>auto</code></li><li>max-width/max-height 的初始值是 <code>none</code></li></ul><p>超越 <code>!important</code>，超越最大</p><ul><li>超越 <code>!important</code> 指的是 <code>max-width</code> 会覆盖 <code>width</code>，如果 <code>width</code> 属性设置了 <code>!important</code> 也会被直接覆盖。</li><li>超越最大指的是 <code>min-width</code> 覆盖 <code>max-width</code>，此规则发生在 <code>min-width</code> 和 <code>max-width</code> 冲突的时候。</li></ul><p>使用 <code>height + overflow:hidden</code> 或 <code>max-height + overflow:hidden</code> 实现任意高度元素的展开收起动画。很多时候，展开的元素内容是动态的，高度是不固定的，因此，<code>height</code> 使用的值是默认的 <code>auto</code>，<code>auto</code> 是个关键字值，并非数值，正如 <code>height: 100%</code> 的 <code>100%</code> 无法和 <code>auto</code> 相计算一样，从 <code>0px</code> 到 <code>auto</code> 也是无法计算的，因此无法形成过渡或动画效果。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  height: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  overflow: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">hidden</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  transition: height </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.25</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.element.active</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /* 没有 transition 效果，只是生硬地展开 */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  height: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  max-height: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  overflow: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">hidden</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  transition: max-height </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.25</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.element.active</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /* 一个足够大的最大高度值 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /* 其中，展开后的 max-height 值，只需要设定为保证比展开内容高度大的值就可以。 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /* 因为 max-height 值比 height 计算值大的时候，元素的高度就是 height 属性的计算高度 */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /* 在本交互中，也就是 height:auto 时候的高度值。于是，一个高度不定的任意元素的展开动画效果就实现了。 */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  max-height: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">666</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32))])}const y=l(r,[["render",o]]),b=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/%E6%B5%81%E4%B8%8E%E5%85%83%E7%B4%A0.html","title":"流与元素","lang":"zh-CN","frontmatter":{"category":"CSS基础","tag":["CSS"],"description":"流与元素 块级元素 常见的块级元素有 <div>、<li> 和 <table> 等。“块级元素” 和 display 为 block 的元素不是一个概念。 “块级元素” 的特征：一个水平流上只能单独显示一个元素，多个块级元素则换行显示。正是由于 “块级元素” 具有换行特性，因此理论上它都可以配合 clear 属性来清除浮动带来的影响。 按照 displ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"流与元素\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-07T17:03:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%9F%BA%E7%A1%80/%E6%B5%81%E4%B8%8E%E5%85%83%E7%B4%A0.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"流与元素"}],["meta",{"property":"og:description","content":"流与元素 块级元素 常见的块级元素有 <div>、<li> 和 <table> 等。“块级元素” 和 display 为 block 的元素不是一个概念。 “块级元素” 的特征：一个水平流上只能单独显示一个元素，多个块级元素则换行显示。正是由于 “块级元素” 具有换行特性，因此理论上它都可以配合 clear 属性来清除浮动带来的影响。 按照 displ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-07T17:03:54.000Z"}],["meta",{"property":"article:tag","content":"CSS"}],["meta",{"property":"article:modified_time","content":"2025-04-07T17:03:54.000Z"}]]},"git":{"createdTime":1744045434000,"updatedTime":1744045434000,"contributors":[{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":11.22,"words":3365},"filePathRelative":"前端/CSS/CSS基础/流与元素.md","excerpt":"\\n<h2>块级元素</h2>\\n<p>常见的块级元素有 <code>&lt;div&gt;</code>、<code>&lt;li&gt;</code> 和 <code>&lt;table&gt;</code> 等。“块级元素” 和 <code>display</code> 为 <code>block</code> 的元素不是一个概念。</p>\\n<p>“块级元素” 的特征：一个水平流上只能单独显示一个元素，多个块级元素则换行显示。正是由于 “块级元素” 具有换行特性，因此理论上它都可以配合 <code>clear</code> 属性来清除浮动带来的影响。</p>\\n<p>按照 <code>display</code> 的属性值不同：</p>","autoDesc":true}');export{y as comp,b as data};
