import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,d as n,o as t}from"./app-CwERxs91.js";const a={};function l(o,i){return t(),s("div",null,i[0]||(i[0]=[n(`<h1 id="其他优化" tabindex="-1"><a class="header-anchor" href="#其他优化"><span>其他优化</span></a></h1><ul><li><p>防抖：一般用于表单搜索，点击事件等场景，为了防止短时间内多次触发事件。</p></li><li><p>节流：一般为了降低函数执行的频率，比如滚动条滚动。</p></li><li><p>按需引入：使用 UI 框架（例如：Ant Design）时，按需引入相关组件。</p></li><li><p>React 动画相关</p><ul><li>可使用 <code>classnames</code> npm 库动态添加类名，实现动画切换。该方式既不需要频繁 <code>setState</code> ，也不需要改变 DOM 。</li><li>操纵原生 DOM 。通过获取原生 DOM ，然后单独操作 DOM 实现动画功能，可以避免了 <code>setState</code> 改变带来 React Fiber 深度调和渲染的影响。</li><li>当使用 <code>setState</code> 实时改变 DOM 元素状态的是，尽量采用 CSS3 ， CSS3 开启硬件加速，使 GPU (Graphics Processing Unit) 发挥功能，从而提升性能。</li></ul></li><li><p>及时清除定时器/延时器/监听器。在对应的生命周期，进行清除，不然可能会造成内部泄露的情况。</p></li><li><p>合理使用 <code>state</code> 。对于视图更新不依赖于当前 <code>state</code> 时</p><ul><li>在类组件中，可以挂载到当前实例 <code>this</code>，避免通过 <code>state</code> 管理。</li><li>在函数组件中，可以通过 <code>useRef</code> 缓存数据。<code>useRef</code> 可以创建出一个 <code>ref</code> 原始对象，只要组件没有销毁，<code>ref</code> 对象就一直存在，可以把一些不依赖于视图更新的数据储存到 <code>ref</code> 对象中。</li></ul></li><li><p>不要在 hooks 的参数中，执行函数或者 new 实例。</p><ul><li><p>函数每次 rerender 都会执行 hooks ，在执行 hooks 函数的同时，也会执行函数的参数（如，代码片段中的 <code>fn()</code> 和 <code>new Fn()</code>），每一次 rerender 都会执行 fn 或者是 new 一个实例。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> hook1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useRef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> hook2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useRef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>函数组件在初始化和更新流程中，会使用不同的 hooks 对象。大部分的 hooks 参数都作为初始化的参数，在更新阶段压根没有用到，那么传入的参数也就没有了意义。</p></li></ul></li></ul>`,2)]))}const d=e(a,[["render",l]]),c=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E4%BC%98%E5%8C%96/%E5%85%B6%E4%BB%96%E4%BC%98%E5%8C%96.html","title":"其他优化","lang":"zh-CN","frontmatter":{"description":"其他优化 防抖：一般用于表单搜索，点击事件等场景，为了防止短时间内多次触发事件。 节流：一般为了降低函数执行的频率，比如滚动条滚动。 按需引入：使用 UI 框架（例如：Ant Design）时，按需引入相关组件。 React 动画相关 可使用 classnames npm 库动态添加类名，实现动画切换。该方式既不需要频繁 setState ，也不需要改...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"其他优化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-26T03:28:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/React%E4%BC%98%E5%8C%96/%E5%85%B6%E4%BB%96%E4%BC%98%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"其他优化"}],["meta",{"property":"og:description","content":"其他优化 防抖：一般用于表单搜索，点击事件等场景，为了防止短时间内多次触发事件。 节流：一般为了降低函数执行的频率，比如滚动条滚动。 按需引入：使用 UI 框架（例如：Ant Design）时，按需引入相关组件。 React 动画相关 可使用 classnames npm 库动态添加类名，实现动画切换。该方式既不需要频繁 setState ，也不需要改..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-26T03:28:49.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-26T03:28:49.000Z"}]]},"git":{"createdTime":1671788383000,"updatedTime":1672025329000,"contributors":[{"name":"lingronghai","username":"lingronghai","email":"lingronghai@foxmail.com","commits":2,"url":"https://github.com/lingronghai"}]},"readingTime":{"minutes":1.68,"words":503},"filePathRelative":"前端框架/React/React优化/其他优化.md","excerpt":"\\n<ul>\\n<li>\\n<p>防抖：一般用于表单搜索，点击事件等场景，为了防止短时间内多次触发事件。</p>\\n</li>\\n<li>\\n<p>节流：一般为了降低函数执行的频率，比如滚动条滚动。</p>\\n</li>\\n<li>\\n<p>按需引入：使用 UI 框架（例如：Ant Design）时，按需引入相关组件。</p>\\n</li>\\n<li>\\n<p>React 动画相关</p>\\n<ul>\\n<li>可使用 <code>classnames</code> npm 库动态添加类名，实现动画切换。该方式既不需要频繁 <code>setState</code> ，也不需要改变 DOM 。</li>\\n<li>操纵原生 DOM 。通过获取原生 DOM ，然后单独操作 DOM 实现动画功能，可以避免了 <code>setState</code> 改变带来 React Fiber 深度调和渲染的影响。</li>\\n<li>当使用 <code>setState</code> 实时改变 DOM 元素状态的是，尽量采用 CSS3 ， CSS3 开启硬件加速，使 GPU (Graphics Processing Unit) 发挥功能，从而提升性能。</li>\\n</ul>\\n</li>\\n<li>\\n<p>及时清除定时器/延时器/监听器。在对应的生命周期，进行清除，不然可能会造成内部泄露的情况。</p>\\n</li>\\n<li>\\n<p>合理使用 <code>state</code> 。对于视图更新不依赖于当前 <code>state</code> 时</p>\\n<ul>\\n<li>在类组件中，可以挂载到当前实例 <code>this</code>，避免通过 <code>state</code> 管理。</li>\\n<li>在函数组件中，可以通过 <code>useRef</code> 缓存数据。<code>useRef</code> 可以创建出一个 <code>ref</code> 原始对象，只要组件没有销毁，<code>ref</code> 对象就一直存在，可以把一些不依赖于视图更新的数据储存到 <code>ref</code> 对象中。</li>\\n</ul>\\n</li>\\n<li>\\n<p>不要在 hooks 的参数中，执行函数或者 new 实例。</p>\\n<ul>\\n<li>\\n<p>函数每次 rerender 都会执行 hooks ，在执行 hooks 函数的同时，也会执行函数的参数（如，代码片段中的 <code>fn()</code> 和 <code>new Fn()</code>），每一次 rerender 都会执行 fn 或者是 new 一个实例。</p>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-js\\"><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">const</span><span style=\\"--shiki-light:#986801;--shiki-dark:#E5C07B\\"> hook1</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> useRef</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">fn</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">())</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">const</span><span style=\\"--shiki-light:#986801;--shiki-dark:#E5C07B\\"> hook2</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> useRef</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">new</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> Fn</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">())</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>函数组件在初始化和更新流程中，会使用不同的 hooks 对象。大部分的 hooks 参数都作为初始化的参数，在更新阶段压根没有用到，那么传入的参数也就没有了意义。</p>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{d as comp,c as data};
