import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,d as c,o as i}from"./app-CwERxs91.js";const a="/blogs/assets/css_module_oocss-CRBz7tlu.jpg",l="/blogs/assets/css_module_smacss-CyqtOR1X.jpg",d="/blogs/assets/css_module_atomic_css-uyGpzEdT.jpg",t="/blogs/assets/css_module_mcss-ohc7X2zH.jpg",n="/blogs/assets/css_module_amcss--nwmuywX.jpg",p="/blogs/assets/css_module_bem_block-B53oVSnT.png",r="/blogs/assets/css_module_bem_element-CIxKluhS.png",m={};function h(S,e){return i(),o("div",null,e[0]||(e[0]=[c('<h1 id="css模块化" tabindex="-1"><a class="header-anchor" href="#css模块化"><span>CSS模块化</span></a></h1><h2 id="oocss-面向对象的css" tabindex="-1"><a class="header-anchor" href="#oocss-面向对象的css"><span>OOCSS（面向对象的CSS）</span></a></h2><p>两大原则：<strong>结构和设计分离，容器和内容分离</strong>。即不要把结构和设计以及内容进行强耦合，而是相互独立，所要达到的目标是更易复用和组合，可以选择使用，选择引用等。</p><p>优点：通过复用来减少代码量(DRY原则)</p><p>缺点：维护非常困难(复杂)。当你修改某一个具体的元素的样式的时候，大部分情况下，除了修改CSS本身(因为多数的CSS类是通用的)，你还不得不添加更多的标记类(markup)。</p><p><img src="'+a+'" alt="css_module_oocss"></p><h2 id="smacss-可扩展和模块化结构的-css" tabindex="-1"><a class="header-anchor" href="#smacss-可扩展和模块化结构的-css"><span>SMACSS（可扩展和模块化结构的 CSS）</span></a></h2><ul><li><code>Base</code>（基础）：基本规则，为网址的主要元素设置样式，如<code>body</code>，<code>input</code>，<code>button</code>，<code>ul</code>，<code>ol</code>等。在这一步中，主要使用 HTML标签 和 属性选择器，在特殊情况下，使用CSS类。</li><li><code>Layout</code>（布局）：布局规则，主要是些全局元素，顶部，页脚，边栏等模块的大小。</li><li><code>Module</code>（模块）：模块规则，模块(类似于卡片布局)可以在一个页面中使用多次。对于模块CSS类，不建议使用ID和tag选择器(为了方便重用以及上下文独立)。</li><li><code>State</code>（状态）：状态规则，页面中的某些元素会需要响应不同的状态，比如，可用、不可用、已用、过期、警告等等。这是唯一允许使用 <code>!important</code> 的地方。</li></ul><p><img src="'+l+'" alt="css_module_smacss"></p><h2 id="atomic-css-原子css" tabindex="-1"><a class="header-anchor" href="#atomic-css-原子css"><span>Atomic CSS（原子CSS）</span></a></h2><p>基于视觉功能的小的，单用途CSS类。允许您通过重用声明来最大程度地减少您的CSS代码数量，并且也能很轻松的更改模块。</p><p>比如：<code>w-100</code> 表示宽为 <code>100px</code>，<code>h-15</code> 表示高为 <code>15px</code>。一个 <code>div</code> 应用 <code>w-100</code> 和 <code>h-15</code> 样式，这两个共同组成了div的宽高。</p><p>缺点：CSS 类名是属性名称的描述，而不是元素的自然语义。直接在HTML中进行显示设置 Atomic CSS 在各种框架中被用于校正元素样式以及某些层(layers)的其他方法</p><p><img src="'+d+'" alt="css_module_atomic_css"></p><h2 id="mcss-多层css" tabindex="-1"><a class="header-anchor" href="#mcss-多层css"><span>MCSS（多层CSS）</span></a></h2><p>建议将样式分成多个部分，每个部分称为层(layers)。</p><ul><li><code>第0层或基础</code>(Zero layer or foundation)：负责重置浏览器样式的代码(如: <code>reset.css</code> 或者 <code>normalize.css</code>);</li><li><code>基层</code>(Base layer)：包括可重用元素的样式，buttons，input，hints等等；</li><li><code>项目层</code>(Project layer)：包括单独的模块和&quot;上下文&quot; - 根据用户端浏览器或用于浏览的设备，用户权限等对元素的样式进行调整。</li><li><code>装饰层</code>(Cosmetic layer)：使用 OOCSS 风格来书写样式,，对元素外观做微小的调整.。建议仅留下影响外观的风格,，而不能破坏网站的布局(例如颜色和非关键缩进等)。</li></ul><p>层与层之间的交互层次是非常重要的：</p><ul><li>在<code>基层</code>(Base layer)中定义中性的样式，并且不影响其它层</li><li><code>基层</code>(Base layer)中的元素只能影响基层的CSS类</li><li><code>项目层</code>(Project layer)中的元素可以影响基层和项目层</li><li><code>装饰层</code>(Cosmetic layer)是以描述性 OOCSS类(&quot;atomic&quot;类) 的形式进行设计，不会影响其他CSS代码，而是在标记中有选择的使用</li></ul><p><img src="'+t+'" alt="css_module_mcss"></p><h2 id="amcss-属性模块css" tabindex="-1"><a class="header-anchor" href="#amcss-属性模块css"><span>AMCSS（属性模块CSS）</span></a></h2><p>针对熟悉的CSS设计，比如：<code>am-size=&quot;large&quot;</code>，<code>am-disabled</code>。</p><p><img src="'+n+'" alt="css_module_amcss"></p><h2 id="bem" tabindex="-1"><a class="header-anchor" href="#bem"><span>BEM</span></a></h2><p>核心如下：<code>Block</code>（块）、<code>Element</code>（元素）、<code>Modifier</code>（修饰符）。</p><ul><li><p><code>Block</code> 是页面中独立存在的区块，可以在不同场合下被重用。每个页面都可以看做是多个 <code>Block</code> 组成。</p><p><img src="'+p+'" alt="css_module_bem_block"></p></li><li><p><code>Element</code> 是构成 <code>Block</code> 的元素，只有在对应 <code>Block</code> 内部才具有意义，是依赖于 <code>Block</code> 的存在。</p><p><img src="'+r+`" alt="css_module_bem_element"></p></li><li><p><code>Modifier</code> 是描述 <code>Block</code> 或 <code>Element</code> 的属性或状态。同一 <code>Block</code> 或 <code>Element</code> 可以有多个 <code>Modifier</code> 。</p></li></ul><p>优点：能够使得我们仅通过类名就知道哪些代码是属于一个模块内，以及在模块中所起的作用。</p><p>书写规范：</p><ul><li><p><code>Block</code> 作为起始开头不同 <code>Block</code> 和 <code>Element</code> 用 <code>__</code> 两个底线区隔开来</p></li><li><p>不同的 <code>Modifier</code> 则用 <code>–</code> 两个 dash 区隔。至于 <code>-</code> 一个 dash 则表示这个 class 不依赖任何 <code>Block</code> 或 <code>Element</code>，是个独立的存在，例如：<code>.page-container</code> 或 <code>.article-wrapper</code>。如:</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.sidebar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .sidebar--left__section {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .sidebar--left__section--header {}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    .sidebar--left__section--footer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>示例</p><ul><li>Block（块）：header，container，menu，checkbox，input</li><li>Element（元素）：menu item，list item，checkbox caption，head title</li><li>Modifier（修饰符）：disabled，highlighted，checked，fixed，size big，color yellow</li></ul>`,31)]))}const _=s(m,[["render",h]]),b=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/CSS%E6%A8%A1%E5%9D%97%E5%8C%96.html","title":"CSS模块化","lang":"zh-CN","frontmatter":{"description":"CSS模块化 OOCSS（面向对象的CSS） 两大原则：结构和设计分离，容器和内容分离。即不要把结构和设计以及内容进行强耦合，而是相互独立，所要达到的目标是更易复用和组合，可以选择使用，选择引用等。 优点：通过复用来减少代码量(DRY原则) 缺点：维护非常困难(复杂)。当你修改某一个具体的元素的样式的时候，大部分情况下，除了修改CSS本身(因为多数的C...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSS模块化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-28T08:18:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Webpack/Webpack%E5%9F%BA%E7%A1%80/CSS%E6%A8%A1%E5%9D%97%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"CSS模块化"}],["meta",{"property":"og:description","content":"CSS模块化 OOCSS（面向对象的CSS） 两大原则：结构和设计分离，容器和内容分离。即不要把结构和设计以及内容进行强耦合，而是相互独立，所要达到的目标是更易复用和组合，可以选择使用，选择引用等。 优点：通过复用来减少代码量(DRY原则) 缺点：维护非常困难(复杂)。当你修改某一个具体的元素的样式的时候，大部分情况下，除了修改CSS本身(因为多数的C..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-28T08:18:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-28T08:18:46.000Z"}]]},"git":{"createdTime":1648275245000,"updatedTime":1740730726000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"837233792@qq.com","commits":3,"url":"https://github.com/lrh21g"},{"name":"lingronghai","username":"lingronghai","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lingronghai"},{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":3.68,"words":1103},"filePathRelative":"前端框架/Webpack/Webpack基础/CSS模块化.md","excerpt":"\\n<h2>OOCSS（面向对象的CSS）</h2>\\n<p>两大原则：<strong>结构和设计分离，容器和内容分离</strong>。即不要把结构和设计以及内容进行强耦合，而是相互独立，所要达到的目标是更易复用和组合，可以选择使用，选择引用等。</p>\\n<p>优点：通过复用来减少代码量(DRY原则)</p>\\n<p>缺点：维护非常困难(复杂)。当你修改某一个具体的元素的样式的时候，大部分情况下，除了修改CSS本身(因为多数的CSS类是通用的)，你还不得不添加更多的标记类(markup)。</p>\\n<p></p>\\n<h2>SMACSS（可扩展和模块化结构的 CSS）</h2>\\n<ul>\\n<li><code>Base</code>（基础）：基本规则，为网址的主要元素设置样式，如<code>body</code>，<code>input</code>，<code>button</code>，<code>ul</code>，<code>ol</code>等。在这一步中，主要使用 HTML标签 和 属性选择器，在特殊情况下，使用CSS类。</li>\\n<li><code>Layout</code>（布局）：布局规则，主要是些全局元素，顶部，页脚，边栏等模块的大小。</li>\\n<li><code>Module</code>（模块）：模块规则，模块(类似于卡片布局)可以在一个页面中使用多次。对于模块CSS类，不建议使用ID和tag选择器(为了方便重用以及上下文独立)。</li>\\n<li><code>State</code>（状态）：状态规则，页面中的某些元素会需要响应不同的状态，比如，可用、不可用、已用、过期、警告等等。这是唯一允许使用 <code>!important</code> 的地方。</li>\\n</ul>","autoDesc":true}');export{_ as comp,b as data};
