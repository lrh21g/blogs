import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as e,o as l}from"./app-CwERxs91.js";const r="/blogs/assets/OOP_relationships.drawio-CY-cpwze.png",s="/blogs/assets/SOLID_SRP.drawio-BvBbemWR.png",o="/blogs/assets/SOLID_OCP.drawio-D3Ugg5zK.png",p="/blogs/assets/SOLID_LSP.drawio-DGXAZxRU.png",a="/blogs/assets/SOLID_ISP.drawio-gZyyyeTs.png",c="/blogs/assets/SOLID_DIP.drawio-Bsrox-oc.png",g={};function h(d,i){return l(),t("div",null,i[0]||(i[0]=[e('<h1 id="设计原则" tabindex="-1"><a class="header-anchor" href="#设计原则"><span>设计原则</span></a></h1><h2 id="面向对象程序设计" tabindex="-1"><a class="header-anchor" href="#面向对象程序设计"><span>面向对象程序设计</span></a></h2><p>面向对象程序设计（OOP，Object-oriented programming）是种具有对象概念的编程典范，同时也是一种程序开发的抽象方针。</p><ul><li>它可能包含数据、特性、代码与方法。</li><li>对象则指的是类（class）的实例。</li><li>它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性，对象里的程序可以访问及经常修改对象相关连的数据。</li></ul><p>面向对象程序设计的基本概念：</p><ul><li><strong>类与对象</strong>： <ul><li>类：定义事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。</li><li>对象：类的实例（Instance），可以调用类中的方法。</li></ul></li><li><strong>封装</strong>：通过限制只有特定类的对象可以访问该特定类的成员，通常利用接口实现消息的传入传出。通常来说，成员的访问权限被分为 3 种：公有成员（public）、私有成员（private）以及保护成员（protected）。</li><li><strong>继承</strong>：根据已有类创建新类，子类继承父类。 <ul><li>子类比父类要更加具体化。</li><li>如果父类实现了某个接口，那么其所有子类都必须实现该接口。</li></ul></li><li><strong>多态</strong>：由继承而产生的相关的不同的类，其对象对同一消息会做出不同的响应。程序能够检测对象所属的实际类，并在当前上下文不知道其真实类型的情况下调用其实现的能力。</li></ul><p>对象之间的关系（从弱到强）：</p><ul><li><strong>依赖</strong>：对类 B 进行修改会影响到类 A 。</li><li><strong>关联</strong>：对象 A 知道对象 B。类 A 依赖于类 B。</li><li><strong>聚合</strong>：对象 A 知道对象 B 且由 B 构成。类 A 依赖于类 B。</li><li><strong>组合</strong>：对象 A 知道对象 B 、由 B 构成而且管理着 B 的生命周 期。类 A 依赖于类 B。</li><li><strong>实现</strong>：类 A 定义的方法由接口 B 声明。对象 A 可被视为对象 B。类 A 依赖于类 B。</li><li><strong>继承</strong>：类 A 继承类 B 的接口和实现，但是可以对其进行扩展。对象 A 可被视为对象 B。类 A 依赖于类 B。</li></ul><p><img src="'+r+'" alt="OOP_relationships"></p><h2 id="相关设计原则" tabindex="-1"><a class="header-anchor" href="#相关设计原则"><span>相关设计原则</span></a></h2><ul><li>封装变化的内容：找到程序中的变化内容，并将其与不变的内容区分开。主要目的是将变更造成的影响最小化。</li><li>面向接口进行开发，而不是面向实现；依赖于抽象类型，而不是具体类。</li><li>组合优于继承。</li></ul><h2 id="solid-设计原则" tabindex="-1"><a class="header-anchor" href="#solid-设计原则"><span>SOLID 设计原则</span></a></h2><h3 id="单一职责原则-srp-single-responsibility-principle" tabindex="-1"><a class="header-anchor" href="#单一职责原则-srp-single-responsibility-principle"><span>单一职责原则（SRP, Single Responsibility Principle）</span></a></h3><p><strong>就一个类而言，应该仅有一个引起它变化的原因。</strong></p><p>尽量让每个类只负责软件中的一个功能，并将该功能完全封装在该类中。</p><ul><li>该原则降低了单个类或者对象的复杂度，提高了代码可复用度，有利于单元测试，当一个职责变更时，不会影响其他的职责。</li><li>当职责把对象分解成更小的粒度时，会增大对象之间相互联系的难度。</li></ul><p><img src="'+s+'" alt="SOLID_SRP"></p><h3 id="开放封闭原则-ocp-open-closed-principle" tabindex="-1"><a class="header-anchor" href="#开放封闭原则-ocp-open-closed-principle"><span>开放封闭原则（OCP, Open Closed Principle）</span></a></h3><p><strong>对于扩展，类应该是 “开放” 的；对于修改，类应该是 “封闭” 的。</strong></p><ul><li>如果对一个类进行扩展，可以创建它的子类并对其做扩展（如：新增方法或成员变量、重新基类行为等）。</li><li>如果某个类已完成定义（即，其接口已明确定义且以后不会修改），则该类应该是封闭的。</li></ul><p><img src="'+o+'" alt="SOLID_OCP"></p><h3 id="里氏替换原则-lsp-liskov-substitution-principle" tabindex="-1"><a class="header-anchor" href="#里氏替换原则-lsp-liskov-substitution-principle"><span>里氏替换原则（LSP, Liskov Substitution Principle）</span></a></h3><p><strong>子类型（subtype）必须能够替换掉它们的基类型（base type）。</strong></p><p>子类必须保持与父类行为的兼容。在重写一个方法时，要对基类行为进行扩展，而不是将其完全替换。</p><p><img src="'+p+'" alt="SOLID_LSP"></p><h3 id="接口隔离原则-isp-interface-segregation-principle" tabindex="-1"><a class="header-anchor" href="#接口隔离原则-isp-interface-segregation-principle"><span>接口隔离原则（ISP, Interface Segregation Principle）</span></a></h3><p><strong>不应该强迫客户依赖于其不用的方法。</strong></p><p>尽量缩小接口的范围，使得类不必实现其不需要的行为。需要将 “臃肿” 的方法拆分为多个颗粒度更小的具体方法，类仅需实现其实际需要的方法。</p><p><img src="'+a+'" alt="SOLID_ISP"></p><h3 id="依赖倒置原则-dip-dependence-inversion-principle" tabindex="-1"><a class="header-anchor" href="#依赖倒置原则-dip-dependence-inversion-principle"><span>依赖倒置原则（DIP, Dependence Inversion Principle）</span></a></h3><p><strong>高层次的类不应该依赖于低层次的类。两者都应该依赖于抽象接口。抽象接口不应依赖于具体实现。具体实现应该依赖于抽象接口。</strong></p><ul><li>低层次的类：实现基础操作（例如：磁盘操作、传输网络数据和连接数据库等）。</li><li>高层次的类：包含复杂业务逻辑以指导低层次类执行特定操作。</li></ul><p><img src="'+c+'" alt="SOLID_DIP"></p>',33)]))}const b=n(g,[["render",h]]),O=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/JavaScript/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/SOLID.html","title":"设计原则","lang":"zh-CN","frontmatter":{"description":"设计原则 面向对象程序设计 面向对象程序设计（OOP，Object-oriented programming）是种具有对象概念的编程典范，同时也是一种程序开发的抽象方针。 它可能包含数据、特性、代码与方法。 对象则指的是类（class）的实例。 它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性，对象里的程序可以访问及...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计原则\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-28T08:18:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF/JavaScript/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/SOLID.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"设计原则"}],["meta",{"property":"og:description","content":"设计原则 面向对象程序设计 面向对象程序设计（OOP，Object-oriented programming）是种具有对象概念的编程典范，同时也是一种程序开发的抽象方针。 它可能包含数据、特性、代码与方法。 对象则指的是类（class）的实例。 它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性，对象里的程序可以访问及..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-28T08:18:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-28T08:18:46.000Z"}]]},"git":{"createdTime":1702365993000,"updatedTime":1740730726000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh21g"},{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":3.99,"words":1196},"filePathRelative":"前端/JavaScript/设计模式/SOLID.md","excerpt":"\\n<h2>面向对象程序设计</h2>\\n<p>面向对象程序设计（OOP，Object-oriented programming）是种具有对象概念的编程典范，同时也是一种程序开发的抽象方针。</p>\\n<ul>\\n<li>它可能包含数据、特性、代码与方法。</li>\\n<li>对象则指的是类（class）的实例。</li>\\n<li>它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性，对象里的程序可以访问及经常修改对象相关连的数据。</li>\\n</ul>\\n<p>面向对象程序设计的基本概念：</p>\\n<ul>\\n<li><strong>类与对象</strong>：\\n<ul>\\n<li>类：定义事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。</li>\\n<li>对象：类的实例（Instance），可以调用类中的方法。</li>\\n</ul>\\n</li>\\n<li><strong>封装</strong>：通过限制只有特定类的对象可以访问该特定类的成员，通常利用接口实现消息的传入传出。通常来说，成员的访问权限被分为 3 种：公有成员（public）、私有成员（private）以及保护成员（protected）。</li>\\n<li><strong>继承</strong>：根据已有类创建新类，子类继承父类。\\n<ul>\\n<li>子类比父类要更加具体化。</li>\\n<li>如果父类实现了某个接口，那么其所有子类都必须实现该接口。</li>\\n</ul>\\n</li>\\n<li><strong>多态</strong>：由继承而产生的相关的不同的类，其对象对同一消息会做出不同的响应。程序能够检测对象所属的实际类，并在当前上下文不知道其真实类型的情况下调用其实现的能力。</li>\\n</ul>","autoDesc":true}');export{b as comp,O as data};
