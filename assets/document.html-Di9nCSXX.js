import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,d as t,o as c}from"./app-CwERxs91.js";const i={};function n(l,e){return c(),d("div",null,e[0]||(e[0]=[t(`<h1 id="document-类型" tabindex="-1"><a class="header-anchor" href="#document-类型"><span>Document 类型</span></a></h1><p><code>Document</code> 接口表示整个文档，并作为网页的入口，即 DOM 树。继承了 <code>Node</code> 接口和 <code>EventTarget</code> 接口。</p><p><code>Document</code> 对象可以通过如下方法获取：</p><ul><li>正常网页，可直接使用 <code>document</code> 或 <code>window.document</code> 。</li><li><code>iframe</code> 框架中的网页，可以使用 <code>iframe</code> 节点的 <code>contentDocument</code> 属性。</li><li>Ajax 操作返回的文档，可以使用 <code>XMLHttpRequest</code> 对象的 <code>responseXML</code> 属性。</li><li>网页内部 <code>Node</code> 节点的 <code>ownerDocument</code> 属性。</li></ul><h2 id="document-类型属性" tabindex="-1"><a class="header-anchor" href="#document-类型属性"><span>Document 类型属性</span></a></h2><h3 id="快捷方式属性" tabindex="-1"><a class="header-anchor" href="#快捷方式属性"><span>快捷方式属性</span></a></h3><ul><li><code>document.defaultView</code> ： 返回 <code>document</code> 对象所属的 <code>window</code> 对象。如果当前文档不属于 <code>window</code> 对象，则返回 <code>null</code> 。</li><li><code>document.doctype</code> ： 返回当前文档的文档类型定义。指向 <code>&lt;DOCTYPE&gt;</code> 节点，即文档类型（Document Type Declaration，简写 DTD）节点。</li><li><code>document.documentElement</code> ： 只读属性。返回当前文档对象的根元素节点（root）。对于 HTML 文档，一般是 <code>&lt;html&gt;</code> 元素节点。</li><li><code>document.head</code> ： 可读写，返回当前文档中所有的 <code>&lt;head&gt;</code> 元素节点。</li><li><code>document.body</code> ： 可读写，返回当前文档中的 <code>&lt;body&gt;</code> 或 <code>&lt;frameset&gt;</code> 元素（返回最外层）节点。</li><li><code>document.firstElementChild</code> ： 返回当前文档中的第一个子元素，如果没有子元素，则返回 <code>null</code>。对于 HTML 文档，通常是根 <code>&lt;html&gt;</code> 元素节点。</li><li><code>document.lastElementChild</code> ： 返回当前文档中的最后一个子元素，如果没有子元素，则返回 <code>null</code>。对于 HTML 文档，通常是根 <code>&lt;html&gt;</code> 元素节点。</li><li><code>document.activeElement</code> ： 返回当前获得焦点的 DOM 元素。如果当前没有焦点元素，则返回 <code>body</code> 元素或者 <code>null</code>。</li><li><code>document.scrollingElement</code> ： 只读属性。返回当前文档的滚动元素（即当文档整体滚动时，滚动的具体元素）。</li><li><code>document.pointerLockElement</code> ： 只读属性。返回指针锁定时鼠标事件的目标元素。</li><li><code>document.fullscreenEnabled</code> ： 只读属性。表示全屏模式是否可用。如果指针处于锁定等待中、指针没有被锁定或目标元素在另外一个文档中，返回 <code>null</code>。</li><li><code>document.fullscreenElement</code> ： 只读属性。返回当前以全屏状态展示的 DOM 元素。如果不是全屏状态，该属性返回 <code>null</code> 。可以通过该属性判断 <code>&lt;video&gt;</code> 元素节点是否处于全屏，判断用户行为。</li><li><code>document.pictureInPictureEnabled</code> ： 只读属性。表示画中画模式是否可用。</li><li><code>document.pictureInPictureElement</code> ： 只读属性。返回当前文档中以画中画模式呈现的 DOM 元素。如果没有使用画中画模式，则返回 <code>null</code> 。</li></ul><h3 id="节点集合属性" tabindex="-1"><a class="header-anchor" href="#节点集合属性"><span>节点集合属性</span></a></h3><ul><li><p><code>document.children</code> ： 返回实时的 <code>HTMLCollection</code> ，其中包含当前文档的所有子元素。</p></li><li><p><code>document.childElementCount</code> ：只读，返回当前文档的子元素数量。</p></li><li><p><code>document.styleSheets</code> ： 只读属性。返回当前文档内嵌或引入的 CSS 样式表集合。</p></li><li><p><code>document.links</code> ： 返回当前文档中所有设置了 <code>href</code> 属性的 <code>&lt;a&gt;</code> 或者 <code>&lt;area&gt;</code> 元素节点。</p></li><li><p><code>document.forms</code> ： 返回当前文档所有的 <code>&lt;form&gt;</code> 元素节点。使用位置序号、<code>id</code> 属性和 <code>name</code> 属性也可以用来引用表单。</p></li><li><p><code>document.images</code> ： 返回当前文档所有的 <code>&lt;image&gt;</code> 元素节点。</p></li><li><p><code>document.scripts</code> ： 返回一个 <code>HTMLCollection</code> 对象，包含当前文档中所有 <code>&lt;script&gt;</code> 元素节点。</p></li><li><p><code>document.embeds</code> ： 返回当前文档中所有的 <code>&lt;embed&gt;</code> 元素节点。</p></li><li><p><code>document.plugins</code> ： 只读属性。返回一个 <code>HTMLCollection</code> 对象，该对象包含一个或多个 <code>HTMLEmbedElement</code> 表示当前文档中的 <code>&lt;embed&gt;</code> 元素。</p></li><li><p><code>document.fonts</code> ： 返回当前文档的 <code>FontFaceSet</code> 接口（可管理着字体的加载和查询字体下载状态）。</p></li><li><p>文档静态信息属性</p></li><li><p><code>document.documentURI</code> ： 以字符串的形式返回当前文档的网址。<code>documentURI</code> 继承自 <code>Document</code> 接口，可用于所有文档。</p></li><li><p><code>document.URL</code> ： 返回当前文档的 URL 地址。<code>URL</code> 继承自 <code>HTMLDocument</code> 接口，只能用于 HTML 文档。</p></li><li><p><code>document.title</code> ： 用于获取或设置当前文档的标题。如果存在，默认为 <code>&lt;title&gt;</code> 元素节点的值。</p></li><li><p><code>document.location</code> ： 获取浏览器原生对象 <code>location</code> ，用于提供获取 URL 的相关信息和操作方法。</p></li><li><p><code>document.lastModified</code> ： 以字符串形式返回当前文档最后修改的时间（不同浏览器返回日期格式不同，可用 <code>Date.parse</code> 方法转为 <code>Date</code> 实例进行比较）。如果页面上有 JavaScript 生成内容，该属性返回为当前时间。</p></li><li><p><code>document.contentType</code> ： 返回当前文档的 Content-Type(MIME) 类型。</p></li><li><p><code>document.characterSet</code> ： 返回当前文档的字符编码（例如 UTF-8）。</p></li><li><p><code>document.referrer</code> ： 返回 URI ，表示当前页面是从该 URI 所代表的页面跳转或者打开的。如果无法获取来源，或者用户直接键入网址而不是从其他网页点击进入，返回一个空字符串。</p></li><li><p><code>document.dir</code> ： 返回当前文档的文字方向。<code>ltr</code> 表示从左到右，<code>rtl</code> 表示从右到左。</p></li><li><p><code>document.timeline</code> ： 只读属性。返回当前文档的默认时间轴（<code>DocumentTimeline</code> 的特殊实例，在网页加载时自动创建）。</p></li><li><p><code>document.compatMode</code> ： 返回当前文档的渲染模式。</p><ul><li><code>&quot;BackCompat&quot;</code> ： 当前文档为怪异模式。</li><li><code>&quot;CSS1Compat&quot;</code> ： 当前文档为标准模式或者准标准模式。</li></ul></li></ul><h3 id="文档状态属性" tabindex="-1"><a class="header-anchor" href="#文档状态属性"><span>文档状态属性</span></a></h3><ul><li><code>document.hidden</code> ： 返回布尔值，表示当前页面是否可见。如果窗口最小化、浏览器切换 Tab，都会导致 <code>document.hidden</code> 返回 <code>true</code>。</li><li><code>document.visibilityState</code> ： 返回当前文档的可见状态。 <ul><li><code>visible</code> ： 页面可见。注意，页面可能是部分可见，即不是焦点窗口，前面被其他窗口部分挡住了。</li><li><code>hidden</code> ： 页面不可见。即文档处于背景标签页或者窗口处于最小化状态，或者操作系统正处于“锁屏状态”。</li><li><code>prerender</code> ： 页面正在渲染中。对于用户来说，该页面不可见。</li><li><code>unloaded</code> ： 页面从内存里面卸载了。</li></ul></li><li><code>document.readyState</code> ： 返回当前文档的加载状态。 <ul><li><code>loading</code> ： 加载中。加载 HTML 代码阶段，尚未解析完成。</li><li><code>interactive</code> ： 可交互。文档已被解析，正在加载状态结束，但是图像、样式表和框架之类的子资源仍在加载。</li><li><code>complete</code> ： 加载完成。文档和所有子资源已完成加载。<code>load</code> 状态的事件即将被触发。</li></ul></li></ul><h3 id="文档其他属性" tabindex="-1"><a class="header-anchor" href="#文档其他属性"><span>文档其他属性</span></a></h3><ul><li><code>document.designMode</code> ： 控制整个文档是否可编辑。属性值默认为 <code>off</code>，表示不可编辑；<code>on</code> 表示为可编辑。</li><li><code>document.cookie</code> ： 获取并设置当前文档关联的 Cookie 。</li><li><code>document.currentScript</code> ： 返回当前文档正在运行脚本所在的 <code>&lt;script&gt;</code> 元素节点。</li><li><code>document.implementation</code> ： 返回一个和当前文档相关联的 <code>DOMImplementation</code> 对象。 <ul><li><code>DOMImplementation.createDocument</code> ： 创建一个 XML 文档。</li><li><code>DOMImplementation.createHTMLDocument</code> ： 创建一个 HTML 文档。</li><li><code>DOMImplementation.createDocumentType</code> ： 创建一个 DocumentType 对象。</li></ul></li></ul><h2 id="document-类型方法" tabindex="-1"><a class="header-anchor" href="#document-类型方法"><span>Document 类型方法</span></a></h2><h3 id="文档操作方法" tabindex="-1"><a class="header-anchor" href="#文档操作方法"><span>文档操作方法</span></a></h3><ul><li><p><code>document.open()</code></p><p><strong>语法</strong> ： <code>document.open()</code></p><p><strong>描述</strong> ： 清除当前文档所有内容，使得文档处于可写状态，供 <code>document.write</code> 方法写入内容。</p></li><li><p><code>document.close()</code></p><p><strong>语法</strong> ： <code>document.close()</code></p><p><strong>描述</strong> ： 关闭 <code>document.open()</code> 打开的文档。</p></li><li><p><code>document.write()</code></p><p><strong>语法</strong> ： <code>document.write(string)</code></p><p><strong>描述</strong> ： 将文本字符 <code>string</code> （可以是 HTML 代码）写入一个由 <code>document.open()</code> 打开的文档流（document stream）。</p><ul><li>如果页面已经解析完成（<code>DOMContentLoaded</code> 事件发生之后），调用 <code>document.write()</code> 方法，会先自动调用 <code>document.open()</code> 方法，擦除当前文档所有内容，再写入。</li><li>如果页面在渲染过程中，调用 <code>document.write()</code> 方法，并不会自动调用 <code>document.open()</code> 方法。（可以理解为 <code>document.open()</code> 方法已调用，但 <code>document.close()</code> 方法还未调用）</li><li>如果 <code>document.write()</code> 调用发生在 HTML 里的 <code>&lt;script&gt;</code> 标签中，将不会自动调用 <code>document.open()</code> 方法。</li></ul></li><li><p><code>document.writeln()</code></p><p><strong>语法</strong> ： <code>document.writeln(string)</code></p><p><strong>描述</strong> ： 与 <code>document.write(string)</code> 方法一致，但会在每次调用后添加一个换行符。</p><ul><li><code>document.writeln()</code> 方法添加的是 ASCII 码的换行符，渲染成 HTML 网页时不起作用，即在网页上显示不出换行。网页上的换行，必须显式写入<code>&lt;br&gt;</code> 。</li></ul></li><li><p><code>document.exitFullscreen()</code></p><p><strong>语法</strong> ： <code>document.exitFullscreen()</code></p><p><strong>描述</strong> ： 用于将当前文档退出全屏模式。</p><ul><li>调用该方法会让文档回退上一个调用 <code>element.requestFullscreen()</code> 方法进入全屏模式之前的状态。</li><li>如果一个元素 A 在请求进去全屏模式之前，已经存在其他元素处于全屏状态，当元素 A 退出全屏模式之后，之前的元素仍然处于全屏状态。浏览器内部维护了一个全屏元素栈。</li></ul></li><li><p><code>document.exitPictureInPicture()</code></p><p><strong>语法</strong> ： <code>document.exitPictureInPicture()</code></p><p><strong>描述</strong> ： 请求退出以画中画模式浮动在此文档中播放的视频，来恢复屏幕之前的状态。返回一个 <code>Promise</code> ，在用户代理退出画中画模式时兑现。如果在尝试退出全屏模式时发生错误，将会调用 <code>Promise</code> 的 <code>catch()</code> 处理程序。</p></li></ul><h3 id="添加替换元素节点方法" tabindex="-1"><a class="header-anchor" href="#添加替换元素节点方法"><span>添加替换元素节点方法</span></a></h3><ul><li><p><code>document.adoptNode()</code></p><p><strong>语法</strong> : <code>document.adoptNode(externalNode)</code></p><p><strong>描述</strong> ： 将某个节点 <code>externalNode</code> 以及其子节点，从原来文档移除并移动到当前文档，并返回移动后的节点 <code>externalNode</code>。</p><ul><li><code>externalNode</code> 节点对象的 <code>ownerDocument</code> 属性会被设置为当前文档，而其 <code>parentNode</code> 属性为 <code>null</code>。</li><li>该方法只是改变了节点的归属，可以使用 <code>Node.prototype.appendChild()</code> 等方法，将新节点插入当前文档。</li></ul></li><li><p><code>document.importNode()</code></p><p><strong>语法</strong> ： <code>document.importNode(externalNode, deep)</code></p><p><strong>描述</strong> ： 将某个节点 <code>externalNode</code> 以及其子节点，从原来文档复制到当前文档，并返回复制后的节点 <code>externalNode</code>。</p><ul><li><code>externalNode</code> 节点对象的 <code>ownerDocument</code> 属性会被设置为当前文档，而其 <code>parentNode</code> 属性为 <code>null</code>。</li><li>该方法只是复制外部节点，可以使用 <code>Node.prototype.appendChild()</code> 等方法，将新节点插入当前文档。</li></ul><p><strong>参数</strong> ：</p><ul><li><code>externalNode</code> 参数：表示要复制的节点。</li><li><code>deep</code> 参数：可选值。一个布尔值，默认为 <code>false</code> ，表示是否深度复制。 <ul><li>如果为 <code>true</code>，则会复制节点的所有后代节点。</li><li>如果为 <code>false</code>，则只复制当前节点。</li></ul></li></ul></li><li><p><code>document.prepend()</code></p><p><strong>语法</strong> ： <code>document.prepend(node1, node2, ..., nodeN)</code></p><p><strong>描述</strong> ： 将一组节点添加到当前文档的最前面。</p></li><li><p><code>document.append()</code></p><p><strong>语法</strong> ： <code>document.append(node1, node2, ..., nodeN)</code></p><p><strong>描述</strong> ： 将一组节点添加到当前文档的最后面。</p></li><li><p><code>document.replaceChildren()</code></p><p><strong>语法</strong> ： <code>document.replaceChildren(node1, node2, ..., nodeN)</code></p><p><strong>描述</strong> ： 将一组节点替换当前文档的所有子节点。</p></li></ul><h3 id="创建元素节点方法" tabindex="-1"><a class="header-anchor" href="#创建元素节点方法"><span>创建元素节点方法</span></a></h3><ul><li><p><code>document.createElement()</code></p><p><strong>语法</strong> ： <code>document.createElement(tagName[, options])</code></p><p><strong>描述</strong> ： 创建一个具有指定标签名 <code>tagName</code> 的元素节点，并返回。</p><p><strong>参数</strong> ：</p><ul><li><code>tagName</code> 参数：表示要创建的元素的标签名。不区分大小写（<code>div</code> 或 <code>DIV</code> 返回的是同一种节点。）。</li><li><code>options</code> 参数：可选值。 <ul><li><code>options.is</code> ：表示要创建的元素的自定义标签名（使用 <code>customElements.define()</code> 方法定义过的一个自定义元素的标签名）。如果不是自定义标签，则该参数无效。</li></ul></li></ul></li><li><p><code>document.createAttribute()</code></p><p><strong>语法</strong> ： <code>document.createAttribute(name)</code></p><p><strong>描述</strong> ： 创建一个属性节点，返回 <code>Attr</code> 对象。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> node</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getElementById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;div1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;my_attrib&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;newVal&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAttributeNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 或者</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;my_attrib&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;newVal&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>document.createTextNode()</code></p><p><strong>语法</strong> ： <code>document.createTextNode(data)</code></p><p><strong>描述</strong> ： 创建一个包含指定文本数据 <code>data</code> 的文本节点，并返回。</p><ul><li>可以用来转义 HTML 字符。</li><li>不对单引号和双引号转义，所以不能用来对 HTML 属性赋值。</li></ul></li><li><p><code>document.createComment()</code></p><p><strong>语法</strong> ： <code>document.createComment(data)</code></p><p><strong>描述</strong> ： 创建一个包含指定注释数据 <code>data</code> 的 <code>Comment</code> 节点，并返回。</p></li><li><p><code>document.createDocumentFragment()</code></p><p><strong>语法</strong> ： <code>document.createDocumentFragment()</code></p><p><strong>描述</strong> ： 创建一个空白的文档片段 <code>DocumentFragment</code> ，并返回。</p></li><li><p><code>document.createCDATASection()</code></p><p><strong>语法</strong> ： <code>document.createCDATASection(data)</code></p><p><strong>描述</strong> ： 创建一个包含指定数据 <code>data</code> 的 <code>CDATASection</code> 节点，并返回。</p></li><li><p><code>document.caretPositionFromPoint()</code></p><p><strong>语法</strong> ： <code>document.caretPositionFromPoint(x, y)</code></p><p><strong>描述</strong> ： 返回一个 <code>CaretPosition</code> 对象，表示指定坐标 <code>(x, y)</code> 处的光标位置。</p><ul><li><code>CaretPosition.offsetNode</code> ：返回一个 <code>Node</code> 对象，表示光标所在的节点。</li><li><code>CaretPosition.offset</code> ：返回一个整数，表示光标在 <code>offsetNode</code> 节点内的偏移量。</li></ul></li><li><p><code>document.createRange()</code></p><p><strong>语法</strong> ： <code>document.createRange()</code></p><p><strong>描述</strong> ： 创建一个 <code>Range</code> 对象，表示文档中的连续范围。</p></li></ul><h3 id="查找元素节点方法" tabindex="-1"><a class="header-anchor" href="#查找元素节点方法"><span>查找元素节点方法</span></a></h3><ul><li><p><code>document.getElementById()</code></p><p><strong>语法</strong> ： <code>document.getElementById(id)</code></p><p><strong>描述</strong> ： 返回一个匹配指定 <code>id</code> 属性（大小写敏感）的元素节点。如果没有匹配的节点，则返回 <code>null</code> 。</p></li><li><p><code>document.getElementsByClassName()</code></p><p><strong>语法</strong> ： <code>document.getElementsByClassName(names)</code></p><p><strong>描述</strong> ： 返回一个类数组对象，包含匹配 <code>class</code> 类名（大小写敏感）的所有元素节点。</p><ul><li>不仅可用在 <code>document</code> 对象上，也可用在任何元素节点上。调用该方法的元素将作为本次查找的根元素。</li></ul><p><strong>参数</strong> ：</p><ul><li><code>names</code> 参数：字符串，表示匹配的 <code>class</code> 类名列表。可以是多个类名，通过空格隔开，如：<code>foo bar</code> 。</li></ul></li><li><p><code>document.getElementsByName()</code></p><p><strong>语法</strong> ： <code>document.getElementsByName(name)</code></p><p><strong>描述</strong> ： 返回一个类数组对象（<code>NodeList</code> 实例），包含匹配 <code>name</code> 属性（大小写敏感）的所有元素节点。</p><ul><li>返回的 <code>NodeList</code> 实例是实时更新的。</li><li>返回包括拥有 <code>name</code> 属性的元素节点（比如 <code>&lt;form&gt;</code> 、 <code>&lt;radio&gt;</code> 、 <code>img</code> 、 <code>frame</code> 等），以及添加了 <code>name</code> 自定义属性的元素（比如 <code>&lt;a name=&quot;customNameAttr&quot;&gt;</code>）。</li></ul></li><li><p><code>document.getElementsByTagName()</code></p><p><strong>语法</strong> ： <code>document.getElementsByTagName(tagName)</code></p><p><strong>描述</strong> ： 返回一个类数组对象（<code>HTMLCollection</code> 实例），包含匹配指定元素节点名 <code>tagName</code> 的所有元素节点。</p><ul><li>不仅可用在 <code>document</code> 对象上，也可用在任何元素节点上。调用该方法的元素将作为本次查找的根元素。</li></ul><p><strong>参数</strong> ：</p><ul><li><code>tagName</code> 参数：字符串，表示匹配的元素节点名。 <ul><li>不区分大小写（<code>div</code> 或 <code>DIV</code> 返回的是同一种节点）。</li><li>特殊字符 <code>*</code> 表示匹配文档中的所有元素节点。</li></ul></li></ul></li><li><p><code>document.getSelection()</code></p><p><strong>语法</strong> ： <code>document.getSelection()</code></p><p><strong>描述</strong> ： 指向 <code>window.getSelection()</code>，返回一个 <code>Selection</code> 对象，表示选择的文本范围或当前的游标位置。</p></li><li><p><code>document.getAnimations()</code></p><p><strong>语法</strong> ： <code>document.getAnimations()</code></p><p><strong>描述</strong> ： 返回一个数组，其中包含当前有效的所有动画对象（其目标元素是文档的后代）。该数组包括 CSS 动画、CSS 过渡和 Web 动画。</p></li><li><p><code>document.querySelector()</code></p><p><strong>语法</strong> ： <code>document.querySelector(selectors)</code></p><p><strong>描述</strong> ： 返回匹配指定 CSS 选择器 <code>selectors</code> 的第一个元素节点。如果没有匹配的节点，则返回 <code>null</code> 。如果未匹配到节点，则返回 <code>null</code> 。</p><ul><li>匹配是使用深度优先先序遍历，从文档标记中的第一个元素开始，并按子节点的顺序依次遍历。</li><li>不仅可用在 <code>document</code> 对象上，也可用在任何元素节点上。调用该方法的元素将作为本次查找的根元素。</li></ul><p><strong>参数</strong> ：</p><ul><li><code>selectors</code> 参数：字符串，表示 CSS 选择器。 <ul><li>支持复杂 CSS 选择器，但不支持 CSS 伪元素和伪类选择器（即无法选中伪元素和伪类）。</li><li>可以使用逗号分隔多个选择器，返回匹配其中一个选择器的第一个元素节点。</li><li>特殊字符 <code>*</code> 表示匹配文档中的所有元素节点。</li></ul></li></ul></li><li><p><code>document.querySelectorAll()</code></p><p><strong>语法</strong> ： <code>document.querySelectorAll(selectors)</code></p><p><strong>描述</strong> ： 返回一个类数组对象（<code>NodeList</code> 实例，非动态），包含匹配指定 CSS 选择器 <code>selectors</code> 的所有元素节点。如果未匹配到节点，则返回 <code>null</code> 。</p><ul><li>不仅可用在 <code>document</code> 对象上，也可用在任何元素节点上。调用该方法的元素将作为本次查找的根元素。</li></ul><p><strong>参数</strong> ：</p><ul><li><code>selectors</code> 参数：字符串，表示 CSS 选择器。 <ul><li>支持复杂 CSS 选择器，但不支持 CSS 伪元素和伪类选择器（即无法选中伪元素和伪类）。</li><li>可以使用逗号分隔多个选择器，返回匹配其中一个选择器的第一个元素节点。</li></ul></li></ul></li><li><p><code>document.hasFocus()</code></p><p><strong>语法</strong> ： <code>document.hasFocus()</code></p><p><strong>描述</strong> ： 返回一个布尔值，表示当前文档中是否有元素被激活或获得焦点。</p><ul><li>有焦点的文档必定被激活（active），反之不成立，激活的文档未必有焦点。比如，用户点击按钮，从当前窗口跳出一个新窗口，该新窗口就是激活的，但是不拥有焦点。</li></ul></li></ul><h3 id="遍历元素节点方法" tabindex="-1"><a class="header-anchor" href="#遍历元素节点方法"><span>遍历元素节点方法</span></a></h3><ul><li><p><code>document.createNodeIterator()</code></p><p><strong>语法</strong> ： <code>document.createNodeIterator(root, whatToShow, filter)</code></p><p><strong>描述</strong> ： 创建一个 <code>NodeIterator</code> 对象，用于遍历指定节点 <code>root</code> 的子节点。</p><p><strong>参数</strong> ：</p><ul><li><p><code>root</code> 参数：表示要遍历的根节点。</p></li><li><p><code>whatToShow</code> 参数：可选值。表示要遍历的节点类型。主要节点类型如下：</p><table><thead><tr><th style="text-align:left;">常量名</th><th style="text-align:left;">数字值</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>NodeFilter.SHOW_ALL</code></td><td style="text-align:left;"><code>-1</code></td><td style="text-align:left;">显示所有节点</td></tr><tr><td style="text-align:left;"><code>NodeFilter.SHOW_ELEMENT</code></td><td style="text-align:left;"><code>1</code></td><td style="text-align:left;">显示元素节点</td></tr><tr><td style="text-align:left;"><code>NodeFilter.SHOW_TEXT</code></td><td style="text-align:left;"><code>4</code></td><td style="text-align:left;">显示文本节点</td></tr><tr><td style="text-align:left;"><code>NodeFilter.SHOW_COMMENT</code></td><td style="text-align:left;"><code>128</code></td><td style="text-align:left;">显示注释节点</td></tr></tbody></table></li><li><p><code>filter</code> 参数：可选值。表示一个 <code>NodeFilter</code> 对象，用于过滤要遍历的节点。<code>NodeFilter</code> 对象的 <code>acceptNode()</code> 方法需要返回下列常量之一： <code>NodeFilter.FILTER_ACCEPT</code> ，<code>NodeFilter.FILTER_REJECT</code> 或 <code>NodeFilter.FILTER_SKIP</code> 。</p></li></ul></li><li><p><code>document.createTreeWalker()</code></p><p><strong>语法</strong> ： <code>document.createTreeWalker(root, whatToShow, filter)</code></p><p><strong>描述</strong> ： 创建一个 <code>TreeWalker</code> 对象，用于遍历指定节点 <code>root</code> 的子节点和位置。</p><p><strong>参数</strong> ： 与 <code>document.createNodeIterator()</code> 方法一致。</p></li></ul><h3 id="文档其他方法" tabindex="-1"><a class="header-anchor" href="#文档其他方法"><span>文档其他方法</span></a></h3><ul><li><p><code>document.elementFromPoint()</code></p><p><strong>语法</strong> ： <code>document.elementFromPoint(x, y)</code></p><p><strong>描述</strong> ： 返回指定位置 <code>(x, y)</code> （相对于当前视口）最上层的元素节点。</p><ul><li>如果位于该位置的 HTML 元素不可返回（比如文本框的滚动条），则返回它的父元素（比如文本框）。</li><li>如果坐标值无意义（比如负值或超过视口大小），则返回 <code>null</code>。</li></ul></li><li><p><code>document.elementsFromPoint()</code></p><p><strong>语法</strong> ： <code>document.elementsFromPoint(x, y)</code></p><p><strong>描述</strong> ： 返回一个数组，包含指定位置 <code>(x, y)</code> （相对于当前视口）的所有元素。</p></li></ul>`,26)]))}const r=o(i,[["render",n]]),p=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/JavaScript/DOM/document.html","title":"Document 类型","lang":"zh-CN","frontmatter":{"description":"Document 类型 Document 接口表示整个文档，并作为网页的入口，即 DOM 树。继承了 Node 接口和 EventTarget 接口。 Document 对象可以通过如下方法获取： 正常网页，可直接使用 document 或 window.document 。 iframe 框架中的网页，可以使用 iframe 节点的 contentD...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Document 类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-28T10:33:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF/JavaScript/DOM/document.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"Document 类型"}],["meta",{"property":"og:description","content":"Document 类型 Document 接口表示整个文档，并作为网页的入口，即 DOM 树。继承了 Node 接口和 EventTarget 接口。 Document 对象可以通过如下方法获取： 正常网页，可直接使用 document 或 window.document 。 iframe 框架中的网页，可以使用 iframe 节点的 contentD..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-28T10:33:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-28T10:33:21.000Z"}]]},"git":{"createdTime":1698775088000,"updatedTime":1740738801000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"lingronghai@foxmail.com","commits":2,"url":"https://github.com/lrh21g"},{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":2,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":13.64,"words":4091},"filePathRelative":"前端/JavaScript/DOM/document.md","excerpt":"\\n<p><code>Document</code> 接口表示整个文档，并作为网页的入口，即 DOM 树。继承了 <code>Node</code> 接口和 <code>EventTarget</code> 接口。</p>\\n<p><code>Document</code> 对象可以通过如下方法获取：</p>\\n<ul>\\n<li>正常网页，可直接使用 <code>document</code> 或 <code>window.document</code> 。</li>\\n<li><code>iframe</code> 框架中的网页，可以使用 <code>iframe</code> 节点的 <code>contentDocument</code> 属性。</li>\\n<li>Ajax 操作返回的文档，可以使用 <code>XMLHttpRequest</code> 对象的 <code>responseXML</code> 属性。</li>\\n<li>网页内部 <code>Node</code> 节点的 <code>ownerDocument</code> 属性。</li>\\n</ul>","autoDesc":true}');export{r as comp,p as data};
