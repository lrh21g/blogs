import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as n}from"./app-CwERxs91.js";const l={};function d(t,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="window-对象" tabindex="-1"><a class="header-anchor" href="#window-对象"><span>window 对象</span></a></h1><h2 id="window-对象属性" tabindex="-1"><a class="header-anchor" href="#window-对象属性"><span>window 对象属性</span></a></h2><h3 id="window-name" tabindex="-1"><a class="header-anchor" href="#window-name"><span>window.name</span></a></h3><p><code>window.name</code> ： 获取/设置窗口的名称（只能保存字符串，如写入不是字符串，会自动转成字符串）。主要用于为超链接和表单设置目标（targets），窗口不需要有名称。</p><p>只要浏览器窗口不关闭，这个属性是不会消失的。访问 a.com 时，该页面的脚本设置了 <code>window.name</code> ，在同一个窗口里面载入 b.com，新页面的脚本可以读到上一个网页设置的 <code>window.name</code>。页面刷新也是这种情况。一旦浏览器窗口关闭后，该属性保存的值就会消失，因为这时窗口已经不存在了。</p><h3 id="window-closed-、-window-opener" tabindex="-1"><a class="header-anchor" href="#window-closed-、-window-opener"><span>window.closed 、 window.opener</span></a></h3><ul><li><p><code>window.closed</code> ： 返回一个布尔值，表示窗口是否关闭。一般用来检查，使用脚本打开的新窗口是否关闭。</p></li><li><p><code>window.opener</code> ： 表示打开当前窗口的父窗口。如果当前窗口没有父窗口（即直接在地址栏输入打开），则返回 <code>null</code>。例如：在 window A 中打开了 window B，B.opener 返回 A 。</p></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 更改一个弹出窗口的 URL</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 window.opener 属性来检查有窗口被打开，并且该窗口没有关闭</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 注意：弹出窗口只能访问打开他们的窗口</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">opener</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">opener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">closed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">opener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">href</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;http://www.mozilla.org&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 函数 refreshPopupWindow() 调用重载方法的弹出的位置要刷新其数据的对象</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> popupWindow</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> refreshPopupWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">popupWindow</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">popupWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">closed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // popupWindow is open, refresh it</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    popupWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reload</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Open a new popup window</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    popupWindow</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;popup.html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;dataWindow&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="window-frames-、-window-length-、-window-frameelement" tabindex="-1"><a class="header-anchor" href="#window-frames-、-window-length-、-window-frameelement"><span>window.frames 、 window.length 、 window.frameElement</span></a></h3><ul><li><p><code>window.frames</code> ： 返回当前窗口，一个类数组对象，列出了当前窗口的所有直接子窗口。包括 <code>frame</code> 元素和 <code>iframe</code> 元素。</p><ul><li><code>window.frames[0]</code> 表示页面中第一个框架窗口。<code>frames</code> 属性实际上是 <code>window</code> 对象的别名。</li><li>如果 <code>iframe</code> 元素设置了 <code>id</code> 或 <code>name</code> 属性，可以用属性值，引用该 <code>iframe</code> 窗口。例如： <code>&lt;iframe name=&quot;myIFrame&quot;&gt;</code> 可以用 <code>frames[&#39;myIFrame&#39;]</code> 或者 <code>frames.myIFrame</code> 来引用。</li></ul></li><li><p><code>window.length</code> ： 返回当前窗口中包含的框架数量 (框架包括 <code>frame</code> 和 <code>iframe</code> 两种元素)。</p><ul><li>如果当前网页不包含 <code>frame</code> 和 <code>iframe</code> 元素，<code>window.length</code> 返回为 <code>0</code> 。</li><li><code>window.frames.length</code> 与 <code>window.length</code> 应该是相等的： <code>window.frames.length === window.length</code> 。</li></ul></li><li><p><code>window.frameElement</code> ： 返回嵌入当前 <code>window</code> 对象的元素 (比如 <code>&lt;iframe&gt;</code> 、 <code>&lt;object&gt;</code> 或 <code>&lt;embed&gt;</code> 元素)，如果当前 <code>window</code> 对象已经是顶层窗口，则返回 <code>null</code> 。</p></li></ul><h3 id="窗口关系" tabindex="-1"><a class="header-anchor" href="#窗口关系"><span>窗口关系</span></a></h3><ul><li><p><code>window.self / window.window</code> ：返回一个指向当前 <code>window</code> 对象的引用。</p></li><li><p><code>window.parent</code> ： 返回当前窗口的父窗口。如果当前窗口没有父窗口，<code>window.parent</code> 指向自身。</p></li><li><p><code>window.top</code> ： 返回窗口层级最顶层窗口的引用。</p></li></ul><h3 id="窗口位置大小属性与像素比" tabindex="-1"><a class="header-anchor" href="#窗口位置大小属性与像素比"><span>窗口位置大小属性与像素比</span></a></h3><ul><li><p><code>window.screenX / window.screenLeft</code> ：只读。返回浏览器左边界到系统桌面左边界的水平距离（单位：像素）。</p></li><li><p><code>window.screenY / window.screenTop</code> ：只读。返回浏览器顶部边界距离系统桌面顶部边界的垂直距离（单位：像素）。</p></li><li><p><code>window.innerWidth</code> ：只读。返回浏览器窗口的视口宽度（单位：像素），包含垂直滚动条的宽度。</p></li><li><p><code>window.innerHeight</code> ：只读。返回浏览器窗口的视口高度（单位：像素），包含水平滚动条的高度。</p></li><li><p><code>window.outerWidth</code> ：只读。返回浏览器窗口外部的宽度（单位：像素），包括浏览器菜单和边框。</p></li><li><p><code>window.outerHeight</code> ：只读。返回浏览器窗口外部的高度（单位：像素），包括浏览器菜单和边框。</p></li><li><p><code>window.scrollX / window.pageXOffset</code> ：只读。返回页面的水平滚动距离（单位：像素）。</p></li><li><p><code>window.scrollY / window.pageYOffset</code> ：只读。返回页面的垂直滚动距离（单位：像素）。</p></li><li><p><code>window.devicePixelRatio</code> ： 返回当前显示设备的物理像素分辨率与 CSS 像素分辨率之比。简单来说，告诉浏览器应使用多少屏幕实际像素来绘制单个 CSS 像素。</p></li></ul><h3 id="窗口组件属性" tabindex="-1"><a class="header-anchor" href="#窗口组件属性"><span>窗口组件属性</span></a></h3><ul><li><p><code>window.locationbar</code> ： 地址栏对象。</p></li><li><p><code>window.menubar</code> ： 菜单栏对象。</p></li><li><p><code>window.scrollbars</code> ： 窗口的滚动条对象。</p></li><li><p><code>window.toolbar</code> ： 工具栏对象。</p></li><li><p><code>window.statusbar</code> ： 状态栏对象。</p></li><li><p><code>window.personalbar</code> ： 用户安装的个人工具栏对象。</p></li></ul><h3 id="window-issecurecontext" tabindex="-1"><a class="header-anchor" href="#window-issecurecontext"><span>window.isSecureContext</span></a></h3><p><code>window.isSecureContext</code> ： 只读。返回一个布尔值，表示当前窗口是否处在加密环境。如果是 HTTPS 协议，则返回为 <code>true</code>，否则为 <code>false</code>。</p><h2 id="window-对象方法" tabindex="-1"><a class="header-anchor" href="#window-对象方法"><span>window 对象方法</span></a></h2><h3 id="系统对话框" tabindex="-1"><a class="header-anchor" href="#系统对话框"><span>系统对话框</span></a></h3><ul><li><p><code>window.alert(message)</code> ：显示一个带有可选的信息的对话框，并等待用户离开该对话框，只有一个“确定”按钮。往往用来通知用户某些信息。</p><ul><li><p><code>message</code> 参数：可选值。显示在警告对话框中的字符串（可以使用 <code>\\n</code> 指定换行）。</p></li><li><p><code>window.alert()</code> 返回值：无（<code>undefined</code>）</p></li></ul></li><li><p><code>window.prompt(message, defaultValue)</code> ：显示一个带有可选的信息的对话框，提示用户输入一些文本，并等待用户提交文本或取消对话框。往往用来获取用户输入的数据。</p><ul><li><p><code>window.prompt()</code> 参数：</p><ul><li><code>message</code> ：可选值。向用户显示的一串文本（可以使用 <code>\\n</code> 指定换行）。如果在提示窗口中没有什么可显示的，可以省略。</li><li><code>defaultValue</code> ：可选值。一个字符串，包含文本输入字段中显示的默认值。</li></ul></li><li><p><code>window.prompt()</code> 返回值：</p><ul><li>用户输入信息，并点击“确定”，则用户输入的信息就是返回值。</li><li>用户没有输入信息，直接点击“确定”，则输入框的默认值就是返回值。</li><li>用户点击了“取消”（或者按了 ESC 按钮），则返回值是 <code>null</code>。</li></ul></li></ul></li><li><p><code>window.confirm(message)</code> ：显示一个带有可选的信息的对话框，并等待用户确认或取消该对话框。往往用来征询用户是否同意。</p><ul><li><p><code>message</code> 参数：在确认对话框中要显示的字符串。</p></li><li><p><code>window.confirm()</code> 返回值：一个布尔值，表示是否选择了确定（<code>true</code>）或取消（<code>false</code>）。</p></li></ul></li></ul><h3 id="新建与关闭窗口" tabindex="-1"><a class="header-anchor" href="#新建与关闭窗口"><span>新建与关闭窗口</span></a></h3><ul><li><p><code>window.open(url, target, windowFeatures)</code> ：新建另一个浏览器窗口。返回新窗口的引用，可用于访问新窗口的属性和方法。如果无法新建窗口，则返回 <code>null</code>。</p><ul><li><p><code>window.open()</code> 参数：</p><ul><li><p><code>url</code> ：可选值。字符串，表示要加载的资源的 URL 或路径。如果指定为空字符串（<code>&#39;&#39;</code>）或者省略，默认网址为 <code>about:blank</code> （即：打开一个空白页）。</p></li><li><p><code>target</code> ：可选值。字符串，表示新窗口的名字。</p><ul><li>如果该名字的窗口已经存在，则占用该窗口，不再新建窗口。如果省略，就默认使用 <code>_blank</code> ，表示新建一个没有名字的窗口。</li><li>可以使用特殊的 <code>target</code> 关键字： <ul><li><code>_blank</code> ：表示新建一个没有名字的窗口</li><li><code>_self</code> ：表示当前窗口</li><li><code>_top</code> ：表示顶层窗口</li><li><code>_parent</code> ：表示上一层窗口</li></ul></li></ul></li><li><p><code>windowFeatures</code> ：可选值。字符串，表示新窗口的特性，包括窗口的默认大小和位置、是否打开最小弹出窗口等选项。</p><ul><li><p>以逗号分隔的窗口特性列表，形式为 <code>name=value</code>，布尔特性则仅为 <code>name</code>。</p><ul><li>对于可以打开和关闭的属性，设为 <code>yes</code> 或 <code>1</code> 或不设任何值就表示打开，比如 <code>status=yes</code>、<code>status=1</code>、<code>status</code> 都会得到同样的结果。</li><li>如果设为关闭，不用写 <code>no</code> ，而是直接省略这个属性即可。</li></ul></li><li><p>特性列表如下：</p><ul><li><code>left/ screenX</code> ：新窗口距离屏幕最左边的距离（单位像素）。注意，新窗口必须是可见的，不能设置在屏幕以外的位置。</li><li><code>top / screenY</code> ：新窗口距离屏幕最顶部的距离（单位像素）。</li><li><code>width / innerWidth</code> ：新窗口内容区域（包括滚动条）的宽度（单位像素），不得小于 100 。</li><li><code>height / innerHeight</code> ：新窗口内容区域（包括滚动条）的高度（单位像素），不得小于 100 。</li><li><code>outerWidth</code> ：整个浏览器窗口的宽度（单位像素），不得小于 100 。</li><li><code>outerHeight</code> ：整个浏览器窗口的高度（单位像素），不得小于 100 。</li><li><code>popup</code> ：要求使用最小弹出窗口。弹出窗口中包含的用户界面功能将由浏览器自动决定，一般只包括地址栏。</li><li><code>noopener</code> ：新窗口将与父窗口切断联系，即新窗口的 <code>window.opener</code> 属性返回 <code>null</code> ，父窗口的 <code>window.open()</code> 方法也返回 <code>null</code> 。</li><li><code>dependent</code> ：是否依赖父窗口。如果依赖，那么父窗口最小化，该窗口也最小化；父窗口关闭，该窗口也关闭。</li><li><code>resizable</code> ：新窗口是否可以调节大小。</li><li><code>alwaysRaised</code> ：是否显示在所有窗口的顶部。</li><li><code>alwaysLowered</code> ：是否显示在父窗口的底下。</li><li><code>scrollbars</code> ：是否允许新窗口出现滚动条。</li><li><code>dialog</code> ：新窗口标题栏是否出现最大化、最小化、恢复原始大小的控件。</li><li><code>minimizable</code> ：是否有最小化按钮，前提是 <code>dialog=yes</code> 。</li><li><code>titlebar</code> ：新窗口是否显示标题栏。</li><li><code>menubar</code> ：是否显示菜单栏。</li><li><code>toolbar</code> ：是否显示工具栏。</li><li><code>location</code> ：是否显示地址栏。</li><li><code>personalbar</code> ：是否显示用户自己安装的工具栏。</li><li><code>status</code> ：是否显示状态栏。</li><li><code>close</code> ：新窗口是否显示关闭按钮。</li></ul></li></ul></li></ul></li><li><p><code>window.open()</code> 返回值：一个 <code>WindowProxy</code> 对象。只要符合同源策略安全要求，返回的引用就可用于访问新窗口的属性和方法。</p></li></ul></li><li><p><code>window.close()</code> ：关闭当前窗口或某个指定的窗口。一般只用来关闭 <code>window.open</code> 方法新建的窗口。</p></li><li><p><code>window.stop()</code> ：完全等同于单击浏览器的停止按钮，会停止加载图像、视频等正在或等待加载的对象。</p></li></ul><h3 id="窗口移动、缩放" tabindex="-1"><a class="header-anchor" href="#窗口移动、缩放"><span>窗口移动、缩放</span></a></h3><ul><li><p><code>window.moveTo(x, y)</code> ：将当前窗口移动到指定坐标位置。</p></li><li><p><code>window.moveBy(deltaX, deltaY)</code> ：基于当前位置移动当前窗口到一个相对位置。</p></li><li><p><code>window.resizeTo(outerWidth, outerHeight)</code> ：调整窗口的绝对大小。</p></li><li><p><code>window.resizeBy(deltaX, deltaY)</code> ：相对于当前窗口大小，调整窗口的大小。</p></li></ul><p>注：以上方法仅支持窗口是用 <code>window.open()</code> 方法新建的，并且窗口里只有它一个 Tab 页，才可使用。</p><h3 id="窗口滚动" tabindex="-1"><a class="header-anchor" href="#窗口滚动"><span>窗口滚动</span></a></h3><ul><li><p><code>window.scrollTo() / window.scroll()</code> ：将文档滚动到绝对位置（单位像素）。</p><ul><li><p><code>window.scrollTo(x-coord, y-coord)</code></p><ul><li><code>x-coord</code> ：文档中的横轴坐标。</li><li><code>y-coord</code> ：文档中的纵轴坐标。</li></ul></li><li><p><code>window.scrollTo(options)</code> ，<code>options</code> 是一个包含三个属性的对象：</p><ul><li>top ：等同于 <code>y-coord</code> 。</li><li>left ：等同于 <code>x-coord</code> 。</li><li>behavior ：表示滚动行为，支持参数 <code>smooth</code> （平滑滚动），<code>instant</code> （瞬间滚动），默认值 <code>auto</code> 。</li></ul></li></ul></li><li><p><code>window.scrollBy()</code> ：将网页滚动到相关距离（单位像素）。</p><ul><li><p><code>window.scrollBy(x-coord, y-coord)</code></p><ul><li><code>x-coord</code> ：水平向右滚动的像素。</li><li><code>y-coord</code> ：垂直向下滚动的像素。</li></ul></li><li><p><code>window.scrollBy(options)</code> ，<code>options</code> 是一个包含三个属性的对象：</p><ul><li>top ：等同于 <code>y-coord</code> 。</li><li>left ：等同于 <code>x-coord</code> 。</li><li>behavior ：表示滚动行为，支持参数 <code>smooth</code> （平滑滚动），<code>instant</code> （瞬间滚动），默认值 <code>auto</code> 。</li></ul></li></ul></li></ul><p>注：如果需要滚动某个元素，可以使用以下三个属性和方法：</p><ul><li>Element.scrollTop</li><li>Element.scrollLeft</li><li>Element.scrollIntoView()</li></ul><h3 id="激活窗口" tabindex="-1"><a class="header-anchor" href="#激活窗口"><span>激活窗口</span></a></h3><ul><li><p><code>window.focus()</code> ：激活窗口，使其获得焦点，出现在其他窗口的前面。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> popup</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;popup.html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Popup Window&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 检查 popup 窗口是否依然存在，确认后激活该窗口</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">popup</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> !==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">popup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">closed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  popup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">focus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>window.blur()</code> ：将焦点从窗口移除。</p></li></ul><p>注：当前窗口获得焦点时，会触发 <code>focus</code> 事件；当前窗口失去焦点时，会触发 <code>blur</code> 事件。</p><h3 id="打印" tabindex="-1"><a class="header-anchor" href="#打印"><span>打印</span></a></h3><p><code>window.print()</code> ：打开打印对话框，以打印当前文档。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getElementById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;printLink&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onclick</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 非桌面设备（比如手机）可能没有打印功能</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">print</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;function&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 支持打印功能</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="window-getselection" tabindex="-1"><a class="header-anchor" href="#window-getselection"><span>window.getSelection()</span></a></h3><p><code>window.getSelection()</code> ：返回一个 <code>Selection</code> 对象，表示用户选择的文本范围或光标的当前位置。</p><ul><li>使用 <code>Selection</code> 对象的 <code>toString</code> 方法可以得到选中的文本。</li></ul><h3 id="window-getcomputedstyle-、-window-matchmedia" tabindex="-1"><a class="header-anchor" href="#window-getcomputedstyle-、-window-matchmedia"><span>window.getComputedStyle() 、 window.matchMedia()</span></a></h3><ul><li><p><code>window.getComputedStyle(element, [pseudoElt])</code> ：接受一个元素节点作为参数，返回一个 <code>CSSStyleDeclaration</code> 实例，包含了指定节点的最终样式信息（各种 CSS 规则叠加后的结果）。</p><ul><li><p><code>window.getComputedStyle()</code> 参数：</p><ul><li><code>element</code> ：用于获取计算样式的 Element。</li><li><code>pseudoElt</code> ：可选值。指定一个要匹配的伪元素的字符串（比如<code>:before</code>、<code>:after</code>、<code>:first-line</code>、<code>:first-letter</code> 等）。</li></ul></li><li><p><code>window.getComputedStyle()</code> 返回值：<code>CSSStyleDeclaration</code> 实例。</p><ul><li><code>CSSStyleDeclaration</code> 实例返回的 CSS 值都是绝对单位。比如，长度是像素单位（返回值包括 <code>px</code> 后缀），颜色是 <code>rgb(#, #, #)</code>或 <code>rgba(#, #, #, #)</code> 格式。</li><li>CSS 规则的简写形式无效。比如，读取 <code>margin</code> 属性的值，不能直接读，只能读 <code>marginLeft</code> 、 <code>marginTop</code> 等属性； <code>font</code> 属性也是不能直接读的，只能读 <code>font-size</code> 等单个属性。</li><li>如果读取 CSS 原始的属性名，要用方括号运算符，比如：<code>styleObj[&#39;z-index&#39;]</code>；如果读取骆驼拼写法的 CSS 属性名，可以直接读取 <code>styleObj.zIndex</code>。</li><li>方法返回的 <code>CSSStyleDeclaration</code> 实例的 <code>cssText</code> 属性无效，返回 <code>undefined</code> 。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> div</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">querySelector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;div&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> styleObj</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getComputedStyle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">styleObj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">backgroundColor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>window.matchMedia(mediaQueryString)</code> ：返回一个新的 <code>MediaQueryList</code> 对象，表示指定的媒体查询字符串解析后的结果。</p><ul><li><p><code>window.matchMedia()</code> 参数：</p><ul><li><code>mediaQueryString</code> ：一个被用于媒体查询解析的字符串。比如：<code>&#39;(min-width: 400px)&#39;</code></li></ul></li><li><p><code>window.matchMedia()</code> 返回值：一个用来媒体查询的新的 <code>MediaQueryList</code> 对象，包含如下属性：</p><ul><li><code>MediaQueryList.media</code> ：返回一个字符串，表示对应的 <code>MediaQuery</code> 条件语句。</li><li><code>MediaQueryList.matches</code> ：返回一个布尔值，表示当前页面是否符合指定的 <code>MediaQuery</code> 条件语句。</li><li><code>MediaQueryList.onchange</code> ：当媒体查询的支持状况改变时，<code>MediaQueryList</code> 接口的 <code>change</code> 事件触发。该函数的参数是 <code>change</code> 事件对象（<code>MediaQueryListEvent</code> 实例），该对象与 <code>MediaQueryList</code> 实例类似，也有 <code>media</code> 和 <code>matches</code> 属性。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mdl</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">matchMedia</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;(max-width: 600px)&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">mql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">media</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;(max-width: 600px)&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">mql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">matches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">mdl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onchange</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">matches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 视口不超过 600 像素 */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 视口超过 600 像素 */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="window-requestanimationframe" tabindex="-1"><a class="header-anchor" href="#window-requestanimationframe"><span>window.requestAnimationFrame()</span></a></h3><p><code>window.requestAnimationFrame(callback)</code> ：希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法接收一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。</p><ul><li><p><code>window.requestAnimationFrame()</code> 是一次性的。如果需要在浏览器下次重绘之前继续更新下一帧动画，那么回调函数自身必须再次调用 <code>requestAnimationFrame()</code> 。</p></li><li><p>重绘通常是 16ms 执行一次，不过浏览器会自动调节这个速率，比如网页切换到后台 Tab 页时，<code>window.requestAnimationFrame()</code> 会暂停执行。</p></li></ul><p><code>window.requestAnimationFrame()</code> 返回一个 long 整数，请求 ID，是回调列表中唯一的标识。是个非零值，没有别的意义。可以传这个值给 <code>window.cancelAnimationFrame()</code> 以取消回调函数请求。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> element</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getElementById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;animate&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">position</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;absolute&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> start</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> step</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">timestamp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">start</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> timestamp</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> progress</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> timestamp</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> start</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 元素不断向左移，最大不超过200像素</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">left</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">min</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">progress</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;px&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 如果距离第一次执行不超过 2000 毫秒，</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 就继续执行动画</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">progress</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">requestAnimationFrame</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">step</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">requestAnimationFrame</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">step</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="window-requestidlecallback" tabindex="-1"><a class="header-anchor" href="#window-requestidlecallback"><span>window.requestIdleCallback()</span></a></h3><p><code>window.requestIdleCallback(callback, options)</code> 方法插入一个函数，该函数将在浏览器空闲时期被调用。如果多次执行 <code>window.requestIdleCallback()</code>，指定多个回调函数，那么这些回调函数将排成一个队列，按照先进先出的顺序执行。</p><ul><li><p><code>callback</code> ：一个在事件循环空闲时即将被调用的函数的引用。函数会接收到一个名为 <code>IdleDeadline</code> 的参数，包含如下属性和方法：</p><ul><li><code>didTimeout</code> 属性：布尔值，表示是否为超时调用。</li><li><code>timeRemaining()</code> 方法：返回该空闲时段剩余的毫秒数。</li></ul><p>如果由于超时导致回调函数执行，则 <code>deadline.timeRemaining()</code> 返回 <code>0</code> ，<code>deadline.didTimeout</code> 返回 <code>true</code>。</p></li><li><p><code>options</code> ：可选值。包括可选的配置参数：</p><ul><li><code>timeout</code> ：如果指定了 <code>timeout</code>，并且有一个正值，而回调在 <code>timeout</code> 毫秒过后还没有被调用，那么回调任务将放入事件循环中排队，即使这样做有可能对性能产生负面影响。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// requestIdleCallback() 用来执行非关键任务 myNonEssentialWork</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 任务先确认本次空闲时段有剩余时间，然后才真正开始执行任务。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">requestIdleCallback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">myNonEssentialWork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> myNonEssentialWork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">deadline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">deadline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">timeRemaining</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    doWorkIfNeeded</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 指定 processPendingAnalyticsEvents 必须在未来 2 秒之内执行</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">requestIdleCallback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">processPendingAnalyticsEvents</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">timeout</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> })</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="window-事件" tabindex="-1"><a class="header-anchor" href="#window-事件"><span>window 事件</span></a></h2><h3 id="load-事件与-onload-属性" tabindex="-1"><a class="header-anchor" href="#load-事件与-onload-属性"><span>load 事件与 onload 属性</span></a></h3><p><code>load</code> 事件在整个页面及所有依赖资源如样式表和图片都已完成加载时触发。<code>window.onload</code> 属性可以指定 <code>load</code> 事件的回调函数。</p><p>与 <code>DOMContentLoaded</code> 不同，<code>DOMContentLoaded</code> 只要页面 DOM 加载完成就触发，无需等待依赖资源的加载。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addEventListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;load&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;page is fully loaded&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 onload 事件处理器属性实现</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onload</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;page is fully loaded&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="error-事件和-onerror-属性" tabindex="-1"><a class="header-anchor" href="#error-事件和-onerror-属性"><span>error 事件和 onerror 属性</span></a></h3><p><code>error</code> 事件在当资源加载失败或无法使用时触发。<code>window.onerror</code> 属性可以指定 <code>error</code> 事件的回调函数。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onerror</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">filename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">lineno</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">colno</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // message ：出错信息</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // filename ：出错脚本的网址</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // lineno ：行号</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // colno ：列号</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // error ：错误对象</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">stack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="window-对象的事件监听属性" tabindex="-1"><a class="header-anchor" href="#window-对象的事件监听属性"><span>window 对象的事件监听属性</span></a></h3><ul><li><p><code>window.onbeforeunload</code> ： <code>beforeunload</code> 事件的监听函数，当浏览器窗口关闭或者刷新时触发。</p></li><li><p><code>window.onunload</code> ： <code>unload</code> 事件的监听函数，当文档或一个子资源正在被卸载时触发。</p></li><li><p><code>window.onresize</code> ： <code>resize</code> 事件监听函数，文档视图（窗口）调整大小时会触发。</p></li><li><p><code>window.oncopy</code> ： <code>copy</code> 事件监听函数，当用户通过浏览器的用户界面发起一个复制动作时触发。</p></li><li><p><code>window.oncut</code> ： <code>cut</code> 事件监听函数，当用户通过浏览器的用户界面发起一个“剪切”动作时触发。</p></li><li><p><code>window.onpaste</code> ： <code>paste</code> 事件监听函数，当用户通过浏览器的用户界面发起一个“粘贴”动作时触发。</p></li><li><p><code>window.onmessage</code> ： <code>message</code> 事件的监听函数，当窗口接收到消息(例如：从另一个浏览上下文调用 <code>window.postMessage()</code>)时触发。</p></li><li><p><code>window.onmessageerror</code> ： <code>MessageError</code> 事件的监听函数，当 <code>window</code> 对象收到无法反序列化的消息时触发。</p></li><li><p><code>window.onpagehide</code> ： <code>pagehide</code> 事件的监听函数，当浏览器在显示与会话历史记录不同的页面的过程中隐藏当前页面时触发（页面隐藏）。</p></li><li><p><code>window.onpageshow</code> ： <code>pageshow</code> 事件的监听函数，当一条会话历史记录被执行的时候将会触发页面显示时触发。</p></li><li><p><code>window.onhashchange</code> ： <code>hashchange</code> 事件的监听函数，当 URL 的片段标识符更改时触发 (跟在 <code>#</code> 符号后面的 URL 部分，包括 <code>#</code> 符号)。</p></li><li><p><code>window.onpopstate</code> ： <code>popstate</code> 事件的监听函数，每当激活同一文档中不同的历史记录条目时触发。</p></li><li><p><code>window.onstorage</code> ： <code>storage</code> 事件的监听函数，当存储区域（<code>localStorage</code> 或 <code>sessionStorage</code>）被修改时触发。</p></li><li><p><code>window.onrejectionhandled</code> ： 当 <code>Promise</code> 被 <code>rejected</code> 且有 <code>rejection</code> 处理器时的监听函数。</p></li><li><p><code>window.onunhandledrejection</code> ： 当 <code>Promise</code> 被 <code>rejected</code> 且没有 <code>rejection</code> 处理器处理时的监听函数。</p></li><li><p><code>window.onoffline</code> ： <code>offline</code> 事件的监听函数，在浏览器失去网络连接时触发。</p></li><li><p><code>window.ononline</code> ： <code>online</code> 事件的监听函数，当浏览器能够访问网络，且 <code>Navigator.onLine</code> 的值被设为 <code>true</code> 时触发。</p></li><li><p><code>window.onafterprint</code> ： <code>afterprint</code> 事件的监听函数，在关联的文档开始打印或关闭打印预览后触发。</p></li><li><p><code>window.onbeforeprint</code> ： <code>beforeprint</code> 事件的监听函数，当相关联的文档即将打印或关闭打印预览时触发。</p></li><li><p><code>window.onlanguagechange</code>: <code>languagechange</code> 的监听函数，当用户的首选语言发生更改时触发。</p></li></ul>`,60)]))}const o=s(l,[["render",d]]),k=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/JavaScript/BOM/window.html","title":"window 对象","lang":"zh-CN","frontmatter":{"description":"window 对象 window 对象属性 window.name window.name ： 获取/设置窗口的名称（只能保存字符串，如写入不是字符串，会自动转成字符串）。主要用于为超链接和表单设置目标（targets），窗口不需要有名称。 只要浏览器窗口不关闭，这个属性是不会消失的。访问 a.com 时，该页面的脚本设置了 window.name ，...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"window 对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-28T08:18:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF/JavaScript/BOM/window.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"window 对象"}],["meta",{"property":"og:description","content":"window 对象 window 对象属性 window.name window.name ： 获取/设置窗口的名称（只能保存字符串，如写入不是字符串，会自动转成字符串）。主要用于为超链接和表单设置目标（targets），窗口不需要有名称。 只要浏览器窗口不关闭，这个属性是不会消失的。访问 a.com 时，该页面的脚本设置了 window.name ，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-28T08:18:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-28T08:18:46.000Z"}]]},"git":{"createdTime":1698046341000,"updatedTime":1740730726000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"lingronghai@foxmail.com","commits":2,"url":"https://github.com/lrh21g"},{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":15.52,"words":4657},"filePathRelative":"前端/JavaScript/BOM/window.md","excerpt":"\\n<h2>window 对象属性</h2>\\n<h3>window.name</h3>\\n<p><code>window.name</code> ： 获取/设置窗口的名称（只能保存字符串，如写入不是字符串，会自动转成字符串）。主要用于为超链接和表单设置目标（targets），窗口不需要有名称。</p>\\n<p>只要浏览器窗口不关闭，这个属性是不会消失的。访问 a.com 时，该页面的脚本设置了 <code>window.name</code> ，在同一个窗口里面载入 b.com，新页面的脚本可以读到上一个网页设置的 <code>window.name</code>。页面刷新也是这种情况。一旦浏览器窗口关闭后，该属性保存的值就会消失，因为这时窗口已经不存在了。</p>","autoDesc":true}');export{o as comp,k as data};
