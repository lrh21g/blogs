import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as p,o as c}from"./app-CwERxs91.js";const i={};function n(r,t){return c(),a("div",null,t[0]||(t[0]=[p('<h1 id="react" tabindex="-1"><a class="header-anchor" href="#react"><span>React</span></a></h1><p>React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。</p><ul><li><p>声明式</p><p>React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据变动时 React 能高效更新并渲染合适的组件。</p><p>以声明式编写 UI，可以让你的代码更加可靠，且方便调试。</p></li><li><p>组件化</p><p>构建管理自身状态的封装组件，然后对其组合以构成复杂的 UI。</p><p>由于组件逻辑使用 JavaScript 编写而非模板，因此你可以轻松地在应用中传递数据，并保持状态与 DOM 分离。</p></li><li><p>一次学习，跨平台编写</p><p>无论你现在使用什么技术栈，在无需重写现有代码的前提下，通过引入 React 来开发新功能。</p><p>React 还可以使用 Node 进行服务器渲染，或使用 React Native 开发原生移动应用。</p></li></ul>',3)]))}const m=e(i,[["render",n]]),s=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/","title":"React","lang":"zh-CN","frontmatter":{"description":"React React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。 声明式 React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据变动时 React 能高效更新并渲染合适的组件。 以声明式编写 UI，可以让你的代码更加可靠，且方便调试。 组件化 构建管理自身状态的封装组件，然后对其组合以构...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-26T03:28:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"React"}],["meta",{"property":"og:description","content":"React React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。 声明式 React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据变动时 React 能高效更新并渲染合适的组件。 以声明式编写 UI，可以让你的代码更加可靠，且方便调试。 组件化 构建管理自身状态的封装组件，然后对其组合以构..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-26T03:28:49.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-26T03:28:49.000Z"}]]},"git":{"createdTime":1603019226000,"updatedTime":1672025329000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"837233792@qq.com","commits":5,"url":"https://github.com/lrh21g"},{"name":"lingronghai","username":"lingronghai","email":"lingronghai@foxmail.com","commits":3,"url":"https://github.com/lingronghai"}]},"readingTime":{"minutes":0.81,"words":243},"filePathRelative":"前端框架/React/README.md","excerpt":"\\n<p>React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。</p>\\n<ul>\\n<li>\\n<p>声明式</p>\\n<p>React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据变动时 React 能高效更新并渲染合适的组件。</p>\\n<p>以声明式编写 UI，可以让你的代码更加可靠，且方便调试。</p>\\n</li>\\n<li>\\n<p>组件化</p>\\n<p>构建管理自身状态的封装组件，然后对其组合以构成复杂的 UI。</p>\\n<p>由于组件逻辑使用 JavaScript 编写而非模板，因此你可以轻松地在应用中传递数据，并保持状态与 DOM 分离。</p>\\n</li>\\n<li>\\n<p>一次学习，跨平台编写</p>\\n<p>无论你现在使用什么技术栈，在无需重写现有代码的前提下，通过引入 React 来开发新功能。</p>\\n<p>React 还可以使用 Node 进行服务器渲染，或使用 React Native 开发原生移动应用。</p>\\n</li>\\n</ul>","autoDesc":true}');export{m as comp,s as data};
