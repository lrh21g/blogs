import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,d as t,o as l}from"./app-CwERxs91.js";const n={};function s(a,i){return l(),o("div",null,i[0]||(i[0]=[t(`<h1 id="git-gitignore" tabindex="-1"><a class="header-anchor" href="#git-gitignore"><span>Git .gitignore</span></a></h1><h2 id="git-忽略规则" tabindex="-1"><a class="header-anchor" href="#git-忽略规则"><span>Git 忽略规则</span></a></h2><h3 id="git-忽略规则优先级" tabindex="-1"><a class="header-anchor" href="#git-忽略规则优先级"><span>Git 忽略规则优先级</span></a></h3><ul><li>从命令行中读取可用的忽略规则</li><li>当前目录定义的规则</li><li>父级目录定义的规则，依次地推</li><li><code>$GIT_DIR/info/exclude</code> 文件中定义的规则</li><li><code>core.excludesfile</code> 中定义的全局规则</li></ul><h3 id="git-忽略规则匹配语法" tabindex="-1"><a class="header-anchor" href="#git-忽略规则匹配语法"><span>Git 忽略规则匹配语法</span></a></h3><ul><li><code>空格</code> : 不匹配任意文件，可作为分隔符，可用反斜杠转义</li><li><code># 开头</code> : 标识注释，可以使用反斜杠进行转义</li><li><code>! 开头</code> : 标识否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用 <code>!</code> 也不会再次被包含。可以使用反斜杠进行转义</li><li><code>/ 结束</code> : 只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件</li><li><code>/ 开始</code> : 的模式匹配项目跟目录</li><li>如果一个模式不包含斜杠，则它匹配相对于当前 <code>.gitignore</code> 文件路径的内容，如果该模式不在 <code>.gitignore</code> 文件中，则相对于项目根目录</li><li><code>**</code> : 匹配多级目录，可在开始，中间，结束 ?通用匹配单个字符</li><li><code>[]</code> : 通用匹配单个字符列表</li></ul><p>示例：</p><ul><li><code>bin/</code> : 忽略当前路径下的 <code>bin</code> 文件夹，该文件夹下的所有内容都会被忽略，不忽略 <code>bin</code> 文件</li><li><code>/bin</code> : 忽略根目录下的bin文件</li><li><code>/*.c</code> : 忽略 <code>cat.c</code> ，不忽略 <code>build/cat.c</code></li><li><code>debug/*.obj</code> : 忽略 <code>debug/io.obj</code> ，不忽略 <code>debug/common/io.obj</code> 和 <code>tools/debug/io.obj</code></li><li><code>**/foo</code> : 忽略 <code>/foo</code>, <code>a/foo</code>, <code>a/b/foo</code> 等</li><li><code>a/**/b</code> : 忽略 <code>a/b</code>, <code>a/x/b</code>, <code>a/x/y/b</code> 等</li><li><code>!/bin/run.sh</code> : 不忽略 <code>bin</code> 目录下的 run.sh 文件</li><li><code>*.log</code> : 忽略所有 <code>.log</code> 文件</li><li><code>config.php</code> : 忽略当前路径的 <code>config.php</code> 文件</li></ul><h2 id="gitignore规则不生效" tabindex="-1"><a class="header-anchor" href="#gitignore规则不生效"><span>.gitignore规则不生效</span></a></h2><p><code>.gitignore</code> 只能忽略那些原来没有被 <code>track</code> 的文件，如果某些文件已经被纳入了版本管理中，则修改 <code>.gitignore</code> 是无效的。</p><p>解决方法：删除本地缓存（改变成未 <code>track</code> 状态），再提交。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除本地缓存（改变成未 \`track\` 状态）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cached</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 提交</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;update .gitignore&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)]))}const r=e(n,[["render",s]]),h=JSON.parse('{"path":"/%E5%85%B6%E4%BB%96/Git/git%E5%BF%BD%E7%95%A5%E6%8F%90%E4%BA%A4.html","title":"Git .gitignore","lang":"zh-CN","frontmatter":{"description":"Git .gitignore Git 忽略规则 Git 忽略规则优先级 从命令行中读取可用的忽略规则 当前目录定义的规则 父级目录定义的规则，依次地推 $GIT_DIR/info/exclude 文件中定义的规则 core.excludesfile 中定义的全局规则 Git 忽略规则匹配语法 空格 : 不匹配任意文件，可作为分隔符，可用反斜杠转义 # ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git .gitignore\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-28T08:18:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.LRH\\",\\"url\\":\\"https://lrh21g.github.io/blogs/\\"}]}"],["meta",{"property":"og:url","content":"https://lrh21g.github.io/blogs/%E5%85%B6%E4%BB%96/Git/git%E5%BF%BD%E7%95%A5%E6%8F%90%E4%BA%A4.html"}],["meta",{"property":"og:site_name","content":"Mr.LRH 博客"}],["meta",{"property":"og:title","content":"Git .gitignore"}],["meta",{"property":"og:description","content":"Git .gitignore Git 忽略规则 Git 忽略规则优先级 从命令行中读取可用的忽略规则 当前目录定义的规则 父级目录定义的规则，依次地推 $GIT_DIR/info/exclude 文件中定义的规则 core.excludesfile 中定义的全局规则 Git 忽略规则匹配语法 空格 : 不匹配任意文件，可作为分隔符，可用反斜杠转义 # ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-28T08:18:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-28T08:18:46.000Z"}]]},"git":{"createdTime":1618649014000,"updatedTime":1740730726000,"contributors":[{"name":"lrh21g","username":"lrh21g","email":"837233792@qq.com","commits":2,"url":"https://github.com/lrh21g"},{"name":"lingronghai","username":"lingronghai","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lingronghai"},{"name":"lrh","username":"lrh","email":"lingronghai@foxmail.com","commits":1,"url":"https://github.com/lrh"}]},"readingTime":{"minutes":1.67,"words":500},"filePathRelative":"其他/Git/git忽略提交.md","excerpt":"\\n<h2>Git 忽略规则</h2>\\n<h3>Git 忽略规则优先级</h3>\\n<ul>\\n<li>从命令行中读取可用的忽略规则</li>\\n<li>当前目录定义的规则</li>\\n<li>父级目录定义的规则，依次地推</li>\\n<li><code>$GIT_DIR/info/exclude</code> 文件中定义的规则</li>\\n<li><code>core.excludesfile</code> 中定义的全局规则</li>\\n</ul>\\n<h3>Git 忽略规则匹配语法</h3>\\n<ul>\\n<li><code>空格</code> : 不匹配任意文件，可作为分隔符，可用反斜杠转义</li>\\n<li><code># 开头</code> : 标识注释，可以使用反斜杠进行转义</li>\\n<li><code>! 开头</code> : 标识否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用 <code>!</code> 也不会再次被包含。可以使用反斜杠进行转义</li>\\n<li><code>/ 结束</code> : 只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件</li>\\n<li><code>/ 开始</code> : 的模式匹配项目跟目录</li>\\n<li>如果一个模式不包含斜杠，则它匹配相对于当前 <code>.gitignore</code> 文件路径的内容，如果该模式不在 <code>.gitignore</code> 文件中，则相对于项目根目录</li>\\n<li><code>**</code> : 匹配多级目录，可在开始，中间，结束\\n?通用匹配单个字符</li>\\n<li><code>[]</code> : 通用匹配单个字符列表</li>\\n</ul>","autoDesc":true}');export{r as comp,h as data};
